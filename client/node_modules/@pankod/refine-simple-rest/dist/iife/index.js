(()=>{var P=Object.create;var O=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var w=(r=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(r,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):r)(function(r){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var M=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of j(t))!E.call(r,a)&&a!==e&&O(r,a,{get:()=>t[a],enumerable:!(o=b(t,a))||o.enumerable});return r};var A=(r,t,e)=>(e=r!=null?P(I(r)):{},M(t||!r||!r.__esModule?O(e,"default",{value:r,enumerable:!0}):e,r));var z=w("query-string");var d=w("query-string");var v=r=>{switch(r){case"ne":case"gte":case"lte":return`_${r}`;case"contains":return"_like";case"eq":default:return""}};var g=r=>{if(r&&r.length>0){let t=[],e=[];return r.map(o=>{t.push(o.field),e.push(o.order)}),{_sort:t,_order:e}}};var $=r=>{let t={};return r&&r.map(e=>{if(e.operator==="or"||e.operator==="and")throw new Error(`[@pankod/refine-simple-rest]: \`operator: ${e.operator}\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if("field"in e){let{field:o,operator:a,value:s}=e;if(o==="q"){t[o]=s;return}let n=v(a);t[`${o}${n}`]=s}}),t};var S=A(w("axios")),x=S.default.create();x.interceptors.response.use(r=>r,r=>{var e,o,a;let t={...r,message:(o=(e=r.response)==null?void 0:e.data)==null?void 0:o.message,statusCode:(a=r.response)==null?void 0:a.status};return Promise.reject(t)});var F=(r,t=x)=>({getList:async({resource:e,hasPagination:o=!0,pagination:a={current:1,pageSize:10},filters:s,sort:n})=>{let f=`${r}/${e}`,{current:p=1,pageSize:c=10}=a!=null?a:{},u=$(s),m=o?{_start:(p-1)*c,_end:p*c}:{},i=g(n);if(i){let{_sort:k,_order:q}=i;m._sort=k.join(","),m._order=q.join(",")}let{data:_,headers:y}=await t.get(`${f}?${(0,d.stringify)(m)}&${(0,d.stringify)(u)}`),l=+y["x-total-count"];return{data:_,total:l}},getMany:async({resource:e,ids:o})=>{let{data:a}=await t.get(`${r}/${e}?${(0,d.stringify)({id:o})}`);return{data:a}},create:async({resource:e,variables:o})=>{let a=`${r}/${e}`,{data:s}=await t.post(a,o);return{data:s}},update:async({resource:e,id:o,variables:a})=>{let s=`${r}/${e}/${o}`,{data:n}=await t.patch(s,a);return{data:n}},getOne:async({resource:e,id:o})=>{let a=`${r}/${e}/${o}`,{data:s}=await t.get(a);return{data:s}},deleteOne:async({resource:e,id:o,variables:a})=>{let s=`${r}/${e}/${o}`,{data:n}=await t.delete(s,{data:a});return{data:n}},getApiUrl:()=>r,custom:async({url:e,method:o,filters:a,sort:s,payload:n,query:f,headers:p})=>{let c=`${e}?`;if(s){let i=g(s);if(i){let{_sort:_,_order:y}=i,l={_sort:_.join(","),_order:y.join(",")};c=`${c}&${(0,d.stringify)(l)}`}}if(a){let i=$(a);c=`${c}&${(0,d.stringify)(i)}`}f&&(c=`${c}&${(0,d.stringify)(f)}`),p&&(t.defaults.headers={...t.defaults.headers,...p});let u;switch(o){case"put":case"post":case"patch":u=await t[o](e,n);break;case"delete":u=await t.delete(e,{data:n});break;default:u=await t.get(c);break}let{data:m}=u;return Promise.resolve({data:m})}});var W=F;})();
//# sourceMappingURL=index.js.map