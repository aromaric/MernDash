{"version":3,"sources":["../../../core/src/index.tsx","../../../core/src/components/pages/error/index.tsx","../../../core/src/hooks/auth/usePermissions/index.ts","../../../core/src/contexts/auth/index.tsx","../../../core/src/hooks/auth/useGetIdentity/index.ts","../../../core/src/hooks/auth/useLogout/index.ts","../../../core/src/hooks/auth/useLogin/index.ts","../../../core/src/hooks/auth/useRegister/index.ts","../../../core/src/hooks/auth/useForgotPassword/index.ts","../../../core/src/hooks/auth/useUpdatePassword/index.ts","../../../core/src/hooks/auth/useAuthenticated/index.ts","../../../core/src/hooks/auth/useCheckError/index.ts","../../../core/src/hooks/auth/useIsExistAuthentication.ts","../../../core/src/hooks/data/useList.ts","../../../core/src/definitions/helpers/userFriendlySeconds/index.ts","../../../core/src/definitions/helpers/importCSVMapper/index.ts","../../../core/src/definitions/helpers/userFriendlyResourceName/index.ts","../../../core/src/definitions/table/index.ts","../../../core/src/definitions/upload/file2Base64/index.ts","../../../core/src/definitions/helpers/handleUseParams/index.tsx","../../../core/src/definitions/helpers/queryKeys/index.ts","../../../core/src/definitions/helpers/hasPermission/index.ts","../../../core/src/definitions/helpers/routeGenerator/index.ts","../../../core/src/definitions/helpers/treeView/createTreeView/index.ts","../../../core/src/definitions/helpers/humanizeString/index.ts","../../../core/src/contexts/refine/index.tsx","../../../core/src/components/layoutWrapper/defaultLayout/index.tsx","../../../core/src/definitions/helpers/handleRefineOptions/index.ts","../../../core/src/definitions/helpers/redirectPage/index.ts","../../../core/src/definitions/helpers/sequentialPromises/index.ts","../../../core/src/definitions/helpers/pickDataProvider/index.ts","../../../core/src/definitions/helpers/handleMultiple/index.ts","../../../core/src/definitions/helpers/useInfinitePagination/index.ts","../../../core/src/hooks/data/useOne.ts","../../../core/src/hooks/data/useMany.ts","../../../core/src/hooks/data/useUpdate.ts","../../../core/src/contexts/undoableQueue/undoableQueueContext.tsx","../../../core/src/hooks/data/useCreate.ts","../../../core/src/hooks/data/useDelete.ts","../../../core/src/hooks/data/useCreateMany.ts","../../../core/src/hooks/data/useUpdateMany.ts","../../../core/src/hooks/data/useDeleteMany.ts","../../../core/src/hooks/data/useApiUrl.ts","../../../core/src/hooks/data/useCustom.ts","../../../core/src/hooks/data/useCustomMutation.ts","../../../core/src/hooks/data/useDataProvider.tsx","../../../core/src/contexts/data/index.tsx","../../../core/src/hooks/data/useInfiniteList.ts","../../../core/src/hooks/live/useResourceSubscription/index.ts","../../../core/src/contexts/live/index.tsx","../../../core/src/hooks/live/useLiveMode/index.ts","../../../core/src/hooks/live/useSubscription/index.ts","../../../core/src/hooks/live/usePublish/index.ts","../../../core/src/hooks/resource/useResource/index.ts","../../../core/src/contexts/resource/index.tsx","../../../core/src/hooks/resource/useResourceWithRoute/index.ts","../../../core/src/hooks/notification/useCancelNotification/index.tsx","../../../core/src/hooks/notification/useNotification/index.ts","../../../core/src/contexts/notification/index.tsx","../../../core/src/hooks/notification/useHandleNotification/index.ts","../../../core/src/hooks/translate/useSetLocale.ts","../../../core/src/contexts/translation/index.tsx","../../../core/src/hooks/translate/useTranslate.ts","../../../core/src/hooks/translate/useGetLocale.ts","../../../core/src/hooks/refine/useMutationMode.ts","../../../core/src/hooks/refine/useWarnAboutChange/index.ts","../../../core/src/contexts/unsavedWarn/index.tsx","../../../core/src/hooks/refine/useSyncWithLocation.ts","../../../core/src/hooks/refine/useTitle.tsx","../../../core/src/hooks/refine/useRefineContext.ts","../../../core/src/hooks/export/index.ts","../../../core/src/hooks/form/useForm.ts","../../../core/src/hooks/redirection/index.ts","../../../core/src/hooks/navigation/index.ts","../../../core/src/hooks/show/useShow.ts","../../../core/src/hooks/import/index.tsx","../../../core/src/hooks/modal/useModal/index.tsx","../../../core/src/hooks/router/useRouterContext.ts","../../../core/src/contexts/router/index.tsx","../../../core/src/hooks/accessControl/useCan/index.ts","../../../core/src/contexts/accessControl/index.tsx","../../../core/src/hooks/accessControl/useCanWithoutCache.ts","../../../core/src/hooks/useSelect/index.ts","../../../core/src/hooks/useTable/index.ts","../../../core/src/hooks/auditLog/useLog/index.ts","../../../core/src/contexts/auditLog/index.tsx","../../../core/src/hooks/auditLog/useLogList/index.ts","../../../core/src/hooks/invalidate/index.tsx","../../../core/src/hooks/breadcrumb/index.ts","../../../core/src/hooks/menu/useMenu.tsx","../../../core/src/components/pages/login/index.tsx","../../../core/src/components/pages/auth/index.tsx","../../../core/src/components/pages/auth/components/login/index.tsx","../../../core/src/components/pages/auth/components/register/index.tsx","../../../core/src/components/pages/auth/components/forgotPassword/index.tsx","../../../core/src/components/pages/auth/components/updatePassword/index.tsx","../../../core/src/components/pages/ready/index.tsx","../../../core/src/components/containers/refine/index.tsx","../../../core/src/components/telemetry/index.tsx","../../../core/src/hooks/useTelemetryData/index.ts","../../../core/src/hooks/deepMemo/index.tsx","../../../core/src/hooks/memoized/index.tsx","../../../core/src/components/undoableQueue/index.tsx","../../../core/src/components/layoutWrapper/index.tsx","../../../core/src/components/authenticated/index.tsx","../../../core/src/components/routeChangeHandler/index.tsx","../../../core/src/components/canAccess/index.tsx","../../../ui-types/src/index.tsx","../../../ui-types/src/ids.tsx","../../../antd/src/index.tsx","../../../antd/src/hooks/form/useForm.ts","../../../antd/src/hooks/form/useModalForm/useModalForm.ts","../../../antd/src/hooks/form/useDrawerForm/useDrawerForm.ts","../../../antd/src/hooks/form/useStepsForm/useStepsForm.ts","../../../antd/src/hooks/table/useTable/useTable.ts","../../../antd/src/definitions/table/index.ts","../../../antd/src/hooks/table/useTable/paginationLink.tsx","../../../antd/src/hooks/table/useEditableTable/useEditableTable.ts","../../../antd/src/hooks/fields/useSelect/index.ts","../../../antd/src/hooks/fields/useCheckboxGroup/index.ts","../../../antd/src/hooks/fields/useRadioGroup/index.ts","../../../antd/src/hooks/import/index.tsx","../../../antd/src/hooks/list/useSimpleList/useSimpleList.ts","../../../antd/src/hooks/useMenu/index.tsx","../../../antd/src/hooks/useFileUploadState/index.ts","../../../antd/src/hooks/modal/useModal/index.tsx","../../../antd/src/providers/notificationProvider/index.tsx","../../../antd/src/components/undoableNotification/index.tsx","../../../antd/src/components/antd/antd.ts","../../../antd/src/components/index.ts","../../../antd/src/components/layout/index.tsx","../../../antd/src/components/layout/sider/index.tsx","../../../antd/src/components/layout/sider/styles.ts","../../../antd/src/components/layout/header/index.tsx","../../../antd/src/components/layout/title/index.tsx","../../../antd/src/components/buttons/create/index.tsx","../../../antd/src/components/buttons/edit/index.tsx","../../../antd/src/components/buttons/delete/index.tsx","../../../antd/src/components/buttons/refresh/index.tsx","../../../antd/src/components/buttons/show/index.tsx","../../../antd/src/components/buttons/list/index.tsx","../../../antd/src/components/buttons/export/index.tsx","../../../antd/src/components/buttons/save/index.tsx","../../../antd/src/components/buttons/clone/index.tsx","../../../antd/src/components/buttons/import/index.tsx","../../../antd/src/components/crud/list/index.tsx","../../../antd/src/components/crud/create/index.tsx","../../../antd/src/components/crud/edit/index.tsx","../../../antd/src/components/crud/show/index.tsx","../../../antd/src/components/fields/text/index.tsx","../../../antd/src/components/fields/tag/index.tsx","../../../antd/src/components/fields/email/index.tsx","../../../antd/src/components/fields/image/index.tsx","../../../antd/src/components/fields/boolean/index.tsx","../../../antd/src/components/fields/date/index.tsx","../../../antd/src/components/fields/file/index.tsx","../../../antd/src/components/fields/url/index.tsx","../../../antd/src/components/fields/number/index.tsx","../../../antd/src/components/fields/markdown/index.tsx","../../../antd/src/components/table/components/filterDropdown/index.tsx","../../../antd/src/components/pages/error/index.tsx","../../../antd/src/components/pages/login/index.tsx","../../../antd/src/components/pages/login/styles.ts","../../../antd/src/components/pages/ready/index.tsx","../../../antd/src/components/pages/auth/index.tsx","../../../antd/src/components/pages/auth/components/login/index.tsx","../../../antd/src/components/pages/auth/components/styles.ts","../../../antd/src/components/pages/auth/components/register/index.tsx","../../../antd/src/components/pages/auth/components/forgotPassword/index.tsx","../../../antd/src/components/pages/auth/components/updatePassword/index.tsx","../../../antd/src/components/breadcrumb/index.tsx","../../../antd/src/components/pageHeader/index.tsx","../../../antd/src/definitions/upload/index.ts","../../src/inferencers/antd/index.tsx","../../src/inferencers/antd/show.tsx","../../src/create-inferencer/index.tsx","../../src/utilities/get-fieldable-keys/index.ts","../../src/utilities/pick-data-provider/index.tsx","../../src/utilities/pick-inferred-field/index.ts","../../src/utilities/prettier-format/index.ts","../../src/utilities/pretty-spaces/index.ts","../../src/field-inferencers/relation.ts","../../src/utilities/remove-relation-suffix/index.ts","../../src/utilities/pretty-string/index.ts","../../src/utilities/replace-exports/index.ts","../../src/utilities/replace-imports/index.ts","../../src/utilities/resource-from-inferred/index.ts","../../src/utilities/component-name/index.ts","../../src/utilities/jsx/index.ts","../../src/utilities/prepare-live-code/index.ts","../../src/utilities/remove-hidden-code/index.ts","../../src/utilities/accessor/index.ts","../../src/utilities/print-imports/index.ts","../../src/utilities/to-singular/index.ts","../../src/utilities/to-plural/index.ts","../../src/utilities/is-id-key/index.ts","../../src/utilities/get-option-label/index.ts","../../src/utilities/no-op/index.ts","../../src/utilities/get-variable-name/index.ts","../../src/compose-inferencers/index.ts","../../src/compose-transformers/index.ts","../../src/field-inferencers/array.ts","../../src/field-inferencers/boolean.ts","../../src/field-inferencers/date.ts","../../src/field-inferencers/email.ts","../../src/field-inferencers/image.ts","../../src/field-inferencers/nullish.ts","../../src/field-inferencers/number.ts","../../src/field-inferencers/object.ts","../../src/field-inferencers/richtext.ts","../../src/field-inferencers/text.ts","../../src/field-inferencers/url.ts","../../src/field-inferencers/index.ts","../../src/field-transformers/basic-to-relation.ts","../../src/field-transformers/image-by-key.ts","../../src/field-transformers/relation-by-resource.ts","../../src/field-transformers/relation-to-fieldable.ts","../../src/field-transformers/index.ts","../../src/components/code-highlight/index.tsx","../../src/components/live/index.tsx","../../src/use-infer-fetch/index.tsx","../../src/use-relation-fetch/index.ts","../../src/inferencers/antd/error.tsx","../../src/inferencers/antd/loading.tsx","../../src/inferencers/antd/code-viewer.tsx","../../src/inferencers/antd/list.tsx","../../src/inferencers/antd/create.tsx","../../src/inferencers/antd/edit.tsx"],"sourcesContent":["export * from \"@tanstack/react-query\";\n\nexport * from \"./components\";\nexport * from \"./hooks\";\n\nexport {\n    Action,\n    ActionWithPage,\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthProvider,\n    BaseKey,\n    BaseRecord,\n    CanParams,\n    CanReturnType,\n    ConditionalFilter,\n    CreateManyResponse,\n    CreateResponse,\n    CrudFilter,\n    CrudFilters,\n    CrudOperators,\n    CrudSort,\n    CrudSorting,\n    CustomResponse,\n    DeleteManyResponse,\n    DeleteOneResponse,\n    FormAction,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    LayoutProps,\n    LiveEvent,\n    LiveModeProps,\n    LogicalFilter,\n    LogParams,\n    MapDataFn,\n    MetaDataQuery,\n    MutationMode,\n    NotificationProvider,\n    OpenNotificationParams,\n    Option,\n    Pagination,\n    PromptProps,\n    RedirectionTypes,\n    RedirectAction,\n    ResourceErrorRouterParams,\n    ResourceProps,\n    ResourceRouterParams,\n    RouteAction,\n    SortOrder,\n    SuccessErrorNotification,\n    TitleProps,\n    TranslationProvider,\n    UpdateManyResponse,\n    UpdateResponse,\n    I18nProvider,\n    IAccessControlContext,\n    IAuthContext,\n    IDataContextProvider as DataProvider,\n    ILiveContext as LiveProvider,\n    ILog,\n    ILogData,\n    ILoginForm,\n    INotificationContext,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext as ResourceProvider,\n    ITranslationContext,\n    IResourceItem,\n    IRouterProvider,\n    ITreeMenu,\n    IQueryKeys,\n} from \"./interfaces\";\n\n// all auth types\nexport * from \"./interfaces/auth\";\n\nexport {\n    getDefaultFilter,\n    getDefaultSortOrder,\n    parseTableParams,\n    parseTableParamsFromQuery,\n    setInitialFilters,\n    setInitialSorters,\n    stringifyTableParams,\n    unionFilters,\n    unionSorters,\n} from \"./definitions/table\";\nexport {\n    createTreeView,\n    handleUseParams,\n    importCSVMapper,\n    routeGenerator,\n    userFriendlyResourceName,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"./definitions/helpers\";\nexport { file2Base64 } from \"./definitions/upload\";\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport { ResourceErrorRouterParams, ActionWithPage } from \"../../../interfaces\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes: ActionWithPage[] = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        if (params.resource) {\n            const resourceFromRoute = resource(params.resource);\n            if (\n                params.action &&\n                actionTypes.includes(params.action) &&\n                !resourceFromRoute[params.action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: params.action,\n                            resource: params.resource,\n                        },\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button onClick={() => push(\"/\")}>\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const usePermissions = <TData = any>(\n    options?: UseQueryOptions<TData>,\n): UseQueryResult<TData, unknown> => {\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"usePermissions\"],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getPermissions ?? (() => Promise.resolve(undefined)),\n        {\n            enabled: !!getPermissions,\n            ...options,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useNavigation } from \"@hooks\";\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const AuthContext = React.createContext<IAuthContext>({});\n\nexport const AuthContextProvider: React.FC<\n    IAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n    const queryClient = useQueryClient();\n\n    const invalidateAuthStore = () => {\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\n        queryClient.invalidateQueries([\"usePermissions\"]);\n    };\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            invalidateAuthStore();\n\n            return Promise.resolve(redirectPath);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n","import React from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\nexport type UseGetIdentityProps<TData> = {\n    queryOptions?: UseQueryOptions<TData>;\n};\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const useGetIdentity = <TData = any>({\n    queryOptions,\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"getUserIdentity\"],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getUserIdentity ?? (() => Promise.resolve({})),\n        {\n            enabled: !!getUserIdentity,\n            retry: false,\n            ...queryOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\n *\n */\nexport const useLogout = <TVariables = {}>({\n    mutationOptions,\n}: UseLogoutProps<TVariables> = {}): UseMutationResult<\n    TLogoutData,\n    Error,\n    (TVariables & Variables) | void,\n    unknown\n> => {\n    const { push } = useNavigation();\n    const { logout: logoutFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n    const { open } = useNotification();\n\n    const queryResponse = useMutation<\n        TLogoutData,\n        Error,\n        (TVariables & Variables) | void,\n        unknown\n    >([\"useLogout\"], logoutFromContext, {\n        onSuccess: (data, variables) => {\n            const redirectPath = variables?.redirectPath ?? data;\n\n            if (redirectPath === false) {\n                return;\n            }\n\n            if (redirectPath) {\n                push(redirectPath);\n                return;\n            }\n\n            push(\"/login\");\n        },\n        onError: (error: Error) => {\n            open?.({\n                key: \"useLogout-error\",\n                type: \"error\",\n                message: error?.name || \"Logout Error\",\n                description:\n                    error?.message || \"Something went wrong during logout\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\nimport { AuthContext } from \"@contexts/auth\";\n\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\n\nexport type UseLoginProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TLoginData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useLogin = <TVariables = {}>({\n    mutationOptions,\n}: UseLoginProps<TVariables> = {}): UseMutationResult<\n    TLoginData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { login: loginFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n    const { close, open } = useNotification();\n\n    const { to } = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\n        [\"useLogin\"],\n        loginFromContext,\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (to) {\n                    return replace(to as string);\n                }\n\n                if (redirectPathFromAuth !== false) {\n                    if (typeof redirectPathFromAuth === \"string\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        replace(\"/\");\n                    }\n                }\n                close?.(\"login-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Login Error\",\n                    description: error?.message || \"Invalid credentials\",\n                    key: \"login-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TRegisterData } from \"../../../interfaces\";\n\nexport type UseRegisterProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TRegisterData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useRegister = <TVariables = {}>({\n    mutationOptions,\n}: UseRegisterProps<TVariables> = {}): UseMutationResult<\n    TRegisterData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { register: registerFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TRegisterData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useRegister\"], registerFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                } else {\n                    replace(\"/\");\n                }\n            }\n            close?.(\"register-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Register Error\",\n                description: error?.message || \"Error while registering\",\n                key: \"register-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TForgotPasswordData } from \"../../../interfaces\";\n\nexport type UseForgotPasswordProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TForgotPasswordData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useForgotPassword = <TVariables = {}>({\n    mutationOptions,\n}: UseForgotPasswordProps<TVariables> = {}): UseMutationResult<\n    TForgotPasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { forgotPassword: forgotPasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TForgotPasswordData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useForgotPassword\"], forgotPasswordFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                }\n            }\n            close?.(\"forgot-password-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Forgot Password Error\",\n                description: error?.message || \"Error while resetting password\",\n                key: \"forgot-password-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification, useRouterContext } from \"@hooks\";\nimport {\n    IAuthContext,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        mutationOptions?: Omit<\n            UseMutationOptions<TUpdatePasswordData, Error, TVariables, unknown>,\n            \"mutationFn\" | \"onError\" | \"onSuccess\"\n        >;\n    };\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useUpdatePassword = <\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    mutationOptions,\n}: UseUpdatePasswordProps<TVariables> = {}): UseMutationResult<\n    TUpdatePasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { updatePassword: updatePasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n    const { useLocation } = useRouterContext();\n\n    const { search } = useLocation();\n\n    const queryStrings = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<\n        TUpdatePasswordData,\n        Error,\n        TVariables,\n        unknown\n    >(\n        [\"useUpdatePassword\"],\n        async (variables) => {\n            return updatePasswordFromContext?.({\n                ...queryStrings,\n                ...variables,\n            });\n        },\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        replace(redirectPathFromAuth);\n                    }\n                }\n                close?.(\"update-password-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Update Password Error\",\n                    description:\n                        error?.message || \"Error while updating password\",\n                    key: \"update-password-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\n/**\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\n *\n */\nexport const useAuthenticated = (\n    params?: any,\n): UseQueryResult<any, unknown> => {\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery(\n        [\"useAuthenticated\", params],\n        async () => (await checkAuth?.(params)) ?? {},\n        {\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useMutation, UseMutationResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport { useLogout } from \"@hooks\";\n\n/**\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport const useCheckError = (): UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n> => {\n    const { checkError: checkErrorFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { mutate: logout } = useLogout();\n\n    const queryResponse = useMutation(\n        [\"useCheckError\"],\n        checkErrorFromContext,\n        {\n            onError: (redirectPath?: string) => {\n                logout({ redirectPath });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../interfaces\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\n\n    return isProvided || false;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport {\n    GetListResponse,\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     */\n    config?: UseListConfig;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options,\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseListProps<TData, TError>): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash/zip\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash/unionWith\";\nimport differenceWith from \"lodash/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (sorter as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        { ...rest, ...(pagination ? pagination : {}), sorter, filters },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaDataQuery } from \"src/interfaces\";\n\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    metaData?: MetaDataQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            { ...config, ...metaData } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...metaData } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...metaData } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","import { ResourceProps } from \"src/interfaces\";\n\nconst getParentOf = (item: ResourceProps) => {\n    return (resourceItem: ResourceProps) =>\n        item.parentName ? resourceItem.name === item.parentName : false;\n};\n\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const resourceRoute = item.options?.route ?? item.name;\n\n    if (item.parentName) {\n        const parent = resourcesFromProps.find(getParentOf(item));\n\n        if (parent?.parentName) {\n            const routePrefix = routeGenerator(parent, resourcesFromProps);\n\n            route = `${routePrefix}/${resourceRoute}`;\n        } else if (item.parentName) {\n            const parentPrefix =\n                parent?.options?.route ?? parent?.name ?? item.parentName;\n            route = `${parentPrefix}/${resourceRoute}`;\n        }\n    } else {\n        route = resourceRoute;\n    }\n    return route;\n};\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route = parent.route ?? parent.options?.route ?? \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | React.ComponentProps<typeof ReactQueryDevtools>;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import {\n    FormAction,\n    IRefineContextOptions,\n    RedirectAction,\n} from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: FormAction;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"@contexts/resource\";\n\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    if (resource?.options?.dataProviderName) {\n        return resource.options.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    GetOneResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useTranslate,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\n\nexport type UseOneProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useOne = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        channel: `resources/${resource}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            metaData,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled: queryOptions?.enabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\n        queryKey.detail(id),\n        ({ queryKey, pageParam, signal }) =>\n            getOne<TData>({\n                resource,\n                id,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, metaData }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { id, metaData }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-getOne-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    BaseRecord,\n    BaseKey,\n    GetManyResponse,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\nexport type UseManyProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseManyProps<TData, TError>): QueryObserverResult<\n    GetManyResponse<TData>\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getMany, getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            ids: ids ?? [],\n            metaData,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\n        queryKey.many(ids),\n        ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource,\n                    ids,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TData>({\n                            resource,\n                            id,\n                            metaData: {\n                                ...metaData,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids[0]}-${resource}-getMany-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateResponse,\n    MutationMode,\n    PrevContext as UpdateContext,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport pluralize from \"pluralize\";\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type UpdateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Callback that runs when undo button is clicked on `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            id,\n            values,\n            resource,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource,\n                    id,\n                    variables: values,\n                    metaData,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                resource,\n                id,\n                mutationMode,\n                values,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    return {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    record = {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.detail(id),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            return {\n                                ...previous,\n                                data: {\n                                    ...previous.data,\n                                    ...values,\n                                },\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\", \"detail\"],\n                },\n            ) => {\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                    id,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    values,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: data.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                let previousData: any;\n                if (context) {\n                    const queryData = queryClient.getQueryData<\n                        UpdateResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData = Object.keys(values).reduce<any>(\n                        (acc, item) => {\n                            acc[item] = queryData?.data?.[item];\n                            return acc;\n                        },\n                        {},\n                    );\n                }\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"update\",\n                    resource,\n                    data: values,\n                    previousData,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { id, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: translate(\n                                    `${resource}.${resource}`,\n                                    resourceSingular,\n                                ),\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\nimport { pickDataProvider } from \"@definitions/helpers\";\n\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\n\ntype useCreateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TVariables>,\n        unknown\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TVariables>) => {\n            return dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource,\n                variables: values,\n                metaData,\n            });\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    resource,\n                    successNotification: successNotificationFromProp,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    metaData,\n                },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, values, resource)\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully created ${resourceSingular}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids: data?.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"create\",\n                    resource,\n                    data: values,\n                    meta: {\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id: data?.data?.id ?? undefined,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                {\n                    resource,\n                    errorNotification: errorNotificationFromProp,\n                    values,\n                },\n            ) => {\n                checkError(err);\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, values, resource)\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    DeleteOneResponse,\n    MutationMode,\n    PrevContext as DeleteContext,\n    BaseRecord,\n    BaseKey,\n    HttpError,\n    GetListResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type DeleteParams<TVariables> = {\n    id: BaseKey;\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TVariables>,\n    DeleteContext<TData>\n>;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource,\n                    id,\n                    metaData,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        {\n            onMutate: async ({\n                id,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) =>\n                                    record.id?.toString() !== id.toString(),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    return (\n                                        record.id?.toString() !== id?.toString()\n                                    );\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, id, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully deleted a ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: {\n                        ids: id ? [id] : [],\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"delete\",\n                    resource,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, id, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { handleMultiple, pickDataProvider } from \"@definitions\";\n\ntype useCreateManyParams<TVariables> = {\n    resource: string;\n    values: TVariables[];\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TVariables>\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TVariables>) => {\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource,\n                    variables: values,\n                    metaData,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource,\n                            variables: val,\n                            metaData,\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            onSuccess: (\n                response,\n                {\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                },\n            ) => {\n                const resourcePlural = pluralize.plural(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(response, values, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully created ${resourcePlural}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                const ids = response?.data\n                    .filter((item) => item?.id !== undefined)\n                    .map((item) => item.id!);\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids,\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (err: TError, { resource, errorNotification, values }) => {\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, values, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useCancelNotification,\n    useCheckError,\n    useMutationMode,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateManyResponse,\n    HttpError,\n    MutationMode,\n    QueryResponse,\n    PrevContext as UpdateContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\ntype UpdateManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const { mutate: checkError } = useCheckError();\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            ids,\n            values,\n            resource,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        variables: values,\n                        metaData,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n\n        {\n            onMutate: async ({\n                resource,\n                ids,\n                values,\n                mutationMode,\n                dataProviderName,\n                metaData,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                    metaData,\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries = queryClient.getQueriesData<\n                    QueryResponse<TData>\n                >(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = {\n                                    ...previous.data,\n                                    ...values,\n                                };\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    invalidates: [\"list\", \"many\"],\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                });\n\n                ids.forEach((id) =>\n                    invalidateStore({\n                        resource,\n                        invalidates: [\"detail\"],\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id,\n                    }),\n                );\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                { ids, resource, successNotification, values },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { ids, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: ids.map(String),\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (\n                err: TError,\n                { ids, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ids, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-updateMany-error-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    DeleteManyResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MutationMode,\n    PreviousQuery,\n    GetListResponse,\n    PrevContext as DeleteContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useMutationMode,\n    useCancelNotification,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { queryKeys, pickDataProvider, handleMultiple } from \"@definitions\";\n\nexport type DeleteManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            resource,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        metaData,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                ids,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (item) =>\n                                    item.id &&\n                                    !ids\n                                        .map(String)\n                                        .includes(item.id.toString()),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    if (record.id) {\n                                        return !ids\n                                            .map(String)\n                                            .includes(record.id.toString());\n                                    }\n                                    return false;\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: any | null) => {\n                                if (!previous || previous.data.id == id) {\n                                    return null;\n                                }\n                                return {\n                                    ...previous,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            // Always refetch after error or success:\n            onSettled: (\n                _data,\n                _error,\n                {\n                    resource,\n                    ids,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                { ids, resource, successNotification },\n                context,\n            ) => {\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully deleted ${resource}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: { ids },\n                    date: new Date(),\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n            },\n            onError: (err, { ids, resource, errorNotification }, context) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, ids, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useDataProvider } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n\n    const { getApiUrl } = dataProvider(dataProviderName);\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    CustomResponse,\n    CrudSorting,\n    CrudFilters,\n    BaseRecord,\n    HttpError,\n    MetaDataQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useTranslate,\n    useCheckError,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sort using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n *\n */\nexport const useCustom = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    dataProviderName,\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\n    CustomResponse<TData>,\n    TError\n> => {\n    const dataProvider = useDataProvider();\n\n    const { custom } = dataProvider(dataProviderName);\n    const { mutate: checkError } = useCheckError();\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n\n    if (custom) {\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\n            [\n                dataProviderName,\n                \"custom\",\n                method,\n                url,\n                { ...config, ...metaData },\n            ],\n            ({ queryKey, pageParam, signal }) =>\n                custom<TData>({\n                    url,\n                    method,\n                    ...config,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            {\n                ...queryOptions,\n                onSuccess: (data) => {\n                    queryOptions?.onSuccess?.(data);\n\n                    const notificationConfig =\n                        typeof successNotification === \"function\"\n                            ? successNotification(data, {\n                                  ...config,\n                                  ...metaData,\n                              })\n                            : successNotification;\n\n                    handleNotification(notificationConfig);\n                },\n                onError: (err: TError) => {\n                    checkError(err);\n                    queryOptions?.onError?.(err);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ...config, ...metaData })\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${method}-notification`,\n                        message: translate(\n                            \"notifications.error\",\n                            { statusCode: err.statusCode },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                },\n            },\n        );\n        return queryResponse;\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useCheckError,\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n} from \"../../interfaces\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> => {\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TVariables>) => {\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    metaData,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import {\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverResult,\n} from \"@tanstack/react-query\";\nimport {\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n    GetListResponse,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"@definitions/helpers\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseInfiniteListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * react-query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options,\n     */\n    queryOptions?: UseInfiniteQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useInfiniteList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseInfiniteListProps<TData, TError>): InfiniteQueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useInfiniteQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            const pagination = {\n                ...config?.pagination,\n                current: pageParam,\n            };\n\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                pagination,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination,\n                    ...rest,\n                };\n            });\n        },\n        {\n            getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n            getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useInfiniteList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext, useEffect } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { queryKeys } from \"@definitions\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource: string;\n    enabled?: boolean;\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n}: UseResourceSubscriptionProps): void => {\n    const queryClient = useQueryClient();\n    const queryKey = queryKeys(resource);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource,\n                    ...params,\n                },\n                types,\n                callback: (event) => {\n                    if (liveMode === \"auto\") {\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                    }\n\n                    onLiveEvent?.(event);\n                    onLiveEventContextCallback?.(event);\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n    RouteAction,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\n\nexport type UseResourcePropsType = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\ntype UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource: IResourceItem;\n    resourceName: string;\n    id?: BaseKey;\n    action: RouteAction;\n};\n\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\n */\nexport const useResource = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName,\n    recordItemId,\n}: UseResourcePropsType = {}): UseResourceReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(\n        resourceNameOrRouteName ?? params.resource,\n    );\n\n    const resourceName = propResourceName ?? resource.name;\n\n    const id = recordItemId ?? params.id;\n\n    return { resources, resource, resourceName, id, action: params.action };\n};\n","import React, { ReactNode } from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"./IResourceContext\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    IResourceContext & { children: ReactNode }\n> = ({ resources, children }) => {\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const resource = resources.find((p) => p.route === route);\n\n            if (!resource) {\n                const resourceWithName = resources.find(\n                    (p) => p.name === route,\n                );\n                return (\n                    resourceWithName ??\n                    ({ name: route, route: route } as IResourceItem)\n                );\n            }\n            return resource;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useState } from \"react\";\nimport {\n    useResource,\n    useResourceWithRoute,\n    useRouterContext,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { userFriendlyResourceName, pickDataProvider } from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    sorter,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resources } = useResource();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const dataProvider = useDataProvider();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    let { name: resource } = resourceWithRoute(routeResourceName);\n\n    if (resourceName) {\n        resource = resourceName;\n    }\n\n    const filename = `${userFriendlyResourceName(\n        resource,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource,\n                    filters,\n                    sort: sorter,\n                    pagination: {\n                        current,\n                        pageSize,\n                    },\n                    metaData,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport {\n    useResourceWithRoute,\n    useRouterContext,\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    ResourceRouterParams,\n    RedirectAction,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TData> | UpdateResponse<TData>,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TError,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n} & SuccessErrorNotification &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = ActionFormProps<TData, TError, TVariables> & ActionParams & LiveModeProps;\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\n    mutationResult:\n        | UseUpdateReturnType<TData, TError, TVariables>\n        | UseCreateReturnType<TData, TError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n    ) => void;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    metaData,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { options } = useRefineContext();\n    const { useParams } = useRouterContext();\n    const {\n        resource: resourceFromRoute,\n        action: actionFromRoute,\n        id: idFromParams,\n    } = useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProps || resourceFromProps === resourceFromRoute\n            ? idFromProps ?? idFromParams\n            : idFromProps;\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== id) {\n            setId(idFromProps);\n        }\n    }, [idFromProps]);\n\n    const resourceName = resourceFromProps ?? resourceFromRoute;\n    const action =\n        actionFromProps ??\n        (actionFromRoute === \"show\" ? \"create\" : actionFromRoute) ??\n        \"create\";\n\n    const resourceWithRoute = useResourceWithRoute();\n    const resource = resourceWithRoute(resourceName);\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    const redirect = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<TData, TError, TVariables>({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return mutateCreate(\n                {\n                    values,\n                    resource: resource.name,\n                    successNotification,\n                    errorNotification,\n                    metaData,\n                    dataProviderName,\n                    invalidates,\n                },\n                {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        const responseId = data?.data?.id;\n\n                        onSuccess(responseId);\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                },\n            );\n        });\n    };\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const variables: UpdateParams<TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            metaData,\n            dataProviderName,\n            invalidates,\n        };\n\n        const onSuccess = () => {\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\n            setId(defaultId);\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return setTimeout(() => {\n                mutateUpdate(variables, {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        if (mutationMode === \"pessimistic\") {\n                            onSuccess();\n                        }\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                });\n            });\n        });\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    return {\n        ...result,\n        queryResult,\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n            });\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport { BaseKey, IResourceItem, RedirectAction } from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource: IResourceItem;\n    id?: BaseKey;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n            }: {\n                redirect: RedirectAction;\n                resource: IResourceItem;\n                id?: BaseKey;\n            }) => {\n                if (redirect && resource.route) {\n                    if (resource.canShow && redirect === \"show\" && id) {\n                        return show(resource.route, id);\n                    }\n\n                    if (resource.canEdit && redirect === \"edit\" && id) {\n                        return edit(resource.route, id);\n                    }\n\n                    if (resource.canCreate && redirect === \"create\") {\n                        return create(resource.route);\n                    }\n\n                    return list(resource.route, \"push\");\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\nimport { BaseKey } from \"../../interfaces\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        type === \"push\" ? history.push(url) : history.replace(url);\n    };\n\n    const createUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}/create`;\n    };\n\n    const editUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n\n        return `/${resourceName.route}/edit/${encodedId}`;\n    };\n\n    const cloneUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/clone/${encodedId}`;\n    };\n\n    const showUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/show/${encodedId}`;\n    };\n\n    const listUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}`;\n    };\n\n    const create = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(createUrl(resource), type);\n    };\n\n    const edit = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(editUrl(resource, id), type);\n    };\n\n    const clone = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(cloneUrl(resource, id), type);\n    };\n\n    const show = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(showUrl(resource, id), type);\n    };\n\n    const list = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(listUrl(resource), type);\n    };\n\n    const push = (path: string, ...rest: unknown[]) => {\n        history.push(path, ...rest);\n    };\n\n    const replace = (path: string, ...rest: unknown[]) => {\n        history.replace(path, ...rest);\n    };\n\n    const goBack = () => {\n        history.goBack();\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n} from \"../../interfaces\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n};\n\nexport type useShowProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\n */\nexport const useShow = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n}: useShowProps<TData, TError> = {}): useShowReturnType<TData> => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, id: idFromRoute } =\n        useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProp || resourceFromProp === routeResourceName\n            ? id ?? idFromRoute\n            : id;\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== showId) {\n            setShowId(defaultId);\n        }\n    }, [defaultId]);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash/chunk\";\n\nimport {\n    useCreate,\n    useCreateMany,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport {\n    MapDataFn,\n    BaseRecord,\n    HttpError,\n    ResourceRouterParams,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { importCSVMapper, sequentialPromises } from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const resourceWithRoute = useResourceWithRoute();\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    const { name: resource } = resourceWithRoute(\n        resourceName ?? routeResourceName,\n    );\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource,\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        metaData,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource,\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            metaData,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { useContext } from \"react\";\nimport { RouterContext } from \"@contexts/router\";\n\nexport const useRouterContext = () => {\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        useContext(RouterContext);\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const RouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContextProvider: React.FC<\n    IRouterContext & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory,\n                useLocation,\n                useParams,\n                Prompt,\n                Link,\n                routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n        icon: _icon,\n        list: _list,\n        edit: _edit,\n        create: _create,\n        show: _show,\n        children: _children,\n        ...restResource\n    } = _resource ?? {};\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const queryResponse = useQuery<CanReturnType>(\n        [\n            \"useCan\",\n            {\n                action,\n                resource,\n                params: { ...paramsRest, resource: restResource },\n                enabled: queryOptions?.enabled,\n            },\n        ],\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        () =>\n            can?.({ action, resource, params }) ??\n            Promise.resolve({ can: true }),\n        {\n            enabled: typeof can !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport { IAccessControlContext } from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\n    {},\n);\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children }) => {\n    return (\n        <AccessControlContext.Provider value={{ can }}>\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can } = useContext(AccessControlContext);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash/uniqBy\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\n\nimport { useList, useMany } from \"@hooks\";\nimport {\n    CrudSorting,\n    Option,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n} from \"../../interfaces\";\n\nexport type UseSelectProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: string;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: string;\n    /**\n     * Allow us to sort the options\n     */\n    sort?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Pagination;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `undefined`\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Metadata query for `dataProvider`\n     * @default `{}`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: Option[];\n};\n\nexport const useSelect = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props: UseSelectProps<TData, TError>,\n): UseSelectReturnType<TData> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n\n    const {\n        resource,\n        sort,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        metaData,\n        dataProviderName,\n    } = props;\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map((item) => ({\n                    label: get(item, optionLabel),\n                    value: get(item, optionValue),\n                })),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TData, TError>({\n        resource,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptionsFromProps?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map((item) => ({\n                        label: get(item, optionLabel),\n                        value: get(item, optionValue),\n                    })),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TData, TError>({\n        resource,\n        config: {\n            sort,\n            filters: filters.concat(search),\n            pagination: {\n                current: pagination?.current,\n                pageSize: pagination?.pageSize ?? fetchSize,\n            },\n            hasPagination,\n        },\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: useMemo(\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\n            [options, selectedOptions],\n        ),\n        onSearch: debounce(onSearch, debounceValue),\n    };\n};\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash/differenceWith\";\nimport isEqual from \"lodash/isEqual\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useResourceWithRoute,\n    useList,\n    useLiveMode,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n} from \"../../interfaces\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Initial page index\n     * @default 1\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     */\n    initialPageSize?: number;\n    /**\n     * Initial sorter state\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Initial filter state\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * WDefault and unchangeable filter state\n     * @default `[]`\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     *Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTablePaginationKeys =\n    | \"current\"\n    | \"setCurrent\"\n    | \"pageSize\"\n    | \"setPageSize\"\n    | \"pageCount\";\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    sorter: CrudSorting;\n    setSorter: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n};\n\nexport type useTableNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = Omit<useTableReturnType<TData, TError>, useTablePaginationKeys> &\n    Record<useTablePaginationKeys, undefined>;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\n// overload with pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination?: true;\n    },\n): useTableReturnType<TData, TError>;\n// overload without pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination: false;\n    },\n): useTableNoPaginationReturnType<TData, TError>;\n// implementation\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    initialCurrent = 1,\n    initialPageSize = 10,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior = \"merge\",\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: useTableProps<TData, TError> = {}):\n    | useTableReturnType<TData, TError>\n    | useTableNoPaginationReturnType<TData, TError> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const { useLocation, useParams } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search);\n\n    const defaultCurrent = parsedCurrent || initialCurrent;\n    const defaultPageSize = parsedPageSize || initialPageSize;\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const { replace } = useNavigation();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const [sorter, setSorter] = useState<CrudSorting>(\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n        const stringifyParams = stringifyTableParams({\n            pagination: {\n                pageSize,\n                current,\n            },\n            sorter,\n            filters,\n            ...currentQueryParams,\n        });\n        return `${pathname}?${stringifyParams}`;\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        // We get QueryString parameters that are uncontrolled by refine.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n            search,\n            {\n                ignoreQueryPrefix: true,\n            },\n        );\n\n        return rest;\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            const queryParams = currentQueryParams();\n            const stringifyParams = stringifyTableParams({\n                ...(hasPagination\n                    ? {\n                          pagination: {\n                              pageSize,\n                              current,\n                          },\n                      }\n                    : {}),\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\n                filters: differenceWith(filters, permanentFilter, isEqual),\n                ...queryParams,\n            });\n\n            // Careful! This triggers render\n            return replace(`${pathname}?${stringifyParams}`, undefined, {\n                shallow: true,\n            });\n        }\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\n\n    const queryResult = useList<TData, TError>({\n        resource: resource.name,\n        config: {\n            hasPagination,\n            pagination: { current, pageSize },\n            filters: unionFilters(permanentFilter, filters),\n            sort: unionSorters(permanentSorter, sorter),\n        },\n        queryOptions,\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(permanentFilter, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(permanentFilter, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\n    };\n\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorter(() => unionSorters(permanentSorter, newSorter));\n    };\n\n    const paginationValues = useMemo(() => {\n        if (hasPagination) {\n            return {\n                current,\n                setCurrent,\n                pageSize,\n                setPageSize,\n                pageCount: pageSize\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n                    : 1,\n            };\n        }\n\n        return {\n            current: undefined,\n            setCurrent: undefined,\n            pageSize: undefined,\n            setPageSize: undefined,\n            pageCount: undefined,\n        };\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\n\n    return {\n        tableQueryResult: queryResult,\n        sorter,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        ...paginationValues,\n        createLinkForSyncWithLocation,\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        queryOptions: {\n            enabled: !!auditLogContext,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = resources.find((p) => p.name === params.resource);\n            const logPermissions = resource?.options?.auditLog?.permissions;\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        logMutationOptions,\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    const queryKey = queryKeys(data?.resource);\n                    queryClient.invalidateQueries(queryKey.logList());\n                }\n            },\n            ...renameMutationOptions,\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { queryKeys } from \"@definitions/helpers\";\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\n\nexport type UseLogProps<TData, TError> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TData, TError>;\n    metaData?: MetaDataQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\n */\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n\n    const queryKey = queryKeys(resource, undefined, metaData);\n\n    const queryResponse = useQuery<TData, TError>(\n        queryKey.logList(meta),\n        () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        {\n            enabled: typeof get !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useCallback } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n};\n\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const queryKey = queryKeys(\n                resource,\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            invalidates.forEach((key) => {\n                switch (key) {\n                    case \"all\":\n                        queryClient.invalidateQueries(queryKey.all);\n                        break;\n                    case \"list\":\n                        queryClient.invalidateQueries(queryKey.list());\n                        break;\n                    case \"many\":\n                        queryClient.invalidateQueries(queryKey.many());\n                        break;\n                    case \"resourceAll\":\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                        break;\n                    case \"detail\":\n                        queryClient.invalidateQueries(\n                            queryKey.detail(id || \"\"),\n                        );\n                        break;\n                    default:\n                        break;\n                }\n            });\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { humanizeString } from \"@definitions\";\n\nimport { ResourceRouterParams } from \"../../interfaces\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\n    const { useParams } = useRouterContext();\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const translate = useTranslate();\n\n    const { resources, resource } = useResource();\n\n    const { action } = useParams<ResourceRouterParams>();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string) => {\n        const parentResource = resources.find(\n            (resource) => resource.name === parentName,\n        );\n\n        if (parentResource) {\n            if (parentResource.parentName) {\n                addBreadcrumb(parentResource.parentName);\n            }\n            breadcrumbs.push({\n                label:\n                    parentResource.label ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        humanizeString(parentResource.name),\n                    ),\n\n                href: !!parentResource.list\n                    ? `/${parentResource.route}`\n                    : undefined,\n                icon: parentResource.icon,\n            });\n        }\n    };\n\n    if (resource.parentName) {\n        addBreadcrumb(resource.parentName);\n    }\n\n    breadcrumbs.push({\n        label:\n            resource.label ??\n            translate(\n                `${resource.name}.${resource.name}`,\n                humanizeString(resource.name),\n            ),\n        href: !!resource.list ? `/${resource.route}` : undefined,\n        icon: resource.icon,\n    });\n\n    if (action) {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(`buttons.${action}`, humanizeString(action)),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, humanizeString(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport {\n    useRefineContext,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"..\";\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const { resources } = useResource();\n    const translate = useTranslate();\n\n    const { useLocation, useParams } = useRouterContext();\n    const location = useLocation();\n    const params = useParams<{ resource: string }>();\n\n    const { hasDashboard } = useRefineContext();\n\n    const selectedKey = React.useMemo(() => {\n        let selectedResource = resources.find(\n            (el) => location?.pathname === `/${el.route}`,\n        );\n\n        if (!selectedResource) {\n            selectedResource = resources.find(\n                (el) => params?.resource === (el.route as string),\n            );\n        }\n\n        let _selectedKey: string;\n        if (selectedResource?.route) {\n            _selectedKey = `/${selectedResource?.route}`;\n        } else if (location.pathname === \"/\") {\n            _selectedKey = \"/\";\n        } else {\n            _selectedKey = location?.pathname;\n        }\n        return _selectedKey;\n    }, [resources, location, params]);\n\n    const treeMenuItems: IMenuItem[] = React.useMemo(\n        () =>\n            resources.map((resource) => {\n                const route = `/${resource.route}`;\n\n                return {\n                    ...resource,\n                    icon: resource.icon,\n                    route: route,\n                    key: resource.key ?? route,\n                    label:\n                        resource.label ??\n                        translate(\n                            `${resource.name}.${resource.name}`,\n                            userFriendlyResourceName(resource.name, \"plural\"),\n                        ),\n                };\n            }),\n        [resources, hasDashboard, translate],\n    );\n    const menuItems: ITreeMenu[] = React.useMemo(\n        () => createTreeView(treeMenuItems),\n        [treeMenuItems],\n    );\n\n    const crawlNestedKeys = React.useCallback(\n        (\n            currentKey: string,\n            currentResources: typeof resources,\n            isParent = false,\n        ): string[] => {\n            const currentElement = currentResources.find((el) =>\n                isParent ? el.name === currentKey : el.route === currentKey,\n            );\n\n            if (currentElement) {\n                const keysArray: string[] = [];\n\n                if (isParent && currentElement.route) {\n                    keysArray.unshift(...[currentElement.route]);\n                }\n\n                if (currentElement.parentName) {\n                    keysArray.unshift(\n                        ...crawlNestedKeys(\n                            currentElement.parentName,\n                            currentResources,\n                            true,\n                        ),\n                    );\n                }\n                return keysArray;\n            }\n\n            return [];\n        },\n        [],\n    );\n\n    const defaultOpenKeys = React.useMemo(\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\n        [selectedKey, treeMenuItems],\n    );\n\n    const values = React.useMemo(() => {\n        const filterMenuItemsByListViewAndHideOption = (\n            menus: ITreeMenu[],\n        ): ITreeMenu[] => {\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\n                if (obj.children.length > 0 && obj.options?.hide !== true)\n                    return [\n                        ...menuItem,\n                        {\n                            ...obj,\n                            children: filterMenuItemsByListViewAndHideOption(\n                                obj.children,\n                            ),\n                        },\n                    ];\n                else if (\n                    typeof obj.list !== \"undefined\" &&\n                    obj.options?.hide !== true\n                )\n                    return [...menuItem, obj];\n\n                return menuItem;\n            }, []);\n        };\n\n        return {\n            defaultOpenKeys,\n            selectedKey,\n            menuItems: filterMenuItemsByListViewAndHideOption(menuItems),\n        };\n    }, [defaultOpenKeys, selectedKey, menuItems]);\n\n    return values;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<ILoginForm>();\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#authpage} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<LoginFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ email, password, remember });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.login.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"text\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\"pages.login.fields.password\", \"Password\")}\n                    </label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    {rememberMe ?? (\n                        <>\n                            <label>\n                                {translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                                <input\n                                    name=\"remember\"\n                                    type=\"checkbox\"\n                                    size={20}\n                                    checked={remember}\n                                    value={remember.toString()}\n                                    onChange={() => {\n                                        setRemember(!remember);\n                                    }}\n                                />\n                            </label>\n                        </>\n                    )}\n                    <br />\n                    {forgotPasswordLink ??\n                        renderLink(\n                            \"/forgot-password\",\n                            translate(\n                                \"pages.login.buttons.forgotPassword\",\n                                \"Forgot password?\",\n                            ),\n                        )}\n                    <input\n                        type=\"submit\"\n                        value={translate(\"pages.login.signin\", \"Sign in\")}\n                    />\n                    {registerLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.login.buttons.noAccount\",\n                                \"Don’t have an account?\",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/register\",\n                                translate(\"pages.login.register\", \"Sign up\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport { useTranslate, useRouterContext, useRegister } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: register, isLoading } = useRegister();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    register({ email, password });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.register.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"email\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        value={translate(\n                            \"pages.register.buttons.submit\",\n                            \"Sign up\",\n                        )}\n                        disabled={isLoading}\n                    />\n                    {loginLink ?? (\n                        <>\n                            <span>\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}{\" \"}\n                                {renderLink(\n                                    \"login\",\n                                    translate(\"pages.login.signin\", \"Sign in\"),\n                                )}\n                            </span>\n                        </>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useTranslate, useRouterContext, useForgotPassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    QueryClientProvider,\n    QueryClient,\n    QueryCache,\n    MutationCache,\n    DefaultOptions,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { AuthContextProvider } from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { ResourceContextProvider, IResourceItem } from \"@contexts/resource\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { RouterContextProvider } from \"@contexts/router\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { handleRefineOptions, routeGenerator } from \"@definitions\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\n\nimport {\n    MutationMode,\n    IDataContextProvider,\n    I18nProvider,\n    LayoutProps,\n    TitleProps,\n    IRouterProvider,\n    ResourceProps,\n    ILiveContext,\n    LiveModeProps,\n    IDataMultipleContextProvider,\n    AuthProvider,\n    NotificationProvider,\n    AccessControlProvider,\n    AuditLogProvider,\n    DashboardPageProps,\n    IRefineOptions,\n    INotificationContext,\n} from \"../../../interfaces\";\n\ninterface QueryClientConfig {\n    queryCache?: QueryCache;\n    mutationCache?: MutationCache;\n    defaultOptions?: DefaultOptions;\n}\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the main building block of a refine app. A resource represents an entity in an endpoint in the API.\n     * @type [`ResourceProps[]`](/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](/docs/api-reference/core/providers/router-provider/)\n     */\n    routerProvider: IRouterProvider;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](/docs/api-reference/core/components/refine-config/#catchall)\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#loginpage)\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](/docs/api-reference/core/components/refine-config/#dashboardpage)\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#readypage)\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](/docs/api-reference/core/components/refine-config/#layout)\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#sider)\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#header)\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#footer)\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](/docs/api-reference/core/components/refine-config/#title)\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](/docs/api-reference/core/components/refine-config/#options-1)\n     * */\n    options?: IRefineOptions;\n    /**\n     * **refine** implements a simple and transparent telemetry module for collecting usage statistics defined in a very limited scope. This telemetry module is used to improve the refine experience.\n     * @deprecated  `disableTelemetry`  property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n     * @type [`boolean`](/docs/api-reference/core/components/refine-config/#disabletelemetry)\n     */\n    disableTelemetry?: boolean;\n    /** \n     *  Config for React Query client that refine uses.\n        @deprecated `reactQueryClientConfig` property is deprecated. Use `clientConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ reactQuery: { clientConfig: { queryCache: new QueryCache() } } }}`\n        @see https://refine.dev/docs/core/components/refine-config/#clientconfig\n          @type [`QueryClientConfig` | `false`](/docs/api-reference/core/components/refine-config/#reactquery)\n     */\n    reactQueryClientConfig?: QueryClientConfig;\n    /** \n           *  Config for customize React Query Devtools.\n              @deprecated `reactQueryDevtoolConfig` property is deprecated. Use `devtoolConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ reactQuery: { devtoolConfig: false } }}`\n              @see https://refine.dev/docs/core/components/refine-config/#devtoolConfig\n              @type [`ReactQueryDevtools` | `false`](/docs/api-reference/core/components/refine-config/#devtoolconfig)\n           */\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n\n    /** \n           *  Whether to update data automatically (auto) or not (manual) if a related live event is received. The off value is used to avoid creating a subscription.\n              @deprecated `liveMode` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ liveMode: \"auto\" }}`\n              @see https://refine.dev/docs/core/components/refine-config/#livemode\n              @type [`LiveModeProps[\"liveMode\"]`](/docs/api-reference/core/components/refine-config/#livemode)\n           */\n    liveMode?: LiveModeProps[\"liveMode\"];\n    /** \n        @deprecated `disableTelemetry` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ disableTelemetry: true }}`\n     */\n    /**\n     * `mutationMode` determines which mode the mutations run with. (e.g. useUpdate, useDelete).\n     * @deprecated `mutationMode` property is deprecated at this level. Use it from within `options` instead.\n     * @type [`MutationMode`](/docs/api-reference/core/components/refine-config/#mutationmode)\n     * @default \"pessimistic\"\n     */\n    mutationMode?: MutationMode;\n    /** \n       * List query parameter values can be edited manually by typing directly in the URL. To activate this feature syncWithLocation needs to be set to true.\n          @deprecated `syncWithLocation` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ syncWithLocation: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#syncwithlocation\n       *  @type [`boolean`](/docs/api-reference/core/components/refine-config/#syncwithlocation)\n       */\n    syncWithLocation?: boolean;\n    /** \n       *  When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n          @deprecated `warnwhenunsavedchanges` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ warnwhenunsavedchanges: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#warnwhenunsavedchanges\n      *   @type [`boolean`](/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges)\n       */\n    warnWhenUnsavedChanges?: boolean;\n    /** \n       *  The duration of the timeout period in undoable mode, shown in milliseconds. Mutations can be cancelled during this period.\n          @deprecated `undoableTimeout` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ undoableTimeout: 5000 }}`\n          @see https://refine.dev/docs/core/components/refine-config/#undoabletimeout\n      *   @type [`number`](/docs/api-reference/core/components/refine-config/#undoabletimeout)\n       */\n    undoableTimeout?: number;\n}\n\n/**\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    authProvider,\n    dataProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources: resourcesFromProps,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    mutationMode,\n    syncWithLocation,\n    warnWhenUnsavedChanges,\n    undoableTimeout,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    liveMode,\n    onLiveEvent,\n    disableTelemetry,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n        disableTelemetry,\n        liveMode,\n        mutationMode,\n        reactQueryClientConfig,\n        reactQueryDevtoolConfig,\n        syncWithLocation,\n        warnWhenUnsavedChanges,\n        undoableTimeout,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        const _resources: IResourceItem[] = [];\n\n        resourcesFromProps?.forEach((resource) => {\n            _resources.push({\n                key: resource.key,\n                name: resource.name,\n                label: resource.options?.label,\n                icon: resource.icon,\n                route: routeGenerator(resource, resourcesFromProps),\n                canCreate: !!resource.create,\n                canEdit: !!resource.edit,\n                canShow: !!resource.show,\n                canDelete: resource.canDelete,\n                create: resource.create,\n                show: resource.show,\n                list: resource.list,\n                edit: resource.edit,\n                options: resource.options,\n                parentName: resource.parentName,\n            });\n        });\n\n        return _resources;\n    }, [resourcesFromProps]);\n\n    if (resources.length === 0) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    const { RouterComponent = React.Fragment } = routerProvider;\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <AuthContextProvider\n                    {...(authProvider ?? {})}\n                    isProvided={Boolean(authProvider)}\n                >\n                    <DataContextProvider {...dataProvider}>\n                        <LiveContextProvider liveProvider={liveProvider}>\n                            <RouterContextProvider {...routerProvider}>\n                                <ResourceContextProvider resources={resources}>\n                                    <TranslationContextProvider\n                                        i18nProvider={i18nProvider}\n                                    >\n                                        <AccessControlContextProvider\n                                            {...(accessControlProvider ?? {})}\n                                        >\n                                            <AuditLogContextProvider\n                                                {...(auditLogProvider ?? {})}\n                                            >\n                                                <UndoableQueueContextProvider>\n                                                    <RefineContextProvider\n                                                        mutationMode={\n                                                            optionsWithDefaults.mutationMode\n                                                        }\n                                                        warnWhenUnsavedChanges={\n                                                            optionsWithDefaults.warnWhenUnsavedChanges\n                                                        }\n                                                        syncWithLocation={\n                                                            optionsWithDefaults.syncWithLocation\n                                                        }\n                                                        Title={Title}\n                                                        undoableTimeout={\n                                                            optionsWithDefaults.undoableTimeout\n                                                        }\n                                                        catchAll={catchAll}\n                                                        DashboardPage={\n                                                            DashboardPage\n                                                        }\n                                                        LoginPage={LoginPage}\n                                                        Layout={Layout}\n                                                        Sider={Sider}\n                                                        Footer={Footer}\n                                                        Header={Header}\n                                                        OffLayoutArea={\n                                                            OffLayoutArea\n                                                        }\n                                                        hasDashboard={\n                                                            !!DashboardPage\n                                                        }\n                                                        liveMode={\n                                                            optionsWithDefaults.liveMode\n                                                        }\n                                                        onLiveEvent={\n                                                            onLiveEvent\n                                                        }\n                                                        options={\n                                                            optionsWithDefaults\n                                                        }\n                                                    >\n                                                        <UnsavedWarnContextProvider>\n                                                            <RouterComponent>\n                                                                {children}\n                                                                {!disableTelemetryWithDefault && (\n                                                                    <Telemetry />\n                                                                )}\n                                                                <RouteChangeHandler />\n                                                            </RouterComponent>\n                                                        </UnsavedWarnContextProvider>\n                                                    </RefineContextProvider>\n                                                </UndoableQueueContextProvider>\n                                            </AuditLogContextProvider>\n                                        </AccessControlContextProvider>\n                                    </TranslationContextProvider>\n                                </ResourceContextProvider>\n                            </RouterContextProvider>\n                        </LiveContextProvider>\n                    </DataContextProvider>\n                </AuthContextProvider>\n            </NotificationContextProvider>\n            {reactQueryWithDefaults.devtoolConfig === false ? null : (\n                <ReactQueryDevtools\n                    initialIsOpen={false}\n                    position=\"bottom-right\"\n                    {...reactQueryWithDefaults.devtoolConfig}\n                />\n            )}\n        </QueryClientProvider>\n    );\n};\n","import { useEffect } from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\nconst encode = (payload: ITelemetryData): string => {\n    const stringifyedPayload = JSON.stringify(payload || {});\n\n    if (typeof btoa !== \"undefined\") {\n        return btoa(stringifyedPayload);\n    }\n\n    return Buffer.from(stringifyedPayload).toString(\"base64\");\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" && !Image) {\n            return;\n        }\n\n        const img = new Image();\n        img.src = `https://telemetry.refine.dev/telemetry?payload=${encode(\n            payload,\n        )}`;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"3.99.4\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const authContext = useContext(AuthContext);\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n\n    const auth = authContext.isProvided;\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n    };\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\n\nexport type AuthenticatedProps = {\n    /**\n     * Content to show if user is not logged in. If undefined, routes to `/`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in\n     */\n    loading?: React.ReactNode;\n    children: React.ReactNode;\n};\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\n    children,\n    fallback,\n    loading,\n}) => {\n    const { isSuccess, isLoading, isError } = useAuthenticated();\n\n    const { replace } = useNavigation();\n    const { useLocation } = useRouterContext();\n    const { pathname, search } = useLocation();\n\n    if (isLoading) {\n        return <>{loading}</> || null;\n    }\n    if (isError) {\n        if (!fallback) {\n            const toURL = `${pathname}${search}`;\n            if (!pathname.includes(\"/login\")) {\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\n            }\n            return null;\n        }\n\n        return <>{fallback}</>;\n    }\n\n    if (isSuccess) {\n        return <>{children}</>;\n    }\n\n    return null;\n};\n","import { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { useRouterContext } from \"@hooks\";\n\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React from \"react\";\n\nimport { useCan } from \"@hooks\";\nimport { CanParams } from \"../../interfaces\";\n\nexport type CanAccessProps = CanParams & {\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    children: React.ReactNode;\n};\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource,\n    action,\n    params,\n    fallback,\n    children,\n    ...rest\n}) => {\n    const { data } = useCan({\n        resource,\n        action,\n        params,\n    });\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n","export type { RefineBreadcrumbProps } from \"./types\";\n\nexport type {\n    RefineButtonCommonProps,\n    RefineButtonDataProps,\n    RefineButtonLinkingProps,\n    RefineButtonResourceProps,\n    RefineButtonSingleProps,\n    RefineCloneButtonProps,\n    RefineCreateButtonProps,\n    RefineDeleteButtonProps,\n    RefineEditButtonProps,\n    RefineExportButtonProps,\n    RefineImportButtonProps,\n    RefineListButtonProps,\n    RefineRefreshButtonProps,\n    RefineSaveButtonProps,\n    RefineShowButtonProps,\n} from \"./types\";\n\nexport type {\n    RefineCrudCreateProps,\n    RefineCrudEditProps,\n    RefineCrudListProps,\n    RefineCrudShowProps,\n    ActionButtonRenderer,\n} from \"./types\";\n\nexport type { RefineErrorPageProps, RefineReadyPageProps } from \"./types\";\n\nexport type {\n    RefineFieldBooleanProps,\n    RefineFieldCommonProps,\n    RefineFieldDateProps,\n    RefineFieldEmailProps,\n    RefineFieldFileProps,\n    RefineFieldImageProps,\n    RefineFieldUrlProps,\n    RefineFieldMarkdownProps,\n    RefineFieldNumberProps,\n    RefineFieldTagProps,\n    RefineFieldTextProps,\n    RefineFieldTooltipProps,\n} from \"./types\";\n\nexport type {\n    RefineLayoutFooterProps,\n    RefineLayoutHeaderProps,\n    RefineLayoutLayoutProps,\n    RefineLayoutSiderProps,\n    RefineLayoutTitleProps,\n} from \"./types\";\n\nexport { RefineButtonTestIds } from \"./ids\";\n","export const RefineButtonTestIds = {\n    CloneButton: \"refine-clone-button\",\n    DeleteButton: \"refine-delete-button\",\n    EditButton: \"refine-edit-button\",\n    SaveButton: \"refine-save-button\",\n    CreateButton: \"refine-create-button\",\n    ImportButton: \"refine-import-button\",\n    ExportButton: \"refine-export-button\",\n    ListButton: \"refine-list-button\",\n    RefreshButton: \"refine-refresh-button\",\n    ShowButton: \"refine-show-button\",\n};\n","export * from \"./hooks\";\nexport * from \"./providers\";\nexport * from \"./components/antd\";\nexport * from \"./components\";\n\n// antd filterDropDownProps (using for <FilterDropDown> component)\nexport type { FilterDropdownProps } from \"antd/lib/table/interface\";\nexport type { RcFile, UploadFile } from \"antd/lib/upload/interface\";\n\nexport {\n    getDefaultSortOrder,\n    getDefaultFilter,\n    mapAntdSorterToCrudSorting,\n    mapAntdFilterToCrudFilter,\n} from \"./definitions/table\";\nexport { getValueFromEvent } from \"./definitions/upload\";\n","import React from \"react\";\nimport { FormInstance, FormProps, Form } from \"antd\";\nimport { useForm as useFormSF } from \"sunflower-antd\";\n\nimport {\n    HttpError,\n    BaseRecord,\n    useForm as useFormCore,\n    UseFormReturnType as UseFormReturnTypeCore,\n    useWarnAboutChange,\n    UseFormProps as UseFormPropsCore,\n    CreateResponse,\n    UpdateResponse,\n} from \"@pankod/refine-core\";\n\nimport { ButtonProps } from \"../../components/antd\";\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormPropsCore<TData, TError, TVariables> & {\n    submitOnEnter?: boolean;\n    /**\n     * Shows notification when unsaved changes exist\n     */\n    warnWhenUnsavedChanges?: boolean;\n};\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormReturnTypeCore<TData, TError, TVariables> & {\n    form: FormInstance<TVariables>;\n    formProps: FormProps<TVariables>;\n    saveButtonProps: ButtonProps & {\n        onClick: () => void;\n    };\n    onFinish: (\n        values?: TVariables,\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    action,\n    resource,\n    onMutationSuccess: onMutationSuccessProp,\n    onMutationError,\n    submitOnEnter = false,\n    warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n    redirect,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    liveParams,\n    mutationMode,\n    dataProviderName,\n    onLiveEvent,\n    invalidates,\n    undoableTimeout,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n    id: idFromProps,\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const [formAnt] = Form.useForm();\n    const formSF = useFormSF<TData, TVariables>({\n        form: formAnt,\n    });\n    const { form } = formSF;\n\n    const useFormCoreResult = useFormCore<TData, TError, TVariables>({\n        onMutationSuccess: onMutationSuccessProp\n            ? onMutationSuccessProp\n            : undefined,\n        onMutationError,\n        redirect,\n        action,\n        resource,\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        mutationMode,\n        dataProviderName,\n        onLiveEvent,\n        invalidates,\n        undoableTimeout,\n        queryOptions,\n        createMutationOptions,\n        updateMutationOptions,\n        id: idFromProps,\n    });\n\n    const { formLoading, onFinish, queryResult, id } = useFormCoreResult;\n\n    const {\n        warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine,\n        setWarnWhen,\n    } = useWarnAboutChange();\n    const warnWhenUnsavedChanges =\n        warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n    React.useEffect(() => {\n        form.resetFields();\n    }, [queryResult?.data?.data, id]);\n\n    const onKeyUp = (event: React.KeyboardEvent<HTMLFormElement>) => {\n        if (submitOnEnter && event.key === \"Enter\") {\n            form.submit();\n        }\n    };\n\n    const onValuesChange = (changeValues: object) => {\n        if (changeValues && warnWhenUnsavedChanges) {\n            setWarnWhen(true);\n        }\n        return changeValues;\n    };\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: () => {\n            form.submit();\n        },\n    };\n\n    return {\n        form: formSF.form,\n        formProps: {\n            ...formSF.formProps,\n            onFinish: (values: TVariables) =>\n                onFinish(values).catch((error) => error),\n            onKeyUp,\n            onValuesChange,\n            initialValues: queryResult?.data?.data,\n        },\n        saveButtonProps,\n        ...useFormCoreResult,\n        onFinish: async (values?: TVariables) => {\n            return await onFinish(values ?? formSF.form.getFieldsValue(true));\n        },\n    };\n};\n","import { useCallback, useEffect } from \"react\";\nimport { FormInstance, FormProps, ModalProps } from \"antd\";\nimport {\n    useModalForm as useModalFormSF,\n    UseModalFormConfig as UseModalFormConfigSF,\n} from \"sunflower-antd\";\n\nimport {\n    useMutationMode,\n    useTranslate,\n    useWarnAboutChange,\n    useResourceWithRoute,\n    useRouterContext,\n    HttpError,\n    ResourceRouterParams,\n    UseFormProps as UseFormPropsCore,\n    BaseRecord,\n    LiveModeProps,\n    BaseKey,\n    userFriendlyResourceName,\n} from \"@pankod/refine-core\";\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type useModalFormFromSFReturnType<TData, TVariables> = {\n    open: boolean;\n    form: FormInstance<TVariables>;\n    show: (id?: BaseKey) => void;\n    close: () => void;\n    modalProps: ModalProps;\n    formProps: FormProps<TVariables>;\n    formLoading: boolean;\n    defaultFormValuesLoading: boolean;\n    formValues: {};\n    initialValues: {};\n    formResult: undefined;\n    submit: (values?: TVariables) => Promise<TData>;\n    /** @deprecated Please use `open` instead. */\n    visible: boolean;\n};\n\ntype useModalFormConfig = {\n    action: \"show\" | \"edit\" | \"create\" | \"clone\";\n};\n\nexport type UseModalFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = Omit<\n    UseFormReturnType<TData, TError, TVariables>,\n    \"saveButtonProps\" | \"deleteButtonProps\"\n> &\n    useModalFormFromSFReturnType<TData, TVariables>;\n\nexport type UseModalFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormPropsCore<TData, TError, TVariables> &\n    UseFormProps<TData, TError, TVariables> &\n    UseModalFormConfigSF &\n    useModalFormConfig &\n    LiveModeProps;\n/**\n * `useModalForm` hook allows you to manage a form within a modal. It returns Ant Design {@link https://ant.design/components/form/ Form} and {@link https://ant.design/components/modal/ Modal} components props.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/form/useModalForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useModalForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationMode: mutationModeProp,\n    ...rest\n}: UseModalFormProps<TData, TError, TVariables>): UseModalFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const useFormProps = useForm<TData, TError, TVariables>({\n        ...rest,\n        mutationMode: mutationModeProp,\n    });\n\n    const { form, formProps, setId, formLoading, mutationResult } =\n        useFormProps;\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const sunflowerUseModal = useModalFormSF<TData, TVariables>({\n        ...rest,\n        form: form,\n    });\n\n    const {\n        visible,\n        close,\n        form: modalForm,\n        formProps: modalFormProps,\n        modalProps,\n    } = sunflowerUseModal;\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const {\n        isLoading: isLoadingMutation,\n        isSuccess: isSuccessMutation,\n        reset: resetMutation,\n    } = mutationResult ?? {};\n\n    useEffect(() => {\n        if (visible && mutationMode === \"pessimistic\") {\n            if (isSuccessMutation && !isLoadingMutation) {\n                close();\n                resetMutation?.();\n                // Prevents resetting form values before closing modal in UI\n                setTimeout(() => {\n                    form.resetFields();\n                });\n            }\n        }\n    }, [isSuccessMutation, isLoadingMutation]);\n\n    const saveButtonPropsSF = {\n        disabled: formLoading,\n        onClick: () => {\n            modalForm.submit();\n\n            if (!(mutationMode === \"pessimistic\")) {\n                close();\n                // Prevents resetting form values before closing modal in UI\n                setTimeout(() => {\n                    form.resetFields();\n                });\n            }\n        },\n        loading: formLoading,\n    };\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const resource = resourceWithRoute(rest.resource ?? routeResourceName);\n\n    const handleClose = useCallback(() => {\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setId?.(undefined);\n        sunflowerUseModal.close();\n    }, [warnWhen]);\n\n    const handleShow = useCallback((id?: BaseKey) => {\n        setId?.(id);\n\n        sunflowerUseModal.show();\n    }, []);\n\n    return {\n        ...useFormProps,\n        ...sunflowerUseModal,\n        show: handleShow,\n        close: handleClose,\n        open: visible,\n        formProps: {\n            ...modalFormProps,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n            onFinish: formProps.onFinish,\n        },\n        modalProps: {\n            ...modalProps,\n            width: \"1000px\",\n            okButtonProps: saveButtonPropsSF,\n            title: translate(\n                `${resource.name}.titles.${rest.action}`,\n                `${userFriendlyResourceName(\n                    `${rest.action} ${resource.name}`,\n                    \"singular\",\n                )}`,\n            ),\n            okText: translate(\"buttons.save\", \"Save\"),\n            cancelText: translate(\"buttons.cancel\", \"Cancel\"),\n            onCancel: handleClose,\n            forceRender: true,\n        },\n        formLoading,\n    };\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { UseFormConfig } from \"sunflower-antd\";\nimport { FormInstance, FormProps, DrawerProps, ButtonProps } from \"antd\";\nimport {\n    useMutationMode,\n    useTranslate,\n    useWarnAboutChange,\n    UseFormProps as UseFormPropsCore,\n    HttpError,\n    LiveModeProps,\n    BaseRecord,\n    BaseKey,\n} from \"@pankod/refine-core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\nimport { DeleteButtonProps } from \"../../../components\";\n\nexport interface UseDrawerFormConfig extends UseFormConfig {\n    action: \"show\" | \"edit\" | \"create\" | \"clone\";\n}\n\nexport type UseDrawerFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormPropsCore<TData, TError, TVariables> &\n    UseFormProps<TData, TError, TVariables> &\n    UseDrawerFormConfig &\n    LiveModeProps;\n\nexport type UseDrawerFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormReturnType<TData, TError, TVariables> & {\n    formProps: FormProps<TVariables> & {\n        form: FormInstance<TVariables>;\n    };\n    show: (id?: BaseKey) => void;\n    close: () => void;\n    drawerProps: DrawerProps;\n    saveButtonProps: ButtonProps;\n    deleteButtonProps: DeleteButtonProps;\n    formLoading: boolean;\n};\n\n/**\n * `useDrawerForm` hook allows you to manage a form within a drawer. It returns Ant Design {@link https://ant.design/components/form/ Form} and {@link https://ant.design/components/drawer/ Drawer} components props.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/form/useDrawerForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\n\nexport const useDrawerForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationMode: mutationModeProp,\n    ...rest\n}: UseDrawerFormProps<TData, TError, TVariables>): UseDrawerFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const useFormProps = useForm<TData, TError, TVariables>({\n        ...rest,\n        mutationMode: mutationModeProp,\n    });\n\n    const { form, formProps, formLoading, mutationResult, id, setId } =\n        useFormProps;\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const [open, setOpen] = useState(false);\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const {\n        isLoading: isLoadingMutation,\n        isSuccess: isSuccessMutation,\n        reset: resetMutation,\n    } = mutationResult ?? {};\n\n    useEffect(() => {\n        if (open && mutationMode === \"pessimistic\") {\n            if (isSuccessMutation && !isLoadingMutation) {\n                setOpen(false);\n                resetMutation?.();\n            }\n        }\n    }, [isSuccessMutation, isLoadingMutation]);\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: () => {\n            form?.submit();\n            if (!(mutationMode === \"pessimistic\")) {\n                setOpen(false);\n            }\n        },\n        loading: formLoading,\n    };\n\n    const deleteButtonProps = {\n        recordItemId: id,\n        onSuccess: () => {\n            setId?.(undefined);\n            setOpen(false);\n        },\n    };\n\n    const handleClose = useCallback(() => {\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setOpen(false);\n        setId?.(undefined);\n    }, [warnWhen]);\n\n    const handleShow = useCallback((id?: BaseKey) => {\n        setId?.(id);\n\n        setOpen(true);\n    }, []);\n\n    return {\n        ...useFormProps,\n        show: handleShow,\n        close: handleClose,\n        formProps: {\n            form,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n            onFinish: formProps.onFinish,\n        },\n        drawerProps: {\n            width: \"500px\",\n            onClose: handleClose,\n            open,\n            visible: open,\n            forceRender: true,\n        },\n        saveButtonProps,\n        deleteButtonProps,\n        formLoading,\n    };\n};\n","import {\n    useStepsForm as useStepsFormSF,\n    UseStepsFormConfig,\n} from \"sunflower-antd\";\nimport { FormInstance, FormProps } from \"antd\";\n\nimport {\n    HttpError,\n    UseFormProps as UseFormPropsCore,\n    BaseRecord,\n} from \"@pankod/refine-core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormFromSFReturnType<TData, TVariables> = {\n    current: number;\n    gotoStep: (step: number) => void;\n    stepsProps: {\n        current: number;\n        onChange: (currentStep: number) => void;\n    };\n    formProps: FormProps<TVariables>;\n    formLoading: boolean;\n    defaultFormValuesLoading: boolean;\n    formValues: {};\n    initialValues: {};\n    formResult: undefined;\n    form: FormInstance<TVariables>;\n    submit: (values?: TVariables) => Promise<TData>;\n};\n\nexport type UseStepsFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormReturnType<TData, TError, TVariables> &\n    UseStepsFormFromSFReturnType<TData, TVariables>;\n\nexport type UseStepsFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseFormPropsCore<TData, TError, TVariables> &\n    UseFormProps<TData, TError, TVariables> &\n    UseStepsFormConfig;\n\n/**\n * `useStepsForm` hook allows you to split your form under an Ant Design based {@link https://ant.design/components/steps/ Steps} component and provides you with a few useful functionalities that will help you manage your form.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/form/useStepsForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useStepsForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>(\n    props: UseStepsFormProps<TData, TError, TVariables> = {},\n): UseStepsFormReturnType<TData, TError, TVariables> => {\n    const useFormProps = useForm<TData, TError, TVariables>({ ...props });\n    const { form, formProps } = useFormProps;\n\n    const stepsPropsSunflower = useStepsFormSF<TData, TVariables>({\n        isBackValidate: false,\n        form: form,\n        submit: (values: any) => {\n            formProps?.onFinish?.(values);\n        },\n        ...props,\n    });\n\n    return {\n        ...useFormProps,\n        ...stepsPropsSunflower,\n        formProps: {\n            ...stepsPropsSunflower.formProps,\n            ...useFormProps.formProps,\n            onValuesChange: formProps?.onValuesChange,\n            onKeyUp: formProps?.onKeyUp,\n        },\n        saveButtonProps: {\n            ...useFormProps.saveButtonProps,\n            onClick: () => stepsPropsSunflower.submit(),\n        },\n    };\n};\n","import React, { Children, createElement, Fragment } from \"react\";\nimport { Grid, FormProps, Form, TablePaginationConfig, TableProps } from \"antd\";\nimport { QueryObserverResult } from \"@tanstack/react-query\";\nimport { useForm as useFormSF } from \"sunflower-antd\";\n\nimport { SorterResult } from \"antd/lib/table/interface\";\n\nimport {\n    useLiveMode,\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    LiveModeProps,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType as useTableCoreReturnType,\n} from \"@pankod/refine-core\";\n\nimport {\n    mapAntdSorterToCrudSorting,\n    mapAntdFilterToCrudFilter,\n} from \"@definitions/table\";\nimport { PaginationLink } from \"./paginationLink\";\n\nexport type useTableProps<\n    TData,\n    TError,\n    TSearchVariables = unknown,\n> = useTablePropsCore<TData, TError> &\n    SuccessErrorNotification &\n    LiveModeProps & {\n        onSearch?: (\n            data: TSearchVariables,\n        ) => CrudFilters | Promise<CrudFilters>;\n    };\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n> = {\n    searchFormProps: FormProps<TSearchVariables>;\n    tableProps: TableProps<TData>;\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    sorter?: CrudSorting;\n    filters?: CrudFilters;\n    current?: number;\n    setCurrent: useTableCoreReturnType<TData>[\"setCurrent\"];\n    pageSize: number;\n    setPageSize: useTableCoreReturnType<TData>[\"setPageSize\"];\n    pageCount: number;\n    setFilters: useTableCoreReturnType<TData>[\"setFilters\"];\n    setSorter: useTableCoreReturnType<TData>[\"setSorter\"];\n};\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\n */\n\n// const defaultPermanentFilter: CrudFilters = [];\n\nexport const useTable = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    {\n        onSearch,\n        initialCurrent,\n        initialPageSize,\n        hasPagination = true,\n        initialSorter,\n        permanentSorter,\n        initialFilter,\n        permanentFilter,\n        defaultSetFilterBehavior,\n        syncWithLocation: syncWithLocationProp,\n        resource: resourceFromProp,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    }: useTableProps<TData, TError, TSearchVariables> = { hasPagination: true },\n): useTableReturnType<TData, TError, TSearchVariables> => {\n    const {\n        tableQueryResult,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        filters,\n        setFilters,\n        sorter,\n        setSorter,\n        createLinkForSyncWithLocation,\n        pageCount,\n    } = useTableCore<TData, TError>({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        // @ts-expect-error currently boolean casting is not supported in overloaded types.\n        hasPagination: hasPagination,\n        initialSorter,\n        initialFilter,\n        syncWithLocation: syncWithLocationProp,\n        resource: resourceFromProp,\n        defaultSetFilterBehavior,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const breakpoint = Grid.useBreakpoint();\n\n    const [form] = Form.useForm<TSearchVariables>();\n    const formSF = useFormSF<any, TSearchVariables>({\n        form: form,\n    });\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const { data, isFetched, isLoading } = tableQueryResult;\n\n    const onChange = (\n        pagination: TablePaginationConfig,\n        tableFilters: Record<\n            string,\n            (string | number | boolean) | (string | number | boolean)[] | null\n        >,\n        sorter: SorterResult<any> | SorterResult<any>[],\n    ) => {\n        if (tableFilters && Object.keys(tableFilters).length > 0) {\n            // Map Antd:Filter -> refine:CrudFilter\n            const crudFilters = mapAntdFilterToCrudFilter(\n                tableFilters,\n                filters,\n                initialFilter,\n            );\n            setFilters(crudFilters);\n        }\n\n        if (sorter && Object.keys(sorter).length > 0) {\n            // Map Antd:Sorter -> refine:CrudSorting\n            const crudSorting = mapAntdSorterToCrudSorting(sorter);\n            setSorter(crudSorting);\n        }\n\n        // tablePropsSunflower.onChange(pagination, filters, sorter);\n        if (hasPagination) {\n            setCurrent?.(pagination.current || 1);\n            setPageSize?.(pagination.pageSize || 10);\n        }\n    };\n\n    const onFinish = async (value: TSearchVariables) => {\n        if (onSearch) {\n            const searchFilters = await onSearch(value);\n            setFilters(searchFilters);\n            if (hasPagination) {\n                setCurrent?.(1);\n            }\n        }\n    };\n\n    const antdPagination = (): false | TablePaginationConfig => {\n        if (hasPagination) {\n            return {\n                itemRender: (page, type, element) => {\n                    const link = createLinkForSyncWithLocation({\n                        pagination: {\n                            pageSize,\n                            current: page,\n                        },\n                        sorter,\n                        filters,\n                    });\n\n                    if (type === \"page\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: `${page}`,\n                        });\n                    }\n                    if (type === \"next\" || type === \"prev\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: element,\n                        });\n                    }\n\n                    if (type === \"jump-next\" || type === \"jump-prev\") {\n                        const elementChildren = (element as React.ReactElement)\n                            ?.props?.children;\n\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element:\n                                Children.count(elementChildren) > 1\n                                    ? createElement(\n                                          Fragment,\n                                          {},\n                                          elementChildren,\n                                      )\n                                    : elementChildren,\n                        });\n                    }\n\n                    return element;\n                },\n                pageSize,\n                current,\n                simple: !breakpoint.sm,\n                position: !breakpoint.sm ? [\"bottomCenter\"] : [\"bottomRight\"],\n                total: data?.total,\n            };\n        }\n\n        return false;\n    };\n\n    return {\n        searchFormProps: {\n            ...formSF.formProps,\n            onFinish,\n        },\n        tableProps: {\n            dataSource: data?.data,\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            onChange,\n            pagination: antdPagination(),\n            scroll: { x: true },\n        },\n        tableQueryResult,\n        sorter,\n        filters,\n        setSorter,\n        setFilters,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n    };\n};\n","import {\n    CrudFilters,\n    CrudOperators,\n    CrudSorting,\n    CrudFilter,\n    getDefaultFilter as getDefaultFilterCore,\n    getDefaultSortOrder as getDefaultSortOrderCore,\n    ConditionalFilter,\n    LogicalFilter,\n} from \"@pankod/refine-core\";\nimport { SortOrder, SorterResult } from \"antd/lib/table/interface\";\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    const sort = getDefaultSortOrderCore(columnName, sorter);\n\n    if (sort) {\n        return `${sort}end`;\n    }\n\n    return undefined;\n};\n\n/**\n * @deprecated getDefaultFilter moved to `@pankod/refine-core`. Use from `@pankod/refine-core`\n */\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    return getDefaultFilterCore(columnName, filters, operatorType);\n};\n\nexport const mapAntdSorterToCrudSorting = (\n    sorter: SorterResult<any> | SorterResult<any>[],\n): CrudSorting => {\n    const crudSorting: CrudSorting = [];\n    if (Array.isArray(sorter)) {\n        sorter\n            .sort((a, b) => {\n                return ((a.column?.sorter as { multiple?: number }).multiple ??\n                    0) <\n                    ((b.column?.sorter as { multiple?: number }).multiple ?? 0)\n                    ? -1\n                    : 0;\n            })\n            .map((item) => {\n                if (item.field && item.order) {\n                    const field = Array.isArray(item.field)\n                        ? item.field.join(\".\")\n                        : `${item.field}`;\n\n                    crudSorting.push({\n                        field: `${item.columnKey ?? field}`,\n                        order: item.order.replace(\"end\", \"\") as \"asc\" | \"desc\",\n                    });\n                }\n            });\n    } else {\n        if (sorter.field && sorter.order) {\n            const field = Array.isArray(sorter.field)\n                ? sorter.field.join(\".\")\n                : `${sorter.field}`;\n\n            crudSorting.push({\n                field: `${sorter.columnKey ?? field}`,\n                order: sorter.order.replace(\"end\", \"\") as \"asc\" | \"desc\",\n            });\n        }\n    }\n\n    return crudSorting;\n};\n\nexport const mapAntdFilterToCrudFilter = (\n    tableFilters: Record<\n        string,\n        (string | number | boolean) | (string | number | boolean)[] | null\n    >,\n    prevFilters: CrudFilters,\n    initialFilters?: CrudFilters,\n): CrudFilters => {\n    const crudFilters: CrudFilters = [];\n    const mapInitialFilter: Record<string, CrudFilter> = (\n        initialFilters ?? []\n    ).reduce((acc, item) => {\n        const field =\n            (item as ConditionalFilter).key || (item as LogicalFilter).field;\n        return { ...acc, [field]: item };\n    }, {});\n\n    Object.keys(tableFilters).map((field) => {\n        const value = tableFilters[field];\n        const operator =\n            prevFilters\n                .filter((i) => i.operator !== \"or\")\n                .find((p: any) => p.field === field)?.operator ||\n            mapInitialFilter[field]?.operator;\n\n        if (operator !== \"or\" && operator !== \"and\") {\n            crudFilters.push({\n                field,\n                operator: operator ?? (Array.isArray(value) ? \"in\" : \"eq\"),\n                value,\n            });\n        }\n    });\n\n    return crudFilters;\n};\n","import { useRouterContext } from \"@pankod/refine-core\";\nimport React, { ReactNode } from \"react\";\n\ninterface PaginationLinkProps {\n    to: string;\n    element: ReactNode;\n}\n\nexport const PaginationLink = ({ to, element }: PaginationLinkProps) => {\n    const { Link } = useRouterContext();\n\n    return (\n        <Link\n            to={to}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                e.preventDefault();\n            }}\n        >\n            {element}\n        </Link>\n    );\n};\n","import { useTable } from \"@hooks\";\nimport {\n    BaseKey,\n    BaseRecord,\n    HttpError,\n    UseFormProps,\n} from \"@pankod/refine-core\";\n\nimport { ButtonProps } from \"../../../components/antd\";\nimport { useTableProps, useTableReturnType } from \"../useTable\";\nimport { UseFormReturnType, useForm } from \"../../form/useForm\";\n\nexport type useEditableTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n> = useTableReturnType<TData, TError, TSearchVariables> &\n    UseFormReturnType<TData, TError, TVariables> & {\n        saveButtonProps: ButtonProps & {\n            onClick: () => void;\n        };\n        cancelButtonProps: ButtonProps & {\n            onClick: () => void;\n        };\n        editButtonProps: (id: BaseKey) => ButtonProps & {\n            onClick: () => void;\n        };\n        isEditing: (id: BaseKey) => boolean;\n    };\n\ntype useEditableTableProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n> = useTableProps<TData, TError, TSearchVariables> &\n    UseFormProps<TData, TError, TVariables>;\n\n/**\n * `useEditeableTable` allows you to implement edit feature on the table with ease,\n * on top of all the features that {@link https://refine.dev/docs/api-references/hooks/table/useTable `useTable`} provides.\n * `useEditableTable` return properties that can be used on Ant Design's {@link https://ant.design/components/table/ `<Table>`}\n * and {@link https://ant.design/components/form/ `<Form>`} components.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/table/useEditableTable} for more details.\n */\nexport const useEditableTable = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n    TSearchVariables = unknown,\n>(\n    props: useEditableTableProps<\n        TData,\n        TError,\n        TVariables,\n        TSearchVariables\n    > = {},\n): useEditableTableReturnType<TData, TError, TVariables, TSearchVariables> => {\n    const table = useTable<TData, TError, TSearchVariables>({ ...props });\n    const edit = useForm<TData, TError, TVariables>({\n        ...props,\n        action: \"edit\",\n        redirect: false,\n    });\n\n    const { id: editId, setId, saveButtonProps } = edit;\n\n    const cancelButtonProps = {\n        onClick: () => {\n            setId(undefined);\n        },\n    };\n\n    const editButtonProps = (id: BaseKey) => {\n        return {\n            onClick: () => setId(id),\n        };\n    };\n\n    const isEditing = (id: BaseKey) => id === editId;\n\n    return {\n        ...table,\n        ...edit,\n        saveButtonProps,\n        cancelButtonProps,\n        editButtonProps,\n        isEditing,\n    };\n};\n","import { SelectProps } from \"antd/lib/select\";\nimport { QueryObserverResult } from \"@tanstack/react-query\";\n\nimport {\n    useSelect as useSelectCore,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    HttpError,\n    UseSelectProps,\n} from \"@pankod/refine-core\";\n\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\n    selectProps: SelectProps<{ value: string; label: string }>;\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n};\n\n/**\n * `useSelect` hook allows you to manage an Ant Design {@link https://ant.design/components/select/ Select} component when records in a resource needs to be used as select options.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/field/useSelect} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n *\n */\nexport const useSelect = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props: UseSelectProps<TData, TError>,\n): UseSelectReturnType<TData> => {\n    const { queryResult, defaultValueQueryResult, onSearch, options } =\n        useSelectCore(props);\n\n    return {\n        selectProps: {\n            options,\n            onSearch,\n            loading: defaultValueQueryResult.isFetching,\n            showSearch: true,\n            filterOption: false,\n        },\n        queryResult,\n        defaultValueQueryResult,\n    };\n};\n","import { QueryObserverResult } from \"@tanstack/react-query\";\n\nimport { CheckboxGroupProps } from \"antd/lib/checkbox\";\nimport {\n    BaseRecord,\n    GetListResponse,\n    HttpError,\n    UseSelectProps,\n    useSelect,\n    BaseKey,\n} from \"@pankod/refine-core\";\n\nexport type UseCheckboxGroupReturnType<TData extends BaseRecord = BaseRecord> =\n    {\n        checkboxGroupProps: CheckboxGroupProps;\n        queryResult: QueryObserverResult<GetListResponse<TData>>;\n    };\n\n/**\n * `useCheckboxGroup` hook allows you to manage an Ant Design {@link https://ant.design/components/checkbox/#components-checkbox-demo-group Checkbox.Group} component when records in a resource needs to be used as checkbox options.\n *\n * @see {@link https://refine.dev/docs/ui-framewors/antd/hooks/field/useCheckboxGroup} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n *\n */\n\ntype UseCheckboxGroupProps<TData, TError> = Omit<\n    UseSelectProps<TData, TError>,\n    \"defaultValue\"\n> & {\n    /**\n     * Sets the default value\n     */\n    defaultValue?: BaseKey[];\n};\n\nexport const useCheckboxGroup = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    sort,\n    filters,\n    optionLabel,\n    optionValue,\n    queryOptions,\n    fetchSize,\n    pagination,\n    liveMode,\n    defaultValue,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: UseCheckboxGroupProps<TData, TError>): UseCheckboxGroupReturnType<TData> => {\n    const { queryResult, options } = useSelect({\n        resource,\n        sort,\n        filters,\n        optionLabel,\n        optionValue,\n        queryOptions,\n        fetchSize,\n        pagination,\n        liveMode,\n        defaultValue,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n    return {\n        checkboxGroupProps: {\n            options,\n            defaultValue,\n        },\n        queryResult,\n    };\n};\n","import { QueryObserverResult } from \"@tanstack/react-query\";\n\nimport { RadioGroupProps } from \"antd/lib/radio\";\nimport {\n    BaseKey,\n    BaseRecord,\n    GetListResponse,\n    HttpError,\n    useSelect,\n    UseSelectProps,\n} from \"@pankod/refine-core\";\n\nexport type UseRadioGroupReturnType<TData extends BaseRecord = BaseRecord> = {\n    radioGroupProps: RadioGroupProps;\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n};\n\n/**\n * `useRadioGroup` hook allows you to manage an Ant Design {@link https://ant.design/components/radio/#components-radio-demo-radiogroup-with-name Radio.Group} component when records in a resource needs to be used as radio options.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/field/useRadioGroup} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n *\n */\n\ntype UseRadioGroupProps<TData, TError> = Omit<\n    UseSelectProps<TData, TError>,\n    \"defaultValue\"\n> & {\n    /**\n     * Sets the default value\n     */\n    defaultValue?: BaseKey;\n};\n\nexport const useRadioGroup = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    sort,\n    filters,\n    optionLabel,\n    optionValue,\n    queryOptions,\n    fetchSize,\n    pagination,\n    liveMode,\n    defaultValue,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: UseRadioGroupProps<TData, TError>): UseRadioGroupReturnType<TData> => {\n    const { queryResult, options } = useSelect({\n        resource,\n        sort,\n        filters,\n        optionLabel,\n        optionValue,\n        queryOptions,\n        fetchSize,\n        pagination,\n        liveMode,\n        defaultValue,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    return {\n        radioGroupProps: {\n            options,\n            defaultValue,\n        },\n        queryResult,\n    };\n};\n","import React from \"react\";\nimport { ButtonProps, notification, UploadProps, Progress } from \"antd\";\nimport {\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n    BaseRecord,\n    HttpError,\n    ResourceRouterParams,\n    useImport as useImportCore,\n    UseImportReturnType,\n    ImportOptions,\n} from \"@pankod/refine-core\";\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/import/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    metaData,\n    dataProviderName,\n    onProgress: onProgressFromProp,\n}: ImportOptions<TItem, TVariables, TData> = {}): Omit<\n    UseImportReturnType<TData, TVariables, TError>,\n    \"handleChange\" | \"inputProps\"\n> & {\n    uploadProps: UploadProps;\n    buttonProps: ButtonProps;\n} => {\n    const t = useTranslate();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const { useParams } = useRouterContext();\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    const { name: resource } = resourceWithRoute(\n        resourceName ?? routeResourceName,\n    );\n\n    const { mutationResult, isLoading, handleChange } = useImportCore<\n        TItem,\n        TData,\n        TError,\n        TVariables\n    >({\n        resourceName,\n        mapData,\n        paparseOptions,\n        batchSize,\n        metaData,\n        dataProviderName,\n        onFinish,\n        onProgress:\n            onProgressFromProp ??\n            (({ totalAmount, processedAmount }) => {\n                if (totalAmount > 0 && processedAmount > 0) {\n                    const description = (\n                        <div\n                            style={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"space-between\",\n                                marginTop: \"-7px\",\n                            }}\n                        >\n                            <Progress\n                                type=\"circle\"\n                                percent={Math.floor(\n                                    (processedAmount / totalAmount) * 100,\n                                )}\n                                width={50}\n                                strokeColor=\"#1890ff\"\n                                status=\"normal\"\n                            />\n                            <span style={{ marginLeft: 8, width: \"100%\" }}>\n                                {t(\n                                    \"notifications.importProgress\",\n                                    {\n                                        processed: processedAmount,\n                                        total: totalAmount,\n                                    },\n                                    `Importing: ${processedAmount}/${totalAmount}`,\n                                )}\n                            </span>\n                        </div>\n                    );\n\n                    notification.open({\n                        description,\n                        message: null,\n                        key: `${resource}-import`,\n                        duration: 0,\n                    });\n\n                    if (processedAmount >= totalAmount) {\n                    }\n\n                    if (processedAmount === totalAmount) {\n                        setTimeout(() => {\n                            notification.destroy(`${resource}-import`);\n                        }, 4500);\n                    }\n                }\n            }),\n    });\n\n    return {\n        uploadProps: {\n            onChange: handleChange,\n            beforeUpload: () => false,\n            showUploadList: false,\n            accept: \".csv\",\n        },\n        buttonProps: {\n            type: \"default\",\n            loading: isLoading,\n        },\n        mutationResult,\n        isLoading,\n    };\n};\n","import { Children, createElement, Fragment } from \"react\";\nimport { QueryObserverResult } from \"@tanstack/react-query\";\nimport { ListProps, FormProps, Form, Grid } from \"antd\";\n\nimport {\n    BaseRecord,\n    CrudFilters,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    LiveModeProps,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType,\n} from \"@pankod/refine-core\";\nimport { useLiveMode } from \"@pankod/refine-core\";\nimport { PaginationLink } from \"@hooks/table/useTable/paginationLink\";\nimport { PaginationConfig } from \"antd/lib/pagination\";\n\nexport type useSimpleListProps<TData, TError, TSearchVariables> =\n    ListProps<TData> &\n        useTablePropsCore<TData, TError> & {\n            onSearch?: (\n                data: TSearchVariables,\n            ) => CrudFilters | Promise<CrudFilters>;\n        } & SuccessErrorNotification &\n        LiveModeProps;\n\nexport type useSimpleListReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TSearchVariables = unknown,\n> = {\n    listProps: ListProps<TData>;\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    searchFormProps: FormProps<TSearchVariables>;\n    filters: CrudFilters;\n    setFilters: useTableReturnType<TData>[\"setFilters\"];\n};\n\n/**\n * By using `useSimpleList` you get props for your records from API in accordance with Ant Design {@link https://ant.design/components/list/ `<List>`} component.\n * All features such as pagination, sorting come out of the box.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/list/useSimpleList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TSearchVariables - Antd form values\n *\n */\n\nexport const useSimpleList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    {\n        resource: resourceFromProp,\n        initialCurrent,\n        initialPageSize,\n        hasPagination = true,\n        initialSorter,\n        permanentSorter,\n        initialFilter,\n        permanentFilter,\n        defaultSetFilterBehavior,\n        onSearch,\n        queryOptions,\n        syncWithLocation: syncWithLocationProp,\n        successNotification,\n        errorNotification,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n        ...listProps\n    }: useSimpleListProps<TData, TError, TSearchVariables> = {\n        hasPagination: true,\n    },\n): useSimpleListReturnType<TData, TSearchVariables> => {\n    const {\n        sorter,\n        filters,\n        current,\n        pageSize,\n        setFilters,\n        setCurrent,\n        setPageSize,\n        createLinkForSyncWithLocation,\n        tableQueryResult: queryResult,\n    } = useTableCore({\n        resource: resourceFromProp,\n        initialSorter,\n        permanentSorter,\n        initialFilter,\n        permanentFilter,\n        defaultSetFilterBehavior,\n        initialCurrent: listProps.pagination\n            ? listProps.pagination.current\n            : initialCurrent,\n        initialPageSize: listProps.pagination\n            ? listProps.pagination.pageSize\n            : initialPageSize,\n        queryOptions,\n        successNotification,\n        errorNotification,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        syncWithLocation: syncWithLocationProp,\n        dataProviderName,\n        // @ts-expect-error currently boolean casting is not supported in overloaded types.\n        hasPagination: hasPagination,\n    });\n\n    const breakpoint = Grid.useBreakpoint();\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const [form] = Form.useForm<TSearchVariables>();\n\n    const { data, isFetched, isLoading } = queryResult;\n\n    const onChange = (page: number, pageSize?: number): void => {\n        if (hasPagination) {\n            setCurrent(page);\n            setPageSize(pageSize || 10);\n        }\n    };\n\n    const onFinish = async (values: TSearchVariables) => {\n        if (onSearch) {\n            const searchFilters = await onSearch(values);\n            if (hasPagination) {\n                setCurrent?.(1);\n            }\n            return setFilters(searchFilters);\n        }\n    };\n\n    const antdPagination = (): false | PaginationConfig => {\n        if (hasPagination) {\n            return {\n                itemRender: (page, type, element) => {\n                    const link = createLinkForSyncWithLocation({\n                        pagination: {\n                            pageSize,\n                            current: page,\n                        },\n                        sorter,\n                        filters,\n                    });\n\n                    if (type === \"page\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: `${page}`,\n                        });\n                    }\n                    if (type === \"next\" || type === \"prev\") {\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element: element,\n                        });\n                    }\n\n                    if (type === \"jump-next\" || type === \"jump-prev\") {\n                        const elementChildren = (element as React.ReactElement)\n                            ?.props?.children;\n\n                        return createElement(PaginationLink, {\n                            to: link,\n                            element:\n                                Children.count(elementChildren) > 1\n                                    ? createElement(\n                                          Fragment,\n                                          {},\n                                          elementChildren,\n                                      )\n                                    : elementChildren,\n                        });\n                    }\n\n                    return element;\n                },\n                pageSize,\n                current,\n                simple: !breakpoint.sm,\n                total: data?.total,\n                onChange,\n                ...listProps.pagination,\n            };\n        }\n\n        return false;\n    };\n\n    return {\n        searchFormProps: {\n            form,\n            onFinish,\n        },\n        listProps: {\n            ...listProps,\n            dataSource: data?.data,\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            pagination: antdPagination(),\n        },\n        queryResult,\n        filters,\n        setFilters,\n    };\n};\n","import React from \"react\";\nimport {\n    useMenu as useMenuCore,\n    ITreeMenu,\n    useRefineContext,\n    useTranslate,\n} from \"@pankod/refine-core\";\nimport { DashboardOutlined } from \"@ant-design/icons\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/resource/useMenu} for more details.\n * @deprecated use {@link https://refine.dev/docs/core/hooks/ui/useMenu} instead.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const values = useMenuCore();\n    const translate = useTranslate();\n    const { hasDashboard } = useRefineContext();\n\n    const menuValues = React.useMemo(() => {\n        return {\n            ...values,\n            menuItems: [\n                ...(hasDashboard\n                    ? [\n                          {\n                              name: \"Dashboard\",\n                              icon: <DashboardOutlined />,\n                              route: `/`,\n                              key: \"dashboard\",\n                              label: translate(\"dashboard.title\", \"Dashboard\"),\n                              children: [],\n                          },\n                      ]\n                    : []),\n                ...values.menuItems,\n            ],\n            defaultOpenKeys: values.selectedKey\n                .split(\"/\")\n                .filter((x) => x !== \"\"),\n        };\n    }, [values]);\n\n    return menuValues;\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\n\nexport type UseFileUploadStateType = () => {\n    isLoading: boolean;\n    onChange: (info: UploadChangeParam) => void;\n};\n\nexport const useFileUploadState: UseFileUploadStateType = () => {\n    const [isLoading, setIsloading] = useState(false);\n\n    const onChange = useCallback((info: UploadChangeParam) => {\n        const fileListLoadings = mapStatusToLoading(info.fileList);\n\n        if (fileListLoadings.includes(true)) {\n            setIsloading(true);\n        } else {\n            setIsloading(false);\n        }\n    }, []);\n\n    return useMemo(() => ({ isLoading, onChange }), [isLoading]);\n};\n\nconst mapStatusToLoading = (files: UploadChangeParam[\"fileList\"]) => {\n    return files.map((file) => {\n        switch (file.status) {\n            case \"uploading\":\n                return true;\n            default:\n                return false;\n        }\n    });\n};\n","import { ModalProps } from \"../../../components/antd\";\nimport {\n    useModal as useCoreModal,\n    useModalReturnType as useCoreModelReturnType,\n} from \"@pankod/refine-core\";\n\nexport type useModalReturnType = {\n    modalProps: ModalProps;\n} & Omit<useCoreModelReturnType, \"visible\">;\n\nexport type useModalProps = {\n    /**\n     * Default props for Ant Design {@link https://ant.design/components/modal/ `<Modal>`} component.\n     */\n    modalProps?: ModalProps;\n};\n\n/**\n * By using `useModal` you get props for your records from API in accordance with Ant Design {@link https://ant.design/components/modal/ `<Modal>`} component.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/hooks/ui/useModal} for more details.\n */\nexport const useModal = ({\n    modalProps = {},\n}: useModalProps = {}): useModalReturnType => {\n    const { show, close, visible } = useCoreModal({\n        defaultVisible: modalProps.open,\n    });\n\n    return {\n        modalProps: {\n            ...modalProps,\n            onCancel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                modalProps.onCancel?.(e);\n                close();\n            },\n            open: visible,\n            visible,\n        },\n        show,\n        close,\n    };\n};\n","import React from \"react\";\nimport { NotificationProvider } from \"@pankod/refine-core\";\nimport { notification } from \"antd\";\n\nimport { UndoableNotification } from \"@components/undoableNotification\";\n\nexport const notificationProvider: NotificationProvider = {\n    open: ({\n        key,\n        message,\n        description,\n        type,\n        cancelMutation,\n        undoableTimeout,\n    }) => {\n        if (type === \"progress\") {\n            notification.open({\n                key,\n                description: (\n                    <UndoableNotification\n                        notificationKey={key}\n                        message={message}\n                        cancelMutation={cancelMutation}\n                        undoableTimeout={undoableTimeout}\n                    />\n                ),\n                message: null,\n                duration: 0,\n                closeIcon: <></>,\n            });\n        } else {\n            notification.open({\n                key,\n                description: message,\n                message: description ?? null,\n                type,\n            });\n        }\n    },\n    close: (key) => notification.destroy(key),\n};\n","import React from \"react\";\nimport { Button, notification, Progress } from \"antd\";\nimport { OpenNotificationParams } from \"@pankod/refine-core\";\nimport { UndoOutlined } from \"@ant-design/icons\";\n\nexport type UndoableNotificationProps = {\n    notificationKey: OpenNotificationParams[\"key\"];\n    message: OpenNotificationParams[\"message\"];\n    cancelMutation: OpenNotificationParams[\"cancelMutation\"];\n    undoableTimeout: OpenNotificationParams[\"undoableTimeout\"];\n};\n\nexport const UndoableNotification: React.FC<UndoableNotificationProps> = ({\n    notificationKey,\n    message,\n    cancelMutation,\n    undoableTimeout,\n}) => (\n    <div\n        style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginTop: \"-7px\",\n        }}\n    >\n        <Progress\n            type=\"circle\"\n            percent={(undoableTimeout ?? 0) * 20}\n            format={(time) => time && time / 20}\n            width={50}\n            strokeColor=\"#1890ff\"\n            status=\"normal\"\n        />\n        <span style={{ marginLeft: 8, width: \"100%\" }}>{message}</span>\n        <Button\n            style={{ flexShrink: 0 }}\n            onClick={() => {\n                cancelMutation?.();\n                notification.destroy(notificationKey ?? \"\");\n            }}\n            disabled={undoableTimeout === 0}\n            icon={<UndoOutlined />}\n        ></Button>\n    </div>\n);\n","export {\n    Affix,\n    Anchor,\n    AutoComplete,\n    Alert,\n    Avatar,\n    BackTop,\n    Badge,\n    Breadcrumb as AntdBreadcrumb,\n    Button,\n    Calendar,\n    Card,\n    Collapse,\n    Carousel,\n    Cascader,\n    Checkbox,\n    Col,\n    ConfigProvider,\n    DatePicker,\n    Descriptions,\n    Divider,\n    Dropdown,\n    Drawer,\n    Empty,\n    FloatButton,\n    Form,\n    Grid,\n    Input,\n    Image,\n    InputNumber,\n    Layout as AntdLayout,\n    List as AntdList,\n    message,\n    Menu,\n    Mentions,\n    Modal,\n    Statistic,\n    notification,\n    Pagination,\n    Popconfirm,\n    Popover,\n    Progress,\n    Radio,\n    Rate,\n    Result,\n    Row,\n    Segmented,\n    Select,\n    Skeleton,\n    Slider,\n    Space,\n    Spin,\n    Steps,\n    Switch,\n    Table,\n    TimePicker,\n    Transfer,\n    Tree,\n    TreeSelect,\n    Tabs,\n    Tag,\n    Timeline,\n    Tooltip,\n    Tour,\n    Typography,\n    Upload,\n    version,\n    theme,\n    App,\n    QRCode,\n    Watermark,\n} from \"antd\";\n\nexport type {\n    AffixProps,\n    AnchorProps,\n    AnchorLinkProps,\n    AutoCompleteProps,\n    AlertProps,\n    AvatarProps,\n    BackTopProps,\n    BadgeProps,\n    BreadcrumbProps as AntdBreadcrumbProps,\n    BreadcrumbItemProps,\n    ButtonProps,\n    CalendarProps,\n    CardProps,\n    CollapseProps,\n    CollapsePanelProps,\n    CarouselProps,\n    CascaderProps,\n    CheckboxProps,\n    CheckboxOptionType,\n    ColProps,\n    DatePickerProps,\n    DescriptionsProps,\n    DividerProps,\n    DropDownProps,\n    DrawerProps,\n    EmptyProps,\n    FloatButtonProps,\n    FormInstance,\n    FormProps,\n    FormItemProps,\n    InputProps,\n    ImageProps,\n    InputNumberProps,\n    LayoutProps,\n    ListProps as AntdListProps,\n    MessageArgsProps,\n    MentionProps,\n    MenuProps,\n    MenuTheme,\n    SubMenuProps,\n    MenuItemProps,\n    ModalProps,\n    ModalFuncProps,\n    StatisticProps,\n    PaginationProps,\n    PopconfirmProps,\n    PopoverProps,\n    ProgressProps,\n    RadioProps,\n    RadioChangeEvent,\n    RadioGroupProps,\n    RateProps,\n    ResultProps,\n    RowProps,\n    SelectProps,\n    SkeletonProps,\n    SliderSingleProps,\n    SpaceProps,\n    SpinProps,\n    StepProps,\n    StepsProps,\n    SwitchProps,\n    TableProps,\n    TablePaginationConfig,\n    TableColumnGroupType,\n    TableColumnType,\n    TableColumnProps,\n    TransferProps,\n    TreeSelectProps,\n    TreeProps,\n    TreeNodeProps,\n    TabsProps,\n    TabPaneProps,\n    TagProps,\n    TagType,\n    TimelineProps,\n    TimelineItemProps,\n    TooltipProps,\n    TourProps,\n    TypographyProps,\n    UploadProps,\n    WatermarkProps,\n    QRCodeProps,\n    QRPropsCanvas,\n} from \"antd\";\n\nexport type { TitleProps } from \"antd/lib/typography/Title\";\n","// Icons\nimport * as Icons from \"@ant-design/icons\";\nexport { default as Icon } from \"@ant-design/icons\";\nexport { Icons };\n\n// Layout\nexport { Layout } from \"./layout\";\nexport { Header } from \"./layout/header\";\nexport { Sider } from \"./layout/sider\";\nexport { Title } from \"./layout/title\";\nexport * from \"./layout/types\";\n\nexport * from \"./buttons\";\nexport * from \"./crud\";\nexport * from \"./fields\";\nexport * from \"./table\";\nexport * from \"./pages\";\nexport * from \"./breadcrumb\";\nexport * from \"./pageHeader\";\n","import React from \"react\";\nimport { Grid, Layout as AntdLayout } from \"antd\";\n\nimport { Sider as DefaultSider } from \"./sider\";\nimport { Header as DefaultHeader } from \"./header\";\nimport { RefineLayoutLayoutProps } from \"./types\";\n\nexport const Layout: React.FC<RefineLayoutLayoutProps> = ({\n    children,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n}) => {\n    const breakpoint = Grid.useBreakpoint();\n    const SiderToRender = Sider ?? DefaultSider;\n    const HeaderToRender = Header ?? DefaultHeader;\n    const isSmall = typeof breakpoint.sm === \"undefined\" ? true : breakpoint.sm;\n\n    return (\n        <AntdLayout style={{ minHeight: \"100vh\" }}>\n            <SiderToRender />\n            <AntdLayout>\n                <HeaderToRender />\n                <AntdLayout.Content>\n                    <div\n                        style={{\n                            minHeight: 360,\n                            padding: isSmall ? 24 : 12,\n                        }}\n                    >\n                        {children}\n                    </div>\n                    {OffLayoutArea && <OffLayoutArea />}\n                </AntdLayout.Content>\n                {Footer && <Footer />}\n            </AntdLayout>\n        </AntdLayout>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Grid, ConfigProvider, Drawer, Button } from \"antd\";\nimport {\n    DashboardOutlined,\n    LogoutOutlined,\n    UnorderedListOutlined,\n    BarsOutlined,\n} from \"@ant-design/icons\";\nimport {\n    useTranslate,\n    useLogout,\n    useTitle,\n    CanAccess,\n    ITreeMenu,\n    useIsExistAuthentication,\n    useRouterContext,\n    useMenu,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport { Title as DefaultTitle } from \"@components\";\n\nimport { drawerButtonStyles } from \"./styles\";\nimport { RefineLayoutSiderProps } from \"../types\";\n\nconst { SubMenu } = Menu;\n\nexport const Sider: React.FC<RefineLayoutSiderProps> = ({ render }) => {\n    const [collapsed, setCollapsed] = useState<boolean>(false);\n    const [drawerOpen, setDrawerOpen] = useState<boolean>(false);\n    const isExistAuthentication = useIsExistAuthentication();\n    const { Link } = useRouterContext();\n    const { mutate: mutateLogout } = useLogout();\n    const Title = useTitle();\n    const translate = useTranslate();\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu();\n    const breakpoint = Grid.useBreakpoint();\n    const { hasDashboard } = useRefineContext();\n\n    const isMobile =\n        typeof breakpoint.lg === \"undefined\" ? false : !breakpoint.lg;\n\n    const RenderToTitle = Title ?? DefaultTitle;\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const { icon, label, route, name, children, parentName } = item;\n\n            if (children.length > 0) {\n                return (\n                    <CanAccess\n                        key={route}\n                        resource={name.toLowerCase()}\n                        action=\"list\"\n                        params={{\n                            resource: item,\n                        }}\n                    >\n                        <SubMenu\n                            key={route}\n                            icon={icon ?? <UnorderedListOutlined />}\n                            title={label}\n                        >\n                            {renderTreeView(children, selectedKey)}\n                        </SubMenu>\n                    </CanAccess>\n                );\n            }\n            const isSelected = route === selectedKey;\n            const isRoute = !(\n                parentName !== undefined && children.length === 0\n            );\n            return (\n                <CanAccess\n                    key={route}\n                    resource={name.toLowerCase()}\n                    action=\"list\"\n                    params={{\n                        resource: item,\n                    }}\n                >\n                    <Menu.Item\n                        key={route}\n                        style={{\n                            fontWeight: isSelected ? \"bold\" : \"normal\",\n                        }}\n                        icon={icon ?? (isRoute && <UnorderedListOutlined />)}\n                    >\n                        <Link to={route}>{label}</Link>\n                        {!collapsed && isSelected && (\n                            <div className=\"ant-menu-tree-arrow\" />\n                        )}\n                    </Menu.Item>\n                </CanAccess>\n            );\n        });\n    };\n\n    const logout = isExistAuthentication && (\n        <Menu.Item\n            key=\"logout\"\n            onClick={() => mutateLogout()}\n            icon={<LogoutOutlined />}\n        >\n            {translate(\"buttons.logout\", \"Logout\")}\n        </Menu.Item>\n    );\n\n    const dashboard = hasDashboard ? (\n        <Menu.Item\n            key=\"dashboard\"\n            style={{\n                fontWeight: selectedKey === \"/\" ? \"bold\" : \"normal\",\n            }}\n            icon={<DashboardOutlined />}\n        >\n            <Link to=\"/\">{translate(\"dashboard.title\", \"Dashboard\")}</Link>\n            {!collapsed && selectedKey === \"/\" && (\n                <div className=\"ant-menu-tree-arrow\" />\n            )}\n        </Menu.Item>\n    ) : null;\n\n    const items = renderTreeView(menuItems, selectedKey);\n\n    const renderSider = () => {\n        if (render) {\n            return render({\n                dashboard,\n                items,\n                logout,\n                collapsed,\n            });\n        }\n        return (\n            <>\n                {dashboard}\n                {items}\n                {logout}\n            </>\n        );\n    };\n\n    const renderMenu = () => {\n        return (\n            <>\n                <Menu\n                    theme=\"dark\"\n                    selectedKeys={[selectedKey]}\n                    defaultOpenKeys={defaultOpenKeys}\n                    mode=\"inline\"\n                    onClick={() => {\n                        setDrawerOpen(false);\n                        if (!breakpoint.lg) {\n                            setCollapsed(true);\n                        }\n                    }}\n                >\n                    {renderSider()}\n                </Menu>\n            </>\n        );\n    };\n\n    const renderDrawerSider = () => {\n        return (\n            <>\n                <Drawer\n                    open={drawerOpen}\n                    onClose={() => setDrawerOpen(false)}\n                    placement=\"left\"\n                    closable={false}\n                    width={200}\n                    bodyStyle={{\n                        padding: 0,\n                    }}\n                    maskClosable={true}\n                >\n                    <Layout>\n                        <Layout.Sider\n                            style={{ height: \"100vh\", overflow: \"hidden\" }}\n                        >\n                            <RenderToTitle collapsed={false} />\n                            {renderMenu()}\n                        </Layout.Sider>\n                    </Layout>\n                </Drawer>\n                <Button\n                    style={drawerButtonStyles}\n                    size=\"large\"\n                    onClick={() => setDrawerOpen(true)}\n                    icon={<BarsOutlined />}\n                ></Button>\n            </>\n        );\n    };\n\n    const renderContent = () => {\n        if (isMobile) {\n            return renderDrawerSider();\n        }\n\n        return (\n            <Layout.Sider\n                collapsible\n                collapsed={collapsed}\n                onCollapse={(collapsed: boolean): void =>\n                    setCollapsed(collapsed)\n                }\n                collapsedWidth={80}\n                breakpoint=\"lg\"\n            >\n                <RenderToTitle collapsed={collapsed} />\n                {renderMenu()}\n            </Layout.Sider>\n        );\n    };\n\n    return (\n        <ConfigProvider\n            theme={{\n                components: {\n                    Menu: {\n                        colorItemBg: \"transparent\",\n                        colorItemText: \"#fff\",\n                        colorItemTextSelected: \"#fff\",\n                        colorItemBgSelected: \"transparent\",\n                        colorItemTextHover: \"#fff\",\n                    },\n                },\n            }}\n        >\n            {renderContent()}\n        </ConfigProvider>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const drawerButtonStyles: CSSProperties = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999,\n};\n","import React from \"react\";\nimport { Layout as AntdLayout, Typography, Avatar, Space } from \"antd\";\nimport { useGetIdentity } from \"@pankod/refine-core\";\nimport { RefineLayoutHeaderProps } from \"../types\";\nconst { Text } = Typography;\n\nexport const Header: React.FC<RefineLayoutHeaderProps> = () => {\n    const { data: user } = useGetIdentity();\n\n    const shouldRenderHeader = user && (user.name || user.avatar);\n\n    return shouldRenderHeader ? (\n        <AntdLayout.Header\n            style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                padding: \"0px 24px\",\n                height: \"64px\",\n            }}\n        >\n            <Space>\n                {user.name && (\n                    <Text ellipsis strong>\n                        {user.name}\n                    </Text>\n                )}\n                {user.avatar && (\n                    <Avatar size=\"large\" src={user?.avatar} alt={user?.name} />\n                )}\n            </Space>\n        </AntdLayout.Header>\n    ) : null;\n};\n","import React from \"react\";\nimport { useRouterContext, TitleProps } from \"@pankod/refine-core\";\n\nexport const Title: React.FC<TitleProps> = ({ collapsed }) => {\n    const { Link } = useRouterContext();\n\n    return (\n        <Link to=\"/\">\n            {collapsed ? (\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <img\n                        src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\"\n                        alt=\"Refine\"\n                        style={{\n                            margin: \"0 auto\",\n                            padding: \"12px 0\",\n                            maxHeight: \"65.5px\",\n                        }}\n                    />\n                </div>\n            ) : (\n                <img\n                    src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                    alt=\"Refine\"\n                    style={{\n                        width: \"200px\",\n                        padding: \"12px 24px\",\n                    }}\n                />\n            )}\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\nimport {\n    useNavigation,\n    useTranslate,\n    useCan,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { CreateButtonProps } from \"../types\";\n\n/**\n * <CreateButton> uses Ant Design's {@link https://ant.design/components/button/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#create `create`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful to redirect the app to the create page route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/create-button} for more details.\n */\nexport const CreateButton: React.FC<CreateButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const { createUrl: generateCreateUrl } = useNavigation();\n\n    const { resourceName, resource } = useResource({\n        resourceName: propResourceName,\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n    });\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"create\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const createUrl = generateCreateUrl(propResourceName ?? resource.route!);\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={createUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<PlusSquareOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.CreateButton}\n                {...rest}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.create\", \"Create\"))}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { EditButtonProps } from \"../types\";\n\n/**\n * `<EditButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#edit `edit`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the edit page with the record id route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/edit-button} for more details.\n */\nexport const EditButton: React.FC<EditButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const translate = useTranslate();\n\n    const { editUrl: generateEditUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const { resourceName, id, resource } = useResource({\n        resourceName: propResourceName,\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"edit\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const editUrl = generateEditUrl(propResourceName ?? resource.route!, id!);\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={editUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<EditOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.EditButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.edit\", \"Edit\"))}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button, Popconfirm } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {\n    useDelete,\n    useTranslate,\n    useMutationMode,\n    useCan,\n    useResource,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { DeleteButtonProps } from \"../types\";\n\n/**\n * `<DeleteButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} and {@link https://ant.design/components/button/ `<Popconfirm>`} components.\n * When you try to delete something, a pop-up shows up and asks for confirmation. When confirmed it executes the `useDelete` method provided by your `dataProvider`.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/delete-button} for more details.\n */\nexport const DeleteButton: React.FC<DeleteButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    onSuccess,\n    mutationMode: mutationModeProp,\n    children,\n    successNotification,\n    errorNotification,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    metaData,\n    dataProviderName,\n    confirmTitle,\n    confirmOkText,\n    confirmCancelText,\n    invalidates,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const translate = useTranslate();\n\n    const { resourceName, id, resource } = useResource({\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n        resourceName: propResourceName,\n        recordItemId,\n    });\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const { mutate, isLoading, variables } = useDelete();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"delete\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Popconfirm\n            key=\"delete\"\n            okText={confirmOkText ?? translate(\"buttons.delete\", \"Delete\")}\n            cancelText={\n                confirmCancelText ?? translate(\"buttons.cancel\", \"Cancel\")\n            }\n            okType=\"danger\"\n            title={\n                confirmTitle ?? translate(\"buttons.confirm\", \"Are you sure?\")\n            }\n            okButtonProps={{ disabled: isLoading }}\n            onConfirm={(): void => {\n                mutate(\n                    {\n                        id: id || \"\",\n                        resource: resourceName,\n                        mutationMode,\n                        successNotification,\n                        errorNotification,\n                        metaData,\n                        dataProviderName,\n                        invalidates,\n                    },\n                    {\n                        onSuccess: (value) => {\n                            onSuccess && onSuccess(value);\n                        },\n                    },\n                );\n            }}\n            disabled={data?.can === false}\n        >\n            <Button\n                danger\n                loading={id === variables?.id && isLoading}\n                icon={<DeleteOutlined />}\n                disabled={data?.can === false}\n                data-testid={RefineButtonTestIds.DeleteButton}\n                {...rest}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.delete\", \"Delete\"))}\n            </Button>\n        </Popconfirm>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { RedoOutlined } from \"@ant-design/icons\";\nimport { useOne, useTranslate, useResource } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { RefreshButtonProps } from \"../types\";\n\n/**\n * `<RefreshButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component\n * to update the data shown on the page via the {@link https://refine.dev/docs/core/hooks/data/useOne `useOne`} method provided by your dataProvider.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/refresh-button} for more details.\n */\nexport const RefreshButton: React.FC<RefreshButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    metaData,\n    dataProviderName,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    const { resourceName, id } = useResource({\n        resourceName: propResourceName,\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const { refetch, isFetching } = useOne({\n        resource: resourceName,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: false,\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    return (\n        <Button\n            // TODO: fix any type\n            onClick={(e) => (onClick ? onClick(e as any) : refetch())}\n            icon={<RedoOutlined spin={isFetching} />}\n            data-testid={RefineButtonTestIds.RefreshButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.refresh\", \"Refresh\"))}\n        </Button>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { EyeOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { ShowButtonProps } from \"../types\";\n\n/**\n * `<ShowButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#show `show`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the show page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/show-button} for more details.\n */\nexport const ShowButton: React.FC<ShowButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { showUrl: generateShowUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { resourceName, id, resource } = useResource({\n        resourceName: propResourceName,\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"show\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const showUrl = generateShowUrl(propResourceName ?? resource.route!, id!);\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={showUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<EyeOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.ShowButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.show\", \"Show\"))}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { BarsOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    userFriendlyResourceName,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { ListButtonProps } from \"../types\";\n\n/**\n * `<ListButton>` is using Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses the  {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#list `list`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the list page route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/list-button} for more details.\n */\nexport const ListButton: React.FC<ListButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { listUrl: generateListUrl } = useNavigation();\n    const { Link } = useRouterContext();\n    const translate = useTranslate();\n\n    const { resourceName, resource } = useResource({\n        resourceName: propResourceName,\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n    });\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"list\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const listUrl = generateListUrl(propResourceName ?? resource.route!);\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={listUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<BarsOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.ListButton}\n                {...rest}\n            >\n                {!hideText &&\n                    (children ??\n                        translate(\n                            `${resourceName}.titles.list`,\n                            userFriendlyResourceName(\n                                resource.label ?? resourceName,\n                                \"plural\",\n                            ),\n                        ))}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { ExportOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { ExportButtonProps } from \"../types\";\n\n/**\n * `<ExportButton>` is an Ant Design {@link https://ant.design/components/button/ `<Button>`} with a default export icon and a default text with \"Export\".\n * It only has presentational value.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/export-button} for more details.\n */\nexport const ExportButton: React.FC<ExportButtonProps> = ({\n    hideText = false,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Button\n            type=\"default\"\n            icon={<ExportOutlined />}\n            data-testid={RefineButtonTestIds.ExportButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.export\", \"Export\"))}\n        </Button>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { SaveOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { SaveButtonProps } from \"../types\";\n\n/**\n * `<SaveButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} component.\n * It uses it for presantation purposes only. Some of the hooks that refine has adds features to this button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/save-button} for more details.\n */\nexport const SaveButton: React.FC<SaveButtonProps> = ({\n    hideText = false,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Button\n            type=\"primary\"\n            icon={<SaveOutlined />}\n            data-testid={RefineButtonTestIds.SaveButton}\n            {...rest}\n        >\n            {!hideText && (children ?? translate(\"buttons.save\", \"Save\"))}\n        </Button>\n    );\n};\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { CloneButtonProps } from \"../types\";\n\n/**\n * `<CloneButton>` uses Ant Design's {@link https://ant.design/components/button/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#clone `clone`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation useNavigation} under the hood.\n * It can be useful when redirecting the app to the create page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/clone-button} for more details.\n */\nexport const CloneButton: React.FC<CloneButtonProps> = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName: propResourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { cloneUrl: generateCloneUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { id, resourceName, resource } = useResource({\n        resourceNameOrRouteName: propResourceNameOrRouteName,\n        recordItemId,\n        resourceName: propResourceName,\n    });\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"create\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const createButtonDisabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const cloneUrl = generateCloneUrl(propResourceName ?? resource.route!, id!);\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={cloneUrl}\n            replace={false}\n            onClick={(e: React.PointerEvent<HTMLButtonElement>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n        >\n            <Button\n                icon={<PlusSquareOutlined />}\n                disabled={data?.can === false}\n                title={createButtonDisabledTitle()}\n                data-testid={RefineButtonTestIds.CloneButton}\n                {...rest}\n            >\n                {!hideText && (children ?? translate(\"buttons.clone\", \"Clone\"))}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Button, Upload } from \"antd\";\nimport { ImportOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\n\nimport { ImportButtonProps } from \"../types\";\n\n/**\n * `<ImportButton>` is compatible with the {@link https://refine.dev/docs/ui-frameworks/antd/hooks/import/useImport `useImport`} hook and is meant to be used as it's upload button.\n * It uses Ant Design's {@link https://ant.design/components/button/ `<Button>`} and {@link https://ant.design/components/upload/ `<Upload>`} components.\n * It wraps a `<Button>` component with an `<Upload>` component and accepts properties for `<Button>` and `<Upload>` components separately.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/buttons/import-button} for more details.\n */\nexport const ImportButton: React.FC<ImportButtonProps> = ({\n    uploadProps,\n    buttonProps,\n    hideText = false,\n    children,\n}) => {\n    const translate = useTranslate();\n\n    return (\n        <Upload {...uploadProps}>\n            <Button\n                icon={<ImportOutlined />}\n                data-testid={RefineButtonTestIds.ImportButton}\n                {...buttonProps}\n            >\n                {!hideText &&\n                    (children ?? translate(\"buttons.import\", \"Import\"))}\n            </Button>\n        </Upload>\n    );\n};\n","import React from \"react\";\nimport { Space } from \"antd\";\nimport {\n    useResourceWithRoute,\n    useRouterContext,\n    useTranslate,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport { Breadcrumb, CreateButton, PageHeader } from \"@components\";\nimport { ListProps } from \"../types\";\n\n/**\n * `<List>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/list} for more details.\n */\nexport const List: React.FC<ListProps> = ({\n    canCreate,\n    title,\n    children,\n    createButtonProps,\n    resource: resourceFromProps,\n    wrapperProps,\n    contentProps,\n    headerProps,\n    breadcrumb: breadcrumbFromProps,\n    headerButtonProps,\n    headerButtons,\n}) => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const translate = useTranslate();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const isCreateButtonVisible =\n        canCreate ?? (resource.canCreate || createButtonProps);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const defaultExtra = isCreateButtonVisible ? (\n        <CreateButton\n            size=\"middle\"\n            resourceNameOrRouteName={resource.route}\n            {...createButtonProps}\n        />\n    ) : null;\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                title={\n                    title ??\n                    translate(\n                        `${resource.name}.titles.list`,\n                        userFriendlyResourceName(\n                            resource.label ?? resource.name,\n                            \"plural\",\n                        ),\n                    )\n                }\n                extra={\n                    headerButtons ? (\n                        <Space wrap {...headerButtonProps}>\n                            {typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultExtra,\n                                  })\n                                : headerButtons}\n                        </Space>\n                    ) : (\n                        defaultExtra\n                    )\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <div {...(contentProps ?? {})}>{children}</div>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useNavigation,\n    useResourceWithRoute,\n    useRouterContext,\n    useTranslate,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport { Breadcrumb, SaveButton, PageHeader } from \"@components\";\nimport { CreateProps } from \"../types\";\n\n/**\n * `<Create>` provides us a layout to display the page.\n * It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/create} for more details.\n */\nexport const Create: React.FC<CreateProps> = ({\n    title,\n    saveButtonProps,\n    children,\n    resource: resourceFromProps,\n    isLoading = false,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const { goBack } = useNavigation();\n    const translate = useTranslate();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, action: routeFromAction } =\n        useParams<ResourceRouterParams>();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const defaultFooterButtons = (\n        <>\n            <SaveButton\n                {...(isLoading ? { disabled: true } : {})}\n                {...saveButtonProps}\n                htmlType=\"submit\"\n            />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={routeFromAction ? goBack : undefined}\n                title={\n                    title ??\n                    translate(\n                        `${resource.name}.titles.create`,\n                        `Create ${userFriendlyResourceName(\n                            resource.label ?? resource.name,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                extra={\n                    <Space wrap {...(headerButtonProps ?? {})}>\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: null,\n                                  })\n                                : headerButtons\n                            : null}\n                    </Space>\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={[\n                            <Space\n                                key=\"action-buttons\"\n                                style={{ float: \"right\", marginRight: 24 }}\n                                {...(footerButtonProps ?? {})}\n                            >\n                                {footerButtons\n                                    ? typeof footerButtons === \"function\"\n                                        ? footerButtons({\n                                              defaultButtons:\n                                                  defaultFooterButtons,\n                                          })\n                                        : footerButtons\n                                    : defaultFooterButtons}\n                            </Space>,\n                        ]}\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useResourceWithRoute,\n    useMutationMode,\n    useNavigation,\n    useTranslate,\n    useRouterContext,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport {\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    SaveButton,\n    Breadcrumb,\n    PageHeader,\n} from \"@components\";\nimport { EditProps } from \"../types\";\n\n/**\n * `<Edit>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/edit} for more details.\n */\nexport const Edit: React.FC<EditProps> = ({\n    title,\n    saveButtonProps,\n    mutationMode: mutationModeProp,\n    recordItemId,\n    children,\n    deleteButtonProps,\n    canDelete,\n    resource: resourceFromProps,\n    isLoading = false,\n    dataProviderName,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n    const { goBack, list } = useNavigation();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const { useParams } = useRouterContext();\n\n    const {\n        resource: routeResourceName,\n        action: routeFromAction,\n        id: idFromRoute,\n    } = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n    const isDeleteButtonVisible =\n        canDelete ?? (resource.canDelete || deleteButtonProps);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const id = recordItemId ?? idFromRoute;\n\n    const defaultHeaderButtons = (\n        <>\n            {!recordItemId && (\n                <ListButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                />\n            )}\n            <RefreshButton\n                {...(isLoading ? { disabled: true } : {})}\n                resourceNameOrRouteName={resource.route}\n                recordItemId={id}\n                dataProviderName={dataProviderName}\n            />\n        </>\n    );\n\n    const defaultFooterButtons = (\n        <>\n            {isDeleteButtonVisible && (\n                <DeleteButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    mutationMode={mutationMode}\n                    onSuccess={() => {\n                        list(resource.route ?? resource.name);\n                    }}\n                    dataProviderName={dataProviderName}\n                    {...deleteButtonProps}\n                />\n            )}\n            <SaveButton\n                {...(isLoading ? { disabled: true } : {})}\n                {...saveButtonProps}\n            />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={routeFromAction ? goBack : undefined}\n                title={\n                    title ??\n                    translate(\n                        `${resource.name}.titles.edit`,\n                        `Edit ${userFriendlyResourceName(\n                            resource.label ?? resource.name,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                extra={\n                    <Space wrap {...(headerButtonProps ?? {})}>\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Space>\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={[\n                            <Space\n                                key=\"footer-buttons\"\n                                wrap\n                                style={{\n                                    float: \"right\",\n                                    marginRight: 24,\n                                }}\n                                {...(footerButtonProps ?? {})}\n                            >\n                                {footerButtons\n                                    ? typeof footerButtons === \"function\"\n                                        ? footerButtons({\n                                              defaultButtons:\n                                                  defaultFooterButtons,\n                                          })\n                                        : footerButtons\n                                    : defaultFooterButtons}\n                            </Space>,\n                        ]}\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Card, Space, Spin } from \"antd\";\nimport {\n    useNavigation,\n    useResourceWithRoute,\n    useRouterContext,\n    useTranslate,\n    ResourceRouterParams,\n    userFriendlyResourceName,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport {\n    EditButton,\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    Breadcrumb,\n    PageHeader,\n} from \"@components\";\nimport { ShowProps } from \"../types\";\n\n/**\n * `<Show>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/basic-views/show} for more details.\n */\nexport const Show: React.FC<ShowProps> = ({\n    title,\n    canEdit,\n    canDelete,\n    isLoading = false,\n    children,\n    resource: resourceFromProps,\n    recordItemId,\n    dataProviderName,\n    breadcrumb: breadcrumbFromProps,\n    contentProps,\n    headerProps,\n    wrapperProps,\n    headerButtons,\n    footerButtons,\n    footerButtonProps,\n    headerButtonProps,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n\n    const { goBack, list } = useNavigation();\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const {\n        resource: routeResourceName,\n        action: routeFromAction,\n        id: idFromRoute,\n    } = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const isDeleteButtonVisible = canDelete ?? resource.canDelete;\n    const isEditButtonVisible = canEdit ?? resource.canEdit;\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const id = recordItemId ?? idFromRoute;\n\n    const defaultHeaderButtons = (\n        <>\n            {!recordItemId && (\n                <ListButton resourceNameOrRouteName={resource.route} />\n            )}\n            {isEditButtonVisible && (\n                <EditButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                    recordItemId={id}\n                />\n            )}\n            {isDeleteButtonVisible && (\n                <DeleteButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                    recordItemId={id}\n                    onSuccess={() => list(resource.route ?? resource.name)}\n                    dataProviderName={dataProviderName}\n                />\n            )}\n            <RefreshButton\n                {...(isLoading ? { disabled: true } : {})}\n                resourceNameOrRouteName={resource.route}\n                recordItemId={id}\n                dataProviderName={dataProviderName}\n            />\n        </>\n    );\n\n    return (\n        <div {...(wrapperProps ?? {})}>\n            <PageHeader\n                ghost={false}\n                backIcon={goBackFromProps}\n                onBack={routeFromAction ? goBack : undefined}\n                title={\n                    title ??\n                    translate(\n                        `${resource.name}.titles.show`,\n                        `Show ${userFriendlyResourceName(\n                            resource.label ?? resource.name,\n                            \"singular\",\n                        )}`,\n                    )\n                }\n                extra={\n                    <Space\n                        key=\"extra-buttons\"\n                        wrap\n                        {...(headerButtonProps ?? {})}\n                    >\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Space>\n                }\n                breadcrumb={\n                    typeof breadcrumb !== \"undefined\" ? (\n                        <>{breadcrumb}</> ?? undefined\n                    ) : (\n                        <Breadcrumb />\n                    )\n                }\n                {...(headerProps ?? {})}\n            >\n                <Spin spinning={isLoading}>\n                    <Card\n                        bordered={false}\n                        actions={\n                            footerButtons\n                                ? [\n                                      <Space\n                                          key=\"footer-buttons\"\n                                          wrap\n                                          {...footerButtonProps}\n                                      >\n                                          {typeof footerButtons === \"function\"\n                                              ? footerButtons({\n                                                    defaultButtons: null,\n                                                })\n                                              : footerButtons}\n                                      </Space>,\n                                  ]\n                                : undefined\n                        }\n                        {...(contentProps ?? {})}\n                    >\n                        {children}\n                    </Card>\n                </Spin>\n            </PageHeader>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Text } = Typography;\n\nimport { TextFieldProps } from \"../types\";\n\n/**\n * This field lets you show basic text. It uses Ant Design's {@link https://ant.design/components/typography/#Typography.Text `<Typography.Text>`} component.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/text} for more details.\n */\nexport const TextField: React.FC<TextFieldProps> = ({ value, ...rest }) => {\n    return <Text {...rest}>{value}</Text>;\n};\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nimport { TagFieldProps } from \"../types\";\n\n/**\n * This field lets you display a value in a tag. It uses Ant Design's {@link https://ant.design/components/tag/ `<Tag>`} component.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/tag} for more details.\n */\nexport const TagField: React.FC<TagFieldProps> = ({ value, ...rest }) => {\n    return <Tag {...rest}>{value?.toString()}</Tag>;\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Link } = Typography;\n\nimport { EmailFieldProps } from \"../types\";\n\n/**\n * This field is used to display email values. It uses the {@link https://ant.design/components/typography/#FAQ `<Link>`} component\n * of {@link https://ant.design/components/typography `<Typography>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/email} for more details.\n */\nexport const EmailField: React.FC<EmailFieldProps> = ({ value, ...rest }) => {\n    return (\n        <Link href={`mailto:${value}`} {...rest}>\n            {value}\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Image } from \"antd\";\n\nimport { ImageFieldProps } from \"../types\";\n\n/**\n * This field is used to display images and uses {@link https://ant.design/components/image/#header `<Image>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/image} for more details.\n */\nexport const ImageField: React.FC<ImageFieldProps> = ({\n    value,\n    imageTitle,\n    ...rest\n}) => {\n    return <Image {...rest} src={value} title={imageTitle} />;\n};\n","import React from \"react\";\nimport { Tooltip } from \"antd\";\n\nimport { CheckOutlined, CloseOutlined } from \"@ant-design/icons\";\n\nimport { BooleanFieldProps } from \"../types\";\n\n/**\n * This field is used to display boolean values. It uses the {@link https://ant.design/components/tooltip/#header `<Tooltip>`} values from Ant Design.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/boolean} for more details.\n */\nexport const BooleanField: React.FC<BooleanFieldProps> = ({\n    value,\n    valueLabelTrue = \"true\",\n    valueLabelFalse = \"false\",\n    trueIcon = <CheckOutlined />,\n    falseIcon = <CloseOutlined />,\n    ...rest\n}) => {\n    return (\n        <Tooltip title={value ? valueLabelTrue : valueLabelFalse} {...rest}>\n            {value ? <span>{trueIcon}</span> : <span>{falseIcon}</span>}\n        </Tooltip>\n    );\n};\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport { Typography } from \"antd\";\n\nimport LocalizedFormat from \"dayjs/plugin/localizedFormat\";\n\ndayjs.extend(LocalizedFormat);\n\nconst defaultLocale = dayjs.locale();\n\nimport { DateFieldProps } from \"../types\";\n\n/**\n * This field is used to display dates. It uses {@link https://day.js.org/docs/en/display/format `Day.js`} to display date format.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/date} for more details.\n */\nexport const DateField: React.FC<DateFieldProps> = ({\n    value,\n    locales,\n    format: dateFormat = \"L\",\n    ...rest\n}) => {\n    const { Text } = Typography;\n\n    return (\n        <Text {...rest}>\n            {dayjs(value)\n                .locale(locales || defaultLocale)\n                .format(dateFormat)}\n        </Text>\n    );\n};\n","import React from \"react\";\n\nimport { UrlField } from \"@components\";\nimport { FileFieldProps } from \"../types\";\n\n/**\n * This field is used to display files and uses {@link https://ant.design/components/typography `<Typography.Link>`} from Ant Design.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/file} for more details.\n */\nexport const FileField: React.FC<FileFieldProps> = ({\n    title,\n    src,\n    ...rest\n}) => {\n    return (\n        <UrlField value={src} title={title} {...rest}>\n            {title ?? src}\n        </UrlField>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Link } = Typography;\n\nimport { UrlFieldProps } from \"../types\";\n\n/**\n * This field lets you embed a link. It uses Ant Design's {@link https://ant.design/components/typography/ `<Typography.Link>`} component.\n * You can pass a URL in its `value` property and you can show a text in its place by passing any `children`.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/url} for more details.\n */\nexport const UrlField: React.FC<UrlFieldProps> = ({\n    children,\n    value,\n    ...rest\n}) => {\n    return (\n        <Link href={value} {...rest}>\n            {children ?? value}\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Text } = Typography;\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(\n        typeof Intl == \"object\" &&\n        Intl &&\n        typeof Intl.NumberFormat == \"function\"\n    );\n}\n\nimport { NumberFieldProps } from \"../types\";\n\n/**\n * This field is used to display a number formatted according to the browser locale, right aligned. and uses {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl `Intl`} to display date format.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/number} for more details.\n */\nexport const NumberField: React.FC<NumberFieldProps> = ({\n    value,\n    locale,\n    options,\n    ...rest\n}) => {\n    const number = parseFloat(value.toString());\n\n    return (\n        <Text {...rest}>\n            {toLocaleStringSupportsOptions()\n                ? number.toLocaleString(locale, options)\n                : number}\n        </Text>\n    );\n};\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\n\nimport { RefineFieldMarkdownProps } from \"../types\";\n\n/**\n * This field lets you display markdown content. It supports {@link https://github.github.com/gfm/ GitHub Flavored Markdown}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/fields/markdown} for more details.\n */\nexport const MarkdownField: React.FC<RefineFieldMarkdownProps> = ({\n    value = \"\",\n}) => {\n    return <ReactMarkdown plugins={[gfm]}>{value}</ReactMarkdown>;\n};\n","import React, { ReactNode, useState } from \"react\";\nimport { Button, Space } from \"antd\";\nimport type { FilterDropdownProps as AntdFilterDropdownProps } from \"antd/lib/table/interface\";\nimport dayjs from \"dayjs\";\nimport { FilterOutlined } from \"@ant-design/icons\";\nimport { useTranslate } from \"@pankod/refine-core\";\n\nexport type FilterDropdownProps = AntdFilterDropdownProps & {\n    mapValue?: (selectedKeys: React.Key[]) => any;\n    children: ReactNode;\n};\n\n/**\n * `<FilterDropdown>` is a helper component for {@link https://ant.design/components/table/#components-table-demo-custom-filter-panel filter dropdowns in Ant Design `<Table>` components.}\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/filter-dropdown} for more details.\n */\nexport const FilterDropdown: React.FC<FilterDropdownProps> = (props) => {\n    const {\n        setSelectedKeys,\n        confirm,\n        clearFilters,\n        mapValue,\n        selectedKeys,\n        children,\n    } = props;\n\n    const [value, setValue] = useState<any[] | undefined>(selectedKeys);\n    const translate = useTranslate();\n\n    const clearFilter = () => {\n        if (clearFilters) {\n            setValue([]);\n            clearFilters();\n        }\n    };\n\n    const onFilter = () => {\n        const _mappedValue = mappedValue(value);\n\n        let keys;\n        if (typeof _mappedValue === \"number\") {\n            keys = `${_mappedValue}`;\n        } else if (dayjs.isDayjs(_mappedValue)) {\n            keys = [_mappedValue.toISOString()];\n        } else {\n            keys = _mappedValue;\n        }\n\n        setSelectedKeys(keys);\n\n        confirm?.();\n    };\n\n    const mappedValue = (value: any) => (mapValue ? mapValue(value) : value);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onChange = (e: any) => {\n        if (typeof e === \"object\") {\n            if (Array.isArray(e)) {\n                const _mappedValue = mappedValue(e);\n\n                setValue(_mappedValue);\n                return setSelectedKeys(_mappedValue);\n            }\n\n            const changeEvent =\n                !e || !e.target || dayjs.isDayjs(e)\n                    ? { target: { value: e } }\n                    : e;\n\n            const { target }: React.ChangeEvent<HTMLInputElement> = changeEvent;\n            const _mappedValue = mappedValue(target.value);\n            setValue(_mappedValue);\n            return;\n        }\n\n        const _mappedValue = mappedValue(e);\n\n        setValue(_mappedValue);\n    };\n\n    const childrenWithProps = React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n                onChange,\n                value: mappedValue(value),\n            });\n        }\n        return child;\n    });\n    return (\n        <div\n            style={{\n                padding: 10,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"flex-end\",\n            }}\n        >\n            <div style={{ marginBottom: 15 }}>{childrenWithProps}</div>\n            <Space>\n                <Button type=\"primary\" size=\"small\" onClick={() => onFilter()}>\n                    <FilterOutlined /> {translate(\"buttons.filter\", \"Filter\")}\n                </Button>\n                <Button danger size=\"small\" onClick={() => clearFilter()}>\n                    {translate(\"buttons.clear\", \"Clear\")}\n                </Button>\n            </Space>\n        </div>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ResourceErrorRouterParams } from \"@pankod/refine-core\";\nimport { RefineErrorPageProps } from \"@pankod/refine-ui-types\";\nimport { Button, Result, Typography, Space, Tooltip } from \"antd\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@pankod/refine-core\";\n\nconst { Text } = Typography;\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\n */\nexport const ErrorComponent: React.FC<RefineErrorPageProps> = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        if (params.resource) {\n            const resourceFromRoute = resource(params.resource);\n            if (\n                params.action &&\n                actionTypes.includes(params.action) &&\n                !resourceFromRoute[params.action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: params.action,\n                            resource: params.resource,\n                        },\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <Result\n            status=\"404\"\n            title=\"404\"\n            extra={\n                <Space direction=\"vertical\" size=\"large\">\n                    <Space>\n                        <Text>\n                            {translate(\n                                \"pages.error.404\",\n                                \"Sorry, the page you visited does not exist.\",\n                            )}\n                        </Text>\n                        {errorMessage && (\n                            <Tooltip title={errorMessage}>\n                                <InfoCircleOutlined data-testid=\"error-component-tooltip\" />\n                            </Tooltip>\n                        )}\n                    </Space>\n                    <Button type=\"primary\" onClick={() => push(\"/\")}>\n                        {translate(\"pages.error.backHome\", \"Back Home\")}\n                    </Button>\n                </Space>\n            }\n        />\n    );\n};\n","import React from \"react\";\nimport { LoginPageProps } from \"@pankod/refine-core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    Checkbox,\n} from \"antd\";\nimport { useLogin, useTranslate } from \"@pankod/refine-core\";\n\nimport {\n    layoutStyles,\n    containerStyles,\n    titleStyles,\n    imageContainer,\n} from \"./styles\";\n\nconst { Text, Title } = Typography;\nexport interface ILoginForm {\n    username: string;\n    password: string;\n    remember: boolean;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/api-reference/antd/components/antd-auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC<LoginPageProps> = () => {\n    const [form] = Form.useForm<ILoginForm>();\n    const translate = useTranslate();\n\n    const { mutate: login, isLoading } = useLogin<ILoginForm>();\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.login.title\", \"Sign in your account\")}\n        </Title>\n    );\n\n    return (\n        <Layout style={layoutStyles}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    <div style={containerStyles}>\n                        <div style={imageContainer}>\n                            <img\n                                src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                                alt=\"Refine Logo\"\n                            />\n                        </div>\n                        <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\n                            <Form<ILoginForm>\n                                layout=\"vertical\"\n                                form={form}\n                                onFinish={(values) => {\n                                    login(values);\n                                }}\n                                requiredMark={false}\n                                initialValues={{\n                                    remember: false,\n                                }}\n                            >\n                                <Form.Item\n                                    name=\"username\"\n                                    label={translate(\n                                        \"pages.login.username\",\n                                        \"Username\",\n                                    )}\n                                    rules={[{ required: true }]}\n                                >\n                                    <Input\n                                        size=\"large\"\n                                        placeholder={translate(\n                                            \"pages.login.username\",\n                                            \"Username\",\n                                        )}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    name=\"password\"\n                                    label={translate(\n                                        \"pages.login.password\",\n                                        \"Password\",\n                                    )}\n                                    rules={[{ required: true }]}\n                                    style={{ marginBottom: \"12px\" }}\n                                >\n                                    <Input\n                                        type=\"password\"\n                                        placeholder=\"●●●●●●●●\"\n                                        size=\"large\"\n                                    />\n                                </Form.Item>\n                                <div style={{ marginBottom: \"12px\" }}>\n                                    <Form.Item\n                                        name=\"remember\"\n                                        valuePropName=\"checked\"\n                                        noStyle\n                                    >\n                                        <Checkbox\n                                            style={{\n                                                fontSize: \"12px\",\n                                            }}\n                                        >\n                                            {translate(\n                                                \"pages.login.remember\",\n                                                \"Remember me\",\n                                            )}\n                                        </Checkbox>\n                                    </Form.Item>\n\n                                    <a\n                                        style={{\n                                            float: \"right\",\n                                            fontSize: \"12px\",\n                                        }}\n                                        href=\"#\"\n                                    >\n                                        {translate(\n                                            \"pages.login.forgotPassword\",\n                                            \"Forgot password?\",\n                                        )}\n                                    </a>\n                                </div>\n                                <Button\n                                    type=\"primary\"\n                                    size=\"large\"\n                                    htmlType=\"submit\"\n                                    loading={isLoading}\n                                    block\n                                >\n                                    {translate(\"pages.login.signin\", \"Sign in\")}\n                                </Button>\n                            </Form>\n                            <div style={{ marginTop: 8 }}>\n                                <Text style={{ fontSize: 12 }}>\n                                    {translate(\n                                        \"pages.login.noAccount\",\n                                        \"Don’t have an account?\",\n                                    )}{\" \"}\n                                    <a href=\"#\" style={{ fontWeight: \"bold\" }}>\n                                        {translate(\n                                            \"pages.login.signup\",\n                                            \"Sign up\",\n                                        )}\n                                    </a>\n                                </Text>\n                            </div>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const layoutStyles: CSSProperties = {\n    background: `radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)`,\n    backgroundSize: \"cover\",\n};\n\nexport const containerStyles: CSSProperties = {\n    maxWidth: \"408px\",\n    margin: \"auto\",\n};\n\nexport const titleStyles: CSSProperties = {\n    textAlign: \"center\",\n    color: \"#626262\",\n    fontSize: \"30px\",\n    letterSpacing: \"-0.04em\",\n};\n\nexport const imageContainer: CSSProperties = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: \"28px\",\n};\n","import * as React from \"react\";\nimport { RefineReadyPageProps } from \"@pankod/refine-ui-types\";\nimport { Row, Col, Typography, Space, Button } from \"antd\";\nimport { ReadOutlined, FolderOutlined, TeamOutlined } from \"@ant-design/icons\";\n\nconst styles: { [key: string]: React.CSSProperties } = {\n    root: {\n        height: \"100vh\",\n        backgroundImage:\n            \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n        backgroundSize: \"cover\",\n        backgroundColor: \"#331049\",\n    },\n    title: {\n        color: \"white\",\n        fontWeight: 800,\n        fontSize: \"64px\",\n        marginBottom: \"8px\",\n    },\n    p1: {\n        color: \"white\",\n        marginBottom: 0,\n        fontSize: \"20px\",\n        fontWeight: \"bold\",\n    },\n    p2: {\n        color: \"white\",\n        fontSize: \"20px\",\n    },\n    code: {\n        backgroundColor: \"white\",\n        color: \"#331049\",\n    },\n};\n\nconst { Title } = Typography;\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\n */\nexport const ReadyPage: React.FC<RefineReadyPageProps> = () => {\n    return (\n        <Row align=\"middle\" justify=\"center\" style={styles.root}>\n            <Col style={{ textAlign: \"center\" }}>\n                <img\n                    style={{ marginBottom: \"48px\" }}\n                    src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                    alt=\"Refine Logo\"\n                />\n                <Title style={styles.title}>Welcome on board</Title>\n                <p style={styles.p1}>Your configuration is completed.</p>\n                <p style={styles.p2}>\n                    Now you can get started by adding your resources to the{\" \"}\n                    <code style={styles.code}>{`resources`}</code> property of{\" \"}\n                    <code style={styles.code}>{`<Refine>`}</code>\n                </p>\n                <Space\n                    size=\"large\"\n                    wrap\n                    style={{ marginTop: \"70px\", justifyContent: \"center\" }}\n                >\n                    <a\n                        href=\"https://refine.dev\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<ReadOutlined />}>\n                            Documentation\n                        </Button>\n                    </a>\n                    <a\n                        href=\"https://refine.dev/examples\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<FolderOutlined />}>\n                            Examples\n                        </Button>\n                    </a>\n                    <a\n                        href=\"https://discord.gg/refine\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >\n                        <Button size=\"large\" icon={<TeamOutlined />}>\n                            Community\n                        </Button>\n                    </a>\n                </Space>\n            </Col>\n        </Row>\n    );\n};\n","import React from \"react\";\nimport { CardProps, FormProps, LayoutProps } from \"antd\";\nimport { AuthPageProps } from \"@pankod/refine-core\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nexport type AuthProps = AuthPageProps<LayoutProps, CardProps, FormProps>;\n\n/**\n * **refine** has a default auth page form served on the `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/authpage/} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"@pankod/refine-core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    Checkbox,\n    CardProps,\n    LayoutProps,\n    Divider,\n    FormProps,\n} from \"antd\";\nimport { useLogin, useTranslate, useRouterContext } from \"@pankod/refine-core\";\n\nimport { layoutStyles, containerStyles, titleStyles } from \"../styles\";\n\nconst { Text, Title } = Typography;\n\ntype LoginProps = LoginPageProps<LayoutProps, CardProps, FormProps>;\n\n/**\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#login} for more details.\n */\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const [form] = Form.useForm<LoginFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const { mutate: login, isLoading } = useLogin<LoginFormTypes>();\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.login.title\", \"Sign in to your account\")}\n        </Title>\n    );\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                type=\"default\"\n                                block\n                                icon={provider.icon}\n                                style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    width: \"100%\",\n                                    marginBottom: \"8px\",\n                                }}\n                                onClick={() =>\n                                    login({\n                                        providerName: provider.name,\n                                    })\n                                }\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    <Divider>{translate(\"pages.login.divider\", \"or\")}</Divider>\n                </>\n            );\n        }\n        return null;\n    };\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={{ borderBottom: 0 }}\n            style={containerStyles}\n            {...(contentProps ?? {})}\n        >\n            {renderProviders()}\n            <Form<LoginFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => login(values)}\n                requiredMark={false}\n                initialValues={{\n                    remember: false,\n                }}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"email\"\n                    label={translate(\"pages.login.fields.email\", \"Email\")}\n                    rules={[\n                        { required: true },\n                        {\n                            type: \"email\",\n                            message: translate(\n                                \"pages.login.errors.validEmail\",\n                                \"Invalid email address\",\n                            ),\n                        },\n                    ]}\n                >\n                    <Input\n                        size=\"large\"\n                        placeholder={translate(\n                            \"pages.login.fields.email\",\n                            \"Email\",\n                        )}\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"password\"\n                    label={translate(\"pages.login.fields.password\", \"Password\")}\n                    rules={[{ required: true }]}\n                    style={{ marginBottom: \"12px\" }}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        marginBottom: \"12px\",\n                    }}\n                >\n                    {rememberMe ?? (\n                        <Form.Item\n                            name=\"remember\"\n                            valuePropName=\"checked\"\n                            noStyle\n                        >\n                            <Checkbox\n                                style={{\n                                    fontSize: \"12px\",\n                                }}\n                            >\n                                {translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                            </Checkbox>\n                        </Form.Item>\n                    )}\n                    {forgotPasswordLink ?? (\n                        <Link\n                            style={{\n                                fontSize: \"12px\",\n                                marginLeft: \"auto\",\n                            }}\n                            to=\"/forgot-password\"\n                        >\n                            {translate(\n                                \"pages.login.buttons.forgotPassword\",\n                                \"Forgot password?\",\n                            )}\n                        </Link>\n                    )}\n                </div>\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\"pages.login.signin\", \"Sign in\")}\n                    </Button>\n                </Form.Item>\n            </Form>\n            <div style={{ marginTop: 8 }}>\n                {registerLink ?? (\n                    <Text style={{ fontSize: 12 }}>\n                        {translate(\n                            \"pages.login.buttons.noAccount\",\n                            \"Don’t have an account?\",\n                        )}{\" \"}\n                        <Link to=\"/register\" style={{ fontWeight: \"bold\" }}>\n                            {translate(\"pages.login.signup\", \"Sign up\")}\n                        </Link>\n                    </Text>\n                )}\n            </div>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? renderContent(CardContent) : CardContent}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const layoutStyles: CSSProperties = {\n    background: `radial-gradient(50% 50% at 50% 50%, #6813CB 0%, #2A2A42 100%)`,\n    backgroundSize: \"cover\",\n};\n\nexport const containerStyles: CSSProperties = {\n    maxWidth: \"408px\",\n    margin: \"auto\",\n};\n\nexport const titleStyles: CSSProperties = {\n    textAlign: \"center\",\n    color: \"#626262\",\n    marginBottom: 0,\n    fontSize: \"24px\",\n    letterSpacing: \"-0.04em\",\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\",\n};\n","import React from \"react\";\nimport { RegisterPageProps, RegisterFormTypes } from \"@pankod/refine-core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n    Divider,\n} from \"antd\";\nimport {\n    useTranslate,\n    useRouterContext,\n    useRegister,\n} from \"@pankod/refine-core\";\n\nimport { layoutStyles, containerStyles, titleStyles } from \"../styles\";\n\nconst { Text, Title } = Typography;\n\ntype RegisterProps = RegisterPageProps<LayoutProps, CardProps, FormProps>;\n\n/**\n * **refine** has register page form which is served on `/register` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#register} for more details.\n */\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const [form] = Form.useForm<RegisterFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const { mutate: register, isLoading } = useRegister<RegisterFormTypes>();\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.register.title\", \"Sign up for your account\")}\n        </Title>\n    );\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                type=\"ghost\"\n                                block\n                                icon={provider.icon}\n                                style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    width: \"100%\",\n                                    marginBottom: \"8px\",\n                                }}\n                                onClick={() =>\n                                    register({\n                                        providerName: provider.name,\n                                    })\n                                }\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    <Divider>{translate(\"pages.login.divider\", \"or\")}</Divider>\n                </>\n            );\n        }\n        return null;\n    };\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={{ borderBottom: 0 }}\n            style={containerStyles}\n            {...(contentProps ?? {})}\n        >\n            {renderProviders()}\n            <Form<RegisterFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => register(values)}\n                requiredMark={false}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"email\"\n                    label={translate(\"pages.register.email\", \"Email\")}\n                    rules={[\n                        { required: true },\n                        {\n                            type: \"email\",\n                            message: translate(\n                                \"pages.register.errors.validEmail\",\n                                \"Invalid email address\",\n                            ),\n                        },\n                    ]}\n                >\n                    <Input\n                        size=\"large\"\n                        placeholder={translate(\n                            \"pages.register.fields.email\",\n                            \"Email\",\n                        )}\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"password\"\n                    label={translate(\n                        \"pages.register.fields.password\",\n                        \"Password\",\n                    )}\n                    rules={[{ required: true }]}\n                    style={{ marginBottom: \"12px\" }}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        marginBottom: \"12px\",\n                    }}\n                >\n                    {loginLink ?? (\n                        <Text\n                            style={{\n                                fontSize: 12,\n                                marginLeft: \"auto\",\n                            }}\n                        >\n                            {translate(\n                                \"pages.login.buttons.haveAccount\",\n                                \"Have an account?\",\n                            )}{\" \"}\n                            <Link\n                                style={{\n                                    fontWeight: \"bold\",\n                                }}\n                                to=\"/login\"\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </Link>\n                        </Text>\n                    )}\n                </div>\n\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\"pages.register.buttons.submit\", \"Sign up\")}\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? renderContent(CardContent) : CardContent}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    ForgotPasswordPageProps,\n    ForgotPasswordFormTypes,\n} from \"@pankod/refine-core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n} from \"antd\";\nimport {\n    useTranslate,\n    useRouterContext,\n    useForgotPassword,\n} from \"@pankod/refine-core\";\n\nimport { layoutStyles, containerStyles, titleStyles } from \"../styles\";\n\ntype ResetPassworProps = ForgotPasswordPageProps<\n    LayoutProps,\n    CardProps,\n    FormProps\n>;\n\nconst { Text, Title } = Typography;\n\n/**\n * **refine** has forgot password page form which is served on `/forgot-password` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#forgot-password} for more details.\n */\nexport const ForgotPasswordPage: React.FC<ResetPassworProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const [form] = Form.useForm<ForgotPasswordFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.forgotPassword.title\", \"Forgot your password?\")}\n        </Title>\n    );\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={{ borderBottom: 0 }}\n            style={containerStyles}\n            {...(contentProps ?? {})}\n        >\n            <Form<ForgotPasswordFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => forgotPassword(values)}\n                requiredMark={false}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"email\"\n                    label={translate(\n                        \"pages.forgotPassword.fields.email\",\n                        \"Email\",\n                    )}\n                    rules={[\n                        { required: true },\n                        {\n                            type: \"email\",\n                            message: translate(\n                                \"pages.forgotPassword.errors.validEmail\",\n                                \"Invalid email address\",\n                            ),\n                        },\n                    ]}\n                >\n                    <Input\n                        type=\"email\"\n                        size=\"large\"\n                        placeholder={translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    />\n                </Form.Item>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        marginBottom: \"12px\",\n                    }}\n                >\n                    {loginLink ?? (\n                        <Text\n                            style={{\n                                fontSize: 12,\n                                marginLeft: \"auto\",\n                            }}\n                        >\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            <Link\n                                style={{\n                                    fontWeight: \"bold\",\n                                }}\n                                to=\"/login\"\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </Link>\n                        </Text>\n                    )}\n                </div>\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? renderContent(CardContent) : CardContent}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    UpdatePasswordPageProps,\n    UpdatePasswordFormTypes,\n} from \"@pankod/refine-core\";\nimport {\n    Row,\n    Col,\n    Layout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n    LayoutProps,\n    CardProps,\n    FormProps,\n} from \"antd\";\nimport { useTranslate, useUpdatePassword } from \"@pankod/refine-core\";\n\nimport { layoutStyles, containerStyles, titleStyles } from \"../styles\";\n\nconst { Title } = Typography;\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    LayoutProps,\n    CardProps,\n    FormProps\n>;\n\n/**\n * **refine** has update password page form which is served on `/update-password` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/antd/components/antd-auth-page/#update-password} for more details.\n */\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const [form] = Form.useForm<UpdatePasswordFormTypes>();\n    const translate = useTranslate();\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n\n    const CardTitle = (\n        <Title level={3} style={titleStyles}>\n            {translate(\"pages.updatePassword.title\", \"Set New Password\")}\n        </Title>\n    );\n\n    const CardContent = (\n        <Card\n            title={CardTitle}\n            headStyle={{ borderBottom: 0 }}\n            style={containerStyles}\n            {...(contentProps ?? {})}\n        >\n            <Form<UpdatePasswordFormTypes>\n                layout=\"vertical\"\n                form={form}\n                onFinish={(values) => updatePassword(values)}\n                requiredMark={false}\n                {...formProps}\n            >\n                <Form.Item\n                    name=\"password\"\n                    label={translate(\n                        \"pages.updatePassword.fields.password\",\n                        \"New Password\",\n                    )}\n                    rules={[{ required: true }]}\n                    style={{ marginBottom: \"12px\" }}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"confirmPassword\"\n                    label={translate(\n                        \"pages.updatePassword.fields.confirmPassword\",\n                        \"Confirm New Password\",\n                    )}\n                    hasFeedback\n                    dependencies={[\"password\"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                        ({ getFieldValue }) => ({\n                            validator(_, value) {\n                                if (\n                                    !value ||\n                                    getFieldValue(\"password\") === value\n                                ) {\n                                    return Promise.resolve();\n                                }\n                                return Promise.reject(\n                                    new Error(\n                                        translate(\n                                            \"pages.updatePassword.errors.confirmPasswordNotMatch\",\n                                            \"Passwords do not match\",\n                                        ),\n                                    ),\n                                );\n                            },\n                        }),\n                    ]}\n                    style={{ marginBottom: \"12px\" }}\n                >\n                    <Input\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button\n                        type=\"primary\"\n                        size=\"large\"\n                        htmlType=\"submit\"\n                        loading={isLoading}\n                        block\n                    >\n                        {translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    );\n\n    return (\n        <Layout style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Row\n                justify=\"center\"\n                align=\"middle\"\n                style={{\n                    height: \"100vh\",\n                }}\n            >\n                <Col xs={22}>\n                    {renderContent ? renderContent(CardContent) : CardContent}\n                </Col>\n            </Row>\n        </Layout>\n    );\n};\n","import React from \"react\";\nimport {\n    useBreadcrumb,\n    useRefineContext,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineBreadcrumbProps } from \"@pankod/refine-ui-types\";\n\nimport {\n    Breadcrumb as AntdBreadcrumb,\n    BreadcrumbProps as AntdBreadcrumbProps,\n} from \"antd\";\nimport { HomeOutlined } from \"@ant-design/icons\";\n\nexport type BreadcrumbProps = RefineBreadcrumbProps<AntdBreadcrumbProps>;\n\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\n    breadcrumbProps,\n    showHome = true,\n    hideIcons = false,\n}) => {\n    const { breadcrumbs } = useBreadcrumb();\n    const { Link } = useRouterContext();\n    const { hasDashboard } = useRefineContext();\n\n    if (breadcrumbs.length === 1) {\n        return null;\n    }\n\n    return (\n        <AntdBreadcrumb {...breadcrumbProps}>\n            {showHome && hasDashboard && (\n                <AntdBreadcrumb.Item>\n                    <Link to=\"/\">\n                        <HomeOutlined />\n                    </Link>\n                </AntdBreadcrumb.Item>\n            )}\n            {breadcrumbs.map(({ label, icon, href }) => {\n                return (\n                    <AntdBreadcrumb.Item key={label}>\n                        {!hideIcons && icon}\n                        {href ? (\n                            <Link to={href}>{label}</Link>\n                        ) : (\n                            <span>{label}</span>\n                        )}\n                    </AntdBreadcrumb.Item>\n                );\n            })}\n        </AntdBreadcrumb>\n    );\n};\n","import React, { FC } from \"react\";\nimport {\n    PageHeader as AntdPageHeader,\n    PageHeaderProps as AntdPageHeaderProps,\n} from \"@ant-design/pro-layout\";\nimport { Button, Typography } from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nexport type PageHeaderProps = AntdPageHeaderProps;\n\nexport const PageHeader: FC<AntdPageHeaderProps> = ({ children, ...props }) => {\n    const backIcon =\n        typeof props.backIcon === \"undefined\" ? (\n            <Button type=\"text\" icon={<ArrowLeftOutlined />} />\n        ) : (\n            props.backIcon\n        );\n\n    const title =\n        typeof props.title === \"string\" ? (\n            <Typography.Title level={4} style={{ marginBottom: 0 }}>\n                {props.title}\n            </Typography.Title>\n        ) : (\n            props.title\n        );\n\n    const subtitle =\n        typeof props.title === \"string\" ? (\n            <Typography.Title\n                level={5}\n                type=\"secondary\"\n                style={{ marginBottom: 0 }}\n            >\n                {props.subTitle}\n            </Typography.Title>\n        ) : (\n            props.subTitle\n        );\n\n    return (\n        <AntdPageHeader\n            {...props}\n            backIcon={backIcon}\n            title={title}\n            subTitle={subtitle}\n            style={{ padding: 0, ...props.style }}\n        >\n            {children}\n        </AntdPageHeader>\n    );\n};\n","import type { UploadFile, UploadChangeParam } from \"antd/lib/upload/interface\";\n\nexport const getValueFromEvent = (event: UploadChangeParam): UploadFile[] => {\n    const { fileList } = event;\n\n    return [...fileList];\n};\n\nexport function file2Base64(file: UploadFile): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n}\n","import React from \"react\";\nimport { ResourceRouterParams, useRouterContext } from \"@pankod/refine-core\";\n\nimport { ShowInferencer } from \"./show\";\nimport { ListInferencer } from \"./list\";\nimport { CreateInferencer } from \"./create\";\nimport { EditInferencer } from \"./edit\";\nimport type { InferencerComponentProps } from \"../../types\";\n\nconst AntdInferencer: React.FC<InferencerComponentProps> = ({\n    action: actionFromProps,\n    id: idFromProps,\n    ...props\n}) => {\n    const { useParams } = useRouterContext();\n    const { action, id } = useParams<ResourceRouterParams>();\n\n    switch (actionFromProps ?? action) {\n        case \"show\":\n            return <ShowInferencer {...props} id={idFromProps ?? id} />;\n        case \"create\":\n            return <CreateInferencer {...props} id={idFromProps ?? id} />;\n        case \"edit\":\n            return <EditInferencer {...props} id={idFromProps ?? id} />;\n        default:\n            return <ListInferencer {...props} id={idFromProps ?? id} />;\n    }\n};\n\nexport { AntdInferencer };\nexport {\n    ShowInferencer as AntdShowInferencer,\n    renderer as AntdShowRenderer,\n} from \"./show\";\nexport {\n    EditInferencer as AntdEditInferencer,\n    renderer as AntdEditRenderer,\n} from \"./edit\";\nexport {\n    ListInferencer as AntdListInferencer,\n    renderer as AntdListRenderer,\n} from \"./list\";\nexport {\n    CreateInferencer as AntdCreateInferencer,\n    renderer as AntdCreateRenderer,\n} from \"./create\";\nexport * from \"../../types\";\n","import * as RefineAntd from \"@pankod/refine-antd\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    toSingular,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for show page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n    id,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"show\",\n    );\n    const recordName = \"record\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@pankod/refine-core\"],\n        [\"useShow\", \"@pankod/refine-core\"],\n        [\"Show\", \"@pankod/refine-antd\"],\n        [\"Typography\", \"@pankod/refine-antd\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                if (field.multiple) {\n                    imports.push([\"useMany\", \"@pankod/refine-core\"]);\n                    let ids = accessor(recordName, field.key);\n\n                    if (field.accessor) {\n                        ids = `${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )})`;\n                    }\n\n                    return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n                `;\n                }\n                imports.push([\"useOne\", \"@pankod/refine-core\"]);\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                        recordName,\n                        field.key,\n                        field.accessor,\n                        false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = getVariableName(field.key, \"Data\");\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@pankod/refine-antd\"]);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${variableIsLoading} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `Not Handled.`;\n                                    // return `{${multipleAccessor(\n                                    //     `${variableName}?.data`,\n                                    //     field.relationInfer.accessor,\n                                    // ).join(' + \" \" + ')}}`;\n                                } else {\n                                    // return `Not Handled.`;\n                                    const mapItemName = toSingular(\n                                        field.resource?.name,\n                                    );\n                                    const val = accessor(\n                                        mapItemName,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                    );\n                                    return `{${variableName}?.data?.map((${mapItemName}: any) => <TagField key={${val}} value={${val}} />)}`;\n                                }\n                            } else {\n                                return undefined;\n                            }\n                        } else {\n                            return undefined;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n                // {${accessorString(variableName, {\n                //     key: field.key,\n                // })}?.map((item) => (\n                //     <TagField value={${\n                //         field.accessor ? `item?.${field.accessor}` : `item`\n                //     }} key={${\n                //     field.accessor ? `item?.${field.accessor}` : `item`\n                // }} />\n                // ))}\n                // `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${variableIsLoading} ? <>Loading...</> : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `{${accessor(\n                                        `${variableName}?.data`,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                        ' + \" \" + ',\n                                    )}}`;\n                                } else {\n                                    return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                                }\n                            } else {\n                                return `{${variableName}?.data}`;\n                            }\n                        } else {\n                            return `{${variableName}?.data?.id}`;\n                        }\n                    })()}\n                    </>\n                )}\n                \n                `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (field.type === \"text\") {\n            imports.push(\n                [\"TagField\", \"@pankod/refine-antd\"],\n                [\"TextField\", \"@pankod/refine-antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@pankod/refine-antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <ImageField style={{ maxWidth: 200 }} value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <ImageField style={{ maxWidth: 200 }} value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n                `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@pankod/refine-antd\"],\n                [\"EmailField\", \"@pankod/refine-antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </>\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <EmailField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"TagField\", \"@pankod/refine-antd\"],\n                [\"UrlField\", \"@pankod/refine-antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <UrlField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push(\n                [\"TagField\", \"@pankod/refine-antd\"],\n                [\"BooleanField\", \"@pankod/refine-antd\"],\n            );\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {(${accessor(\n                    recordName,\n                    field.key,\n                )} as any[])?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <BooleanField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" && \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@pankod/refine-antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <DateField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <DateField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + ' ' + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@pankod/refine-antd\"]);\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <MarkdownField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )}} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberField\", \"@pankod/refine-antd\"]);\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n                return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n            `;\n            }\n            return jsx`\n                <Title level={5}>${prettyString(field.key)}</Title>\n                <NumberField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )} ?? \"\"} />\n            `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n                return textFields(field);\n            case \"number\":\n                return numberFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n    \n    const { Title } = Typography;\n\n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        const { queryResult } = useShow(${\n            isCustomPage\n                ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${id}\n                }`\n                : \"\"\n        });\n        const { data, isLoading } = queryResult;\n    \n        const ${recordName} = data?.data;\n\n        ${relationHooksCode}\n\n        return (\n            <Show isLoading={isLoading}>\n                ${renderedFields.join(\"\")}\n            </Show>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n    type: \"show\",\n    additionalScope: [[\"@pankod/refine-antd\", \"RefineAntd\", RefineAntd]],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import React from \"react\";\nimport { useResource } from \"@pankod/refine-core\";\n\nimport {\n    CreateInferencer,\n    InferencerComponentProps,\n    InferencerResultComponent,\n    InferField,\n} from \"@/types\";\n\nimport { composeInferencers } from \"@/compose-inferencers\";\nimport { composeTransformers } from \"@/compose-transformers\";\n\nimport { defaultElements } from \"@/field-inferencers\";\nimport { defaultTransformers } from \"@/field-transformers\";\nimport { LiveComponent } from \"@/components\";\nimport { useInferFetch } from \"@/use-infer-fetch\";\nimport { useRelationFetch } from \"@/use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"@/utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@pankod/refine-core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        id,\n    }: {\n        resourceName?: string;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        id?: string | number;\n    }) => {\n        const { resource, resources } = useResource({\n            resourceNameOrRouteName: resourceName,\n        });\n\n        const { resource: resourceFromURL } = useResource();\n\n        const {\n            data: record,\n            loading: recordLoading,\n            initial: isInitialLoad,\n            error: inferError,\n        } = useInferFetch(type, resourceName ?? resource?.name, id);\n\n        const rawResults: InferField[] = React.useMemo(() => {\n            if (record) {\n                const inferred = Object.keys(record)\n                    .map((key) => {\n                        const value = record[key];\n\n                        const inferResult = infer(key, value, record, infer);\n\n                        return inferResult;\n                    })\n                    .filter(Boolean);\n\n                const transformed = transform(\n                    inferred as InferField[],\n                    resources,\n                    resource,\n                    record,\n                    infer,\n                );\n\n                const customTransformedFields = fieldTransformer\n                    ? transformed.flatMap((field) => {\n                          const result = fieldTransformer(field);\n\n                          return result ? [result] : [];\n                      })\n                    : transformed;\n\n                return customTransformedFields;\n            }\n\n            return [];\n        }, [record, resources, resource, fieldTransformer]);\n\n        const {\n            fields: results,\n            loading: relationLoading,\n            // initial: relationInitial,\n        } = useRelationFetch({\n            record,\n            fields: rawResults,\n            infer,\n        });\n\n        const code = React.useMemo(() => {\n            if (!recordLoading && !relationLoading && !isInitialLoad) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: results,\n                    infer,\n                    isCustomPage: resource.name !== resourceFromURL.name,\n                    id,\n                });\n            }\n            return \"\";\n        }, [resource, resources, results, recordLoading, relationLoading]);\n\n        return (\n            <>\n                {LoadingComponent && (recordLoading || relationLoading) && (\n                    <LoadingComponent />\n                )}\n                {!recordLoading && !relationLoading && (\n                    <>\n                        <LiveComponent\n                            fetchError={\n                                !recordLoading && inferError\n                                    ? inferError\n                                    : !recordLoading &&\n                                      !isInitialLoad &&\n                                      !record\n                            }\n                            code={prepareLiveCode(\n                                code,\n                                componentName(\n                                    resource.label ?? resource.name,\n                                    type,\n                                ),\n                            )}\n                            errorComponent={ErrorComponent}\n                            additionalScope={additionalScope}\n                        />\n                        {CodeViewerComponent && (\n                            <CodeViewerComponent\n                                code={removeHiddenCode(code)}\n                                loading={recordLoading || relationLoading}\n                            />\n                        )}\n                    </>\n                )}\n            </>\n        );\n    };\n\n    const InferencerComponent: InferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        id,\n    }) => {\n        return (\n            <Inferencer\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                key={resource ?? name}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n    key: string,\n    data: Record<string, unknown>,\n): string | string[] | undefined => {\n    const fieldableProperties = [\n        \"name\",\n        \"label\",\n        \"title\",\n        \"count\",\n        \"content\",\n        \"username\",\n        \"nickname\",\n        \"login\",\n        \"firstName\",\n        \"lastName\",\n        \"url\",\n    ];\n\n    if (urlLikeKeyRegexp.test(key)) {\n        fieldableProperties.unshift(\"url\");\n    }\n\n    const firstAvailable = fieldableProperties.find(\n        (fkey) => fkey in data && !!data[fkey],\n    );\n\n    if (firstAvailable) {\n        if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n            return [\"firstName\", \"lastName\"];\n        }\n\n        return firstAvailable;\n    }\n\n    return undefined;\n};\n","import { IResourceItem } from \"@pankod/refine-core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    if (resource?.options?.dataProviderName) {\n        return resource.options.dataProviderName;\n    }\n\n    return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n    return resource?.options?.dataProviderName;\n};\n","import { InferField } from \"@/types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n    inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n    // filter out null and false values and sort by priority then return the first one\n    // priority is a number, the higher the number the higher the priority\n    // if there is no priority, it will be 0\n    const field = (\n        [...inferredFields].filter(Boolean) as Array<InferField>\n    ).sort((a, b) => (b.priority || 0) - (a.priority || 0))[0];\n\n    if (!field) {\n        return null;\n    }\n\n    return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n    try {\n        const formatted = prettier.format(code, {\n            parser: \"typescript\",\n            plugins: [tsParser],\n            arrowParens: \"always\",\n            trailingComma: \"all\",\n            semi: true,\n            tabWidth: 4,\n            printWidth: 80,\n        });\n\n        return formatted;\n    } catch (error) {\n        console.warn(\"Formatting error in inferencer\", error);\n        return code;\n    }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n    return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n    const isRelation = relationRegexp.test(key);\n    const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n        return {\n            key,\n            relation: true,\n            multiple: isBasicArray ? true : false,\n            type: \"relation\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { relationRegexp } from \"@/field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n    return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n    const clean = removeRelationSuffix(str);\n    // Convert camelCase to camel Case\n    const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n    // Convert snake_case to snake case\n    const snakeCase = camelCase.replace(/_/g, \" \");\n    // Convert kebab-case to kebab case\n    const kebabCase = snakeCase.replace(/-/g, \" \");\n    // Capitalize the string\n    const capitalized = kebabCase\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n    return capitalized;\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n    // remove export statements from the code but keep the variables\n    const newCode = code.replace(\n        /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n        \"$1 $2 = \",\n    );\n\n    // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n    const lines = newCode.split(\"\\n\");\n    const newLines = lines.filter(\n        (line) => !line.trim().startsWith(\"export default\"),\n    );\n\n    return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n    content: string,\n    modules: Record<string, string> = {},\n): string => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports = new Set();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    for (const match of matches) {\n        const [, defaultImport, namedImports, namespaceImport, packageName] =\n            match;\n\n        if (packageName in modules) {\n            const importName = modules[packageName];\n\n            /**\n             * React and its exports are already available in the scope of the code.\n             * Restructuring them in import statements will cause errors.\n             * To avoid that, we are not replacing the import statements for React.\n             * This way, generated code can have \"react\" imports without any errors.\n             */\n            if (packageName === \"react\") {\n                continue;\n            }\n\n            if (defaultImport) {\n                imports.add(\n                    `const { default: ${defaultImport} } = ${importName};`,\n                );\n            }\n\n            if (namedImports) {\n                imports.add(\n                    `const${namedImports.replace(\n                        nameChangeRegex,\n                        `$1: $3$4`,\n                    )} = ${importName};`,\n                );\n            }\n\n            if (namespaceImport) {\n                imports.add(`const ${namespaceImport} = ${importName};`);\n            }\n        }\n    }\n\n    return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport { IResourceItem } from \"@pankod/refine-core\";\n\nimport { InferField } from \"@/types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n    field: InferField | false | null,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    if (!field) {\n        return undefined;\n    }\n\n    const resource = resources.find((el) => {\n        const stripped = removeRelationSuffix(field.key);\n\n        return (\n            el.name === stripped ||\n            el.name ===\n                (pluralize.isPlural(stripped)\n                    ? stripped\n                    : pluralize.plural(stripped)) ||\n            el.name ===\n                (pluralize.isSingular(stripped)\n                    ? stripped\n                    : pluralize.singular(stripped))\n        );\n    });\n\n    return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n    resourceName: string,\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    fallbackResourceName = \"Inferred\",\n) => {\n    // replace all non-alphanumeric characters with a space\n    const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n    // convert to singular\n    const singular = pluralize.singular(sanitized);\n    // prettify the string without spaces\n    const prettified = prettyString(singular).replace(/ /g, \"\");\n    // if prettified is empty, return the fallbackResourceName\n    const resourceComponentName = prettified || fallbackResourceName;\n    // get pretty type name\n    const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n    // if resourceName is not starting with an alphabetical character, return Type + resourceName\n    // e.g. \"123users\" => \"List123Users\"\n    if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n        return `${prettyType}${resourceComponentName}`;\n    }\n    // e.g. \"users\" => \"UserList\"\n    return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n    if (!expression) {\n        return \"\";\n    }\n\n    if (Array.isArray(expression)) {\n        return expression.join(\"\");\n    }\n\n    if (typeof expression === \"string\") {\n        return expression;\n    }\n\n    if (typeof expression === \"object\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"function\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"number\") {\n        return String(expression);\n    }\n\n    if (typeof expression === \"boolean\" && expression) {\n        return \"true\";\n    }\n\n    return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n    strings: TemplateStringsArray,\n    ...expressions: unknown[]\n) => {\n    const parsed = strings.reduce(\n        (result, currentString, i) =>\n            `${result}${currentString}${handleExpression(expressions[i])}`,\n        \"\",\n    );\n\n    return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n    return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n    // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n    // these blocks can present multiple times in the code\n\n    return code?.replace(\n        /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n        \"\",\n    );\n};\n","import { InferField } from \"@/types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n    return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n    let base = `${variableName}`;\n\n    if (key) {\n        base += \"?.\";\n        if (shouldDotAccess(key)) {\n            base += key;\n        } else {\n            base += `['${key}']`;\n        }\n    }\n\n    if (accessor) {\n        base += `?.`;\n        if (shouldDotAccess(accessor)) {\n            base += accessor;\n        } else {\n            base += `['${accessor}']`;\n        }\n    }\n\n    return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n    const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n    return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n    joiner: string | false = ' + \" \" + ',\n): string => {\n    if (Array.isArray(accessor)) {\n        if (joiner) {\n            return accessorMultiple(variable, key, accessor).join(joiner);\n        } else {\n            return accessorSingle(variable, key, accessor[0]);\n        }\n    } else {\n        return accessorSingle(variable, key, accessor);\n    }\n};\n\nexport const dotAccessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n) => {\n    let str = variable;\n\n    if (key) {\n        str += `.${key}`;\n    }\n\n    if (accessor) {\n        if (Array.isArray(accessor)) {\n            str += `.${accessor[0]}`;\n        } else {\n            str += `.${accessor}`;\n        }\n    }\n\n    return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n","import { ImportElement } from \"@/types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n    const byModule = imports.reduce((acc, [element, module, isDefault]) => {\n        if (!acc[module]) {\n            acc[module] = [] as Array<\n                string | [variable: string, isDefault?: boolean]\n            >;\n        }\n\n        if (!acc[module].includes(element)) {\n            if (isDefault) {\n                acc[module].push([element, true]);\n            } else {\n                acc[module].push(element);\n            }\n        }\n\n        return acc;\n    }, {} as Record<string, Array<string | [variable: string, isDefault?: boolean]>>);\n\n    const lines = Object.entries(byModule).map(([module, elements]) => {\n        const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n        const named = elements.filter((e) => typeof e === \"string\");\n        const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n        const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n        return `import ${defaultStr}${\n            defaultStr && namedStr ? \", \" : \"\"\n        }${namedStr} from \"${module}\";`;\n    });\n\n    return lines;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n    return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n    return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","import { InferField } from \"@/types\";\n\nexport const getOptionLabel = (field: InferField) => {\n    if (field.relationInfer && field.relationInfer.accessor) {\n        if (Array.isArray(field.relationInfer.accessor)) {\n            return `optionLabel: \"${field.relationInfer.accessor[0]}\",`;\n        }\n        if (field.relationInfer.accessor !== \"title\") {\n            return `optionLabel: \"${field.relationInfer.accessor}\",`;\n        }\n        return \"\";\n    }\n    return \"\";\n};\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n    // if fieldKey is number, return with prefix\n    // e.g. (12345, Data) => \"data12345\"\n    if (Number.isInteger(Number(fieldKey))) {\n        const lowerCaseFirstLetter =\n            suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n        return lowerCaseFirstLetter + fieldKey;\n    }\n\n    // if fieldKey is start with numbers, replace the numbers with empty string\n    // e.g. 123users => \"users\"\n    const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n    // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n    // e.g. \"users/account\" => \"users-account\"\n    const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n        /[^a-zA-Z0-9]/g,\n        \"-\",\n    );\n\n    // Convert to PascalCase\n    const prettyPluralVariableName = prettyString(\n        fieldKeyWithoutInvalidCharacters,\n    ).replace(/ /g, \"\");\n\n    const variableName = `${\n        prettyPluralVariableName.charAt(0).toLowerCase() +\n        prettyPluralVariableName.slice(1)\n    }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n    return variableName;\n};\n","import { FieldInferencer } from \"@/types\";\nimport { pickInferredField } from \"@/utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        value,\n        record,\n        infer = fieldInferencer,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, value, record, infer),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"@/types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import { FieldInferencer, InferType } from \"@/types\";\n\nexport const arrayInfer: FieldInferencer = (key, value, record, infer) => {\n    const isArray = Array.isArray(value);\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if (isArray) {\n        if (!isBasicArray) {\n            const inferredInnerType = infer(key, value[0], record, infer);\n            if (inferredInnerType) {\n                return {\n                    ...inferredInnerType,\n                    key,\n                    multiple: true,\n                    priority: 1,\n                };\n            } else {\n                return false;\n            }\n        }\n        const basicType = infer(key, value[0], record, infer) || {\n            type: \"string\" as InferType,\n        };\n\n        return {\n            key,\n            multiple: true,\n            priority: 1,\n            type: basicType?.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n    const isBoolean = typeof value === \"boolean\";\n\n    if (isBoolean) {\n        return {\n            key,\n            type: \"boolean\",\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from \"@/types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n    const isDateField =\n        dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n    const isValidDateString =\n        typeof value === \"string\" && dayjs(value).isValid();\n\n    const isAcceptableLength = typeof value === \"string\" && value.length > 4;\n\n    if (isDateField || (isValidDateString && isAcceptableLength)) {\n        return {\n            key,\n            type: \"date\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst emailRegexp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n    const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n    if (isValidEmail) {\n        return {\n            key,\n            type: \"email\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n    const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n    if (isImageURI) {\n        return {\n            key,\n            type: \"image\",\n            priority: 2,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n    const isUndefined = typeof value === \"undefined\";\n    const isNull = value === null;\n\n    if (isUndefined || isNull) {\n        return null;\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n    const isNumber = typeof value === \"number\";\n\n    if (isNumber) {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"@/utilities\";\nimport { FieldInferencer } from \"@/types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (key, value, record, infer) => {\n    const isNotNull = value !== null;\n    const isNotArray = !Array.isArray(value);\n    const isObject = typeof value === \"object\";\n\n    if (isNotNull && isNotArray && isObject) {\n        const onlyHasId =\n            Object.keys(value).length === 1 &&\n            idPropertyRegexp.test(Object.keys(value)[0]);\n\n        if (onlyHasId) {\n            return {\n                key,\n                type: \"relation\",\n                relation: true,\n                accessor: \"id\",\n                priority: 1,\n            };\n        }\n\n        const fieldableKeys = getFieldableKeys(\n            key,\n            value as Record<string, unknown>,\n        );\n\n        const hasFieldableKeys = fieldableKeys\n            ? fieldableKeys.length > 0\n            : false;\n\n        if (hasFieldableKeys && fieldableKeys) {\n            const innerFieldKey =\n                fieldableKeys && Array.isArray(fieldableKeys)\n                    ? fieldableKeys[0]\n                    : fieldableKeys;\n\n            const innerFieldType = infer(\n                innerFieldKey,\n                (value as Record<string, unknown>)[innerFieldKey],\n                value as Record<string, unknown>,\n                infer,\n            );\n\n            if (innerFieldType) {\n                const accessor = Array.isArray(fieldableKeys)\n                    ? fieldableKeys.map((el) => {\n                          if (innerFieldType.accessor) {\n                              return `${el}.${\n                                  Array.isArray(innerFieldType.accessor)\n                                      ? innerFieldType.accessor[0]\n                                      : innerFieldType.accessor\n                              }`;\n                          } else {\n                              return el;\n                          }\n                      })\n                    : innerFieldType.accessor\n                    ? Array.isArray(innerFieldType.accessor)\n                        ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n                        : `${fieldableKeys}.${innerFieldType.accessor}`\n                    : fieldableKeys;\n\n                return {\n                    ...innerFieldType,\n                    fieldable: true,\n                    key,\n                    accessor: accessor,\n                    priority: 1,\n                };\n            }\n        }\n\n        return {\n            key,\n            fieldable: false,\n            type: \"object\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n    const isText = typeof value === \"string\";\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    imageInfer,\n    nullishInfer,\n    numberInfer,\n    objectInfer,\n    relationInfer,\n    richtextInfer,\n    textInfer,\n    urlInfer,\n];\n","import { FieldTransformer, InferField } from \"@/types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"@/types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"@/utilities\";\nimport { FieldTransformer, InferField } from \"@/types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    // resource,\n    // record,\n    // infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"@/types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import React, { useEffect } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\n/**\n * CodeHighlight component renders the code in a pretty way with `prism-react-renderer` library.\n * By default, code overflowing 50vh will be scrollable; this can be adjusted with the `wrapperProps` prop.\n */\nexport const CodeHighlight: React.FC<{\n    code: string;\n    wrapperProps?: React.ComponentProps<\"div\">;\n}> = ({ code, wrapperProps }) => {\n    useEffect(() => {\n        const styleElement = document.createElement(\"style\");\n        styleElement.appendChild(\n            document.createTextNode(\n                `\n                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}\n                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}\n                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}\n                `,\n            ),\n        );\n        document.getElementById(\"code-highlight\")?.appendChild(styleElement);\n    }, []);\n\n    return (\n        <div\n            id=\"code-highlight\"\n            style={{\n                maxHeight: \"75vh\",\n                height: \"100%\",\n                overflow: \"auto\",\n                backgroundColor: \"rgb(30, 30, 30)\",\n            }}\n            {...(wrapperProps ?? {})}\n        >\n            <Highlight\n                {...defaultProps}\n                theme={theme}\n                code={code}\n                language=\"tsx\"\n            >\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={className}\n                        style={{\n                            ...style,\n                            padding: \"14px 14px 14px 14px\",\n                            margin: \"0\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    >\n                        {tokens.map((line, i) => (\n                            <div key={i} {...getLineProps({ line, key: i })}>\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({ token, key })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        </div>\n    );\n};\n","import React from \"react\";\nimport * as RefineCore from \"@pankod/refine-core\";\n\nimport { LivePreview, LiveProvider, ContextProps } from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"@/utilities\";\nimport { AdditionalScopeType, LiveComponentProps } from \"@/types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n    [\"react\", \"React\", React],\n    [\"@pankod/refine-core\", \"RefineCore\", RefineCore],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n    {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n    fetchError,\n    code,\n    additionalScope,\n    errorComponent: ErrorComponent,\n}) => {\n    const sanitized =\n        (code &&\n            replaceExports(\n                replaceImports(\n                    code,\n                    [...defaultScope, ...(additionalScope ?? [])].reduce(\n                        (\n                            acc,\n                            [\n                                packageName,\n                                variableName,\n                                _module,\n                                ignoreReplacement,\n                            ],\n                        ) => {\n                            if (ignoreReplacement) {\n                                return acc;\n                            }\n                            return {\n                                ...acc,\n                                [packageName]: variableName,\n                            };\n                        },\n                        {},\n                    ),\n                ),\n            )) ??\n        \"\";\n\n    const scope = React.useMemo(() => {\n        return {\n            React,\n            ...React,\n            ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n                (acc, [_packageName, variableName, packageContent]) => {\n                    return {\n                        ...acc,\n                        [variableName]: packageContent,\n                    };\n                },\n                {},\n            ),\n        };\n    }, [additionalScope]);\n\n    const ErrorComponentWithError = React.useMemo(() => {\n        const LiveErrorComponent = () => {\n            const { error } = React.useContext(InferencerLiveContext);\n\n            if (ErrorComponent) {\n                return (\n                    <ErrorComponent\n                        error={\n                            error\n                                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                                : typeof fetchError === \"string\"\n                                ? fetchError\n                                : fetchError\n                                ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                                : undefined\n                        }\n                    />\n                );\n            }\n\n            return null;\n        };\n\n        return LiveErrorComponent;\n    }, [ErrorComponent, fetchError]);\n\n    return (\n        <LiveProvider\n            Context={InferencerLiveContext}\n            code={sanitized}\n            scope={scope}\n            noInline\n        >\n            {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n            <ErrorComponentWithError />\n        </LiveProvider>\n    );\n};\n","import React from \"react\";\nimport { useDataProvider, useResource, BaseKey } from \"@pankod/refine-core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"@/utilities\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    resourceNameOrRouteName: string,\n    idFromProps?: string | number,\n) => {\n    const {\n        resource,\n        resourceName,\n        id: idFromURL,\n        resources,\n    } = useResource({\n        resourceNameOrRouteName,\n    });\n\n    const id = idFromProps ?? idFromURL;\n\n    const dataProvider = useDataProvider();\n\n    const [error, setError] = React.useState<string | undefined>(undefined);\n\n    const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n        undefined,\n    );\n    const [initial, setInitial] = React.useState<boolean>(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (recordItemId: BaseKey | undefined) => {\n            const dataProviderName =\n                dataProviderFromResource(resource) ??\n                pickDataProvider(resourceName, undefined, resources);\n            const dp = dataProvider(dataProviderName);\n\n            setLoading(true);\n            setError(undefined);\n\n            try {\n                if (type === \"list\" || type === \"create\") {\n                    const response = await dp.getList({\n                        resource: resourceName,\n                    });\n                    const r = response.data?.[0];\n\n                    if (!r) {\n                        setError(\n                            `<p>No records/data found for resource \"${resourceName}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                        );\n                    }\n                    setData(r);\n                    setTimeout(() => {\n                        setLoading(false);\n                    }, 500);\n                }\n                if ((type === \"edit\" || type === \"show\") && recordItemId) {\n                    const response = await dp.getOne({\n                        resource: resourceName,\n                        id: recordItemId,\n                    });\n                    const r = response.data;\n                    if (!r) {\n                        setError(\n                            `<p>No records/data found for resource \"${resourceName}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                        );\n                    }\n                    setData(r);\n                    setTimeout(() => {\n                        setLoading(false);\n                    }, 500);\n                }\n            } catch (error) {\n                console.warn(\n                    \"An error occured while fetching the resource data. Please check the error message below:\",\n                    error,\n                );\n                setError(\n                    `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resourceName}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                );\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n        },\n        [type, dataProvider, resource, resourceName, resources],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (!loading && !data) {\n            resolver(id);\n        }\n    }, [resolver, id]);\n\n    return {\n        data,\n        loading,\n        initial,\n        error,\n    };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@pankod/refine-core\";\n\nimport {\n    dataProviderFromResource,\n    removeRelationSuffix,\n    toPlural,\n    toSingular,\n} from \"@/utilities\";\nimport { FieldInferencer, InferField, ResourceInferenceAttempt } from \"@/types\";\nimport { get } from \"lodash\";\n\ntype UseRelationFetchProps = {\n    record?: Record<string, unknown>;\n    fields?: (InferField | null | false)[];\n    infer: FieldInferencer;\n};\n\nexport const useRelationFetch = ({\n    record,\n    fields,\n    infer,\n}: UseRelationFetchProps) => {\n    const dataProvider = useDataProvider();\n\n    const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n    const [initial, setInitial] = React.useState(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (allFields: (InferField | false | null)[]) => {\n            console.groupCollapsed(\n                \"@pankod/refine-inferencer is trying to detect relations\",\n            );\n            const attempts: Array<ResourceInferenceAttempt> = [];\n            setLoading(true);\n            try {\n                const promises = allFields.map(async (field) => {\n                    if (field && (field.relation || field.canRelation)) {\n                        if (record) {\n                            const dataProviderName = dataProviderFromResource(\n                                field.resource,\n                            );\n                            const dp = dataProvider(dataProviderName);\n\n                            const requestId = Array.isArray(field.accessor)\n                                ? undefined\n                                : field.multiple\n                                ? (record[field.key] as Array<unknown>).map(\n                                      (el) => {\n                                          return field.accessor\n                                              ? get(el, field.accessor)\n                                              : el;\n                                      },\n                                  )[0]\n                                : field.accessor\n                                ? get(record[field.key], field.accessor)\n                                : record[field.key];\n\n                            if (requestId && field.resource) {\n                                try {\n                                    const { data } = await dp.getOne({\n                                        resource: field.resource.name,\n                                        id: requestId,\n                                    });\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n\n                                    const relationInfer = infer(\n                                        \"__\",\n                                        data,\n                                        {},\n                                        infer,\n                                    );\n\n                                    return {\n                                        ...field,\n                                        relationInfer,\n                                    };\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n                                    return {\n                                        ...field,\n                                        relationInfer: null,\n                                    };\n                                }\n                            }\n\n                            if (requestId) {\n                                let responseData;\n                                let isPlural;\n\n                                try {\n                                    const { data } = await dp.getOne({\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        id: requestId,\n                                    });\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    responseData = data;\n                                    isPlural = true;\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    try {\n                                        const { data } = await dp.getOne({\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            id: requestId,\n                                        });\n\n                                        attempts.push({\n                                            status: \"success\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        responseData = data;\n                                        isPlural = false;\n                                    } catch (error) {\n                                        attempts.push({\n                                            status: \"error\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        return {\n                                            ...field,\n                                            relationInfer: null,\n                                        };\n                                    }\n                                }\n\n                                const relationInfer = infer(\n                                    \"__\",\n                                    responseData,\n                                    {},\n                                    infer,\n                                );\n\n                                const resourceNameWithoutRelationSuffix =\n                                    removeRelationSuffix(field.key);\n\n                                return {\n                                    ...field,\n                                    relation: true,\n                                    type: \"relation\",\n                                    resource: {\n                                        name: isPlural\n                                            ? toPlural(\n                                                  resourceNameWithoutRelationSuffix,\n                                              )\n                                            : toSingular(\n                                                  resourceNameWithoutRelationSuffix,\n                                              ),\n                                    },\n                                    fieldable: false,\n                                    canRelation: undefined,\n                                    relationInfer,\n                                };\n                            }\n\n                            return {\n                                ...field,\n                                relationInfer: null,\n                            };\n                        }\n                    }\n                    return field;\n                });\n\n                const results = await Promise.all(promises);\n\n                setUpdatedFields(results.filter((el) => el) as InferField[]);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            } catch (error) {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n            setTimeout(() => {\n                console.log(\n                    `Tried to detect relations with ${\n                        attempts.length\n                    } attempts and succeeded with ${\n                        attempts.filter((el) => el.status === \"success\").length\n                    } attempts.`,\n                );\n                console.groupEnd();\n            }, 500);\n        },\n        [dataProvider, record],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (\n            !loading &&\n            fields &&\n            fields.length > 0 &&\n            updatedFields.length === 0\n        ) {\n            resolver(fields);\n        }\n    }, [resolver, loading, fields, resolver]);\n\n    return {\n        fields: updatedFields,\n        loading,\n        initial,\n    };\n};\n","import React from \"react\";\n\nimport { Alert, Row, Col } from \"@pankod/refine-antd\";\n\nimport { CreateInferencerConfig } from \"@/types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n    error,\n}) => {\n    if (error) {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"200px\" }}>\n                <Col>\n                    <Alert\n                        message=\"Error\"\n                        description={\n                            <div\n                                dangerouslySetInnerHTML={{\n                                    __html: error ?? \"\",\n                                }}\n                            />\n                        }\n                        type=\"error\"\n                        showIcon\n                    />\n                </Col>\n            </Row>\n        );\n    }\n\n    return null;\n};\n","import React from \"react\";\n\nimport { Spin, Row, Col } from \"@pankod/refine-antd\";\n\nimport { CreateInferencerConfig } from \"@/types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n    () => {\n        return (\n            <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"300px\" }}>\n                <Col>\n                    <Spin size=\"large\" />\n                </Col>\n            </Row>\n        );\n    };\n","import React from \"react\";\nimport { Button, Modal, Icons, Space } from \"@pankod/refine-antd\";\n\nimport { prettierFormat } from \"@/utilities\";\nimport { CreateInferencerConfig } from \"@/types\";\nimport { CodeHighlight } from \"@/components\";\n\nexport const CodeViewerComponent: CreateInferencerConfig[\"codeViewerComponent\"] =\n    ({ code: rawCode, loading }) => {\n        const code = React.useMemo(() => {\n            return prettierFormat(rawCode ?? \"\");\n        }, [rawCode]);\n\n        const inputRef = React.useRef<HTMLTextAreaElement>(null);\n\n        const [open, setOpen] = React.useState(false);\n        const [isCopied, setIsCopied] = React.useState(false);\n\n        if (loading) {\n            return null;\n        }\n\n        const copyCode = () => {\n            inputRef?.current?.select();\n            inputRef?.current?.setSelectionRange(0, Number.MAX_SAFE_INTEGER);\n            if (typeof navigator !== \"undefined\") {\n                navigator.clipboard.writeText(inputRef?.current?.value ?? \"\");\n                setIsCopied(true);\n                setTimeout(() => {\n                    setIsCopied(false);\n                }, 1000);\n            }\n        };\n\n        if (code) {\n            return (\n                <>\n                    <div style={{ position: \"fixed\", bottom: 12, right: 60 }}>\n                        <Space>\n                            <Button\n                                type=\"primary\"\n                                onClick={() => setOpen(true)}\n                                icon={<Icons.CodeOutlined />}\n                            >\n                                Show Code\n                            </Button>\n                            <Button\n                                type=\"default\"\n                                target=\"_blank\"\n                                href=\"https://github.com/refinedev/refine/discussions/3046\"\n                                icon={<Icons.MessageOutlined />}\n                            >\n                                Give Feedback\n                            </Button>\n                        </Space>\n                    </div>\n                    <div style={{ height: \"50px\" }}></div>\n                    <Modal\n                        width={800}\n                        open={open}\n                        onCancel={() => setOpen(false)}\n                        closeIcon={\n                            <Icons.CloseOutlined style={{ color: \"#666b7a\" }} />\n                        }\n                        footer={null}\n                        bodyStyle={{ padding: 0 }}\n                    >\n                        <CodeHighlight code={code} />\n                        <textarea\n                            ref={inputRef}\n                            defaultValue={(code ?? \"\").replace(/\\\\n/g, \"\\r\\n\")}\n                            id=\"code-input\"\n                            aria-hidden=\"true\"\n                            style={{\n                                padding: 0,\n                                margin: 0,\n                                width: 0,\n                                height: 0,\n                                opacity: 0,\n                                border: \"none\",\n                                display: \"block\",\n                            }}\n                        />\n                        <Button\n                            style={{\n                                position: \"absolute\",\n                                bottom: 12,\n                                right: 12,\n                                width: 100,\n                            }}\n                            key=\"copy\"\n                            type=\"default\"\n                            icon={\n                                isCopied ? (\n                                    <Icons.CheckOutlined\n                                        style={{ color: \"green\" }}\n                                    />\n                                ) : (\n                                    <Icons.CopyOutlined />\n                                )\n                            }\n                            onClick={copyCode}\n                        >\n                            {isCopied ? \"Copied\" : \"Copy\"}\n                        </Button>\n                    </Modal>\n                </>\n            );\n        }\n\n        return null;\n    };\n","import * as RefineAntd from \"@pankod/refine-antd\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for list page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"list\",\n    );\n    const recordName = \"tableProps?.dataSource\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@pankod/refine-core\"],\n        [\"BaseRecord\", \"@pankod/refine-core\"],\n        [\"useTable\", \"@pankod/refine-antd\"],\n        [\"List\", \"@pankod/refine-antd\"],\n        [\"Table\", \"@pankod/refine-antd\"],\n        [\"Space\", \"@pankod/refine-antd\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useMany\", \"@pankod/refine-core\"]);\n\n                let idsString = \"\";\n\n                if (field.multiple) {\n                    idsString = `[].concat(...(${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []))`;\n                } else {\n                    idsString = `${recordName}?.map((item) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []`;\n                }\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n                `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const validVariableName = getVariableName(field.key, \"Data\");\n            const variableName = `${validVariableName}?.data`;\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (Array.isArray(field.accessor)) {\n                // not handled - not possible case\n                return undefined;\n            }\n\n            const loadingCondition = `${variableIsLoading} ? <>Loading...</> : `;\n\n            const dataIndex = field.multiple\n                ? `dataIndex=\"${field.key}\"`\n                : `dataIndex={[\"${field.key}\", ${\n                      field.accessor ? `\"${field.accessor}\"` : \"\"\n                  }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = \"\";\n\n            // if multiple, then map it with tagfield\n            // if not, then just show the value\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@pankod/refine-antd\"]);\n                let val = \"item\";\n\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((resourceItems) => resourceItems.id === ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n                    val = valViewableSingle;\n                }\n\n                render = `render={(value: any[]) => ${loadingCondition} (\n                    <>\n                        {${accessor(\n                            \"value\",\n                            undefined,\n                            // field.accessor,\n                        )}?.map((item, index) => (\n                            <TagField key={index} value={${val}} />\n                        ))}\n                    </>\n                )}`;\n            } else {\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((item) => item.id === value)`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n\n                    render = `render={(value) => ${loadingCondition} ${valViewableSingle}}`;\n                } else {\n                    render = \"\";\n                }\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push([\"ImageField\", \"@pankod/refine-antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                          field.accessor ? `\"${field.accessor}\"` : \"\"\n                      }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <ImageField style={{ maxWidth: \"100px\" }} value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <ImageField style={{ maxWidth: \"100px\" }} value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push(\n                [\"TagField\", \"@pankod/refine-antd\"],\n                [\"EmailField\", \"@pankod/refine-antd\"],\n            );\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                          field.accessor ? `\"${field.accessor}\"` : \"\"\n                      }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <EmailField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push(\n                [\"UrlField\", \"@pankod/refine-antd\"],\n                [\"TagField\", \"@pankod/refine-antd\"],\n            );\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                          field.accessor ? `\"${field.accessor}\"` : \"\"\n                      }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <UrlField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" + \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <TagField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field?.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@pankod/refine-antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                          field.accessor ? `\"${field.accessor}\"` : \"\"\n                      }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <BooleanField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                \" && \",\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" && \");\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <BooleanField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@pankod/refine-antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : `dataIndex={[\"${field.key}\", ${\n                          field.accessor ? `\"${field.accessor}\"` : \"\"\n                      }]}`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <DateField value={${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n                ' + \" \" + ',\n            )}} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <DateField value={${val}} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field?.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@pankod/refine-antd\"]);\n\n            const dataIndex =\n                Array.isArray(field.accessor) || field.multiple\n                    ? `dataIndex=\"${field.key}\"`\n                    : field.accessor\n                    ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                    : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n\n            let render = jsx`render={(value: any) => <MarkdownField value={(${accessor(\n                \"value\",\n                undefined,\n                Array.isArray(field.accessor) ? field.accessor : undefined,\n            )}).slice(0, 80) + \"...\"} />}`;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = jsx`render={(value: any[]) => (<>{value?.map((item, index) => (\n                    <MarkdownField value={(${val})?.slice(0, 80) + \"...\"} key={index} />\n                ))}</>)}`;\n            }\n\n            return jsx`<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n\n        return undefined;\n    };\n\n    const basicFields = (field: InferField) => {\n        if (field && (field.type === \"text\" || field.type === \"number\")) {\n            const dataIndex =\n                field.accessor &&\n                !Array.isArray(field.accessor) &&\n                !field.multiple\n                    ? `dataIndex={[\"${field.key}\", \"${field.accessor}\"]}`\n                    : `dataIndex=\"${field.key}\"`;\n\n            const title = `title=\"${prettyString(field.key)}\"`;\n            let render = \"\";\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@pankod/refine-antd\"]);\n\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                render = `render={(value: any[]) => (<>{value?.map((item) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}</>)}`;\n            }\n            if (!field.multiple && Array.isArray(field.accessor)) {\n                render = `render={(value: any) => (<>{${accessor(\n                    \"value\",\n                    undefined,\n                    field.accessor,\n                )}}</>)}`;\n            }\n\n            return `<Table.Column ${dataIndex} ${title} ${render} />`;\n        }\n        return undefined;\n    };\n\n    const { canEdit, canShow, canDelete } = resource ?? {};\n\n    if (canEdit) {\n        imports.push([\"EditButton\", \"@pankod/refine-antd\"]);\n    }\n    if (canShow) {\n        imports.push([\"ShowButton\", \"@pankod/refine-antd\"]);\n    }\n    if (canDelete) {\n        imports.push([\"DeleteButton\", \"@pankod/refine-antd\"]);\n    }\n\n    const actionButtons =\n        canEdit || canShow || canDelete\n            ? jsx`\n            <Table.Column\n                title=\"Actions\"\n                dataIndex=\"actions\"\n                render={(_, record: BaseRecord) => (\n                    <Space>\n                    ${\n                        canEdit\n                            ? jsx`\n                        <EditButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                            : \"\"\n                    }\n                    ${\n                        canShow\n                            ? jsx`\n                        <ShowButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                            : \"\"\n                    }\n                    ${\n                        canDelete\n                            ? jsx`\n                        <DeleteButton\n                            hideText\n                            size=\"small\"\n                            recordItemId={record.id}\n                        />\n                        `\n                            : \"\"\n                    }\n                    </Space>\n                )}\n            />\n        `\n            : \"\";\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n                return basicFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        const { tableProps } = useTable({\n            syncWithLocation: true,\n            ${isCustomPage ? ` resource: \"${resource.name}\",` : \"\"}\n        });\n    \n        ${relationHooksCode}\n\n        return (\n            <List>\n                <Table {...tableProps} rowKey=\"id\">\n                    ${renderedFields.join(\"\\r\\n\")}\n                    ${actionButtons}\n                </Table>\n            </List>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: InferencerResultComponent = createInferencer({\n    type: \"list\",\n    additionalScope: [[\"@pankod/refine-antd\", \"RefineAntd\", RefineAntd]],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import * as RefineAntd from \"@pankod/refine-antd\";\nimport dayjs from \"dayjs\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getOptionLabel,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\nimport { shouldDotAccess } from \"@/utilities/accessor\";\n\n/**\n * a renderer function for create page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"create\",\n    );\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@pankod/refine-core\"],\n        [\"Create\", \"@pankod/refine-antd\"],\n        [\"Form\", \"@pankod/refine-antd\"],\n        [\"useForm\", \"@pankod/refine-antd\"],\n        [\"Input\", \"@pankod/refine-antd\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@pankod/refine-antd\"]);\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    ${getOptionLabel(field)}\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"@pankod/refine-antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>             \n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input  />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"@pankod/refine-antd\"],\n                [\"getValueFromEvent\", \"@pankod/refine-antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=\"${prettyString(field.key)}\">\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"@pankod/refine-antd\"]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push(\n                [\"DatePicker\", \"@pankod/refine-antd\"],\n                [\"dayjs\", \"dayjs\", true],\n            );\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=\"${prettyString(field.key)}\"\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      action: \"create\",\n                  }`\n                : \"\"\n        });\n    \n        ${relationHooksCode}\n\n        return (\n            <Create saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Create>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: InferencerResultComponent = createInferencer({\n    type: \"create\",\n    additionalScope: [\n        [\"@pankod/refine-antd\", \"RefineAntd\", RefineAntd],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import * as RefineAntd from \"@pankod/refine-antd\";\nimport dayjs from \"dayjs\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\nimport { shouldDotAccess } from \"@/utilities/accessor\";\n\n/**\n * a renderer function for edit page in Ant Design\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n    id,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"edit\",\n    );\n    const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"IResourceComponentsProps\", \"@pankod/refine-core\"],\n        [\"Edit\", \"@pankod/refine-antd\"],\n        [\"Form\", \"@pankod/refine-antd\"],\n        [\"useForm\", \"@pankod/refine-antd\"],\n        [\"Input\", \"@pankod/refine-antd\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useSelect\", \"@pankod/refine-antd\"]);\n\n                let val = accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    false,\n                );\n\n                if (field.multiple && field.accessor) {\n                    val = `${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any) => ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                }\n\n                return `\n                const { selectProps: ${getVariableName(\n                    field.key,\n                    \"SelectProps\",\n                )} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                    ${\n                        field.relationInfer\n                            ? field.relationInfer.accessor\n                                ? typeof field.relationInfer.accessor ===\n                                  \"string\"\n                                    ? field.relationInfer.accessor !== \"title\"\n                                        ? `optionLabel: \"${field.relationInfer.accessor}\",`\n                                        : \"\"\n                                    : `optionLabel: \"${field.relationInfer.accessor[0]}\",`\n                                : \"\"\n                            : \"\"\n                    }\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push([\"Select\", \"@pankod/refine-antd\"]);\n            const variableName = getVariableName(field.key, \"SelectProps\");\n\n            const name = field.accessor\n                ? field.multiple\n                    ? `\"${field.key}\"`\n                    : `[\"${field.key}\", \"${field.accessor}\"]`\n                : `\"${field.key}\"`;\n\n            let valueProps = \"\";\n            let valueEvent = \"\";\n\n            if (field.accessor && field.multiple) {\n                const canDot = shouldDotAccess(`${field.accessor}`);\n                valueEvent = `getValueFromEvent={(selected: string[]) => {\n                    return selected?.map((item) => ({ ${\n                        canDot ? field.accessor : `[\"${field.accessor}\"]`\n                    }: item }));\n                }}`;\n                valueProps = `getValueProps={(value: any[]) => {\n                    return {\n                        value: value?.map((item) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )}),\n                    };\n                }}`;\n            }\n\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={${name}}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    ${valueProps}\n                    ${valueEvent}\n                >\n                    <Select ${\n                        field.multiple ? 'mode=\"multiple\"' : \"\"\n                    } {...${variableName}} />\n                </Form.Item>             \n                `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\"\n        ) {\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label={\\`${prettyString(\n                                    field.key,\n                                )} \\${index+1}\\`}\n                                name={[${val}]}\n                            >\n                                <Input\n                                    type=\"${field.type}\"\n                                ${\n                                    isIDKey(field.key)\n                                        ? \"readOnly disabled\"\n                                        : \"\"\n                                } />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input ${isIDKey(field.key) ? \"readOnly disabled\" : \"\"} />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            imports.push(\n                [\"Upload\", \"@pankod/refine-antd\"],\n                [\"getValueFromEvent\", \"@pankod/refine-antd\"],\n            );\n            let valueProps = 'valuePropName=\"fileList\"';\n\n            if (field.multiple && !field.accessor) {\n                valueProps =\n                    \"getValueProps={(value) => ({ fileList: value?.map((item: any) => ({ url: item, name: item, uid: item }))})}\";\n            }\n\n            if (!field.multiple) {\n                if (field.accessor) {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: value ? [value] : [] })}\";\n                } else {\n                    valueProps =\n                        \"getValueProps={(value) => ({ fileList: [{ url: value, name: value, uid: value }]})}\";\n                }\n            }\n\n            return jsx`\n                <Form.Item label=\"${prettyString(field.key)}\">\n                    <Form.Item\n                        name=\"${field.key}\"\n                        ${valueProps}\n                        getValueFromEvent={getValueFromEvent}\n                        noStyle\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Upload.Dragger\n                            listType=\"picture\"\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            beforeUpload={() => false}\n                        >\n                            <p className=\"ant-upload-text\">\n                                Drag & drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n                `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"Checkbox\", \"@pankod/refine-antd\"]);\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return `\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                valuePropName=\"checked\"\n                                label={\\`${prettyString(\n                                    field.key,\n                                )} \\${index+1}\\`}\n                                name={[${val}]}\n                            >\n                                <Checkbox>${prettyString(field.key)}</Checkbox>\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    valuePropName=\"checked\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Checkbox>${prettyString(field.key)}</Checkbox>\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push(\n                [\"DatePicker\", \"@pankod/refine-antd\"],\n                [\"dayjs\", \"dayjs\", true],\n            );\n\n            if (field.multiple) {\n                const val = accessor(field.key, \"index\", field.accessor)\n                    .split(\"?.\")\n                    .map((el) => `\"${el}\"`)\n                    .join(\", \")\n                    .replace(/\"index\"/, \"index\");\n\n                return jsx`\n                    <>\n                        {(${accessor(\n                            recordName,\n                            field.key,\n                        )} as any[])?.map((item, index) => (\n                            <Form.Item\n                                key={index}\n                                label={\\`${prettyString(\n                                    field.key,\n                                )} \\${index+1}\\`}\n                                name={[${val}]}\n                                getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                            >\n                                <DatePicker />\n                            </Form.Item>\n                        ))}\n                    </>\n                `;\n            }\n            return jsx`\n                <Form.Item\n                    label=\"${prettyString(field.key)}\"\n                    name={[\"${field.key}\"${\n                field.accessor ? ', \"' + field.accessor + '\"' : \"\"\n            }]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({ value: value ? dayjs(value) : undefined })}\n                >\n                    <DatePicker />\n                </Form.Item>\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            return jsx`\n            <Form.Item\n                label=\"${prettyString(field.key)}\"\n                name=\"${field.key}\"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea rows={5} />\n            </Form.Item>\n            `;\n        }\n\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n                return basicInputFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME}: React.FC<IResourceComponentsProps> = () => {\n        const { formProps, saveButtonProps, queryResult } = useForm(${\n            isCustomPage\n                ? `{\n                      resource: \"${resource.name}\",\n                      id: ${id},\n                      action: \"edit\",\n                  }`\n                : \"\"\n        });\n    \n        const ${recordName} = queryResult?.data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Edit saveButtonProps={saveButtonProps}>\n                <Form {...formProps} layout=\"vertical\">\n                    ${renderedFields.join(\"\")}\n                </Form>\n            </Edit>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n    type: \"edit\",\n    additionalScope: [\n        [\"@pankod/refine-antd\", \"RefineAntd\", RefineAntd],\n        [\"dayjs\", \"dayjs\", dayjs, true],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n"],"mappings":"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","names":["src_exports","__export","AuthPage","Authenticated","CanAccess","ErrorComponent","LayoutWrapper","LoginPage","ReadyPage","Refine","RouteChangeHandler","UndoableQueue","createTreeView","file2Base64","getDefaultFilter","getDefaultSortOrder","getNextPageParam","getPreviousPageParam","handleUseParams","importCSVMapper","parseTableParams","parseTableParamsFromQuery","routeGenerator","setInitialFilters","setInitialSorters","stringifyTableParams","unionFilters","unionSorters","useApiUrl","useAuthenticated","useBreadcrumb","useCan","useCanWithoutCache","useCancelNotification","useCheckError","useCreate","useCreateMany","useCustom","useCustomMutation","useDataProvider","useDelete","useDeleteMany","useExport","useForgotPassword","useForm","useGetIdentity","useGetLocale","useHandleNotification","useImport","useInfiniteList","useInvalidate","useIsExistAuthentication","useList","useLiveMode","useLog","useLogList","useLogin","useLogout","useMany","useMenu","useModal","useMutationMode","useNavigation","useNotification","useOne","usePermissions","usePublish","useRedirectionAfterSubmission","useRefineContext","useRegister","useResource","useResourceSubscription","useResourceWithRoute","useRouterContext","useSelect","useSetLocale","useShow","useSubscription","useSyncWithLocation","useTable","useTitle","useTranslate","useUpdate","useUpdateMany","useUpdatePassword","useWarnAboutChange","userFriendlyResourceName","module","__toCommonJS","__reExport","import_react","E","import_react_query","AuthContext","sr","React","AuthContextProvider","children","isProvided","authOperations","replace","queryClient","zr","invalidateAuthStore","loginFunc","params","_a","result","error","registerFunc","logoutFunc","redirectPath","checkAuthFunc","options","getPermissions","qr","jr","queryOptions","getUserIdentity","Zr","Jr","mutationOptions","push","logoutFromContext","Xr","open","eo","data","variables","import_qs","loginFromContext","to","useLocation","search","close","oo","qs","ro","redirectPathFromAuth","registerFromContext","ao","no","forgotPasswordFromContext","so","io","updatePasswordFromContext","uo","queryStrings","co","po","checkAuth","lo","mo","checkErrorFromContext","fo","logout","yo","To","userFriendlySecond","miliseconds","import_zip","import_fromPairs","mapData","item","headers","body","entry","Ro","fromPairs","Co","zip","index","array","import_pluralize","import_unionWith","import_differenceWith","import_warn_once","url","current","pageSize","sorter","filters","At","pagination","rest","compareFilters","left","right","compareSorters","permanentFilter","newFilters","prevFilters","f","xo","warnOnce","ir","unionWith","crudFilter","permanentSorter","newSorters","crudSorter","defaultFilter","ur","differenceWith","defaultSorter","columnName","sortItem","operatorType","filter","operator","field","file","resolve","reject","reader","resultHandler","resource","type","humanizeResource","humanizeString","pr","pluralize","queryKeys","dataProviderName","metaData","providerName","keys","config","ids","id","meta","hasPermission","permissions","action","i","getParentOf","resourceItem","resourcesFromProps","_b","_c","_d","_e","route","resourceRoute","parent","resources","tree","resourcesRouteObject","resourcesNameObject","child","name","text","DefaultLayout","Mo","defaultRefineOptions","RefineContext","mr","RefineContextProvider","hasDashboard","mutationMode","warnWhenUnsavedChanges","syncWithLocation","undoableTimeout","DashboardPage","Title","Layout","Header","Sider","Footer","OffLayoutArea","catchAll","liveMode","onLiveEvent","handleRefineOptions","disableTelemetry","reactQueryClientConfig","reactQueryDevtoolConfig","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","optionsWithDefaults","disableTelemetryWithDefault","reactQueryWithDefaults","redirectPage","redirectFromProps","redirectOptions","sequentialPromises","promises","onEachResolve","onEachReject","results","promise","pickDataProvider","resourceName","handleMultiple","res","lastPage","cursor","totalPages","successNotification","errorNotification","liveParams","dataProvider","queryKey","getList","translate","checkError","handleNotification","isEnabled","Io","pageParam","signal","hasPagination","restConfig","notificationConfig","err","getOne","Uo","getMany","So","import_isEqual","UndoableQueueContext","Ye","initialState","undoableQueueReducer","state","notificationItem","Vt","isEqual","UndoableQueueContextProvider","notifications","notificationDispatch","notificationData","notification","Ht","mutationModeContext","undoableTimeoutContext","publish","log","invalidateStore","values","onCancel","mutationModePropOrContext","undoableTimeoutPropOrContext","doMutation","cancelMutation","previousQueries","previous","record","_data","_error","invalidates","context","resourceSingular","Cr","previousData","queryData","acc","fields","operation","query","wo","successNotificationFromProp","Rr","errorNotificationFromProp","Wt","xr","Ao","selectedDataProvider","val","response","resourcePlural","Bo","$t","mutationFn","Pr","Gt","ko","getApiUrl","method","custom","Ho","Wo","defaultDataProvider","DataContext","Dr","DataContextProvider","dataProviders","zt","Go","total","LiveContext","vr","LiveContextProvider","liveProvider","channel","types","enabled","liveModeFromProp","qo","liveDataContext","ft","liveModeFromContext","onLiveEventContextCallback","subscription","event","jo","liveContext","Yo","ResourceContext","hr","ResourceContextProvider","propResourceName","resourceNameOrRouteName","recordItemId","Jo","resourceWithRoute","useParams","qt","p","resourceWithName","Xo","NotificationContext","jt","NotificationContextProvider","ta","ra","fallbackNotification","TranslationContext","Er","TranslationContextProvider","i18nProvider","Yt","lang","Zt","key","defaultMessage","Jt","sa","UnsavedWarnContext","Tt","UnsavedWarnContextProvider","warnWhen","setWarnWhen","Lr","ua","pa","da","import_export_to_csv_fix_source_map","maxItemCount","exportOptions","onError","isLoading","setIsLoading","la","routeResourceName","filename","rawData","preparingData","ma","resourceFromProps","actionFromProps","idFromProps","onMutationSuccess","onMutationError","mutationModeProp","createMutationOptions","updateMutationOptions","resourceFromRoute","actionFromRoute","idFromParams","defaultId","setId","Ir","isCreate","isEdit","isClone","redirect","enableQuery","queryResult","isFetchingQuery","mutationResultCreate","mutateCreate","isLoadingCreate","mutationResultUpdate","mutateUpdate","isLoadingUpdate","handleSubmitWithRedirect","onSuccess","_","responseId","idFromFunction","show","edit","list","create","fa","useHistory","history","handleUrl","createUrl","editUrl","encodedId","cloneUrl","showUrl","listUrl","path","resourceFromProp","idFromRoute","showId","setShowId","er","import_papaparse","import_chunk","paparseOptions","batchSize","onFinish","onProgress","processedAmount","setProcessedAmount","et","totalAmount","setTotalAmount","createMany","mutationResult","handleCleanup","handleFinish","createdValues","handleChange","ya","valueFns","value","currentAmount","chunks","Ta","chunk","chunkedFns","chunkedValues","currentBatchLength","defaultVisible","visible","setVisible","gt","defaultProvider","RouterContext","Sr","RouterContextProvider","Prompt","Link","routes","Ca","AccessControlContext","wr","AccessControlContextProvider","can","xa","_resource","paramsRest","_icon","_list","_edit","_create","_show","_children","restResource","queryResponse","Pa","Da","import_uniqBy","import_debounce","import_get","props","setSearch","Le","setOptions","selectedOptions","setSelectedOptions","sort","optionLabel","optionValue","debounceValue","defaultValueQueryOptionsFromProps","fetchSize","defaultValue","onSearchFromProp","defaultValues","defaultValueQueryOnSuccess","Rt","get","defaultValueQueryOptions","defaultValueQueryResult","defaultQueryOnSuccess","onSearch","va","uniqBy","ba","debounce","defaultPermanentFilter","defaultPermanentSorter","initialCurrent","initialPageSize","initialSorter","defaultSetFilterBehavior","initialFilter","syncWithLocationProp","syncWithLocationContext","pathname","parsedCurrent","parsedPageSize","parsedSorter","parsedFilters","defaultCurrent","defaultPageSize","setSorter","ve","setFilters","setCurrent","setPageSize","createLinkForSyncWithLocation","currentQueryParams","Ar","stringifyParams","queryParams","Br","Nr","setFiltersAsMerge","setFiltersAsReplace","setFiltersWithSetter","setter","prev","setFiltersFn","setterOrFilters","behavior","setSortWithUnion","newSorter","paginationValues","AuditLogContext","kr","AuditLogContextProvider","update","logMutationOptions","renameMutationOptions","xt","auditLogContext","Vr","identityData","refetch","logPermissions","authorData","rename","author","Ea","Ma","Ia","La","Ua","breadcrumbs","addBreadcrumb","parentName","parentResource","actionLabel","Sa","location","selectedKey","We","selectedResource","el","_selectedKey","treeMenuItems","menuItems","crawlNestedKeys","currentKey","currentResources","isParent","currentElement","keysArray","defaultOpenKeys","filterMenuItemsByListViewAndHideOption","menus","menuItem","obj","errorMessage","setErrorMessage","be","actionTypes","username","setUsername","X","password","setPassword","login","e","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","email","setEmail","K","remember","setRemember","renderLink","link","renderProviders","provider","content","RegisterPage","loginLink","register","ForgotPasswordPage","ae","forgotPassword","UpdatePasswordPage","updatePassword","newPassword","setNewPassword","ne","confirmPassword","setConfirmPassword","Oe","se","import_react_query_devtools","REFINE_VERSION","useTelemetryData","authContext","Ie","routerContext","dataContext","notificationContext","accessControlContext","auth","auditLog","live","router","i18n","accessControl","encode","payload","stringifyedPayload","Telemetry","Ha","img","useMemoized","ref","Wa","Oa","useDeepMemo","fn","dependencies","memoizedDependencies","Ga","authProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","Pt","notificationProviderContextValues","q","_resources","RouterComponent","za","timeoutId","setTimeoutId","or","cancelNotification","newTimeoutId","LayoutFromProps","SiderFromProps","HeaderFromProps","TitleFromProps","FooterFromProps","OffLayoutAreaFromProps","LayoutToRender","tt","UnsavedPrompt","warnWhenListener","fallback","loading","isSuccess","isError","$e","toURL","ar","Ge","src_exports","__export","RefineButtonTestIds","module","__toCommonJS","src_exports","__export","n","AuthPage","BooleanField","Breadcrumb","CloneButton","Create","CreateButton","DateField","DeleteButton","Edit","EditButton","EmailField","ErrorComponent","ExportButton","FileField","FilterDropdown","Header","ds","Icons","ImageField","ImportButton","Layout","List","ListButton","LoginPage","MarkdownField","NumberField","PageHeader","ReadyPage","RefreshButton","SaveButton","Show","ShowButton","Sider","TagField","TextField","Title","UrlField","getDefaultFilter","getDefaultSortOrder","getValueFromEvent","mapAntdFilterToCrudFilter","mapAntdSorterToCrudSorting","notificationProvider","useCheckboxGroup","useDrawerForm","useEditableTable","useFileUploadState","useForm","useImport","useMenu","useModal","useModalForm","useRadioGroup","useSelect","useSimpleList","useStepsForm","useTable","module","__toCommonJS","import_react","F","import_antd","import_sunflower_antd","import_refine_core","action","resource","onMutationSuccessProp","onMutationError","submitOnEnter","warnWhenUnsavedChangesProp","redirect","successNotification","errorNotification","metaData","liveMode","liveParams","mutationMode","dataProviderName","onLiveEvent","invalidates","undoableTimeout","queryOptions","createMutationOptions","updateMutationOptions","idFromProps","_a","_b","formAnt","mo","formSF","fo","useFormSF","form","useFormCoreResult","Pr","useFormCore","formLoading","onFinish","queryResult","id","warnWhenUnsavedChangesRefine","setWarnWhen","warnWhenUnsavedChanges","lo","React","onKeyUp","event","onValuesChange","changeValues","saveButtonProps","values","error","mutationModeProp","rest","useFormProps","formProps","setId","mutationResult","translate","ie","warnWhen","sunflowerUseModal","co","useModalFormSF","visible","close","modalForm","modalFormProps","modalProps","mutationModeContext","isLoadingMutation","isSuccessMutation","resetMutation","mr","saveButtonPropsSF","useParams","routeResourceName","handleClose","handleShow","qe","open","setOpen","ze","deleteButtonProps","props","stepsPropsSunflower","go","useStepsFormSF","columnName","sorter","sort","br","getDefaultSortOrderCore","filters","operatorType","getDefaultFilterCore","crudSorting","a","b","_c","_d","item","field","tableFilters","prevFilters","initialFilters","crudFilters","mapInitialFilter","acc","value","operator","i","p","PaginationLink","to","element","Link","Po","bo","e","onSearch","initialCurrent","initialPageSize","hasPagination","initialSorter","permanentSorter","initialFilter","permanentFilter","defaultSetFilterBehavior","syncWithLocationProp","resourceFromProp","liveModeFromProp","tableQueryResult","current","setCurrent","pageSize","setPageSize","setFilters","setSorter","createLinkForSyncWithLocation","pageCount","Sr","useTableCore","breakpoint","Cr","Fo","data","isFetched","isLoading","onChange","pagination","searchFilters","antdPagination","page","type","link","Re","elementChildren","table","edit","editId","defaultValueQueryResult","options","Co","useSelectCore","optionLabel","optionValue","fetchSize","defaultValue","So","Bo","resourceName","mapData","paparseOptions","batchSize","onProgressFromProp","t","Ie","resourceWithRoute","handleChange","useImportCore","totalAmount","processedAmount","description","hr","dr","listProps","ho","Rr","Ro","Ee","import_icons","$e","useMenuCore","hasDashboard","Zr","vo","x","setIsloading","Qe","info","mapStatusToLoading","files","file","show","Lo","useCoreModal","UndoableNotification","notificationKey","message","cancelMutation","_e","Ye","time","Do","key","vr","Er","drawerButtonStyles","SubMenu","$","render","collapsed","setCollapsed","E","drawerOpen","setDrawerOpen","isExistAuthentication","Y","mutateLogout","menuItems","selectedKey","defaultOpenKeys","isMobile","RenderToTitle","renderTreeView","tree","icon","label","route","name","children","parentName","ve","isSelected","isRoute","logout","dashboard","items","renderSider","renderMenu","renderDrawerSider","Text","Me","user","ko","fr","AntdLayout","Footer","OffLayoutArea","Xe","SiderToRender","HeaderToRender","isSmall","Le","Mo","cr","import_refine_ui_types","propResourceName","propResourceNameOrRouteName","hideText","accessControl","ignoreAccessControlProvider","onClick","accessControlEnabled","hideIfUnauthorized","be","generateCreateUrl","createButtonDisabledTitle","createUrl","Ur","Vo","Ho","l","c","Oo","Ao","zo","Mr","r","o","s","m","C","f","Fe","g","y","P","u","S","B","editUrl","Ir","h","T","Vr","Hr","Wo","xe","Go","Je","onSuccess","q","k","confirmOkText","confirmCancelText","L","O","R","w","U","recordItemId","v","variables","W","confirmTitle","H","eo","jo","Ko","Ze","qo","er","refetch","Nr","Ce","_o","Yo","showUrl","generateShowUrl","Qo","Or","Xo","Jo","ue","rr","generateListUrl","listUrl","et","ot","tt","st","ro","rt","oo","at","ut","or","nt","Ar","pt","lt","Se","mt","cloneUrl","generateCloneUrl","zr","ft","ct","gt","Tt","Wr","De","yt","Be","Pt","uploadProps","kr","createButtonProps","resourceFromProps","Ue","contentProps","headerProps","breadcrumbFromProps","canCreate","te","We","wrapperProps","pe","bt","title","headerButtons","defaultExtra","footerButtons","goBackFromProps","Q","Ge","Z","headerButtonProps","he","_","ne","G","footerButtonProps","ce","routeFromAction","re","breadcrumb","idFromRoute","defaultHeaderButtons","isDeleteButtonVisible","we","goBack","X","je","le","xt","canDelete","isEditButtonVisible","canEdit","Ct","St","Us","Bt","ht","Et","Rt","vt","ks","Lt","Dt","wt","Ut","kt","tr","Gr","Vt","jr","Ht","imageTitle","Is","Ot","valueLabelTrue","valueLabelFalse","At","Kr","trueIcon","Gt","falseIcon","Ms","import_dayjs","Wt","import_localizedFormat","dayjs","LocalizedFormat","Vs","Kt","locales","qt","jt","src","$t","Qt","_t","Yt","gr","Xt","Jt","Zt","locale","number","toLocaleStringSupportsOptions","import_react_markdown","ReactMarkdown","gfm","me","clearFilter","clearFilters","onFilter","_mappedValue","keys","mapValue","setSelectedKeys","childrenWithProps","child","mappedValue","de","ye","es","Ve","Ns","rs","params","V","qr","os","ss","errorMessage","ns","Os","As","N","containerStyles","titleStyles","ts","login","layoutStyles","imageContainer","fe","nr","sr","zs","is","j","styles","Ke","I","D","ar","He","Ne","Oe","Ws","Gs","so","renderContent","CardTitle","providers","provider","CardContent","rememberMe","forgotPasswordLink","z","M","js","Ks","registerLink","no","ir","RegisterPage","register","ee","K","ur","qs","$s","ao","forgotPassword","loginLink","se","A","$r","Qs","io","updatePassword","getFieldValue","Ae","pr","Qr","ps","lr","hideIcons","ls","Tr","ms","breadcrumbs","AntdBreadcrumb","breadcrumbProps","href","import_pro_layout","fs","backIcon","import_react","import_refine_core","RefineAntd","import_react","import_refine_core","urlLikeKeyRegexp","getFieldableKeys","key","data","fieldableProperties","firstAvailable","fkey","pickDataProvider","resourceName","dataProviderName","resources","_a","resource","item","dataProviderFromResource","pickInferredField","inferredFields","field","a","b","import_standalone","import_parser_typescript","prettierFormat","code","prettier","tsParser","error","prettySpaces","content","relationRegexp","relationInfer","key","value","isRelation","isBasicValue","isBasicArray","v","removeRelationSuffix","key","relationRegexp","prettyString","str","removeRelationSuffix","word","replaceExports","code","line","packageRegex","sideEffectRegex","nameChangeRegex","replaceImports","content","modules","matches","imports","match","defaultImport","namedImports","namespaceImport","packageName","importName","prettySpaces","import_pluralize","resourceFromInferred","field","resources","el","stripped","removeRelationSuffix","pluralize","import_pluralize","componentName","resourceName","type","fallbackResourceName","sanitized","singular","pluralize","resourceComponentName","prettyString","prettyType","handleExpression","expression","jsx","strings","expressions","result","currentString","i","prepareLiveCode","code","componentName","removeHiddenCode","code","dotAccessableRegex","shouldDotAccess","property","accessorSingle","variableName","key","accessor","base","accessorMultiple","variable","a","joiner","printImports","imports","byModule","acc","element","module","isDefault","elements","defaultImport","e","named","defaultStr","namedStr","import_pluralize","toSingular","str","pluralize","import_pluralize","toPlural","str","pluralize","identifierRegexp","isIDKey","key","getOptionLabel","field","noOp","arg1","getVariableName","fieldKey","suffixOrPrefix","fieldKeyWithoutInvalidCharacters","prettyPluralVariableName","prettyString","composeInferencers","inferencers","fieldInferencer","key","value","record","infer","inferences","inferencer","pickInferredField","composeTransformers","transformers","fields","resources","resource","record","infer","acc","transformer","arrayInfer","key","value","record","infer","isArray","isBasicArray","v","inferredInnerType","basicType","booleanInfer","key","value","import_dayjs","dateSuffixRegexp","dateInfer","key","value","isDateField","dayjs","isValidDateString","isAcceptableLength","emailRegexp","emailInfer","key","value","imageRegexp","imageInfer","key","value","nullishInfer","key","value","numberInfer","key","value","idPropertyRegexp","objectInfer","key","value","record","infer","isNotNull","isNotArray","fieldableKeys","getFieldableKeys","innerFieldKey","innerFieldType","accessor","el","richtextInfer","key","value","textInfer","key","value","urlRegexp","urlInfer","key","value","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","imageInfer","nullishInfer","numberInfer","objectInfer","relationInfer","richtextInfer","textInfer","urlInfer","basicToRelation","fields","resources","resource","record","field","validUUIdRegex","isValidUUID","value","isNotSelf","imageFieldLikeRegexp","imageByKey","fields","field","relationByResource","fields","resources","field","inferResource","resourceFromInferred","relationToFieldable","fields","resources","resource","record","infer","field","value","inferredType","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","import_react","import_prism_react_renderer","import_vsDark","CodeHighlight","code","wrapperProps","_a","styleElement","React","Highlight","theme","className","style","tokens","getLineProps","getTokenProps","line","i","token","key","import_react","RefineCore","import_react_live","defaultScope","React","RefineCore","InferencerLiveContext","LiveComponent","fetchError","code","additionalScope","ErrorComponent","_a","sanitized","replaceExports","replaceImports","acc","packageName","variableName","_module","ignoreReplacement","scope","_packageName","packageContent","ErrorComponentWithError","error","import_react","import_refine_core","useInferFetch","type","resourceNameOrRouteName","idFromProps","resource","resourceName","idFromURL","resources","id","dataProvider","error","setError","React","data","setData","initial","setInitial","loading","setLoading","resolver","recordItemId","_a","_b","dataProviderName","dataProviderFromResource","pickDataProvider","dp","r","import_react","import_refine_core","import_lodash","useRelationFetch","record","fields","infer","dataProvider","updatedFields","setUpdatedFields","React","initial","setInitial","loading","setLoading","resolver","allFields","attempts","promises","field","dataProviderName","dataProviderFromResource","dp","requestId","el","data","relationInfer","responseData","isPlural","toPlural","removeRelationSuffix","toSingular","resourceNameWithoutRelationSuffix","results","createInferencer","type","additionalScope","customElements","fieldTransformers","renderer","LoadingComponent","ErrorComponent","CodeViewerComponent","infer","composeInferencers","defaultElements","transform","composeTransformers","defaultTransformers","Inferencer","resourceName","fieldTransformer","id","_a","resource","resources","resourceFromURL","record","recordLoading","isInitialLoad","inferError","useInferFetch","rawResults","React","inferred","key","value","transformed","field","result","results","relationLoading","useRelationFetch","code","LiveComponent","prepareLiveCode","componentName","removeHiddenCode","name","import_react","import_refine_antd","ErrorComponent","error","React","import_react","import_refine_antd","LoadingComponent","React","import_react","import_refine_antd","CodeViewerComponent","rawCode","loading","code","React","prettierFormat","inputRef","open","setOpen","isCopied","setIsCopied","copyCode","_a","_b","_c","_d","CodeHighlight","renderer","resource","fields","isCustomPage","id","_a","COMPONENT_NAME","componentName","recordName","imports","relationHooksCode","field","ids","accessor","getVariableName","renderRelationFields","variableName","variableIsLoading","jsx","prettyString","_b","mapItemName","toSingular","val","textFields","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","numberFields","renderedFields","noOp","printImports","ShowInferencer","createInferencer","RefineAntd","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineAntd","renderer","resource","fields","isCustomPage","_a","COMPONENT_NAME","componentName","recordName","imports","relationHooksCode","field","idsString","accessor","getVariableName","renderRelationFields","_b","variableName","variableIsLoading","loadingCondition","dataIndex","title","prettyString","render","val","valSingle","valViewableSingle","jsx","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","basicFields","canEdit","canShow","canDelete","actionButtons","renderedFields","noOp","printImports","ListInferencer","createInferencer","RefineAntd","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineAntd","import_dayjs","renderer","resource","fields","isCustomPage","_a","COMPONENT_NAME","componentName","imports","relationHooksCode","field","getVariableName","getOptionLabel","renderRelationFields","variableName","name","valueProps","valueEvent","shouldDotAccess","accessor","jsx","prettyString","basicInputFields","isIDKey","imageFields","booleanFields","dateFields","richtextFields","renderedFields","noOp","printImports","CreateInferencer","createInferencer","RefineAntd","dayjs","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineAntd","import_dayjs","renderer","resource","fields","isCustomPage","id","_a","_b","COMPONENT_NAME","componentName","recordName","getVariableName","imports","relationHooksCode","field","val","accessor","renderRelationFields","variableName","name","valueProps","valueEvent","shouldDotAccess","jsx","prettyString","basicInputFields","el","isIDKey","imageFields","booleanFields","dateFields","richtextFields","renderedFields","noOp","printImports","EditInferencer","createInferencer","RefineAntd","dayjs","CodeViewerComponent","LoadingComponent","ErrorComponent","AntdInferencer","actionFromProps","idFromProps","props","useParams","action","id","React","ShowInferencer","CreateInferencer","EditInferencer","ListInferencer"]}