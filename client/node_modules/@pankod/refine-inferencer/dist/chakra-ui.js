var br=Object.create;var me=Object.defineProperty;var Cr=Object.getOwnPropertyDescriptor;var vr=Object.getOwnPropertyNames;var Ar=Object.getPrototypeOf,Rr=Object.prototype.hasOwnProperty;var Tr=(e,r)=>{for(var a in r)me(e,a,{get:r[a],enumerable:!0})},qe=(e,r,a,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let u of vr(r))!Rr.call(e,u)&&u!==a&&me(e,u,{get:()=>r[u],enumerable:!(o=Cr(r,u))||o.enumerable});return e};var v=(e,r,a)=>(a=e!=null?br(Ar(e)):{},qe(r||!e||!e.__esModule?me(a,"default",{value:e,enumerable:!0}):a,e)),Sr=e=>qe(me({},"__esModule",{value:!0}),e);var rn={};Tr(rn,{ChakraUICreateInferencer:()=>he,ChakraUICreateRenderer:()=>Ke,ChakraUIEditInferencer:()=>Ie,ChakraUIEditRenderer:()=>_e,ChakraUIInferencer:()=>en,ChakraUIListInferencer:()=>ke,ChakraUIListRenderer:()=>je,ChakraUIShowInferencer:()=>ye,ChakraUIShowRenderer:()=>Ue});module.exports=Sr(rn);var ue=v(require("react")),xr=require("@pankod/refine-core");var Kr=v(require("@pankod/refine-chakra-ui"));var z=v(require("react")),Oe=require("@pankod/refine-core");var wr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,$e=(e,r)=>{let a=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];wr.test(e)&&a.unshift("url");let o=a.find(u=>u in r&&!!r[u]);if(o)return o==="firstName"&&"lastName"in r?["firstName","lastName"]:o};function Fe(e,r,a){var u;if(r)return r;let o=a==null?void 0:a.find(s=>s.name===e);return(u=o==null?void 0:o.options)!=null&&u.dataProviderName?o.options.dataProviderName:"default"}var ae=e=>{var r;return(r=e==null?void 0:e.options)==null?void 0:r.dataProviderName};var xe=e=>{let r=[...e].filter(Boolean).sort((a,o)=>(o.priority||0)-(a.priority||0))[0];return r||null};var We=v(require("prettier/standalone")),Ge=v(require("prettier/parser-typescript")),be=e=>{try{return We.default.format(e,{parser:"typescript",plugins:[Ge.default],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(r){return console.warn("Formatting error in inferencer",r),e}};var Ce=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var ve=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ze=(e,r)=>{let a=ve.test(e),o=typeof r=="string"||typeof r=="number",u=Array.isArray(r)&&r.every(s=>typeof s=="string"||typeof s=="number");return a&&o||a&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var M=e=>e.replace(ve,"");var y=e=>M(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(p=>p.charAt(0).toUpperCase()+p.slice(1)).join(" ");var Ae=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Qe=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Hr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Lr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Re=(e,r={})=>{let a=e.matchAll(Qe),o=new Set;for(let u of a){let[,s,p,k,l]=u;if(l in r){let x=r[l];if(l==="react")continue;s&&o.add(`const { default: ${s} } = ${x};`),p&&o.add(`const${p.replace(Lr,"$1: $3$4")} = ${x};`),k&&o.add(`const ${k} = ${x};`)}}return Ce(`
    ${Array.from(o).join(`
`)}
    ${e.replace(Qe,"").replace(Hr,"")}
    `)};var se=v(require("pluralize"));var Te=(e,r)=>e?r.find(o=>{let u=M(e.key);return o.name===u||o.name===(se.default.isPlural(u)?u:se.default.plural(u))||o.name===(se.default.isSingular(u)?u:se.default.singular(u))}):void 0;var Xe=v(require("pluralize"));var O=(e,r,a="Inferred")=>{let o=e.replace(/[^a-zA-Z0-9]/g," "),u=Xe.default.singular(o),p=y(u).replace(/ /g,"")||a,k=r.charAt(0).toUpperCase()+r.slice(1);return/^[a-zA-Z]/.test(p)?`${p}${k}`:`${k}${p}`};var Er=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",g=(e,...r)=>e.reduce((o,u,s)=>`${o}${u}${Er(r[s])}`,"").trim();var Se=(e,r)=>`
    ${e!=null?e:""}
    
    render(typeof ${r} !== "undefined" ? <${r} /> : <></>);
    `;var we=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var Nr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,He=e=>Nr.test(e);function Le(e,r,a){let o=`${e}`;return r&&(o+="?.",He(r)?o+=r:o+=`['${r}']`),a&&(o+="?.",He(a)?o+=a:o+=`['${a}']`),o}function Vr(e,r,a){return(a!=null?a:[]).map(u=>Le(e,r,u))}var m=(e,r,a,o=' + " " + ')=>Array.isArray(a)?o?Vr(e,r,a).join(o):Le(e,r,a[0]):Le(e,r,a),B=(e,r,a)=>{let o=e;return r&&(o+=`.${r}`),a&&(Array.isArray(a)?o+=`.${a[0]}`:o+=`.${a}`),o};var j=e=>{let r=e.reduce((o,[u,s,p])=>(o[s]||(o[s]=[]),o[s].includes(u)||(p?o[s].push([u,!0]):o[s].push(u)),o),{});return Object.entries(r).map(([o,u])=>{let s=u.find(x=>Array.isArray(x)&&x[1]),p=u.filter(x=>typeof x=="string"),k=s?`${s[0]}`:"",l=p.length?`{ ${p.join(", ")} }`:"";return`import ${k}${k&&l?", ":""}${l} from "${o}";`})};var Ee=v(require("pluralize")),U=(e="")=>Ee.default.isSingular(e)?e:Ee.default.singular(e);var Ne=v(require("pluralize")),re=(e="")=>Ne.default.isPlural(e)?e:Ne.default.plural(e);var Br=/^id$/i,ie=e=>Br.test(e);var ce=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var K=e=>{};var A=(e,r="")=>{if(Number.isInteger(Number(e)))return r.charAt(0).toLowerCase()+r.slice(1)+e;let o=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=y(o).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${r.charAt(0).toUpperCase()+r.slice(1)}`};var Ye=e=>{let r=(a,o,u,s=r)=>{let p=e.map(l=>l(a,o,u,s));return xe(p)};return r};var Je=e=>(a,o,u,s,p)=>e.reduce((k,l)=>l(k,o,u,s,p),a);var er=(e,r,a,o)=>{let u=Array.isArray(r),s=Array.isArray(r)&&r.every(p=>typeof p=="string"||typeof p=="number");if(u){if(!s){let k=o(e,r[0],a,o);return k?{...k,key:e,multiple:!0,priority:1}:!1}let p=o(e,r[0],a,o)||{type:"string"};return{key:e,multiple:!0,priority:1,type:p==null?void 0:p.type}}return!1};var rr=(e,r)=>typeof r=="boolean"?{key:e,type:"boolean"}:!1;var Ve=v(require("dayjs")),Mr=/(_at|_on|At|On|AT|ON)(\[\])?$/,nr=(e,r)=>{let a=Mr.test(e)&&(0,Ve.default)(r).isValid(),o=typeof r=="string"&&(0,Ve.default)(r).isValid(),u=typeof r=="string"&&r.length>4;return a||o&&u?{key:e,type:"date",priority:1}:!1};var Dr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,tr=(e,r)=>typeof r=="string"&&Dr.test(r)?{key:e,type:"email",priority:1}:!1;var Pr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,or=(e,r)=>typeof r=="string"&&Pr.test(r)?{key:e,type:"image",priority:2}:!1;var ar=(e,r)=>typeof r>"u"||r===null?null:!1;var sr=(e,r)=>typeof r=="number"?{key:e,type:"number"}:!1;var Or=/id$/i,ir=(e,r,a,o)=>{let u=r!==null,s=!Array.isArray(r);if(u&&s&&typeof r=="object"){if(Object.keys(r).length===1&&Or.test(Object.keys(r)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let l=$e(e,r);if((l?l.length>0:!1)&&l){let b=l&&Array.isArray(l)?l[0]:l,C=o(b,r[b],r,o);if(C){let $=Array.isArray(l)?l.map(c=>C.accessor?`${c}.${Array.isArray(C.accessor)?C.accessor[0]:C.accessor}`:c):C.accessor?Array.isArray(C.accessor)?`${l}.${C.accessor[0]}`:`${l}.${C.accessor}`:l;return{...C,fieldable:!0,key:e,accessor:$,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var cr=(e,r)=>typeof r=="string"&&r.length>100?{key:e,type:"richtext",priority:1}:!1;var ur=(e,r)=>typeof r=="string"?{key:e,type:"text"}:!1;var zr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,pr=(e,r)=>typeof r=="string"&&zr.test(r)?{key:e,type:"url",priority:1}:!1;var mr=[er,rr,nr,tr,or,ar,sr,ir,Ze,cr,ur,pr];var lr=(e,r,a,o)=>e.map(s=>{if(!s.relation&&(s.type==="text"||s.type==="richtext"||s.type==="number")&&!s.canRelation){let p=/^[a-z0-9-]+$/,k=$=>p.test(`${$}`),l=s.key.toLowerCase()!=="id";return!(!s.accessor||typeof s.accessor=="string")||!l?s:(s.multiple?o[s.key]:[o[s.key]]).every($=>k(s.accessor?$[s.accessor]:$))?{...s,canRelation:!0}:s}return s});var Ur=/(image|photo|avatar|cover|thumbnail|icon)/i,dr=e=>e.map(a=>a.type==="url"&&Ur.test(a.key)?{...a,type:"image"}:a);var fr=(e,r)=>e.map(o=>{let u=Te(o,r);return u?{...o,relation:!0,type:"relation",resource:u}:o});var gr=(e,r,a,o,u)=>e.map(p=>{if(p.relation&&p.type==="relation"&&!p.resource){let k=p.accessor?o[p.key][p.accessor]:o[p.key],l=u(p.key,k,o,u);if(l&&l.type!=="relation")return{...p,fieldable:!0,relation:!1,type:l.type,canRelation:!0}}return p});var yr=[dr,fr,gr,lr];var _=v(require("react")),le=v(require("prism-react-renderer")),kr=v(require("prism-react-renderer/themes/vsDark")),Be=({code:e,wrapperProps:r})=>((0,_.useEffect)(()=>{var o;let a=document.createElement("style");a.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(o=document.getElementById("code-highlight"))==null||o.appendChild(a)},[]),_.default.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...r!=null?r:{}},_.default.createElement(le.default,{...le.defaultProps,theme:kr.default,code:e,language:"tsx"},({className:a,style:o,tokens:u,getLineProps:s,getTokenProps:p})=>_.default.createElement("pre",{className:a,style:{...o,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((k,l)=>_.default.createElement("div",{key:l,...s({line:k,key:l})},k.map((x,b)=>_.default.createElement("span",{key:b,...p({token:x,key:b})}))))))));var P=v(require("react")),jr=v(require("@pankod/refine-core")),de=require("@aliemir/react-live");var hr=[["react","React",P.default],["@pankod/refine-core","RefineCore",jr]],Me=P.default.createContext({}),De=({fetchError:e,code:r,additionalScope:a,errorComponent:o})=>{var k;let u=(k=r&&Ae(Re(r,[...hr,...a!=null?a:[]].reduce((l,[x,b,C,$])=>$?l:{...l,[x]:b},{}))))!=null?k:"",s=P.default.useMemo(()=>({React:P.default,...P.default,...[...hr,...a!=null?a:[]].reduce((l,[x,b,C])=>({...l,[b]:C}),{})}),[a]),p=P.default.useMemo(()=>()=>{let{error:x}=P.default.useContext(Me);return o?P.default.createElement(o,{error:x?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${x}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[o,e]);return P.default.createElement(de.LiveProvider,{Context:Me,code:u,scope:s,noInline:!0},!e&&P.default.createElement(de.LivePreview,{Context:Me}),P.default.createElement(p,null))};var ee=v(require("react")),fe=require("@pankod/refine-core");var Ir=(e,r,a)=>{let{resource:o,resourceName:u,id:s,resources:p}=(0,fe.useResource)({resourceNameOrRouteName:r}),k=a!=null?a:s,l=(0,fe.useDataProvider)(),[x,b]=ee.default.useState(void 0),[C,$]=ee.default.useState(void 0),[c,H]=ee.default.useState(!0),[d,i]=ee.default.useState(!1),S=ee.default.useCallback(async F=>{var t,h;let R=(t=ae(o))!=null?t:Fe(u,void 0,p),V=l(R);i(!0),b(void 0);try{if(e==="list"||e==="create"){let I=(h=(await V.getList({resource:u})).data)==null?void 0:h[0];I||b(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),$(I),setTimeout(()=>{i(!1)},500)}if((e==="edit"||e==="show")&&F){let I=(await V.getOne({resource:u,id:F})).data;I||b(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),$(I),setTimeout(()=>{i(!1)},500)}}catch(n){console.warn("An error occured while fetching the resource data. Please check the error message below:",n),b(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${u}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{i(!1)},500)}},[e,l,o,u,p]);return ee.default.useEffect(()=>{H(!1),!d&&!C&&S(k)},[S,k]),{data:C,loading:d,initial:c,error:x}};var ne=v(require("react")),$r=require("@pankod/refine-core");var Pe=require("lodash"),Fr=({record:e,fields:r,infer:a})=>{let o=(0,$r.useDataProvider)(),[u,s]=ne.default.useState([]),[p,k]=ne.default.useState(!0),[l,x]=ne.default.useState(!1),b=ne.default.useCallback(async C=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let $=[];x(!0);try{let c=C.map(async d=>{if(d&&(d.relation||d.canRelation)&&e){let i=ae(d.resource),S=o(i),F=Array.isArray(d.accessor)?void 0:d.multiple?e[d.key].map(R=>d.accessor?(0,Pe.get)(R,d.accessor):R)[0]:d.accessor?(0,Pe.get)(e[d.key],d.accessor):e[d.key];if(F&&d.resource)try{let{data:R}=await S.getOne({resource:d.resource.name,id:F});$.push({status:"success",resource:d.resource.name,field:d.key});let V=a("__",R,{},a);return{...d,relationInfer:V}}catch{return $.push({status:"error",resource:d.resource.name,field:d.key}),{...d,relationInfer:null}}if(F){let R,V;try{let{data:n}=await S.getOne({resource:re(M(d.key)),id:F});$.push({status:"success",resource:re(M(d.key)),field:d.key}),R=n,V=!0}catch{$.push({status:"error",resource:re(M(d.key)),field:d.key});try{let{data:I}=await S.getOne({resource:U(M(d.key)),id:F});$.push({status:"success",resource:U(M(d.key)),field:d.key}),R=I,V=!1}catch{return $.push({status:"error",resource:U(M(d.key)),field:d.key}),{...d,relationInfer:null}}}let t=a("__",R,{},a),h=M(d.key);return{...d,relation:!0,type:"relation",resource:{name:V?re(h):U(h)},fieldable:!1,canRelation:void 0,relationInfer:t}}return{...d,relationInfer:null}}return d}),H=await Promise.all(c);s(H.filter(d=>d)),setTimeout(()=>{x(!1)},500)}catch{setTimeout(()=>{x(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${$.length} attempts and succeeded with ${$.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[o,e]);return ne.default.useEffect(()=>{k(!1),!l&&r&&r.length>0&&u.length===0&&b(r)},[b,l,r,b]),{fields:u,loading:l,initial:p}};var q=({type:e,additionalScope:r=[],customElements:a=[],fieldTransformers:o=[],renderer:u,loadingComponent:s,errorComponent:p,codeViewerComponent:k})=>{let l=Ye([...mr,...a]),x=Je([...yr,...o]),b=({resourceName:$,fieldTransformer:c,id:H})=>{var E;let{resource:d,resources:i}=(0,Oe.useResource)({resourceNameOrRouteName:$}),{resource:S}=(0,Oe.useResource)(),{data:F,loading:R,initial:V,error:t}=Ir(e,$!=null?$:d==null?void 0:d.name,H),h=z.default.useMemo(()=>{if(F){let T=Object.keys(F).map(J=>{let pe=F[J];return l(J,pe,F,l)}).filter(Boolean),D=x(T,i,d,F,l);return c?D.flatMap(J=>{let pe=c(J);return pe?[pe]:[]}):D}return[]},[F,i,d,c]),{fields:n,loading:I}=Fr({record:F,fields:h,infer:l}),L=z.default.useMemo(()=>!R&&!I&&!V?u({resource:d,resources:i,fields:n,infer:l,isCustomPage:d.name!==S.name,id:H}):"",[d,i,n,R,I]);return z.default.createElement(z.default.Fragment,null,s&&(R||I)&&z.default.createElement(s,null),!R&&!I&&z.default.createElement(z.default.Fragment,null,z.default.createElement(De,{fetchError:!R&&t?t:!R&&!V&&!F,code:Se(L,O((E=d.label)!=null?E:d.name,e)),errorComponent:p,additionalScope:r}),k&&z.default.createElement(k,{code:we(L),loading:R||I})))};return({name:$,resource:c,fieldTransformer:H,id:d})=>z.default.createElement(b,{fieldTransformer:H,resourceName:c!=null?c:$,key:c!=null?c:$,id:d})};var te=v(require("react")),W=require("@pankod/refine-chakra-ui"),G=({error:e})=>e?te.default.createElement(W.Center,{style:{minHeight:300}},te.default.createElement(W.Alert,{status:"error",variant:"subtle",flexDirection:"column",alignItems:"center",justifyContent:"center",textAlign:"center",height:"200px",maxWidth:"700px"},te.default.createElement(W.AlertIcon,{boxSize:"40px",mr:0}),te.default.createElement(W.AlertDescription,{mt:4,maxWidth:"sm"},te.default.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}})))):null;var ze=v(require("react")),ge=require("@pankod/refine-chakra-ui"),Z=()=>ze.default.createElement(ge.Box,{position:"relative",bg:"chakra-body-bg",minH:120},ze.default.createElement(ge.Spinner,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}));var w=v(require("react")),N=require("@pankod/refine-chakra-ui"),Q=require("@tabler/icons");var X=({code:e,loading:r})=>{let a=w.default.useMemo(()=>be(e!=null?e:""),[e]),o=w.default.useRef(null),[u,s]=w.default.useState(!1),{isOpen:p,onOpen:k,onClose:l}=(0,N.useDisclosure)();if(r)return null;let x=()=>{var b,C,$,c;(b=o==null?void 0:o.current)==null||b.select(),(C=o==null?void 0:o.current)==null||C.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((c=($=o==null?void 0:o.current)==null?void 0:$.value)!=null?c:""),s(!0),setTimeout(()=>{s(!1)},1e3))};return a?w.default.createElement(w.default.Fragment,null,w.default.createElement(N.Box,{position:"fixed",bottom:"12px",right:"60px"},w.default.createElement(N.HStack,{spacing:4},w.default.createElement(N.Button,{variant:"solid",colorScheme:"green",leftIcon:w.default.createElement(Q.IconCode,{size:18}),onClick:k},"Show Code"),w.default.createElement(N.Button,{colorScheme:"gray",variant:"solid",leftIcon:w.default.createElement(Q.IconMessageCircle,{size:18}),as:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),w.default.createElement("div",{style:{height:"50px"}}),w.default.createElement(N.Modal,{size:"4xl",isOpen:p,onClose:l},w.default.createElement(N.ModalOverlay,null),w.default.createElement(N.ModalContent,null,w.default.createElement(N.ModalCloseButton,{sx:{position:"absolute",right:0,top:0,height:"56px",width:"56px",color:"#666b7a"}}),w.default.createElement(N.ModalBody,{sx:{padding:0}},w.default.createElement(Be,{code:a}),w.default.createElement("textarea",{ref:o,defaultValue:(a!=null?a:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),w.default.createElement(N.Button,{sx:{position:"absolute",bottom:"12px",right:"12px",width:100},key:"copy",leftIcon:u?w.default.createElement(Q.IconCheck,{size:18,style:{color:"green"}}):w.default.createElement(Q.IconCopy,{size:18}),onClick:x},u?"Copied":"Copy")))):null};var Ue=({resource:e,fields:r,isCustomPage:a,id:o})=>{var V;let u=O((V=e.label)!=null?V:e.name,"show"),s="record",p=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-chakra-ui"],["Heading","@pankod/refine-chakra-ui"]],l=r.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)).filter(Boolean).map(t=>{if((t==null?void 0:t.relation)&&!t.fieldable&&t.resource){if(t.multiple){p.push(["useMany","@pankod/refine-core"]);let h=m(s,t.key);return t.accessor&&(h=`${m(s,t.key)}?.map((item: any) => ${m("item",void 0,t.accessor)})`),`
                const { data: ${A(t.key,"Data")}, isLoading: ${A(t.key,"IsLoading")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${h} || [],
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
                `}return p.push(["useOne","@pankod/refine-core"]),`
                const { data: ${A(t.key,"Data")}, isLoading: ${A(t.key,"IsLoading")} } =
                useOne({
                    resource: "${t.resource.name}",
                    id: ${m(s,t.key,t.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
            `}}).filter(Boolean),x=t=>{if(t.relation&&t.resource){let h=A(t.key,"Data"),n=A(t.key,"IsLoading");return t.multiple?(p.push(["TagField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var I;if(t.relationInfer)if((I=t.relationInfer)!=null&&I.accessor){if(Array.isArray(t.relationInfer.accessor))return"Not Handled.";{let L=A(t.key),E=m(L,void 0,t.relationInfer.accessor);return`<HStack spacing="12px">{${h}?.data?.map((${L}: any) => <TagField key={${E}} value={${E}} />)}</HStack>`}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var I;return t.relationInfer?(I=t.relationInfer)!=null&&I.accessor?Array.isArray(t.relationInfer.accessor)?`{${m(`${h}?.data`,void 0,t.relationInfer.accessor,' + " " + ')}}`:`{${h}?.data?.${t.relationInfer.accessor}}`:`{${h}?.data}`:`{${h}?.data?.id}`})()}
                    </>
                )}
                
                `}},b=t=>{if(t.type==="text"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["TextField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(s,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <TextField value={${m(s,t.key,t.accessor)}} />
            `}},C=t=>{if(t.type==="image"){if(p.push(["Image","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                {${m(s,t.key)}?.map((item: any) => (
                    <Image sx={{ maxWidth: 200 }} src={${h}} key={${h}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <Image sx={{ maxWidth: 200 }} src={${m(s,t.key,t.accessor," + ")}} />
                `}},$=t=>{if(t.type==="email"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["EmailField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(s,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <EmailField value={${m(s,t.key,t.accessor," + ")}} />
            `}},c=t=>{if(t.type==="url"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["UrlField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(s,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <UrlField value={${m(s,t.key,t.accessor," + ")}} />
            `}},H=t=>{if(t.type==="boolean"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["BooleanField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(s,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <BooleanField value={${m(s,t.key,t.accessor," && ")}} />
            `}},d=t=>{if(t.type==="date"){if(p.push(["DateField","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                {${m(s,t.key)}?.map((item: any) => (
                    <DateField value={${h}} key={${h}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <DateField value={${m(s,t.key,t.accessor," + ' ' + ")}} />
            `}},i=t=>{if(t.type==="richtext")return p.push(["MarkdownField","@pankod/refine-chakra-ui"]),g`
                <Heading as="h5" size="sm" mt={4}>${y(t.key)}</Heading>
                <MarkdownField value={${m(s,t.key,t.accessor,' + " " + ')}} />
            `},S=t=>{if(t.type==="number"){if(p.push(["NumberField","@pankod/refine-chakra-ui"],["TagField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let h=m("item",void 0,t.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(s,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${y(t.key)}</Heading>
                <NumberField value={${m(s,t.key,t.accessor,' + " " + ')} ?? ""} />
            `}},F=t=>{if(t)return g`
                ${t}
            `},R=r.map(t=>{switch(t==null?void 0:t.type){case"text":return F(b(t));case"number":return F(S(t));case"richtext":return F(i(t));case"email":return F($(t));case"image":return F(C(t));case"date":return F(d(t));case"boolean":return F(H(t));case"url":return F(c(t));case"relation":return F(x(t));default:return}});return K(p),g`
    ${j(p)}
    
    export const ${u} = () => {
        const { queryResult } = useShow(${a?`{ 
                    resource: "${e.name}", 
                    id: ${o}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${s} = data?.data;
    
        ${l}

        return (
            <Show isLoading={isLoading}>
                ${R.join("")}
            </Show>
        );
    };
    `},ye=q({type:"show",additionalScope:[["@pankod/refine-chakra-ui","RefineChakraUI",Kr]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:Ue});var _r=v(require("@pankod/refine-chakra-ui")),qr=v(require("@pankod/refine-react-table")),Wr=v(require("@tabler/icons"));var Y=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${B(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,je=({resource:e,fields:r,isCustomPage:a})=>{var h;let o=O((h=e.label)!=null?h:e.name,"list"),u="tableData?.data",s=[["IResourceComponentsProps","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"],["List","@pankod/refine-chakra-ui"],["TableContainer","@pankod/refine-chakra-ui"],["Table","@pankod/refine-chakra-ui"],["Thead","@pankod/refine-chakra-ui"],["Tr","@pankod/refine-chakra-ui"],["Th","@pankod/refine-chakra-ui"],["Tbody","@pankod/refine-chakra-ui"],["Tr","@pankod/refine-chakra-ui"],["Td","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"],["Button","@pankod/refine-chakra-ui"],["IconButton","@pankod/refine-chakra-ui"],["usePagination","@pankod/refine-chakra-ui"],["Box","@pankod/refine-chakra-ui"],["IconChevronRight","@tabler/icons"],["IconChevronLeft","@tabler/icons"]],p=r.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)),k=p.filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){s.push(["GetManyResponse","@pankod/refine-core"]),s.push(["useMany","@pankod/refine-core"]);let I="";return n.multiple?I=`[].concat(...(${u}?.map((item) => ${m("item",n.key,n.accessor,!1)}) ?? []))`:I=`${u}?.map((item) => ${m("item",n.key,n.accessor,!1)}) ?? []`,`
                const { data: ${A(n.key,"Data")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${I},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),l=p==null?void 0:p.map(n=>{if(n&&n.resource)return A(n.key,"Data")}).filter(Boolean),x=n=>{var I;if(n.relation&&n.resource){let L=`${A(n.key,"Data")}?.data`;if(Array.isArray(n.accessor))return;let E=`id: "${n.key}"`,T=`header: "${y(n.key)}"`,D=Y(n),oe="";if(n.multiple){s.push(["TagField","@pankod/refine-chakra-ui"]);let J="item";n!=null&&n.relationInfer&&(J=m("item",void 0,n.relationInfer.accessor)),oe=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${A(n.key,"Data")}: GetManyResponse;
                    };

                    const ${A(n.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${A(n.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${m("item",void 0,n.accessor)}
                        );
                    })


                    return (
                        <HStack>
                            {${A(n.key,"")}?.map((item, index) => (
                                <TagField key={index} value={${J}} />
                            ))}
                        </HStack>
                    )
                }
            `}else n!=null&&n.relationInfer?oe=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${A(n.key,"Data")}: GetManyResponse;
                        };

                        const ${A(n.key,"")} = meta.${L}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${m(A(n.key),void 0,(I=n==null?void 0:n.relationInfer)==null?void 0:I.accessor)} ?? "Loading...";
                    },`:oe="";return`
                {
                    ${E},
                    ${T},
                    ${D},
                    ${oe}
                }
            `}},b=n=>{if(n.type==="image"){s.push(["Image","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    ${n!=null&&n.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${m("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                    ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                }
            `;if(n.multiple){let D=m("item",void 0,n.accessor," + ");T=`
                    cell: function render({ getValue }) {
                        ${n!=null&&n.accessor?"try {":""}
                            return (
                                <HStack>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${D}} key={index} sx={{ height: "50px", maxWidth: "100px" }} />
                                    ))}
                                </HStack>
                            )
                        ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},C=n=>{if(n.type==="email"){s.push(["EmailField","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <EmailField value={${m("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(s.push(["TagField","@pankod/refine-chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},$=n=>{if(n.type==="url"){s.push(["UrlField","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <UrlField value={${m("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(s.push(["TagField","@pankod/refine-chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},c=n=>{if((n==null?void 0:n.type)==="boolean"){s.push(["BooleanField","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <BooleanField value={${m("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${m("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},H=n=>{if(n.type==="date"){s.push(["DateField","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <DateField value={${m("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${m("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},d=n=>{if((n==null?void 0:n.type)==="richtext"){s.push(["MarkdownField","@pankod/refine-chakra-ui"]);let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${m("getValue<string>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${m("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},i=n=>{if(n&&(n.type==="text"||n.type==="number")){let I=`id: "${n.key}"`,L=Y(n),E=`header: "${y(n.key)}"`,T="";return n.multiple&&(s.push(["TagField","@pankod/refine-chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,n.accessor,' + " " + ')}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),!n.multiple&&Array.isArray(n.accessor)&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${m("getValue<any>()",n.key,n.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${I},
                    ${L},
                    ${E},
                    ${T}
                }
            `}},{canEdit:S,canShow:F,canDelete:R}=e!=null?e:{};S&&s.push(["EditButton","@pankod/refine-chakra-ui"]),F&&s.push(["ShowButton","@pankod/refine-chakra-ui"]),R&&s.push(["DeleteButton","@pankod/refine-chakra-ui"]);let V=S||F||R?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <HStack>
                ${F?g`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${S?g`
                    <EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${R?g`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </HStack>
            );
        },
    },
        `:"",t=r.map(n=>{switch(n==null?void 0:n.type){case"text":case"number":return i(n);case"richtext":return d(n);case"email":return C(n);case"image":return b(n);case"date":return H(n);case"boolean":return c(n);case"url":return $(n);case"relation":return x(n);default:return}});return K(s),g`
    import React from "react";
    ${j(s)}
    
    export const ${o}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...t,V].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${a?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${k}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${l.join(", ")}
            },
        }));

        return (
            <List>
                <TableContainer whiteSpace="pre-line">
                    <Table variant="simple">
                        <Thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <Tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <Th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody>
                            {getRowModel().rows.map((row) => (
                                <Tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <Td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </Td>
                                    ))}
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </TableContainer>
                <Pagination
                    current={current}
                    pageCount={pageCount}
                    setCurrent={setCurrent}
                />
            </List>   
        );
    };

    type PaginationProps = {
        current: number;
        pageCount: number;
        setCurrent: (page: number) => void;
    };

    const Pagination: React.FC<PaginationProps> = ({
        current,
        pageCount,
        setCurrent,
    }) => {
        const pagination = usePagination({
            current,
            pageCount,
        });
    
        return (
            <Box display="flex" justifyContent="flex-end">
                <HStack my="3" spacing="1">
                    {pagination?.prev && (
                        <IconButton
                            aria-label="previous page"
                            onClick={() => setCurrent(current - 1)}
                            disabled={!pagination?.prev}
                            variant="outline"
                        >
                            <IconChevronLeft size="18" />
                        </IconButton>
                    )}
    
                    {pagination?.items.map((page) => {
                        if (typeof page === "string")
                            return <span key={page}>...</span>;
    
                        return (
                            <Button
                                key={page}
                                onClick={() => setCurrent(page)}
                                variant={page === current ? "solid" : "outline"}
                            >
                                {page}
                            </Button>
                        );
                    })}
                    {pagination?.next && (
                        <IconButton
                            aria-label="next page"
                            onClick={() => setCurrent(current + 1)}
                            variant="outline"
                        >
                            <IconChevronRight size="18" />
                        </IconButton>
                    )}
                </HStack>
            </Box>
        );
    };
    `},ke=q({type:"list",additionalScope:[["@pankod/refine-chakra-ui","RefineChakraUI",_r],["@pankod/refine-react-table","RefineReactTable",qr],["@tabler/icons","TablerIcons",Wr]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:je});var Gr=v(require("@pankod/refine-core")),Zr=v(require("@pankod/refine-chakra-ui")),Qr=v(require("@pankod/refine-react-hook-form"));var Ke=({resource:e,fields:r,isCustomPage:a})=>{var $;let o=O(($=e.label)!=null?$:e.name,"create"),u=[["Create","@pankod/refine-chakra-ui"],["FormControl","@pankod/refine-chakra-ui"],["FormLabel","@pankod/refine-chakra-ui"],["FormErrorMessage","@pankod/refine-chakra-ui"],["useForm","@pankod/refine-react-hook-form"]],p=r.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useSelect","@pankod/refine-core"]),`
                const { options: ${A(c.key,"Options")} } =
                useSelect({
                    resource: "${c.resource.name}",
                    ${ce(c)}
                });
            `}).filter(Boolean),k=c=>{if(c.relation&&c.resource){u.push(["useSelect","@pankod/refine-core"]),u.push(["Select","@pankod/refine-chakra-ui"]);let H=A(c.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${B(c.key,void 0)}}>
                <FormLabel>${y(c.key)}</FormLabel>
                <Select
                    placeholder="Select ${U(c.resource.name)}"
                    {...register("${B(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${H}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${m("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},l=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return ie(c.key)||(u.push(["Input","@pankod/refine-chakra-ui"]),c.multiple)?void 0:g`
                <FormControl mb="3" isInvalid={!!${m("(errors as any)",c.key,c.accessor,!1)}}>
                    <FormLabel>${y(c.key)}</FormLabel>
                    <Input
                        ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                        {...register("${B(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `},x=c=>{if(c.type==="boolean")return u.push(["Checkbox","@pankod/refine-chakra-ui"]),c.multiple?void 0:g`
                <FormControl mb="3" isInvalid={!!${m("errors",c.key,c.accessor,!1)}}>
                    <FormLabel>${y(c.key)}</FormLabel>
                    <Checkbox
                        {...register("${B(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("errors",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `},b=c=>{if(c.type==="date"){let H=l(c);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${H!=null?H:""}
                `}},C=r.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return l(c);case"date":return b(c);case"boolean":return x(c);case"relation":return k(c);default:return}});return K(u),g`
    ${j(u)}
    
    export const ${o} = () => {
        const {
            refineCore: { formLoading },
            saveButtonProps,
            register,
            formState: { errors },
        } = useForm(
            ${a?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${p}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${C.join("")}
            </Create>
        );
    };
    `},he=q({type:"create",additionalScope:[["@pankod/refine-core","RefineCore",Gr],["@pankod/refine-chakra-ui","RefineChakraUI",Zr],["@pankod/refine-react-hook-form","RefineReactHookForm",Qr]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:Ke});var Xr=v(require("@pankod/refine-core")),Yr=v(require("@pankod/refine-chakra-ui")),Jr=v(require("@pankod/refine-react-hook-form"));var _e=({resource:e,fields:r,isCustomPage:a,id:o})=>{var H,d;let u=O((H=e.label)!=null?H:e.name,"edit"),s=A((d=e.label)!=null?d:e.name,"Data"),p=[["React","react",!0],["Edit","@pankod/refine-chakra-ui"],["FormControl","@pankod/refine-chakra-ui"],["FormLabel","@pankod/refine-chakra-ui"],["FormErrorMessage","@pankod/refine-chakra-ui"],["useForm","@pankod/refine-react-hook-form"]],l=r.filter(i=>(i==null?void 0:i.relation)&&!(i!=null&&i.fieldable)&&(i==null?void 0:i.resource)).filter(Boolean).map(i=>{if((i==null?void 0:i.relation)&&!i.fieldable&&i.resource){p.push(["useSelect","@pankod/refine-core"]);let S=m(s,i.key,i.accessor,!1);return i.multiple&&i.accessor&&(S=`${m(s,i.key)}?.map((item: any) => ${m("item",void 0,i.accessor)})`),`
                const { options: ${A(i.key,"Options")} } =
                useSelect({
                    resource: "${i.resource.name}",
                    defaultValue: ${S},
                    ${ce(i)}
                });

                React.useEffect(() => {
                    resetField("${B(i.key,void 0,i.accessor)}");
                }, [${A(i.key,"Options")}]);
            `}}).filter(Boolean),x=i=>{if(i.relation&&i.resource){p.push(["useSelect","@pankod/refine-core"]),p.push(["Select","@pankod/refine-chakra-ui"]);let S=A(i.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${B(i.key,void 0)}}>
                <FormLabel>${y(i.key)}</FormLabel>
                <Select
                    placeholder="Select ${U(i.resource.name)}"
                    {...register("${B(i.key,void 0,i.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${S}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${m("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},b=i=>{if(i.type==="text"||i.type==="url"||i.type==="email"||i.type==="number"||i.type==="date"||i.type==="richtext"){if(p.push(["Input","@pankod/refine-chakra-ui"]),i.multiple){let S=B(i.key,"${index}",i.accessor),F=m(m("(errors as any)",i.key,void 0,!1)+"?.[index]",void 0,i.accessor);return`
                    <>
                        {${m(s,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${F}}>
                                <FormLabel>${y(i.key)} #{index + 1}</FormLabel>
                                <Input
                                    {...register(\`${S}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${m(F,"message")} as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${m("(errors as any)",i.key,i.accessor,!1)}}>
                    <FormLabel>${y(i.key)}</FormLabel>
                    <Input
                        ${ie(i.key)?"disabled":""}
                        ${i.type!=="date"&&i.type!=="richtext"?`type="${i.type}"`:""}
                        {...register("${B(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `}},C=i=>{if(i.type==="boolean"){if(p.push(["Checkbox","@pankod/refine-chakra-ui"]),i.multiple){let S=B(i.key,void 0,i.accessor),F=m("(errors as any)",i.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${m(s,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${F}}>
                                <FormLabel>${y(i.key)} #{index + 1}</FormLabel>
                                <Checkbox
                                    {...register(\`${S}.\${index}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${F}?.message as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${m("errors",i.key,i.accessor,!1)}}>
                    <FormLabel>${y(i.key)}</FormLabel>
                    <Checkbox
                        {...register("${B(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("errors",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `}},$=i=>{if(i.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${b(i)}
                `},c=r.map(i=>{switch(i==null?void 0:i.type){case"text":case"number":case"email":case"url":case"richtext":return b(i);case"date":return $(i);case"boolean":return C(i);case"relation":return x(i);default:return}});return K(p),g`
    ${j(p)}
    
    export const ${u} = () => {
        const {
            refineCore: { formLoading, queryResult },
            saveButtonProps,
            register,
            resetField,
            formState: { errors },
        } = useForm(
            ${a?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${o},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${s} = queryResult?.data?.data;
    
        ${l}

        return (
            <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${c.join("")}
            </Edit>
        );
    };
    `},Ie=q({type:"edit",additionalScope:[["@pankod/refine-core","RefineCore",Xr],["@pankod/refine-chakra-ui","RefineChakraUI",Yr],["@pankod/refine-react-hook-form","RefineReactHookForm",Jr]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:_e});var en=({action:e,id:r,...a})=>{let{useParams:o}=(0,xr.useRouterContext)(),{action:u,id:s}=o();switch(e!=null?e:u){case"show":return ue.default.createElement(ye,{...a,id:r!=null?r:s});case"create":return ue.default.createElement(he,{...a,id:r!=null?r:s});case"edit":return ue.default.createElement(Ie,{...a,id:r!=null?r:s});default:return ue.default.createElement(ke,{...a,id:r!=null?r:s})}};
//# sourceMappingURL=chakra-ui.js.map