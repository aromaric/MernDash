var Ir=Object.create;var pe=Object.defineProperty;var br=Object.getOwnPropertyDescriptor;var kr=Object.getOwnPropertyNames;var Cr=Object.getPrototypeOf,vr=Object.prototype.hasOwnProperty;var Fr=(e,r)=>{for(var s in r)pe(e,s,{get:r[s],enumerable:!0})},_e=(e,r,s,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let p of kr(r))!vr.call(e,p)&&p!==s&&pe(e,p,{get:()=>r[p],enumerable:!(o=br(r,p))||o.enumerable});return e};var w=(e,r,s)=>(s=e!=null?Ir(Cr(e)):{},_e(r||!e||!e.__esModule?pe(s,"default",{value:e,enumerable:!0}):s,e)),Ar=e=>_e(pe({},"__esModule",{value:!0}),e);var Zr={};Fr(Zr,{HeadlessCreateInferencer:()=>ge,HeadlessCreateRenderer:()=>Ke,HeadlessEditInferencer:()=>he,HeadlessEditRenderer:()=>Me,HeadlessInferencer:()=>Wr,HeadlessListInferencer:()=>fe,HeadlessListRenderer:()=>He,HeadlessShowInferencer:()=>ye,HeadlessShowRenderer:()=>ze});module.exports=Ar(Zr);var ce=w(require("react")),$r=require("@pankod/refine-core");var _=w(require("react")),je=require("@pankod/refine-core");var Rr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,xe=(e,r)=>{let s=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];Rr.test(e)&&s.unshift("url");let o=s.find(p=>p in r&&!!r[p]);if(o)return o==="firstName"&&"lastName"in r?["firstName","lastName"]:o};function $e(e,r,s){var p;if(r)return r;let o=s==null?void 0:s.find(c=>c.name===e);return(p=o==null?void 0:o.options)!=null&&p.dataProviderName?o.options.dataProviderName:"default"}var oe=e=>{var r;return(r=e==null?void 0:e.options)==null?void 0:r.dataProviderName};var Ie=e=>{let r=[...e].filter(Boolean).sort((s,o)=>(o.priority||0)-(s.priority||0))[0];return r||null};var Be=w(require("prettier/standalone")),qe=w(require("prettier/parser-typescript")),be=e=>{try{return Be.default.format(e,{parser:"typescript",plugins:[qe.default],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(r){return console.warn("Formatting error in inferencer",r),e}};var ke=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var Ce=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ue=(e,r)=>{let s=Ce.test(e),o=typeof r=="string"||typeof r=="number",p=Array.isArray(r)&&r.every(c=>typeof c=="string"||typeof c=="number");return s&&o||s&&p?{key:e,relation:!0,multiple:!!p,type:"relation",priority:1}:!1};var O=e=>e.replace(Ce,"");var f=e=>O(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(u=>u.charAt(0).toUpperCase()+u.slice(1)).join(" ");var ve=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(p=>!p.trim().startsWith("export default")).join(`
`);var We=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,wr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Sr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Fe=(e,r={})=>{let s=e.matchAll(We),o=new Set;for(let p of s){let[,c,u,h,m]=p;if(m in r){let $=r[m];if(m==="react")continue;c&&o.add(`const { default: ${c} } = ${$};`),u&&o.add(`const${u.replace(Sr,"$1: $3$4")} = ${$};`),h&&o.add(`const ${h} = ${$};`)}}return ke(`
    ${Array.from(o).join(`
`)}
    ${e.replace(We,"").replace(wr,"")}
    `)};var se=w(require("pluralize"));var Ae=(e,r)=>e?r.find(o=>{let p=O(e.key);return o.name===p||o.name===(se.default.isPlural(p)?p:se.default.plural(p))||o.name===(se.default.isSingular(p)?p:se.default.singular(p))}):void 0;var Ze=w(require("pluralize"));var M=(e,r,s="Inferred")=>{let o=e.replace(/[^a-zA-Z0-9]/g," "),p=Ze.default.singular(o),u=f(p).replace(/ /g,"")||s,h=r.charAt(0).toUpperCase()+r.slice(1);return/^[a-zA-Z]/.test(u)?`${u}${h}`:`${h}${u}`};var Tr=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",g=(e,...r)=>e.reduce((o,p,c)=>`${o}${p}${Tr(r[c])}`,"").trim();var Re=(e,r)=>`
    ${e!=null?e:""}
    
    render(typeof ${r} !== "undefined" ? <${r} /> : <></>);
    `;var we=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var Nr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Se=e=>Nr.test(e);function Te(e,r,s){let o=`${e}`;return r&&(o+="?.",Se(r)?o+=r:o+=`['${r}']`),s&&(o+="?.",Se(s)?o+=s:o+=`['${s}']`),o}function Lr(e,r,s){return(s!=null?s:[]).map(p=>Te(e,r,p))}var l=(e,r,s,o=' + " " + ')=>Array.isArray(s)?o?Lr(e,r,s).join(o):Te(e,r,s[0]):Te(e,r,s),E=(e,r,s)=>{let o=e;return r&&(o+=`.${r}`),s&&(Array.isArray(s)?o+=`.${s[0]}`:o+=`.${s}`),o};var q=e=>{let r=e.reduce((o,[p,c,u])=>(o[c]||(o[c]=[]),o[c].includes(p)||(u?o[c].push([p,!0]):o[c].push(p)),o),{});return Object.entries(r).map(([o,p])=>{let c=p.find($=>Array.isArray($)&&$[1]),u=p.filter($=>typeof $=="string"),h=c?`${c[0]}`:"",m=u.length?`{ ${u.join(", ")} }`:"";return`import ${h}${h&&m?", ":""}${m} from "${o}";`})};var Ne=w(require("pluralize")),D=(e="")=>Ne.default.isSingular(e)?e:Ne.default.singular(e);var Le=w(require("pluralize")),z=(e="")=>Le.default.isPlural(e)?e:Le.default.plural(e);var Vr=/^id$/i,ae=e=>Vr.test(e);var ie=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var U=e=>{};var A=(e,r="")=>{if(Number.isInteger(Number(e)))return r.charAt(0).toLowerCase()+r.slice(1)+e;let o=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),p=f(o).replace(/ /g,"");return`${p.charAt(0).toLowerCase()+p.slice(1)}${r.charAt(0).toUpperCase()+r.slice(1)}`};var Ge=e=>{let r=(s,o,p,c=r)=>{let u=e.map(m=>m(s,o,p,c));return Ie(u)};return r};var Ye=e=>(s,o,p,c,u)=>e.reduce((h,m)=>m(h,o,p,c,u),s);var Qe=(e,r,s,o)=>{let p=Array.isArray(r),c=Array.isArray(r)&&r.every(u=>typeof u=="string"||typeof u=="number");if(p){if(!c){let h=o(e,r[0],s,o);return h?{...h,key:e,multiple:!0,priority:1}:!1}let u=o(e,r[0],s,o)||{type:"string"};return{key:e,multiple:!0,priority:1,type:u==null?void 0:u.type}}return!1};var Xe=(e,r)=>typeof r=="boolean"?{key:e,type:"boolean"}:!1;var Ve=w(require("dayjs")),Pr=/(_at|_on|At|On|AT|ON)(\[\])?$/,Je=(e,r)=>{let s=Pr.test(e)&&(0,Ve.default)(r).isValid(),o=typeof r=="string"&&(0,Ve.default)(r).isValid(),p=typeof r=="string"&&r.length>4;return s||o&&p?{key:e,type:"date",priority:1}:!1};var Er=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,er=(e,r)=>typeof r=="string"&&Er.test(r)?{key:e,type:"email",priority:1}:!1;var Dr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,rr=(e,r)=>typeof r=="string"&&Dr.test(r)?{key:e,type:"image",priority:2}:!1;var tr=(e,r)=>typeof r>"u"||r===null?null:!1;var nr=(e,r)=>typeof r=="number"?{key:e,type:"number"}:!1;var Or=/id$/i,or=(e,r,s,o)=>{let p=r!==null,c=!Array.isArray(r);if(p&&c&&typeof r=="object"){if(Object.keys(r).length===1&&Or.test(Object.keys(r)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let m=xe(e,r);if((m?m.length>0:!1)&&m){let v=m&&Array.isArray(m)?m[0]:m,k=o(v,r[v],r,o);if(k){let x=Array.isArray(m)?m.map(b=>k.accessor?`${b}.${Array.isArray(k.accessor)?k.accessor[0]:k.accessor}`:b):k.accessor?Array.isArray(k.accessor)?`${m}.${k.accessor[0]}`:`${m}.${k.accessor}`:m;return{...k,fieldable:!0,key:e,accessor:x,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var sr=(e,r)=>typeof r=="string"&&r.length>100?{key:e,type:"richtext",priority:1}:!1;var ar=(e,r)=>typeof r=="string"?{key:e,type:"text"}:!1;var jr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,ir=(e,r)=>typeof r=="string"&&jr.test(r)?{key:e,type:"url",priority:1}:!1;var cr=[Qe,Xe,Je,er,rr,tr,nr,or,Ue,sr,ar,ir];var pr=(e,r,s,o)=>e.map(c=>{if(!c.relation&&(c.type==="text"||c.type==="richtext"||c.type==="number")&&!c.canRelation){let u=/^[a-z0-9-]+$/,h=x=>u.test(`${x}`),m=c.key.toLowerCase()!=="id";return!(!c.accessor||typeof c.accessor=="string")||!m?c:(c.multiple?o[c.key]:[o[c.key]]).every(x=>h(c.accessor?x[c.accessor]:x))?{...c,canRelation:!0}:c}return c});var zr=/(image|photo|avatar|cover|thumbnail|icon)/i,ur=e=>e.map(s=>s.type==="url"&&zr.test(s.key)?{...s,type:"image"}:s);var lr=(e,r)=>e.map(o=>{let p=Ae(o,r);return p?{...o,relation:!0,type:"relation",resource:p}:o});var mr=(e,r,s,o,p)=>e.map(u=>{if(u.relation&&u.type==="relation"&&!u.resource){let h=u.accessor?o[u.key][u.accessor]:o[u.key],m=p(u.key,h,o,p);if(m&&m.type!=="relation")return{...u,fieldable:!0,relation:!1,type:m.type,canRelation:!0}}return u});var dr=[ur,lr,mr,pr];var W=w(require("react")),ue=w(require("prism-react-renderer")),yr=w(require("prism-react-renderer/themes/vsDark")),Pe=({code:e,wrapperProps:r})=>((0,W.useEffect)(()=>{var o;let s=document.createElement("style");s.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(o=document.getElementById("code-highlight"))==null||o.appendChild(s)},[]),W.default.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...r!=null?r:{}},W.default.createElement(ue.default,{...ue.defaultProps,theme:yr.default,code:e,language:"tsx"},({className:s,style:o,tokens:p,getLineProps:c,getTokenProps:u})=>W.default.createElement("pre",{className:s,style:{...o,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},p.map((h,m)=>W.default.createElement("div",{key:m,...c({line:h,key:m})},h.map(($,v)=>W.default.createElement("span",{key:v,...u({token:$,key:v})}))))))));var H=w(require("react")),Hr=w(require("@pankod/refine-core")),le=require("@aliemir/react-live");var fr=[["react","React",H.default],["@pankod/refine-core","RefineCore",Hr]],Ee=H.default.createContext({}),De=({fetchError:e,code:r,additionalScope:s,errorComponent:o})=>{var h;let p=(h=r&&ve(Fe(r,[...fr,...s!=null?s:[]].reduce((m,[$,v,k,x])=>x?m:{...m,[$]:v},{}))))!=null?h:"",c=H.default.useMemo(()=>({React:H.default,...H.default,...[...fr,...s!=null?s:[]].reduce((m,[$,v,k])=>({...m,[v]:k}),{})}),[s]),u=H.default.useMemo(()=>()=>{let{error:$}=H.default.useContext(Ee);return o?H.default.createElement(o,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[o,e]);return H.default.createElement(le.LiveProvider,{Context:Ee,code:p,scope:c,noInline:!0},!e&&H.default.createElement(le.LivePreview,{Context:Ee}),H.default.createElement(u,null))};var ee=w(require("react")),me=require("@pankod/refine-core");var gr=(e,r,s)=>{let{resource:o,resourceName:p,id:c,resources:u}=(0,me.useResource)({resourceNameOrRouteName:r}),h=s!=null?s:c,m=(0,me.useDataProvider)(),[$,v]=ee.default.useState(void 0),[k,x]=ee.default.useState(void 0),[b,S]=ee.default.useState(!0),[a,R]=ee.default.useState(!1),L=ee.default.useCallback(async i=>{var V,j;let C=(V=oe(o))!=null?V:$e(p,void 0,u),T=m(C);R(!0),v(void 0);try{if(e==="list"||e==="create"){let I=(j=(await T.getList({resource:p})).data)==null?void 0:j[0];I||v(`<p>No records/data found for resource "${p}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),x(I),setTimeout(()=>{R(!1)},500)}if((e==="edit"||e==="show")&&i){let I=(await T.getOne({resource:p,id:i})).data;I||v(`<p>No records/data found for resource "${p}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),x(I),setTimeout(()=>{R(!1)},500)}}catch(t){console.warn("An error occured while fetching the resource data. Please check the error message below:",t),v(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${p}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{R(!1)},500)}},[e,m,o,p,u]);return ee.default.useEffect(()=>{S(!1),!a&&!k&&L(h)},[L,h]),{data:k,loading:a,initial:b,error:$}};var te=w(require("react")),hr=require("@pankod/refine-core");var Oe=require("lodash"),xr=({record:e,fields:r,infer:s})=>{let o=(0,hr.useDataProvider)(),[p,c]=te.default.useState([]),[u,h]=te.default.useState(!0),[m,$]=te.default.useState(!1),v=te.default.useCallback(async k=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let x=[];$(!0);try{let b=k.map(async a=>{if(a&&(a.relation||a.canRelation)&&e){let R=oe(a.resource),L=o(R),i=Array.isArray(a.accessor)?void 0:a.multiple?e[a.key].map(C=>a.accessor?(0,Oe.get)(C,a.accessor):C)[0]:a.accessor?(0,Oe.get)(e[a.key],a.accessor):e[a.key];if(i&&a.resource)try{let{data:C}=await L.getOne({resource:a.resource.name,id:i});x.push({status:"success",resource:a.resource.name,field:a.key});let T=s("__",C,{},s);return{...a,relationInfer:T}}catch{return x.push({status:"error",resource:a.resource.name,field:a.key}),{...a,relationInfer:null}}if(i){let C,T;try{let{data:t}=await L.getOne({resource:z(O(a.key)),id:i});x.push({status:"success",resource:z(O(a.key)),field:a.key}),C=t,T=!0}catch{x.push({status:"error",resource:z(O(a.key)),field:a.key});try{let{data:I}=await L.getOne({resource:D(O(a.key)),id:i});x.push({status:"success",resource:D(O(a.key)),field:a.key}),C=I,T=!1}catch{return x.push({status:"error",resource:D(O(a.key)),field:a.key}),{...a,relationInfer:null}}}let V=s("__",C,{},s),j=O(a.key);return{...a,relation:!0,type:"relation",resource:{name:T?z(j):D(j)},fieldable:!1,canRelation:void 0,relationInfer:V}}return{...a,relationInfer:null}}return a}),S=await Promise.all(b);c(S.filter(a=>a)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${x.length} attempts and succeeded with ${x.filter(b=>b.status==="success").length} attempts.`),console.groupEnd()},500)},[o,e]);return te.default.useEffect(()=>{h(!1),!m&&r&&r.length>0&&p.length===0&&v(r)},[v,m,r,v]),{fields:p,loading:m,initial:u}};var Z=({type:e,additionalScope:r=[],customElements:s=[],fieldTransformers:o=[],renderer:p,loadingComponent:c,errorComponent:u,codeViewerComponent:h})=>{let m=Ge([...cr,...s]),$=Ye([...dr,...o]),v=({resourceName:x,fieldTransformer:b,id:S})=>{var n;let{resource:a,resources:R}=(0,je.useResource)({resourceNameOrRouteName:x}),{resource:L}=(0,je.useResource)(),{data:i,loading:C,initial:T,error:V}=gr(e,x!=null?x:a==null?void 0:a.name,S),j=_.default.useMemo(()=>{if(i){let y=Object.keys(i).map(B=>{let J=i[B];return m(B,J,i,m)}).filter(Boolean),P=$(y,R,a,i,m);return b?P.flatMap(B=>{let J=b(B);return J?[J]:[]}):P}return[]},[i,R,a,b]),{fields:t,loading:I}=xr({record:i,fields:j,infer:m}),N=_.default.useMemo(()=>!C&&!I&&!T?p({resource:a,resources:R,fields:t,infer:m,isCustomPage:a.name!==L.name,id:S}):"",[a,R,t,C,I]);return _.default.createElement(_.default.Fragment,null,c&&(C||I)&&_.default.createElement(c,null),!C&&!I&&_.default.createElement(_.default.Fragment,null,_.default.createElement(De,{fetchError:!C&&V?V:!C&&!T&&!i,code:Re(N,M((n=a.label)!=null?n:a.name,e)),errorComponent:u,additionalScope:r}),h&&_.default.createElement(h,{code:we(N),loading:C||I})))};return({name:x,resource:b,fieldTransformer:S,id:a})=>_.default.createElement(v,{fieldTransformer:S,resourceName:b!=null?b:x,key:b!=null?b:x,id:a})};var de=w(require("react")),G=({error:e})=>e?de.default.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px",position:"relative"}},de.default.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},de.default.createElement("div",{style:{fontSize:"1.5rem",fontWeight:"bold"},dangerouslySetInnerHTML:{__html:e!=null?e:""}}))):null;var ne=w(require("react")),Y=()=>{let[e,r]=ne.default.useState(0);return ne.default.useEffect(()=>{if(typeof window<"u"){let s=setInterval(()=>{r(o=>o===3?0:o+1)},300);return()=>{clearInterval(s)}}return()=>{}},[]),ne.default.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"120px",position:"relative"}},ne.default.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},ne.default.createElement("span",{style:{fontSize:"1rem",fontWeight:600}},"loading",".".repeat(e))))};var F=w(require("react")),Q=require("@tabler/icons");var Kr=({visible:e,onClose:r,children:s})=>e?F.default.createElement("div",{style:{position:"fixed",top:0,left:0,right:0,bottom:0,zIndex:9999,backgroundColor:"rgba(0, 0, 0, 0.5)"}},F.default.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",width:"80%",height:"80%",backgroundColor:"#fff",maxWidth:"700px",borderRadius:"4px",padding:"16px",paddingTop:"32px"}},F.default.createElement("div",{style:{position:"absolute",top:4,right:6,width:"32px",height:"32px",fontSize:"24px",lineHeight:"32px",cursor:"pointer",textAlign:"center"},onClick:r},"\xD7"),s)):null,X=({code:e,loading:r})=>{let s=F.default.useMemo(()=>be(e!=null?e:""),[e]),o=F.default.useRef(null),[p,c]=F.default.useState(!1),[u,h]=F.default.useState(!1),m=F.default.useCallback(()=>{h(!0)},[]),$=F.default.useCallback(()=>{h(!1)},[]);if(r)return null;let v=()=>{var k,x,b,S;(k=o==null?void 0:o.current)==null||k.select(),(x=o==null?void 0:o.current)==null||x.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((S=(b=o==null?void 0:o.current)==null?void 0:b.value)!=null?S:""),c(!0),setTimeout(()=>{c(!1)},1e3))};return s?F.default.createElement(F.default.Fragment,null,F.default.createElement("div",{style:{position:"fixed",bottom:"12px",right:"64px"}},F.default.createElement("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"center",width:"100%",height:"100%",gap:"12px"}},F.default.createElement("button",{style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",fontFamily:"sans-serif",alignItems:"center"},onClick:m},F.default.createElement(Q.IconCode,{size:18}),F.default.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},"Show Code")),F.default.createElement("a",{href:"https://github.com/refinedev/refine/discussions/3046",target:"_blank",rel:"noreferrer",style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",alignItems:"center",textDecoration:"none",color:"#666B7A",fontFamily:"sans-serif"}},F.default.createElement(Q.IconMessageCircle,{size:18}),F.default.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},"Give Feedback")))),F.default.createElement("div",{style:{height:"50px"}}),F.default.createElement(Kr,{visible:u,onClose:$},F.default.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"space-between",width:"100%",height:"100%"}},F.default.createElement("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"center",width:"100%",height:"100%"}},F.default.createElement(Pe,{code:s,wrapperProps:{style:{width:"100%",maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"}}}),F.default.createElement("textarea",{ref:o,defaultValue:(s!=null?s:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),F.default.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"flex-end",justifyContent:"center",paddingTop:"8px",width:"100%",height:"100%"}},F.default.createElement("button",{style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",alignItems:"center"},onClick:v},p?F.default.createElement(Q.IconCheck,{size:18}):F.default.createElement(Q.IconCopy,{size:18}),F.default.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},p?"Copied":"Copy")))))):null};var ze=({resource:e,fields:r,isCustomPage:s,id:o})=>{var t,I,N;let p=M((t=e.label)!=null?t:e.name,"show"),c="record",u=[["React","react",!0],["useShow","@pankod/refine-core"],["useResource","@pankod/refine-core"],["useNavigation","@pankod/refine-core"]],m=r.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)).filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){if(n.multiple){u.push(["useMany","@pankod/refine-core"]);let y=l(c,n.key);return n.accessor&&(y=`${l(c,n.key)}?.map((item: any) => ${l("item",void 0,n.accessor)})`),`
                const { data: ${A(n.key,"Data")}, isLoading: ${A(n.key,"IsLoading")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${y} || [],
                    queryOptions: {
                        enabled: !!${c},
                    },
                });
                `}return u.push(["useOne","@pankod/refine-core"]),`
                const { data: ${A(n.key,"Data")}, isLoading: ${A(n.key,"IsLoading")} } =
                useOne({
                    resource: "${n.resource.name}",
                    id: ${l(c,n.key,n.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${c},
                    },
                });
            `}}).filter(Boolean),$=n=>{if(n.relation&&n.resource){let y=A(n.key,"Data"),P=A(n.key,"IsLoading");return n.multiple?g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                    {${P} ? <>Loading...</> : (
                        <>
                        ${(()=>{var K;if(n.relationInfer)if((K=n.relationInfer)!=null&&K.accessor){if(Array.isArray(n.relationInfer.accessor))return"";{let B=A(n.key),J=l(B,void 0,n.relationInfer.accessor);return g`
                                            {${y}?.data?.map((${B}: any) => <li key={${J}}>{${J}}</li>)}
                                        `}}else return"";else return""})()}
                        </>
                    )}
                    </ul>
                </div>
                `:g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <div>
                    {${P} ? <>Loading...</> : (
                        <>
                        ${(()=>{var K;return n.relationInfer?(K=n.relationInfer)!=null&&K.accessor?Array.isArray(n.relationInfer.accessor)?`{${l(`${y}?.data`,void 0,n.relationInfer.accessor,' + " " + ')}}`:`{${y}?.data?.${n.relationInfer.accessor}}`:`{${y}?.data}`:`{${y}?.data?.id}`})()}
                        </>
                    )}
                    </div>
                </div>
                `}},v=n=>{if(n.type==="text"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${y}}>
                                {${y}}
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <div>
                    {${l(c,n.key,n.accessor)}}
                    </div>
                </div>
            `}},k=n=>{if(n.type==="image"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                    {${l(c,n.key)}?.map((item: any) => (
                        <li key={${y}}>
                            <img style={{ maxWidth: 200 }} src={${y}}/>
                        </li>
                    ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <img src={{ maxWidth: 200 }} src={${l(c,n.key,n.accessor," + ")}} />
                </div>
                `}},x=n=>{if(n.type==="email"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${y}}>
                                <a href={"mailto:" + ${y}}>{${y}}</a>
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <div>
                        <a href={"mailto:" + ${l(c,n.key,n.accessor," + ")}}>
                            {${l(c,n.key,n.accessor," + ")}}
                        </a>
                    </div>
                </div>
            `}},b=n=>{if(n.type==="url"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${y}}>
                                <a href={${y}}>{${y}}</a>
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${f(n.key)}</h5>
                <div>
                    <a href={${l(c,n.key,n.accessor," + ")}} target="_blank" rel="noreferrer">
                        {${l(c,n.key,n.accessor," + ")}}
                    </a>
                </div>
            </div>
            `}},S=n=>{if(n.type==="boolean"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${y}}>
                                {${y} ? "Yes" : "No"}
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${f(n.key)}</h5>
                <div>
                {${l(c,n.key,n.accessor," && ")} ? "Yes" : "No"}
                </div>
            </div>
            `}},a=n=>{if(n.type==="date"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                    {${l(c,n.key)}?.map((item: any) => (
                        <li key={${y}}>
                            {(new Date(${y})).toLocaleString(undefined, { timeZone: "UTC" })}
                        </li>
                    ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${f(n.key)}</h5>
                <div>
                    {(new Date(${l(c,n.key,n.accessor," + ' ' + ")})).toLocaleString(undefined, { timeZone: "UTC" })}
                </div>
            </div>
            `}},R=n=>{if(n.type==="richtext")return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${f(n.key)}</h5>
                <p>
                {${l(c,n.key,n.accessor,' + " " + ')}}
                </p>
            </div>
            `},L=n=>{if(n.type==="number"){if(n.multiple){let y=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                        <li key={${y}}>
                            {${y}}
                        </li>
                        ))}
                    </ul>
                </div>
                `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${f(n.key)}</h5>
                    <div>
                    {${l(c,n.key,n.accessor,' + " " + ')} ?? ""}
                    </div>
                </div>
            `}},i=n=>{if(n)return g`
                ${n}
            `},C=r.map(n=>{switch(n==null?void 0:n.type){case"text":return i(v(n));case"number":return i(L(n));case"richtext":return i(R(n));case"email":return i(x(n));case"image":return i(k(n));case"date":return i(a(n));case"boolean":return i(S(n));case"url":return i(b(n));case"relation":return i($(n));default:return}}),{canEdit:T,list:V}=e!=null?e:{},j=!!V;return U(u),g`
    ${q(u)}
    
    export const ${p} = () => {
        const { edit, list } = useNavigation();
        ${s?"":"const { id } = useResource();"}
        const { queryResult } = useShow(${s?`{ 
                    resource: "${e.name}", 
                    id: ${o}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${c} = data?.data;
    
        ${m}

        return (
            <div style={{ padding: "16px" }}>
            <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
                <h1>
                ${f(D((I=e.label)!=null?I:e.name))}
                </h1>
                <div style={{ display: "flex", gap: "8px" }}>
                ${j?g`<button onClick={() => list("${e.name}")}>${f(z((N=e.label)!=null?N:e.name)+" list")}</button>`:""}
                ${T?g`<button onClick={() => edit("${e.name}", ${s?`"${o}"`:"id ?? ''"})}>Edit</button>`:""}
                </div>
            </div>
                <div>
                    ${C.join("")}
                </div>
            </div>
        );
    };
    `},ye=Z({type:"show",additionalScope:[],codeViewerComponent:X,loadingComponent:Y,errorComponent:G,renderer:ze});var Mr=w(require("@pankod/refine-react-table"));var re=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${E(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,He=({resource:e,fields:r,isCustomPage:s})=>{var V,j;let o=M((V=e.label)!=null?V:e.name,"list"),p="tableData?.data",c=[["React","react",!0],["IResourceComponentsProps","@pankod/refine-core"],["useNavigation","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"]],u=r.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)),h=u.filter(Boolean).map(t=>{if((t==null?void 0:t.relation)&&!t.fieldable&&t.resource){c.push(["GetManyResponse","@pankod/refine-core"]),c.push(["useMany","@pankod/refine-core"]);let I="";return t.multiple?I=`[].concat(...(${p}?.map((item) => ${l("item",t.key,t.accessor,!1)}) ?? []))`:I=`${p}?.map((item) => ${l("item",t.key,t.accessor,!1)}) ?? []`,`
                const { data: ${A(t.key,"Data")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${I},
                    queryOptions: {
                        enabled: !!${p},
                    },
                });
                `}}).filter(Boolean),m=u==null?void 0:u.map(t=>{if(t&&t.resource)return A(t.key,"Data")}).filter(Boolean),$=t=>{var I;if(t.relation&&t.resource){let N=`${A(t.key,"Data")}?.data`;if(Array.isArray(t.accessor))return;let n=`id: "${t.key}"`,y=`header: "${f(t.key)}"`,P=re(t),K="";if(t.multiple){let B="item";t!=null&&t.relationInfer&&(B=l("item",void 0,t.relationInfer.accessor)),K=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${A(t.key,"Data")}: GetManyResponse;
                    };

                    ${t!=null&&t.accessor?"try {":""}

                    const ${A(t.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${A(t.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,t.accessor)}
                        );
                    })


                    return (
                        <ul>
                            {${A(t.key,"")}?.map((item, index) => (
                                <li key={index}>
                                    {${B}}
                                </li>
                            ))}
                        </ul>
                    )
                    ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                }
            `}else t!=null&&t.relationInfer?K=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${A(t.key,"Data")}: GetManyResponse;
                        };

                        ${t!=null&&t.accessor?"try {":""}

                        const ${A(t.key,"")} = meta.${N}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(A(t.key),void 0,(I=t==null?void 0:t.relationInfer)==null?void 0:I.accessor)} ?? "Loading...";

                        ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                    },`:K="";return`
                {
                    ${n},
                    ${y},
                    ${P},
                    ${K}
                }
            `}},v=t=>{if(t.type==="image"){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y=g`
                cell: function render({ getValue }) {
                    ${t!=null&&t.accessor?"try {":""}
                        return <img style={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}} />
                    ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                }
            `;if(t.multiple){let P=l("item",void 0,t.accessor," + ");y=`
                    cell: function render({ getValue }) {
                        ${t!=null&&t.accessor?"try {":""}
                            return (
                                <ul>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <li key={index}><img src={${P}} style={{ height: "50px", maxWidth: "100px" }} /></li>
                                    ))}
                                </ul>
                            )
                        ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},k=t=>{if(t.type==="email"){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y=g`
                cell: function render({ getValue }) {
                    return <a href={"mailto:" + ${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0,' + " " + ')}}>{${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0,' + " " + ')}}</a>
                }
            `;return t.multiple&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,t.accessor," + ")}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},x=t=>{if(t.type==="url"){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y=g`
                cell: function render({ getValue }) {
                    return <a href={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}}>{${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}}</a>
                }
            `;return t.multiple&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,t.accessor," + ")}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},b=t=>{if((t==null?void 0:t.type)==="boolean"){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y=g`
                cell: function render({ getValue }) {
                    return ${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")} ? "yes" : "no"
                }
            `;return t.multiple&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,t.accessor," + ")} ? "yes" : "no"}
                                    </li>
                                ))}
                            </ul>
                        );
                    }
                `),`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},S=t=>{if(t.type==="date"){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y=g`
                cell: function render({ getValue }) {
                    return (new Date(${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0,' + " " + ')})).toLocaleString(undefined, { timeZone: "UTC" })
                }
            `;return t.multiple&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                    {(new Date(${l("item",void 0,t.accessor," + ")})).toLocaleString(undefined, { timeZone: "UTC" })}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},a=t=>{if(t&&(t.type==="text"||t.type==="number"||t.type==="richtext")){let I=`id: "${t.key}"`,N=re(t),n=`header: "${f(t.key)}"`,y="";return t.multiple&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,t.accessor,' + " " + ')}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),!t.multiple&&Array.isArray(t.accessor)&&(y=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue<any>()",t.key,t.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${I},
                    ${N},
                    ${n},
                    ${y}
                }
            `}},{canEdit:R,canShow:L,canCreate:i}=e!=null?e:{},C=R||L?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <div
                    style={{
                        display: "flex",
                        flexDirection: "row",
                        flexWrap: "wrap",
                        gap: "4px",
                    }}
                >
                ${L?g`
                    <button
                        onClick={() => {
                            show("${e.name}", getValue() as string);
                        }}
                    >
                        Show
                    </button>
                    `:""}
                    ${R?g`
                            <button
                            onClick={() => {
                                edit("${e.name}", getValue() as string);
                            }}
                        >
                            Edit
                        </button>
                    `:""}
                </div>
            );
        },
    },
        `:"",T=r.map(t=>{switch(t==null?void 0:t.type){case"text":case"number":case"richtext":return a(t);case"email":return k(t);case"image":return v(t);case"date":return S(t);case"boolean":return b(t);case"url":return x(t);case"relation":return $(t);default:return}});return U(c),g`
    ${q(c)}
    
    export const ${o}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...T,C].filter(Boolean).join(",")}
        ], []);

        ${R||L?g`
        const { ${R?"edit,":""} ${L?"show,":""} ${i?"create,":""} } = useNavigation();
        `:""}

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                tableQueryResult: { data: tableData },
            },
            getState,
            setPageIndex,
            getCanPreviousPage,
            getPageCount,
            getCanNextPage,
            nextPage,
            previousPage,
            setPageSize,
            getColumn,
        } = useTable({
            columns,
            ${s?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${h}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${m.join(", ")}
            },
        }));

        return (
            <div style={{ padding: "16px" }}>
            <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
                <h1>${f((j=e.label)!=null?j:e.name)}</h1>
                ${i?g`<button onClick={() => create("${e.name}")}>Create</button>`:""}
            </div>
                <div style={{ maxWidth: "100%", overflowY: "scroll" }}>
                    <table>
                        <thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </th>
                                    ))}
                                </tr>
                            ))}
                        </thead>
                        <tbody>
                            {getRowModel().rows.map((row) => (
                                <tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </td>
                                    ))}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
                <div style={{ marginTop: "12px" }}>
                    <button
                        onClick={() => setPageIndex(0)}
                        disabled={!getCanPreviousPage()}
                    >
                        {"<<"}
                    </button>
                    <button
                        onClick={() => previousPage()}
                        disabled={!getCanPreviousPage()}
                    >
                        {"<"}
                    </button>
                    <button onClick={() => nextPage()} disabled={!getCanNextPage()}>
                        {">"}
                    </button>
                    <button
                        onClick={() => setPageIndex(getPageCount() - 1)}
                        disabled={!getCanNextPage()}
                    >
                        {">>"}
                    </button>
                    <span>
                        Page
                        <strong>
                            {getState().pagination.pageIndex + 1} of{" "}
                            {getPageCount()}
                        </strong>
                    </span>
                    <span>
                        | Go to page:
                        <input
                            type="number"
                            defaultValue={getState().pagination.pageIndex + 1}
                            onChange={(e) => {
                                const page = e.target.value
                                    ? Number(e.target.value) - 1
                                    : 0;
                                setPageIndex(page);
                            }}
                        />
                    </span>{" "}
                    <select
                        value={getState().pagination.pageSize}
                        onChange={(e) => {
                            setPageSize(Number(e.target.value));
                        }}
                    >
                        {[10, 20, 30, 40, 50].map((pageSize) => (
                            <option key={pageSize} value={pageSize}>
                                Show {pageSize}
                            </option>
                        ))}
                    </select>
                </div>
            </div>   
        );
    };
    `},fe=Z({type:"list",additionalScope:[["@pankod/refine-react-table","RefineReactTable",Mr]],codeViewerComponent:X,loadingComponent:Y,errorComponent:G,renderer:He});var _r=w(require("@pankod/refine-core")),Br=w(require("@pankod/refine-react-hook-form"));var Ke=({resource:e,fields:r,isCustomPage:s})=>{var x,b,S;let o=M((x=e.label)!=null?x:e.name,"create"),p=[["React","react",!0],["useNavigation","@pankod/refine-core"],["useForm","@pankod/refine-react-hook-form"]],u=r.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource)return p.push(["useSelect","@pankod/refine-core"]),`
                const { options: ${A(a.key,"Options")} } =
                useSelect({
                    resource: "${a.resource.name}",
                    ${ie(a)}
                });
            `}).filter(Boolean),h=a=>{if(a.relation&&a.resource){p.push(["useSelect","@pankod/refine-core"]);let R=A(a.key,"Options");return g`
            <label>
                <span style={{ marginRight: "8px" }}>
                    ${f(a.key)}
                </span>
                <select
                    placeholder="Select ${D(a.resource.name)}"
                    {...register("${E(a.key,void 0,a.accessor)}", {
                        required: ${a.multiple?"false":'"This field is required"'},
                    })}
                >
                    {${R}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </select>
                <span style={{ color: "red" }}>
                    {${l("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},m=a=>{if(a.type==="text"||a.type==="url"||a.type==="email"||a.type==="number"||a.type==="date"||a.type==="richtext"){if(ae(a.key)||a.multiple)return;let R=a.type==="richtext"?"textarea":"input";return g`
                <label>
                    <span style={{ marginRight: "8px" }}>
                        ${f(a.key)}
                    </span>
                    <${R}
                        ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                        ${R==="textarea"?`
                            rows={5}
                            cols={33}
                            style={{ verticalAlign: "top" }}
                        `:""}
                        {...register("${E(a.key,void 0,a.accessor)}", {
                            required: "This field is required",
                        })}

                    />
                    <span style={{ color: "red" }}>
                        {${l("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                    </span>
                </label>
            `}},$=a=>{if(a.type==="boolean")return a.multiple?void 0:g`
                <label>
                    <span style={{ marginRight: "8px" }}>
                        ${f(a.key)}
                    </span>
                    <input
                        type="checkbox"
                        {...register("${E(a.key,void 0,a.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <span style={{ color: "red" }}>
                        {${l("errors",a.key,a.accessor,!1)}?.message as string}
                    </span>
                </label>
            `},v=r.map(a=>{switch(a==null?void 0:a.type){case"text":case"number":case"email":case"url":case"richtext":case"date":return m(a);case"boolean":return $(a);case"relation":return h(a);default:return}}),k=!!e.list;return U(p),g`
    ${q(p)}
    
    export const ${o} = () => {
        ${k?`
        const { list } = useNavigation();
        `:""}
        const {
            refineCore: { onFinish, formLoading },
            register,
            handleSubmit,
            resetField,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${u}

        return (
            <div style={{ padding: "16px" }}>
                <div style={{ display: "flex", justifyContent: ${k?'"space-between"':'"flex-start"'} }}>
                    <h1>
                        ${f(D((b=e.label)!=null?b:e.name)+" Create")}
                    </h1>
                    ${k?g`
                            <div>
                        <button
                                onClick={() => {
                                    list("${e.name}");
                                }}
                        >
                            ${f(z((S=e.label)!=null?S:e.name)+" List")}
                        </button>
                        </div>
                    `:""}
                </div>
                <form onSubmit={handleSubmit(onFinish)}>
                    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
                        ${v.join("")}
                        <div>
                            <input type="submit" value="Save" />
                        </div>
                    </div>
                </form>
            </div>
        );
    };
    `},ge=Z({type:"create",additionalScope:[["@pankod/refine-core","RefineCore",_r],["@pankod/refine-react-hook-form","RefineReactHookForm",Br]],codeViewerComponent:X,loadingComponent:Y,errorComponent:G,renderer:Ke});var qr=w(require("@pankod/refine-core")),Ur=w(require("@pankod/refine-react-hook-form"));var Me=({resource:e,fields:r,isCustomPage:s,id:o})=>{var S,a,R,L;let p=M((S=e.label)!=null?S:e.name,"edit"),c=A((a=e.label)!=null?a:e.name,"Data"),u=[["React","react",!0],["useNavigation","@pankod/refine-core"],["useForm","@pankod/refine-react-hook-form"]],m=r.filter(i=>(i==null?void 0:i.relation)&&!(i!=null&&i.fieldable)&&(i==null?void 0:i.resource)).filter(Boolean).map(i=>{if((i==null?void 0:i.relation)&&!i.fieldable&&i.resource){u.push(["useSelect","@pankod/refine-core"]);let C=l(c,i.key,i.accessor,!1);return i.multiple&&i.accessor&&(C=`${l(c,i.key)}?.map((item: any) => ${l("item",void 0,i.accessor)})`),`
                const { options: ${A(i.key,"Options")} } =
                useSelect({
                    resource: "${i.resource.name}",
                    defaultValue: ${C},
                    ${ie(i)}
                });

                React.useEffect(() => {
                    resetField("${E(i.key,void 0,i.accessor)}");
                }, [${A(i.key,"Options")}]);
            `}}).filter(Boolean),$=i=>{if(i.relation&&i.resource){u.push(["useSelect","@pankod/refine-core"]);let C=A(i.key,"Options");return g`
            <label>
                <span style={{ marginRight: "8px" }}>${f(i.key)}</span>
                <select
                    placeholder="Select ${D(i.resource.name)}"
                    {...register("${E(i.key,void 0,i.accessor)}", {
                        required: ${i.multiple?"false":'"This field is required"'},
                    })}
                >
                    {${C}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </select>
                <span style={{ color: "red" }}>
                    {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},v=i=>{if(i.type==="text"||i.type==="url"||i.type==="email"||i.type==="number"||i.type==="date"||i.type==="richtext"){if(i.multiple){let T=E(i.key,"${index}",i.accessor),V=l(l("(errors as any)",i.key,void 0,!1)+"?.[index]",void 0,i.accessor);return`
                    <>
                        {${l(c,i.key)}?.map((item: any, index: number) => (
                            <label key={index}>
                                <span style={{ marginRight: "8px" }}>
                                    ${f(i.key)} #{index + 1}
                                </span>
                                <input ${i.type!=="richtext"?`
                                type="${i.type!=="date"?i.type:"text"}"
                                `:""} {...register(\`${T}\`, { required: "This field is required", })} />
                                <span style={{color: "red"}}>
                                {${l(V,"message")} as string}
                                </span>
                            </label>
                        ))}
                    </>
                `}let C=i.type==="richtext"?"textarea":"input";return g`
            <label>
                <span style={{ marginRight: "8px" }}>${f(i.key)}</span>
                <${C}
                ${ae(i.key)?"disabled":""}
                ${i.type!=="date"&&i.type!=="richtext"?`type="${i.type}"`:""}
                ${C==="textarea"?`
                    rows={5}
                    cols={33}
                    style={{ verticalAlign: "top" }}
                `:""}
                {...register("${E(i.key,void 0,i.accessor)}", {
                    required: "This field is required",
                })}
                />
                <span style={{ color: "red" }}>
                {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},k=i=>{if(i.type==="boolean"){if(i.multiple){let C=E(i.key,void 0,i.accessor),T=l("(errors as any)",i.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${l(c,i.key)}?.map((item: any, index: number) => (
                            <label key={index}>
                            <span style={{ marginRight: "8px" }}>
                            ${f(i.key)} #{index + 1}
                            </span>
                            <input
                                type="checkbox"
                                {...register(\`${C}.\${index}\`, {
                                    required: "This field is required",
                                })}
                            />
                            <span style={{ color: "red" }}>
                                {${T}?.message as string}
                            </span>
                        ))}
                    </>
                `}return g`
            <label>
                <span style={{ marginRight: "8px" }}>${f(i.key)}</span>
                <input type="checkbox" {...register("${E(i.key,void 0,i.accessor)}", {
                    required: "This field is required",
                })} />
                <span style={{ color: "red" }}>
                    {${l("errors",i.key,i.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},x=r.map(i=>{switch(i==null?void 0:i.type){case"text":case"number":case"email":case"url":case"richtext":case"date":return v(i);case"boolean":return k(i);case"relation":return $(i);default:return}}),b=!!e.list;return U(u),g`
    ${q(u)}
    
    export const ${p} = () => {
        ${b?`
        const { list } = useNavigation();
        `:""}
        const {
            refineCore: { onFinish, formLoading, queryResult },
            register,
            handleSubmit,
            resetField,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${o},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${c} = queryResult?.data?.data;
    
        ${m}

        return (
            <div style={{ padding: "16px" }}>
                <div style={{ display: "flex", justifyContent: ${b?'"space-between"':'"flex-start"'} }}>
                    <h1>
                        ${f(D((R=e.label)!=null?R:e.name)+" Edit")}
                    </h1>
                    ${b?g`
                    <div>
                        <button
                                onClick={() => {
                                    list("${e.name}");
                                }}
                        >
                            ${f(z((L=e.label)!=null?L:e.name)+" List")}
                        </button>
                    </div>
                    `:""}
                </div>
                <form onSubmit={handleSubmit(onFinish)}>
                    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
                        ${x.join("")}
                        <div>
                            <input type="submit" value="Save" />
                        </div>
                    </div>
                </form>
            </div>
        );
    };
    `},he=Z({type:"edit",additionalScope:[["@pankod/refine-core","RefineCore",qr],["@pankod/refine-react-hook-form","RefineReactHookForm",Ur]],codeViewerComponent:X,loadingComponent:Y,errorComponent:G,renderer:Me});var Wr=({action:e,id:r,...s})=>{let{useParams:o}=(0,$r.useRouterContext)(),{action:p,id:c}=o();switch(e!=null?e:p){case"show":return ce.default.createElement(ye,{...s,id:r!=null?r:c});case"create":return ce.default.createElement(ge,{...s,id:r!=null?r:c});case"edit":return ce.default.createElement(he,{...s,id:r!=null?r:c});default:return ce.default.createElement(fe,{...s,id:r!=null?r:c})}};
//# sourceMappingURL=headless.js.map