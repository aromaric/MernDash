var vr=Object.create;var pe=Object.defineProperty;var Fr=Object.getOwnPropertyDescriptor;var Ar=Object.getOwnPropertyNames;var Tr=Object.getPrototypeOf,wr=Object.prototype.hasOwnProperty;var Rr=(e,t)=>{for(var a in t)pe(e,a,{get:t[a],enumerable:!0})},Ue=(e,t,a,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let u of Ar(t))!wr.call(e,u)&&u!==a&&pe(e,u,{get:()=>t[u],enumerable:!(o=Fr(t,u))||o.enumerable});return e};var w=(e,t,a)=>(a=e!=null?vr(Tr(e)):{},Ue(t||!e||!e.__esModule?pe(a,"default",{value:e,enumerable:!0}):a,e)),Sr=e=>Ue(pe({},"__esModule",{value:!0}),e);var Jr={};Rr(Jr,{MuiCreateInferencer:()=>he,MuiCreateRenderer:()=>He,MuiEditInferencer:()=>ke,MuiEditRenderer:()=>ze,MuiInferencer:()=>Yr,MuiListInferencer:()=>ge,MuiListRenderer:()=>Ge,MuiShowInferencer:()=>fe,MuiShowRenderer:()=>_e});module.exports=Sr(Jr);var ce=w(require("react")),Cr=require("@pankod/refine-core");var zr=w(require("@pankod/refine-mui"));var j=w(require("react")),Oe=require("@pankod/refine-core");var Lr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,$e=(e,t)=>{let a=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];Lr.test(e)&&a.unshift("url");let o=a.find(u=>u in t&&!!t[u]);if(o)return o==="firstName"&&"lastName"in t?["firstName","lastName"]:o};function xe(e,t,a){var u;if(t)return t;let o=a==null?void 0:a.find(i=>i.name===e);return(u=o==null?void 0:o.options)!=null&&u.dataProviderName?o.options.dataProviderName:"default"}var ae=e=>{var t;return(t=e==null?void 0:e.options)==null?void 0:t.dataProviderName};var be=e=>{let t=[...e].filter(Boolean).sort((a,o)=>(o.priority||0)-(a.priority||0))[0];return t||null};var Ke=w(require("prettier/standalone")),Ze=w(require("prettier/parser-typescript")),Ce=e=>{try{return Ke.default.format(e,{parser:"typescript",plugins:[Ze.default],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),e}};var ve=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var Fe=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Xe=(e,t)=>{let a=Fe.test(e),o=typeof t=="string"||typeof t=="number",u=Array.isArray(t)&&t.every(i=>typeof i=="string"||typeof i=="number");return a&&o||a&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var D=e=>e.replace(Fe,"");var g=e=>D(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(p=>p.charAt(0).toUpperCase()+p.slice(1)).join(" ");var Ae=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Ye=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Nr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Pr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Te=(e,t={})=>{let a=e.matchAll(Ye),o=new Set;for(let u of a){let[,i,p,f,d]=u;if(d in t){let $=t[d];if(d==="react")continue;i&&o.add(`const { default: ${i} } = ${$};`),p&&o.add(`const${p.replace(Pr,"$1: $3$4")} = ${$};`),f&&o.add(`const ${f} = ${$};`)}}return ve(`
    ${Array.from(o).join(`
`)}
    ${e.replace(Ye,"").replace(Nr,"")}
    `)};var se=w(require("pluralize"));var we=(e,t)=>e?t.find(o=>{let u=D(e.key);return o.name===u||o.name===(se.default.isPlural(u)?u:se.default.plural(u))||o.name===(se.default.isSingular(u)?u:se.default.singular(u))}):void 0;var Je=w(require("pluralize"));var O=(e,t,a="Inferred")=>{let o=e.replace(/[^a-zA-Z0-9]/g," "),u=Je.default.singular(o),p=g(u).replace(/ /g,"")||a,f=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(p)?`${p}${f}`:`${f}${p}`};var Br=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",x=(e,...t)=>e.reduce((o,u,i)=>`${o}${u}${Br(t[i])}`,"").trim();var Re=(e,t)=>`
    ${e!=null?e:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var Se=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var Er=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Le=e=>Er.test(e);function Ne(e,t,a){let o=`${e}`;return t&&(o+="?.",Le(t)?o+=t:o+=`['${t}']`),a&&(o+="?.",Le(a)?o+=a:o+=`['${a}']`),o}function Vr(e,t,a){return(a!=null?a:[]).map(u=>Ne(e,t,u))}var l=(e,t,a,o=' + " " + ')=>Array.isArray(a)?o?Vr(e,t,a).join(o):Ne(e,t,a[0]):Ne(e,t,a),V=(e,t,a)=>{let o=e;return t&&(o+=`.${t}`),a&&(Array.isArray(a)?o+=`.${a[0]}`:o+=`.${a}`),o};var G=e=>{let t=e.reduce((o,[u,i,p])=>(o[i]||(o[i]=[]),o[i].includes(u)||(p?o[i].push([u,!0]):o[i].push(u)),o),{});return Object.entries(t).map(([o,u])=>{let i=u.find($=>Array.isArray($)&&$[1]),p=u.filter($=>typeof $=="string"),f=i?`${i[0]}`:"",d=p.length?`{ ${p.join(", ")} }`:"";return`import ${f}${f&&d?", ":""}${d} from "${o}";`})};var Pe=w(require("pluralize")),ee=(e="")=>Pe.default.isSingular(e)?e:Pe.default.singular(e);var Be=w(require("pluralize")),re=(e="")=>Be.default.isPlural(e)?e:Be.default.plural(e);var Dr=/^id$/i,X=e=>Dr.test(e);var H=e=>{};var N=(e,t="")=>{if(Number.isInteger(Number(e)))return t.charAt(0).toLowerCase()+t.slice(1)+e;let o=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=g(o).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Qe=e=>{let t=(a,o,u,i=t)=>{let p=e.map(d=>d(a,o,u,i));return be(p)};return t};var er=e=>(a,o,u,i,p)=>e.reduce((f,d)=>d(f,o,u,i,p),a);var rr=(e,t,a,o)=>{let u=Array.isArray(t),i=Array.isArray(t)&&t.every(p=>typeof p=="string"||typeof p=="number");if(u){if(!i){let f=o(e,t[0],a,o);return f?{...f,key:e,multiple:!0,priority:1}:!1}let p=o(e,t[0],a,o)||{type:"string"};return{key:e,multiple:!0,priority:1,type:p==null?void 0:p.type}}return!1};var tr=(e,t)=>typeof t=="boolean"?{key:e,type:"boolean"}:!1;var Ee=w(require("dayjs")),Mr=/(_at|_on|At|On|AT|ON)(\[\])?$/,nr=(e,t)=>{let a=Mr.test(e)&&(0,Ee.default)(t).isValid(),o=typeof t=="string"&&(0,Ee.default)(t).isValid(),u=typeof t=="string"&&t.length>4;return a||o&&u?{key:e,type:"date",priority:1}:!1};var Wr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,or=(e,t)=>typeof t=="string"&&Wr.test(t)?{key:e,type:"email",priority:1}:!1;var Or=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,ar=(e,t)=>typeof t=="string"&&Or.test(t)?{key:e,type:"image",priority:2}:!1;var sr=(e,t)=>typeof t>"u"||t===null?null:!1;var ir=(e,t)=>typeof t=="number"?{key:e,type:"number"}:!1;var jr=/id$/i,cr=(e,t,a,o)=>{let u=t!==null,i=!Array.isArray(t);if(u&&i&&typeof t=="object"){if(Object.keys(t).length===1&&jr.test(Object.keys(t)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let d=$e(e,t);if((d?d.length>0:!1)&&d){let C=d&&Array.isArray(d)?d[0]:d,v=o(C,t[C],t,o);if(v){let h=Array.isArray(d)?d.map(c=>v.accessor?`${c}.${Array.isArray(v.accessor)?v.accessor[0]:v.accessor}`:c):v.accessor?Array.isArray(v.accessor)?`${d}.${v.accessor[0]}`:`${d}.${v.accessor}`:d;return{...v,fieldable:!0,key:e,accessor:h,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var ur=(e,t)=>typeof t=="string"&&t.length>100?{key:e,type:"richtext",priority:1}:!1;var pr=(e,t)=>typeof t=="string"?{key:e,type:"text"}:!1;var _r=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,lr=(e,t)=>typeof t=="string"&&_r.test(t)?{key:e,type:"url",priority:1}:!1;var mr=[rr,tr,nr,or,ar,sr,ir,cr,Xe,ur,pr,lr];var dr=(e,t,a,o)=>e.map(i=>{if(!i.relation&&(i.type==="text"||i.type==="richtext"||i.type==="number")&&!i.canRelation){let p=/^[a-z0-9-]+$/,f=h=>p.test(`${h}`),d=i.key.toLowerCase()!=="id";return!(!i.accessor||typeof i.accessor=="string")||!d?i:(i.multiple?o[i.key]:[o[i.key]]).every(h=>f(i.accessor?h[i.accessor]:h))?{...i,canRelation:!0}:i}return i});var Gr=/(image|photo|avatar|cover|thumbnail|icon)/i,yr=e=>e.map(a=>a.type==="url"&&Gr.test(a.key)?{...a,type:"image"}:a);var fr=(e,t)=>e.map(o=>{let u=we(o,t);return u?{...o,relation:!0,type:"relation",resource:u}:o});var gr=(e,t,a,o,u)=>e.map(p=>{if(p.relation&&p.type==="relation"&&!p.resource){let f=p.accessor?o[p.key][p.accessor]:o[p.key],d=u(p.key,f,o,u);if(d&&d.type!=="relation")return{...p,fieldable:!0,relation:!1,type:d.type,canRelation:!0}}return p});var hr=[yr,fr,gr,dr];var z=w(require("react")),le=w(require("prism-react-renderer")),kr=w(require("prism-react-renderer/themes/vsDark")),Ve=({code:e,wrapperProps:t})=>((0,z.useEffect)(()=>{var o;let a=document.createElement("style");a.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(o=document.getElementById("code-highlight"))==null||o.appendChild(a)},[]),z.default.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},z.default.createElement(le.default,{...le.defaultProps,theme:kr.default,code:e,language:"tsx"},({className:a,style:o,tokens:u,getLineProps:i,getTokenProps:p})=>z.default.createElement("pre",{className:a,style:{...o,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((f,d)=>z.default.createElement("div",{key:d,...i({line:f,key:d})},f.map(($,C)=>z.default.createElement("span",{key:C,...p({token:$,key:C})}))))))));var M=w(require("react")),Hr=w(require("@pankod/refine-core")),me=require("@aliemir/react-live");var Ir=[["react","React",M.default],["@pankod/refine-core","RefineCore",Hr]],De=M.default.createContext({}),Me=({fetchError:e,code:t,additionalScope:a,errorComponent:o})=>{var f;let u=(f=t&&Ae(Te(t,[...Ir,...a!=null?a:[]].reduce((d,[$,C,v,h])=>h?d:{...d,[$]:C},{}))))!=null?f:"",i=M.default.useMemo(()=>({React:M.default,...M.default,...[...Ir,...a!=null?a:[]].reduce((d,[$,C,v])=>({...d,[C]:v}),{})}),[a]),p=M.default.useMemo(()=>()=>{let{error:$}=M.default.useContext(De);return o?M.default.createElement(o,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[o,e]);return M.default.createElement(me.LiveProvider,{Context:De,code:u,scope:i,noInline:!0},!e&&M.default.createElement(me.LivePreview,{Context:De}),M.default.createElement(p,null))};var Y=w(require("react")),de=require("@pankod/refine-core");var $r=(e,t,a)=>{let{resource:o,resourceName:u,id:i,resources:p}=(0,de.useResource)({resourceNameOrRouteName:t}),f=a!=null?a:i,d=(0,de.useDataProvider)(),[$,C]=Y.default.useState(void 0),[v,h]=Y.default.useState(void 0),[c,S]=Y.default.useState(!0),[m,s]=Y.default.useState(!1),A=Y.default.useCallback(async b=>{var k,B;let F=(k=ae(o))!=null?k:xe(u,void 0,p),n=d(F);s(!0),C(void 0);try{if(e==="list"||e==="create"){let I=(B=(await n.getList({resource:u})).data)==null?void 0:B[0];I||C(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(I),setTimeout(()=>{s(!1)},500)}if((e==="edit"||e==="show")&&b){let I=(await n.getOne({resource:u,id:b})).data;I||C(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(I),setTimeout(()=>{s(!1)},500)}}catch(r){console.warn("An error occured while fetching the resource data. Please check the error message below:",r),C(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${u}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{s(!1)},500)}},[e,d,o,u,p]);return Y.default.useEffect(()=>{S(!1),!m&&!v&&A(f)},[A,f]),{data:v,loading:m,initial:c,error:$}};var te=w(require("react")),xr=require("@pankod/refine-core");var We=require("lodash"),br=({record:e,fields:t,infer:a})=>{let o=(0,xr.useDataProvider)(),[u,i]=te.default.useState([]),[p,f]=te.default.useState(!0),[d,$]=te.default.useState(!1),C=te.default.useCallback(async v=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let h=[];$(!0);try{let c=v.map(async m=>{if(m&&(m.relation||m.canRelation)&&e){let s=ae(m.resource),A=o(s),b=Array.isArray(m.accessor)?void 0:m.multiple?e[m.key].map(F=>m.accessor?(0,We.get)(F,m.accessor):F)[0]:m.accessor?(0,We.get)(e[m.key],m.accessor):e[m.key];if(b&&m.resource)try{let{data:F}=await A.getOne({resource:m.resource.name,id:b});h.push({status:"success",resource:m.resource.name,field:m.key});let n=a("__",F,{},a);return{...m,relationInfer:n}}catch{return h.push({status:"error",resource:m.resource.name,field:m.key}),{...m,relationInfer:null}}if(b){let F,n;try{let{data:r}=await A.getOne({resource:re(D(m.key)),id:b});h.push({status:"success",resource:re(D(m.key)),field:m.key}),F=r,n=!0}catch{h.push({status:"error",resource:re(D(m.key)),field:m.key});try{let{data:I}=await A.getOne({resource:ee(D(m.key)),id:b});h.push({status:"success",resource:ee(D(m.key)),field:m.key}),F=I,n=!1}catch{return h.push({status:"error",resource:ee(D(m.key)),field:m.key}),{...m,relationInfer:null}}}let k=a("__",F,{},a),B=D(m.key);return{...m,relation:!0,type:"relation",resource:{name:n?re(B):ee(B)},fieldable:!1,canRelation:void 0,relationInfer:k}}return{...m,relationInfer:null}}return m}),S=await Promise.all(c);i(S.filter(m=>m)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${h.length} attempts and succeeded with ${h.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[o,e]);return te.default.useEffect(()=>{f(!1),!d&&t&&t.length>0&&u.length===0&&C(t)},[C,d,t,C]),{fields:u,loading:d,initial:p}};var q=({type:e,additionalScope:t=[],customElements:a=[],fieldTransformers:o=[],renderer:u,loadingComponent:i,errorComponent:p,codeViewerComponent:f})=>{let d=Qe([...mr,...a]),$=er([...hr,...o]),C=({resourceName:h,fieldTransformer:c,id:S})=>{var P;let{resource:m,resources:s}=(0,Oe.useResource)({resourceNameOrRouteName:h}),{resource:A}=(0,Oe.useResource)(),{data:b,loading:F,initial:n,error:k}=$r(e,h!=null?h:m==null?void 0:m.name,S),B=j.default.useMemo(()=>{if(b){let T=Object.keys(b).map(J=>{let Q=b[J];return d(J,Q,b,d)}).filter(Boolean),E=$(T,s,m,b,d);return c?E.flatMap(J=>{let Q=c(J);return Q?[Q]:[]}):E}return[]},[b,s,m,c]),{fields:r,loading:I}=br({record:b,fields:B,infer:d}),L=j.default.useMemo(()=>!F&&!I&&!n?u({resource:m,resources:s,fields:r,infer:d,isCustomPage:m.name!==A.name,id:S}):"",[m,s,r,F,I]);return j.default.createElement(j.default.Fragment,null,i&&(F||I)&&j.default.createElement(i,null),!F&&!I&&j.default.createElement(j.default.Fragment,null,j.default.createElement(Me,{fetchError:!F&&k?k:!F&&!n&&!b,code:Re(L,O((P=m.label)!=null?P:m.name,e)),errorComponent:p,additionalScope:t}),f&&j.default.createElement(f,{code:Se(L),loading:F||I})))};return({name:h,resource:c,fieldTransformer:S,id:m})=>j.default.createElement(C,{fieldTransformer:S,resourceName:c!=null?c:h,key:c!=null?c:h,id:m})};var ie=w(require("react")),ne=require("@pankod/refine-mui"),U=({error:e})=>e?ie.default.createElement(ne.Box,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"200px"}},ie.default.createElement(ne.Alert,{severity:"error"},ie.default.createElement(ne.AlertTitle,null,"Error"),ie.default.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}}))):null;var je=w(require("react")),ye=require("@pankod/refine-mui"),K=()=>je.default.createElement(ye.Box,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px"}},je.default.createElement(ye.CircularProgress,{size:"large"}));var R=w(require("react")),W=require("@pankod/refine-mui"),_=require("@tabler/icons");var Z=({code:e,loading:t})=>{let a=R.default.useMemo(()=>Ce(e!=null?e:""),[e]),o=R.default.useRef(null),[u,i]=R.default.useState(!1),[p,f]=R.default.useState(!1);if(t)return null;let d=()=>{var $,C,v,h;($=o==null?void 0:o.current)==null||$.select(),(C=o==null?void 0:o.current)==null||C.setSelectionRange(0,99999),typeof navigator<"u"&&(navigator.clipboard.writeText((h=(v=o==null?void 0:o.current)==null?void 0:v.value)!=null?h:""),f(!0),setTimeout(()=>{f(!1)},1e3))};return a?R.default.createElement(R.default.Fragment,null,R.default.createElement(W.Box,{sx:{position:"fixed",bottom:12,right:60}},R.default.createElement(W.Box,{sx:{display:"flex",gap:2}},R.default.createElement(W.Button,{variant:"contained",color:"primary",onClick:()=>i(!0),startIcon:R.default.createElement(_.IconCode,{size:18}),sx:{whiteSpace:"nowrap"}},"Show Code"),R.default.createElement(W.Button,{variant:"contained",color:"secondary",component:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046",startIcon:R.default.createElement(_.IconMessageCircle,{size:18}),sx:{whiteSpace:"nowrap"}},"Give Feedback"))),R.default.createElement("div",{style:{height:"50px"}}),R.default.createElement(W.Modal,{open:u,onClose:()=>i(!1)},R.default.createElement(W.Box,{sx:{position:"absolute",maxWidth:"800px",width:"100%",top:"50%",left:"50%",transform:"translate(-50%, -50%)",boxShadow:24}},R.default.createElement(W.IconButton,{onClick:()=>i(!1),disableRipple:!0,sx:{position:"absolute",right:0,top:0,height:56,width:56,display:"flex",alignItems:"center",justifyContent:"center"}},R.default.createElement(_.IconX,{size:18,style:{color:"#666b7a"}})),R.default.createElement(Ve,{code:a}),R.default.createElement("textarea",{ref:o,defaultValue:(a!=null?a:"").replace(/\\n/g,`\r
`),id:"code-input",style:{display:"none"}}),R.default.createElement("div",{style:{position:"absolute",bottom:12,right:12}},R.default.createElement(W.Button,{key:"copy",sx:{textTransform:"capitalize",width:100},startIcon:p?R.default.createElement(_.IconCheck,{size:18,style:{color:"green"}}):R.default.createElement(_.IconCopy,{size:18}),color:"inherit",variant:"contained",onClick:d},p?"Copied":"Copy"))))):null};var _e=({resource:e,fields:t,isCustomPage:a,id:o})=>{var F;let u=O((F=e.label)!=null?F:e.name,"show"),i="record",p=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-mui"],["Typography","@pankod/refine-mui"],["Stack","@pankod/refine-mui"]],d=t.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)).filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){if(n.multiple){p.push(["useMany","@pankod/refine-core"]);let k=l(i,n.key);return n.accessor&&(k=`${l(i,n.key)}?.map((item: any) => ${l("item",void 0,n.accessor)})`),`
                const { data: ${N(n.key,"Data")}, isLoading: ${N(n.key,"IsLoading")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${k} || [],
                    queryOptions: {
                        enabled: !!${i},
                    },
                });
                `}return p.push(["useOne","@pankod/refine-core"]),`
                const { data: ${N(n.key,"Data")}, isLoading: ${N(n.key,"IsLoading")} } =
                useOne({
                    resource: "${n.resource.name}",
                    id: ${l(i,n.key,n.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${i},
                    },
                });
            `}}).filter(Boolean),$=n=>{if(n.relation&&n.resource){let k=N(n.key,"Data"),B=N(n.key,"IsLoading");return n.multiple?(p.push(["TagField","@pankod/refine-mui"]),x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                {${B} ? (
                    <>
                        Loading...
                    </>
                    ) : (
                    <>
                    ${(()=>{var r;if(n.relationInfer)if((r=n.relationInfer)!=null&&r.accessor){if(Array.isArray(n.relationInfer.accessor))return"Not Handled.";{let I=N(n.key),L=l(I,void 0,n.relationInfer.accessor);return`
                                        <Stack direction="row" spacing={1}>
                                            {${k}?.data?.map((${I}: any) => (
                                                <TagField key={${L}} value={${L}} />
                                            ))}
                                        </Stack>
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>

                {${B} ? (
                    <>Loading...</>
                ) : (
                    <>
                    ${(()=>{var r;return n.relationInfer?(r=n.relationInfer)!=null&&r.accessor?Array.isArray(n.relationInfer.accessor)?`{${l(`${k}?.data`,void 0,n.relationInfer.accessor,' + " " + ')}}`:`{${k}?.data?.${n.relationInfer.accessor}}`:`{${k}?.data}`:`{${k}?.data?.id}`})()}
                    </>
                )}
                `}},C=n=>{if(n.type==="text"){if(p.push(["TextFieldComponent as TextField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <TextField value={${l(i,n.key,n.accessor)}} />
            `}},v=n=>{if(n.type==="image"){if(n.multiple){let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${l(i,n.key,n.accessor," + ")}} />
                `}},h=n=>{if(n.type==="email"){if(p.push(["EmailField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <EmailField value={${l(i,n.key,n.accessor," + ")}} />
            `}},c=n=>{if(n.type==="url"){if(p.push(["UrlField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <UrlField value={${l(i,n.key,n.accessor," + ")}} />
            `}},S=n=>{if(n.type==="boolean"){if(p.push(["BooleanField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any, index: number) => (
                    <TagField value={${k}} key={index} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <BooleanField value={${l(i,n.key,n.accessor," && ")}} />
            `}},m=n=>{if(n.type==="date"){if(p.push(["DateField","@pankod/refine-mui"]),n.multiple){let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <DateField value={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <DateField value={${l(i,n.key,n.accessor," + ' ' + ")}} />
            `}},s=n=>{if(n.type==="richtext")return p.push(["MarkdownField","@pankod/refine-mui"]),x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <MarkdownField value={${l(i,n.key,n.accessor,' + " " + ')}} />
            `},A=n=>{if(n.type==="number"){if(p.push(["NumberField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let k=l("item",void 0,n.accessor);return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(i,n.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </Stack>
            `}return x`
                <Typography variant="body1" fontWeight="bold">
                    ${g(n.key)}
                </Typography>
                <NumberField value={${l(i,n.key,n.accessor,' + " " + ')} ?? ""} />
            `}},b=t.map(n=>{switch(n==null?void 0:n.type){case"text":return C(n);case"number":return A(n);case"richtext":return s(n);case"email":return h(n);case"image":return v(n);case"date":return m(n);case"boolean":return S(n);case"url":return c(n);case"relation":return $(n);default:return}});return H(p),x`
    ${G(p)}

    export const ${u} = () => {
        const { queryResult } = useShow(${a?`{ 
                    resource: "${e.name}", 
                    id: ${o}
                }`:""});
        const { data, isLoading } = queryResult;
    
        const ${i} = data?.data;
    
        ${d}

        return (
            <Show isLoading={isLoading}>
                <Stack gap={1}>
                    ${b.join("")}
                </Stack>
            </Show>
        );
    };
    `},fe=q({type:"show",additionalScope:[["@pankod/refine-mui","RefineMui",zr]],codeViewerComponent:Z,loadingComponent:K,errorComponent:U,renderer:_e});var qr=w(require("@pankod/refine-mui"));var Ge=({resource:e,fields:t,isCustomPage:a})=>{var B;let o=O((B=e.label)!=null?B:e.name,"list"),u="dataGridProps?.rows",i=[["React","react",!0],["useDataGrid","@pankod/refine-mui"],["DataGrid","@pankod/refine-mui"],["GridColumns","@pankod/refine-mui"],["EditButton","@pankod/refine-mui"],["ShowButton","@pankod/refine-mui"],["DeleteButton","@pankod/refine-mui"],["List","@pankod/refine-mui"]],p=t.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),f=p.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){i.push(["useMany","@pankod/refine-core"]);let I="";return r.multiple?I=`[].concat(...(${u}?.map((item: any) => ${l("item",r.key,r.accessor,!1)}) ?? []))`:I=`${u}?.map((item: any) => ${l("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${N(r.key,"Data")}, isLoading: ${N(r.key,"IsLoading")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${I},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),d=p==null?void 0:p.map(r=>{if(r&&r.resource)return`${N(r.key,"Data")}?.data`}).filter(Boolean),$=r=>{var I,L;if(r.relation&&r.resource){let P=`${N(r.key,"Data")}?.data`,T=N(r.key,"IsLoading");if(Array.isArray(r.accessor))return;let E=`${T} ? <>Loading...</> : `,qe=`field: "${r.key}"`,J=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",Q=`headerName: "${g(r.key)}"`,oe="";if(r.multiple){i.push(["TagField","@pankod/refine-mui"]);let ue="item";if(r!=null&&r.relationInfer){let Ie=`${P}?.find((resourceItems) => resourceItems.id === ${l("item",void 0,r.accessor)})`;ue=l(Ie,void 0,(I=r==null?void 0:r.relationInfer)==null?void 0:I.accessor)}oe=`
                renderCell: function render({ value }) {
                    return ${E} (
                        <>
                            {${l("value",void 0)}?.map((item: any, index: number) => (
                                <TagField key={index} value={${ue}} />
                            ))}
                        </>
                    )
                }
                `}else if(r!=null&&r.relationInfer){let ue=`${P}?.find((item) => item.id === value)`,Ie=l(ue,void 0,(L=r==null?void 0:r.relationInfer)==null?void 0:L.accessor);oe=`
                    renderCell: function render({ value }) {
                        return ${E} ${Ie};
                    }
                    `}else oe="";return`
                {
                    ${qe},
                    ${Q},${J}
                    minWidth: 300,${oe}
                }
            `}},C=r=>{if(r.type==="image"){let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
                renderCell: function render({ value }) {
                    return (
                        <img src={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} style={{ height: "50px", maxWidth: "100px" }} />
                    )
                }
            `;return r.multiple&&(T=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <img src={${l("item",void 0,r.accessor," + ")}} key={index} style={{ height: "50px", maxWidth: "100px" }} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},${P}
                    minWidth: 100,${T}
                }
            `}},v=r=>{if(r.type==="email"){i.push(["EmailField","@pankod/refine-mui"]);let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
            renderCell: function render({ value }) {
                return (
                    <EmailField value={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                )
            }
        `;return r.multiple&&(i.push(["TagField","@pankod/refine-mui"]),T=`
                renderCell: function render({ value }) {
                    return (
                        <>
                        {value?.map((item: any, index: number) => (
                            <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                        ))}
                        </>
                    )
                }
            `),`
            {
                ${I},
                ${L},${P}
                minWidth: 250,${T}
            }
        `}},h=r=>{if(r.type==="url"){i.push(["UrlField","@pankod/refine-mui"]);let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
                renderCell: function render({ value }) {
                    return (
                        <UrlField value={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    )
                }
            `;return r.multiple&&(i.push(["TagField","@pankod/refine-mui"]),T=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: any) => (
                                <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},${P}
                    minWidth: 250,${T}
                }
            `}},c=r=>{if(r!=null&&r.type){i.push(["Checkbox","@pankod/refine-mui"]);let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
                renderCell: function render({ value }) {
                    return (
                        <Checkbox checked={!!${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," && ")}} />
                    );
                }
            `;return r.multiple&&(T=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <Checkbox checked={!!${l("item",void 0,r.accessor," && ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},${P}
                    minWidth: 250,${T}
                }
            `}},S=r=>{if(r.type==="date"){i.push(["DateField","@pankod/refine-mui"]);let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
                renderCell: function render({ value }) {
                    return <DateField value={value} />;
                }
            `;return r.multiple&&(T=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <DateField value={${l("item",void 0,r.accessor,' + " " + ')}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},${P}
                    minWidth: 250,${T}
                }
            `}},m=r=>{if((r==null?void 0:r.type)==="richtext"){i.push(["MarkdownField","@pankod/refine-mui"]);let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T=`
                renderCell: function render({ value }) {
                    return <MarkdownField value={(value ?? "").slice(0, 80) + "..."} />;
                }
            `;return r.multiple&&(T=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <MarkdownField value={(${l("item",void 0,r.accessor,' + " " + ')}).slice(0, 80) + "..."} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${I},
                    ${L},${P}
                    minWidth: 250,${T}
                }
            `}},s=r=>{if(r&&(r.type==="text"||r.type==="number")){let I=`field: "${r.key}"`,L=`headerName: "${g(r.key)}"`,P=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",T="";if(r.multiple){i.push(["TagField","@pankod/refine-mui"]);let E=l("item",void 0,r.accessor,' + " " + ');T=`
                renderCell: function render({ row }) {
                    return (
                        <>
                            {(${l("row",r.key)})?.map((item: any) => (
                                <TagField value={${E}} key={${E}} />
                            ))}
                        </>
                    )
                }
                `}return!r.multiple&&Array.isArray(r.accessor)&&(T=`
                renderCell: function render({ row }) {
                    return (
                        <>{${l("row",r.key,r.accessor)}}</>
                    );
                }
                `),`
            {
                ${I},
                ${L},${P}${r.type==="number"?"type: 'number',":""}
                minWidth: ${X(r.key)?50:200},${T}
            }
            `}},{canEdit:A,canShow:b,canDelete:F}=e!=null?e:{};A&&i.push(["EditButton","@pankod/refine-mui"]),b&&i.push(["ShowButton","@pankod/refine-mui"]),F&&i.push(["DeleteButton","@pankod/refine-mui"]);let n=A||b||F?x`
            {
                field: "actions",
                headerName: "Actions",
                renderCell: function render({ row }) {
                    return (
                        <>
                            ${A?x`<EditButton hideText recordItemId={row.id} />`:""}
                            ${b?x`<ShowButton hideText recordItemId={row.id} />`:""}
                            ${F?x`<DeleteButton hideText recordItemId={row.id} />`:""}
                        </>
                    );
                },
                align: "center",
                headerAlign: "center",
                minWidth: 80,
            },
    `:"",k=t.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return s(r);case"richtext":return m(r);case"email":return v(r);case"image":return C(r);case"date":return S(r);case"boolean":return c(r);case"url":return h(r);case"relation":return $(r);default:return}});return H(i),x`
    ${G(i)}
    
    export const ${o} = () => {
        const { dataGridProps } = useDataGrid(
            ${a?`{ resource: "${e.name}" }`:""} 
        );
    
        ${f}

        const columns = React.useMemo<GridColumns<any>>(() => [
            ${[...k,n].filter(Boolean).join(`,\r
`)}
        ], [${d.join(",")}]);

        return (
            <List>
                <DataGrid {...dataGridProps} columns={columns} autoHeight />
            </List>
        );
    };
    `},ge=q({type:"list",additionalScope:[["@pankod/refine-mui","RefineMui",qr]],codeViewerComponent:Z,loadingComponent:K,errorComponent:U,renderer:Ge});var Ur=w(require("@pankod/refine-mui")),Kr=w(require("@pankod/refine-react-hook-form"));var He=({resource:e,fields:t,isCustomPage:a})=>{var h;let o=O((h=e.label)!=null?h:e.name,"create"),u=[["Create","@pankod/refine-mui"],["Box","@pankod/refine-mui"],["useForm","@pankod/refine-react-hook-form"]],p=t.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useAutocomplete","@pankod/refine-mui"]),`
                const { autocompleteProps: ${N(c.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${c.resource.name}",
                });
            `}).filter(Boolean),f=c=>{if(c.relation&&c.resource){u.push(["Autocomplete","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]);let S=N(c.key,"AutocompleteProps"),m=c.relationInfer&&c.relationInfer.accessor?typeof c.relationInfer.accessor=="string"?c.relationInfer.accessor:c.relationInfer.accessor[0]:"title",s=m.includes(".")||m.includes("[")||m.includes("]")||m.includes("-"),A=c.accessor?l("item",void 0,c.accessor,!1):"(item?.id ?? item)",b=c.accessor?l("value",void 0,c.accessor,!1):"(value?.id ?? value)",F=c.accessor?"value":c.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return x`
                <Controller
                    control={control}
                    name="${V(c.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${c.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"} 
                    render={({ field }) => (
                        <Autocomplete
                            {...${S}}
                            {...field}
                            ${c.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${F});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${S}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${A}?.toString(),
                                    )?.${s?`["${m}"]`:m} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option.id.toString() === ${b}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${g(c.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${l("(errors as any)",c.key,c.accessor,!1)}}
                                    helperText={${l("(errors as any)",c.key,c.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},d=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return X(c.key)||(u.push(["TextField","@pankod/refine-mui"]),c.multiple)?void 0:x`
                <TextField
                    {...register("${V(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                    error={!!${l("(errors as any)",c.key,c.accessor,!1)}}
                    helperText={${l("(errors as any)",c.key,c.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                    ${c.type==="richtext"?"multiline":""}
                    label="${g(c.key)}"
                    name="${V(c.key,void 0,c.accessor)}"
                />
            `},$=c=>{if(c.type==="boolean")return u.push(["Checkbox","@pankod/refine-mui"],["FormControlLabel","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]),c.multiple?void 0:x`
                <Controller
                    control={control}
                    name="${V(c.key,void 0,c.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${g(c.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `},C=c=>{if(c.type==="date"){let S=d(c);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.
                    
                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${S!=null?S:""}
                `}},v=t.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return d(c);case"date":return C(c);case"boolean":return $(c);case"relation":return f(c);default:return}});return H(u),x`
    ${G(u)}
    
    export const ${o} = () => {
        const {
            saveButtonProps,
            refineCore: { formLoading },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${a?`{ 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${p}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${v.join("")}
                </Box>
            </Create>
        );
    };
    `},he=q({type:"create",additionalScope:[["@pankod/refine-mui","RefineMui",Ur],["@pankod/refine-react-hook-form","RefineReactHookForm",Kr]],codeViewerComponent:Z,loadingComponent:K,errorComponent:U,renderer:He});var Zr=w(require("@pankod/refine-mui")),Xr=w(require("@pankod/refine-react-hook-form"));var ze=({resource:e,fields:t,isCustomPage:a,id:o})=>{var S,m;let u=O((S=e.label)!=null?S:e.name,"edit"),i=N((m=e.label)!=null?m:e.name,"Data"),p=[["Edit","@pankod/refine-mui"],["Box","@pankod/refine-mui"],["useForm","@pankod/refine-react-hook-form"]],d=t.filter(s=>(s==null?void 0:s.relation)&&!(s!=null&&s.fieldable)&&(s==null?void 0:s.resource)).filter(Boolean).map(s=>{if((s==null?void 0:s.relation)&&!s.fieldable&&s.resource){p.push(["useAutocomplete","@pankod/refine-mui"]);let A=l(i,s.key,s.accessor,!1);return s.multiple&&s.accessor&&(A=`${l(i,s.key)}?.map((item: any) => ${l("item",void 0,s.accessor)})`),`
                const { autocompleteProps: ${N(s.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${s.resource.name}",
                    defaultValue: ${A},
                });
            `}}).filter(Boolean),$=s=>{if(s.relation&&s.resource){p.push(["Autocomplete","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]);let A=N(s.key,"AutocompleteProps"),b=s.relationInfer&&s.relationInfer.accessor?typeof s.relationInfer.accessor=="string"?s.relationInfer.accessor:s.relationInfer.accessor[0]:"title",F=b.includes(".")||b.includes("[")||b.includes("]")||b.includes("-"),n=s.accessor?l("item",void 0,s.accessor,!1):"(item?.id ?? item)",k=s.accessor?l("value",void 0,s.accessor,!1):"(value?.id ?? value)",B=s.accessor?"value":s.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return x`
                <Controller
                    control={control}
                    name="${V(s.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${s.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"} 
                    render={({ field }) => (
                        <Autocomplete
                            {...${A}}
                            {...field}
                            ${s.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${B});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${A}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${n}?.toString(),
                                    )?.${F?`["${b}"]`:b} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option?.id?.toString() === ${k}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${g(s.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${l("(errors as any)",s.key,s.accessor,!1)}}
                                    helperText={${l("(errors as any)",s.key,s.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},C=s=>{if(s.type==="text"||s.type==="url"||s.type==="email"||s.type==="number"||s.type==="date"||s.type==="richtext"){if(p.push(["TextField","@pankod/refine-mui"]),s.multiple){p.push(["Box","@pankod/refine-mui"]);let A=V(s.key,"${index}",s.accessor),b=l("(errors as any)",s.key,void 0,!1)+"?.[index]";return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${l(i,s.key)}?.map((item: any, index: number) => (
                            <TextField
                                key={index}
                                {...register(\`${A}\`, {
                                    required: "This field is required",
                                })}
                                error={!!${b}}
                                helperText={${b}?.message as string}
                                margin="normal"
                                fullWidth
                                InputLabelProps={{ shrink: true }}
                                ${s.type!=="date"&&s.type!=="richtext"?`type="${s.type}"`:""}
                                ${s.type==="richtext"?"multiline":""}
                                label={\`${g(s.key)} \${index+1}\`}
                                name={\`${V(s.key,void 0,s.accessor)}.\${index}\`}
                            />
                        ))}
                    </Box>
                `}return x`
                <TextField
                    {...register("${V(s.key,void 0,s.accessor)}", {
                        required: "This field is required",
                    })}
                    error={!!${l("(errors as any)",s.key,s.accessor,!1)}}
                    helperText={${l("(errors as any)",s.key,s.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${s.type!=="date"&&s.type!=="richtext"?`type="${s.type}"`:""}
                    ${s.type==="richtext"?"multiline":""}
                    label="${g(s.key)}"
                    name="${V(s.key,void 0,s.accessor)}"
                    ${X(s.key)?"disabled":""}
                />
            `}},v=s=>{if(s.type==="boolean"){if(p.push(["Checkbox","@pankod/refine-mui"],["FormControlLabel","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]),s.multiple){p.push(["Box","@pankod/refine-mui"]);let A=V(s.key,"${index}",s.accessor);return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${l(i,s.key)}?.map((item: any, index: number) => (
                            <Controller
                                key={index}
                                control={control}
                                name={\`${A}\`}
                                // eslint-disable-next-line
                                defaultValue={null as any}
                                render={({ field }) => (
                                    <FormControlLabel label={\`${g(s.key)} \${index+1}\`} control={
                                        <Checkbox
                                            {...field}
                                            checked={field.value}
                                            onChange={(event) => {
                                                field.onChange(event.target.checked);
                                            }}
                                        />
                                    } />
                                )}
                            />
                        ))}
                    </Box>
                `}return x`
                <Controller
                    control={control}
                    name="${V(s.key,void 0,s.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${g(s.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `}},h=s=>{if(s.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.
                    
                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${C(s)}
                `},c=t.map(s=>{switch(s==null?void 0:s.type){case"text":case"number":case"email":case"url":case"richtext":return C(s);case"date":return h(s);case"boolean":return v(s);case"relation":return $(s);default:return}});return H(p),x`
    ${G(p)}
    
    export const ${u} = () => {
        const {
            saveButtonProps,
            refineCore: { queryResult },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${a?`{ 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${o},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${i} = queryResult?.data?.data;
    
        ${d}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${c.join("")}
                </Box>
            </Edit>
        );
    };
    `},ke=q({type:"edit",additionalScope:[["@pankod/refine-mui","RefineMui",Zr],["@pankod/refine-react-hook-form","RefineReactHookForm",Xr]],codeViewerComponent:Z,loadingComponent:K,errorComponent:U,renderer:ze});var Yr=({action:e,id:t,...a})=>{let{useParams:o}=(0,Cr.useRouterContext)(),{action:u,id:i}=o();switch(e!=null?e:u){case"show":return ce.default.createElement(fe,{...a,id:t!=null?t:i});case"create":return ce.default.createElement(he,{...a,id:t!=null?t:i});case"edit":return ce.default.createElement(ke,{...a,id:t!=null?t:i});default:return ce.default.createElement(ge,{...a,id:t!=null?t:i})}};
//# sourceMappingURL=mui.js.map