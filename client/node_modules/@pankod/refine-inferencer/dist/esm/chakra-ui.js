import ae from"react";import{useRouterContext as cn}from"@pankod/refine-core";import*as Xr from"@pankod/refine-chakra-ui";import P from"react";import{useResource as rr}from"@pankod/refine-core";var ir=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,se=(e,n)=>{let s=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];ir.test(e)&&s.unshift("url");let o=s.find(u=>u in n&&!!n[u]);if(o)return o==="firstName"&&"lastName"in n?["firstName","lastName"]:o};function ie(e,n,s){var u;if(n)return n;let o=s==null?void 0:s.find(a=>a.name===e);return(u=o==null?void 0:o.options)!=null&&u.dataProviderName?o.options.dataProviderName:"default"}var X=e=>{var n;return(n=e==null?void 0:e.options)==null?void 0:n.dataProviderName};var ce=e=>{let n=[...e].filter(Boolean).sort((s,o)=>(o.priority||0)-(s.priority||0))[0];return n||null};import cr from"prettier/standalone";import ur from"prettier/parser-typescript";var ue=e=>{try{return cr.format(e,{parser:"typescript",plugins:[ur],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(n){return console.warn("Formatting error in inferencer",n),e}};var pe=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var me=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Se=(e,n)=>{let s=me.test(e),o=typeof n=="string"||typeof n=="number",u=Array.isArray(n)&&n.every(a=>typeof a=="string"||typeof a=="number");return s&&o||s&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var N=e=>e.replace(me,"");var g=e=>N(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(p=>p.charAt(0).toUpperCase()+p.slice(1)).join(" ");var le=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Te=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,pr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,mr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,de=(e,n={})=>{let s=e.matchAll(Te),o=new Set;for(let u of s){let[,a,p,y,l]=u;if(l in n){let F=n[l];if(l==="react")continue;a&&o.add(`const { default: ${a} } = ${F};`),p&&o.add(`const${p.replace(mr,"$1: $3$4")} = ${F};`),y&&o.add(`const ${y} = ${F};`)}}return pe(`
    ${Array.from(o).join(`
`)}
    ${e.replace(Te,"").replace(pr,"")}
    `)};import oe from"pluralize";var fe=(e,n)=>e?n.find(o=>{let u=N(e.key);return o.name===u||o.name===(oe.isPlural(u)?u:oe.plural(u))||o.name===(oe.isSingular(u)?u:oe.singular(u))}):void 0;import lr from"pluralize";var B=(e,n,s="Inferred")=>{let o=e.replace(/[^a-zA-Z0-9]/g," "),u=lr.singular(o),p=g(u).replace(/ /g,"")||s,y=n.charAt(0).toUpperCase()+n.slice(1);return/^[a-zA-Z]/.test(p)?`${p}${y}`:`${y}${p}`};var dr=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",f=(e,...n)=>e.reduce((o,u,a)=>`${o}${u}${dr(n[a])}`,"").trim();var ge=(e,n)=>`
    ${e!=null?e:""}
    
    render(typeof ${n} !== "undefined" ? <${n} /> : <></>);
    `;var ye=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var fr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,ke=e=>fr.test(e);function he(e,n,s){let o=`${e}`;return n&&(o+="?.",ke(n)?o+=n:o+=`['${n}']`),s&&(o+="?.",ke(s)?o+=s:o+=`['${s}']`),o}function gr(e,n,s){return(s!=null?s:[]).map(u=>he(e,n,u))}var m=(e,n,s,o=' + " " + ')=>Array.isArray(s)?o?gr(e,n,s).join(o):he(e,n,s[0]):he(e,n,s),E=(e,n,s)=>{let o=e;return n&&(o+=`.${n}`),s&&(Array.isArray(s)?o+=`.${s[0]}`:o+=`.${s}`),o};var O=e=>{let n=e.reduce((o,[u,a,p])=>(o[a]||(o[a]=[]),o[a].includes(u)||(p?o[a].push([u,!0]):o[a].push(u)),o),{});return Object.entries(n).map(([o,u])=>{let a=u.find(F=>Array.isArray(F)&&F[1]),p=u.filter(F=>typeof F=="string"),y=a?`${a[0]}`:"",l=p.length?`{ ${p.join(", ")} }`:"";return`import ${y}${y&&l?", ":""}${l} from "${o}";`})};import Re from"pluralize";var D=(e="")=>Re.isSingular(e)?e:Re.singular(e);import we from"pluralize";var G=(e="")=>we.isPlural(e)?e:we.plural(e);var yr=/^id$/i,Y=e=>yr.test(e);var J=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var z=e=>{};var C=(e,n="")=>{if(Number.isInteger(Number(e)))return n.charAt(0).toLowerCase()+n.slice(1)+e;let o=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=g(o).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${n.charAt(0).toUpperCase()+n.slice(1)}`};var He=e=>{let n=(s,o,u,a=n)=>{let p=e.map(l=>l(s,o,u,a));return ce(p)};return n};var Le=e=>(s,o,u,a,p)=>e.reduce((y,l)=>l(y,o,u,a,p),s);var Ee=(e,n,s,o)=>{let u=Array.isArray(n),a=Array.isArray(n)&&n.every(p=>typeof p=="string"||typeof p=="number");if(u){if(!a){let y=o(e,n[0],s,o);return y?{...y,key:e,multiple:!0,priority:1}:!1}let p=o(e,n[0],s,o)||{type:"string"};return{key:e,multiple:!0,priority:1,type:p==null?void 0:p.type}}return!1};var Ne=(e,n)=>typeof n=="boolean"?{key:e,type:"boolean"}:!1;import Ve from"dayjs";var kr=/(_at|_on|At|On|AT|ON)(\[\])?$/,Be=(e,n)=>{let s=kr.test(e)&&Ve(n).isValid(),o=typeof n=="string"&&Ve(n).isValid(),u=typeof n=="string"&&n.length>4;return s||o&&u?{key:e,type:"date",priority:1}:!1};var hr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,Me=(e,n)=>typeof n=="string"&&hr.test(n)?{key:e,type:"email",priority:1}:!1;var Ir=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,De=(e,n)=>typeof n=="string"&&Ir.test(n)?{key:e,type:"image",priority:2}:!1;var Pe=(e,n)=>typeof n>"u"||n===null?null:!1;var Oe=(e,n)=>typeof n=="number"?{key:e,type:"number"}:!1;var $r=/id$/i,ze=(e,n,s,o)=>{let u=n!==null,a=!Array.isArray(n);if(u&&a&&typeof n=="object"){if(Object.keys(n).length===1&&$r.test(Object.keys(n)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let l=se(e,n);if((l?l.length>0:!1)&&l){let x=l&&Array.isArray(l)?l[0]:l,b=o(x,n[x],n,o);if(b){let I=Array.isArray(l)?l.map(c=>b.accessor?`${c}.${Array.isArray(b.accessor)?b.accessor[0]:b.accessor}`:c):b.accessor?Array.isArray(b.accessor)?`${l}.${b.accessor[0]}`:`${l}.${b.accessor}`:l;return{...b,fieldable:!0,key:e,accessor:I,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var Ue=(e,n)=>typeof n=="string"&&n.length>100?{key:e,type:"richtext",priority:1}:!1;var je=(e,n)=>typeof n=="string"?{key:e,type:"text"}:!1;var Fr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,Ke=(e,n)=>typeof n=="string"&&Fr.test(n)?{key:e,type:"url",priority:1}:!1;var _e=[Ee,Ne,Be,Me,De,Pe,Oe,ze,Se,Ue,je,Ke];var qe=(e,n,s,o)=>e.map(a=>{if(!a.relation&&(a.type==="text"||a.type==="richtext"||a.type==="number")&&!a.canRelation){let p=/^[a-z0-9-]+$/,y=I=>p.test(`${I}`),l=a.key.toLowerCase()!=="id";return!(!a.accessor||typeof a.accessor=="string")||!l?a:(a.multiple?o[a.key]:[o[a.key]]).every(I=>y(a.accessor?I[a.accessor]:I))?{...a,canRelation:!0}:a}return a});var xr=/(image|photo|avatar|cover|thumbnail|icon)/i,We=e=>e.map(s=>s.type==="url"&&xr.test(s.key)?{...s,type:"image"}:s);var Ge=(e,n)=>e.map(o=>{let u=fe(o,n);return u?{...o,relation:!0,type:"relation",resource:u}:o});var Ze=(e,n,s,o,u)=>e.map(p=>{if(p.relation&&p.type==="relation"&&!p.resource){let y=p.accessor?o[p.key][p.accessor]:o[p.key],l=u(p.key,y,o,u);if(l&&l.type!=="relation")return{...p,fieldable:!0,relation:!1,type:l.type,canRelation:!0}}return p});var Qe=[We,Ge,Ze,qe];import ee,{useEffect as br}from"react";import Cr,{defaultProps as vr}from"prism-react-renderer";import Ar from"prism-react-renderer/themes/vsDark";var Ie=({code:e,wrapperProps:n})=>(br(()=>{var o;let s=document.createElement("style");s.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(o=document.getElementById("code-highlight"))==null||o.appendChild(s)},[]),ee.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...n!=null?n:{}},ee.createElement(Cr,{...vr,theme:Ar,code:e,language:"tsx"},({className:s,style:o,tokens:u,getLineProps:a,getTokenProps:p})=>ee.createElement("pre",{className:s,style:{...o,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((y,l)=>ee.createElement("div",{key:l,...a({line:y,key:l})},y.map((F,x)=>ee.createElement("span",{key:x,...p({token:F,key:x})}))))))));import M from"react";import*as Sr from"@pankod/refine-core";import{LivePreview as Tr,LiveProvider as Rr}from"@aliemir/react-live";var Xe=[["react","React",M],["@pankod/refine-core","RefineCore",Sr]],$e=M.createContext({}),Fe=({fetchError:e,code:n,additionalScope:s,errorComponent:o})=>{var y;let u=(y=n&&le(de(n,[...Xe,...s!=null?s:[]].reduce((l,[F,x,b,I])=>I?l:{...l,[F]:x},{}))))!=null?y:"",a=M.useMemo(()=>({React:M,...M,...[...Xe,...s!=null?s:[]].reduce((l,[F,x,b])=>({...l,[x]:b}),{})}),[s]),p=M.useMemo(()=>()=>{let{error:F}=M.useContext($e);return o?M.createElement(o,{error:F?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${F}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[o,e]);return M.createElement(Rr,{Context:$e,code:u,scope:a,noInline:!0},!e&&M.createElement(Tr,{Context:$e}),M.createElement(p,null))};import Z from"react";import{useDataProvider as wr,useResource as Hr}from"@pankod/refine-core";var Ye=(e,n,s)=>{let{resource:o,resourceName:u,id:a,resources:p}=Hr({resourceNameOrRouteName:n}),y=s!=null?s:a,l=wr(),[F,x]=Z.useState(void 0),[b,I]=Z.useState(void 0),[c,R]=Z.useState(!0),[d,i]=Z.useState(!1),S=Z.useCallback(async $=>{var t,k;let v=(t=X(o))!=null?t:ie(u,void 0,p),L=l(v);i(!0),x(void 0);try{if(e==="list"||e==="create"){let h=(k=(await L.getList({resource:u})).data)==null?void 0:k[0];h||x(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),I(h),setTimeout(()=>{i(!1)},500)}if((e==="edit"||e==="show")&&$){let h=(await L.getOne({resource:u,id:$})).data;h||x(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),I(h),setTimeout(()=>{i(!1)},500)}}catch(r){console.warn("An error occured while fetching the resource data. Please check the error message below:",r),x(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${u}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{i(!1)},500)}},[e,l,o,u,p]);return Z.useEffect(()=>{R(!1),!d&&!b&&S(y)},[S,y]),{data:b,loading:d,initial:c,error:F}};import re from"react";import{useDataProvider as Lr}from"@pankod/refine-core";import{get as Je}from"lodash";var er=({record:e,fields:n,infer:s})=>{let o=Lr(),[u,a]=re.useState([]),[p,y]=re.useState(!0),[l,F]=re.useState(!1),x=re.useCallback(async b=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let I=[];F(!0);try{let c=b.map(async d=>{if(d&&(d.relation||d.canRelation)&&e){let i=X(d.resource),S=o(i),$=Array.isArray(d.accessor)?void 0:d.multiple?e[d.key].map(v=>d.accessor?Je(v,d.accessor):v)[0]:d.accessor?Je(e[d.key],d.accessor):e[d.key];if($&&d.resource)try{let{data:v}=await S.getOne({resource:d.resource.name,id:$});I.push({status:"success",resource:d.resource.name,field:d.key});let L=s("__",v,{},s);return{...d,relationInfer:L}}catch{return I.push({status:"error",resource:d.resource.name,field:d.key}),{...d,relationInfer:null}}if($){let v,L;try{let{data:r}=await S.getOne({resource:G(N(d.key)),id:$});I.push({status:"success",resource:G(N(d.key)),field:d.key}),v=r,L=!0}catch{I.push({status:"error",resource:G(N(d.key)),field:d.key});try{let{data:h}=await S.getOne({resource:D(N(d.key)),id:$});I.push({status:"success",resource:D(N(d.key)),field:d.key}),v=h,L=!1}catch{return I.push({status:"error",resource:D(N(d.key)),field:d.key}),{...d,relationInfer:null}}}let t=s("__",v,{},s),k=N(d.key);return{...d,relation:!0,type:"relation",resource:{name:L?G(k):D(k)},fieldable:!1,canRelation:void 0,relationInfer:t}}return{...d,relationInfer:null}}return d}),R=await Promise.all(c);a(R.filter(d=>d)),setTimeout(()=>{F(!1)},500)}catch{setTimeout(()=>{F(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${I.length} attempts and succeeded with ${I.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[o,e]);return re.useEffect(()=>{y(!1),!l&&n&&n.length>0&&u.length===0&&x(n)},[x,l,n,x]),{fields:u,loading:l,initial:p}};var U=({type:e,additionalScope:n=[],customElements:s=[],fieldTransformers:o=[],renderer:u,loadingComponent:a,errorComponent:p,codeViewerComponent:y})=>{let l=He([..._e,...s]),F=Le([...Qe,...o]),x=({resourceName:I,fieldTransformer:c,id:R})=>{var H;let{resource:d,resources:i}=rr({resourceNameOrRouteName:I}),{resource:S}=rr(),{data:$,loading:v,initial:L,error:t}=Ye(e,I!=null?I:d==null?void 0:d.name,R),k=P.useMemo(()=>{if($){let A=Object.keys($).map(W=>{let te=$[W];return l(W,te,$,l)}).filter(Boolean),V=F(A,i,d,$,l);return c?V.flatMap(W=>{let te=c(W);return te?[te]:[]}):V}return[]},[$,i,d,c]),{fields:r,loading:h}=er({record:$,fields:k,infer:l}),w=P.useMemo(()=>!v&&!h&&!L?u({resource:d,resources:i,fields:r,infer:l,isCustomPage:d.name!==S.name,id:R}):"",[d,i,r,v,h]);return P.createElement(P.Fragment,null,a&&(v||h)&&P.createElement(a,null),!v&&!h&&P.createElement(P.Fragment,null,P.createElement(Fe,{fetchError:!v&&t?t:!v&&!L&&!$,code:ge(w,B((H=d.label)!=null?H:d.name,e)),errorComponent:p,additionalScope:n}),y&&P.createElement(y,{code:ye(w),loading:v||h})))};return({name:I,resource:c,fieldTransformer:R,id:d})=>P.createElement(x,{fieldTransformer:R,resourceName:c!=null?c:I,key:c!=null?c:I,id:d})};import ne from"react";import{Center as Er,Alert as Nr,AlertIcon as Vr,AlertDescription as Br}from"@pankod/refine-chakra-ui";var j=({error:e})=>e?ne.createElement(Er,{style:{minHeight:300}},ne.createElement(Nr,{status:"error",variant:"subtle",flexDirection:"column",alignItems:"center",justifyContent:"center",textAlign:"center",height:"200px",maxWidth:"700px"},ne.createElement(Vr,{boxSize:"40px",mr:0}),ne.createElement(Br,{mt:4,maxWidth:"sm"},ne.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}})))):null;import nr from"react";import{Box as Mr,Spinner as Dr}from"@pankod/refine-chakra-ui";var K=()=>nr.createElement(Mr,{position:"relative",bg:"chakra-body-bg",minH:120},nr.createElement(Dr,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}));import T from"react";import{Box as Pr,Button as xe,Modal as Or,HStack as zr,useDisclosure as Ur,ModalBody as jr,ModalCloseButton as Kr,ModalContent as _r,ModalOverlay as qr}from"@pankod/refine-chakra-ui";import{IconCode as Wr,IconMessageCircle as Gr,IconCopy as Zr,IconCheck as Qr}from"@tabler/icons";var _=({code:e,loading:n})=>{let s=T.useMemo(()=>ue(e!=null?e:""),[e]),o=T.useRef(null),[u,a]=T.useState(!1),{isOpen:p,onOpen:y,onClose:l}=Ur();if(n)return null;let F=()=>{var x,b,I,c;(x=o==null?void 0:o.current)==null||x.select(),(b=o==null?void 0:o.current)==null||b.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((c=(I=o==null?void 0:o.current)==null?void 0:I.value)!=null?c:""),a(!0),setTimeout(()=>{a(!1)},1e3))};return s?T.createElement(T.Fragment,null,T.createElement(Pr,{position:"fixed",bottom:"12px",right:"60px"},T.createElement(zr,{spacing:4},T.createElement(xe,{variant:"solid",colorScheme:"green",leftIcon:T.createElement(Wr,{size:18}),onClick:y},"Show Code"),T.createElement(xe,{colorScheme:"gray",variant:"solid",leftIcon:T.createElement(Gr,{size:18}),as:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),T.createElement("div",{style:{height:"50px"}}),T.createElement(Or,{size:"4xl",isOpen:p,onClose:l},T.createElement(qr,null),T.createElement(_r,null,T.createElement(Kr,{sx:{position:"absolute",right:0,top:0,height:"56px",width:"56px",color:"#666b7a"}}),T.createElement(jr,{sx:{padding:0}},T.createElement(Ie,{code:s}),T.createElement("textarea",{ref:o,defaultValue:(s!=null?s:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),T.createElement(xe,{sx:{position:"absolute",bottom:"12px",right:"12px",width:100},key:"copy",leftIcon:u?T.createElement(Qr,{size:18,style:{color:"green"}}):T.createElement(Zr,{size:18}),onClick:F},u?"Copied":"Copy")))):null};var tr=({resource:e,fields:n,isCustomPage:s,id:o})=>{var L;let u=B((L=e.label)!=null?L:e.name,"show"),a="record",p=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-chakra-ui"],["Heading","@pankod/refine-chakra-ui"]],l=n.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)).filter(Boolean).map(t=>{if((t==null?void 0:t.relation)&&!t.fieldable&&t.resource){if(t.multiple){p.push(["useMany","@pankod/refine-core"]);let k=m(a,t.key);return t.accessor&&(k=`${m(a,t.key)}?.map((item: any) => ${m("item",void 0,t.accessor)})`),`
                const { data: ${C(t.key,"Data")}, isLoading: ${C(t.key,"IsLoading")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${k} || [],
                    queryOptions: {
                        enabled: !!${a},
                    },
                });
                `}return p.push(["useOne","@pankod/refine-core"]),`
                const { data: ${C(t.key,"Data")}, isLoading: ${C(t.key,"IsLoading")} } =
                useOne({
                    resource: "${t.resource.name}",
                    id: ${m(a,t.key,t.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${a},
                    },
                });
            `}}).filter(Boolean),F=t=>{if(t.relation&&t.resource){let k=C(t.key,"Data"),r=C(t.key,"IsLoading");return t.multiple?(p.push(["TagField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                {${r} ? <>Loading...</> : (
                    <>
                    ${(()=>{var h;if(t.relationInfer)if((h=t.relationInfer)!=null&&h.accessor){if(Array.isArray(t.relationInfer.accessor))return"Not Handled.";{let w=C(t.key),H=m(w,void 0,t.relationInfer.accessor);return`<HStack spacing="12px">{${k}?.data?.map((${w}: any) => <TagField key={${H}} value={${H}} />)}</HStack>`}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                {${r} ? <>Loading...</> : (
                    <>
                    ${(()=>{var h;return t.relationInfer?(h=t.relationInfer)!=null&&h.accessor?Array.isArray(t.relationInfer.accessor)?`{${m(`${k}?.data`,void 0,t.relationInfer.accessor,' + " " + ')}}`:`{${k}?.data?.${t.relationInfer.accessor}}`:`{${k}?.data}`:`{${k}?.data?.id}`})()}
                    </>
                )}
                
                `}},x=t=>{if(t.type==="text"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["TextField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(a,t.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </HStack>
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <TextField value={${m(a,t.key,t.accessor)}} />
            `}},b=t=>{if(t.type==="image"){if(p.push(["Image","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                {${m(a,t.key)}?.map((item: any) => (
                    <Image sx={{ maxWidth: 200 }} src={${k}} key={${k}} />
                ))}
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <Image sx={{ maxWidth: 200 }} src={${m(a,t.key,t.accessor," + ")}} />
                `}},I=t=>{if(t.type==="email"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["EmailField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(a,t.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </HStack>
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <EmailField value={${m(a,t.key,t.accessor," + ")}} />
            `}},c=t=>{if(t.type==="url"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["UrlField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(a,t.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </HStack>
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <UrlField value={${m(a,t.key,t.accessor," + ")}} />
            `}},R=t=>{if(t.type==="boolean"){if(p.push(["TagField","@pankod/refine-chakra-ui"],["BooleanField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(a,t.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </HStack>
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <BooleanField value={${m(a,t.key,t.accessor," && ")}} />
            `}},d=t=>{if(t.type==="date"){if(p.push(["DateField","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                {${m(a,t.key)}?.map((item: any) => (
                    <DateField value={${k}} key={${k}} />
                ))}
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <DateField value={${m(a,t.key,t.accessor," + ' ' + ")}} />
            `}},i=t=>{if(t.type==="richtext")return p.push(["MarkdownField","@pankod/refine-chakra-ui"]),f`
                <Heading as="h5" size="sm" mt={4}>${g(t.key)}</Heading>
                <MarkdownField value={${m(a,t.key,t.accessor,' + " " + ')}} />
            `},S=t=>{if(t.type==="number"){if(p.push(["NumberField","@pankod/refine-chakra-ui"],["TagField","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"]),t.multiple){let k=m("item",void 0,t.accessor);return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <HStack spacing="12px">
                {${m(a,t.key)}?.map((item: any) => (
                    <TagField value={${k}} key={${k}} />
                ))}
                </HStack>
            `}return f`
                <Heading as="h5" size="sm" mt={4} >${g(t.key)}</Heading>
                <NumberField value={${m(a,t.key,t.accessor,' + " " + ')} ?? ""} />
            `}},$=t=>{if(t)return f`
                ${t}
            `},v=n.map(t=>{switch(t==null?void 0:t.type){case"text":return $(x(t));case"number":return $(S(t));case"richtext":return $(i(t));case"email":return $(I(t));case"image":return $(b(t));case"date":return $(d(t));case"boolean":return $(R(t));case"url":return $(c(t));case"relation":return $(F(t));default:return}});return z(p),f`
    ${O(p)}
    
    export const ${u} = () => {
        const { queryResult } = useShow(${s?`{ 
                    resource: "${e.name}", 
                    id: ${o}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${a} = data?.data;
    
        ${l}

        return (
            <Show isLoading={isLoading}>
                ${v.join("")}
            </Show>
        );
    };
    `},be=U({type:"show",additionalScope:[["@pankod/refine-chakra-ui","RefineChakraUI",Xr]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:tr});import*as Yr from"@pankod/refine-chakra-ui";import*as Jr from"@pankod/refine-react-table";import*as en from"@tabler/icons";var q=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${E(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,or=({resource:e,fields:n,isCustomPage:s})=>{var k;let o=B((k=e.label)!=null?k:e.name,"list"),u="tableData?.data",a=[["IResourceComponentsProps","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"],["List","@pankod/refine-chakra-ui"],["TableContainer","@pankod/refine-chakra-ui"],["Table","@pankod/refine-chakra-ui"],["Thead","@pankod/refine-chakra-ui"],["Tr","@pankod/refine-chakra-ui"],["Th","@pankod/refine-chakra-ui"],["Tbody","@pankod/refine-chakra-ui"],["Tr","@pankod/refine-chakra-ui"],["Td","@pankod/refine-chakra-ui"],["HStack","@pankod/refine-chakra-ui"],["Button","@pankod/refine-chakra-ui"],["IconButton","@pankod/refine-chakra-ui"],["usePagination","@pankod/refine-chakra-ui"],["Box","@pankod/refine-chakra-ui"],["IconChevronRight","@tabler/icons"],["IconChevronLeft","@tabler/icons"]],p=n.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),y=p.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){a.push(["GetManyResponse","@pankod/refine-core"]),a.push(["useMany","@pankod/refine-core"]);let h="";return r.multiple?h=`[].concat(...(${u}?.map((item) => ${m("item",r.key,r.accessor,!1)}) ?? []))`:h=`${u}?.map((item) => ${m("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${C(r.key,"Data")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${h},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),l=p==null?void 0:p.map(r=>{if(r&&r.resource)return C(r.key,"Data")}).filter(Boolean),F=r=>{var h;if(r.relation&&r.resource){let w=`${C(r.key,"Data")}?.data`;if(Array.isArray(r.accessor))return;let H=`id: "${r.key}"`,A=`header: "${g(r.key)}"`,V=q(r),Q="";if(r.multiple){a.push(["TagField","@pankod/refine-chakra-ui"]);let W="item";r!=null&&r.relationInfer&&(W=m("item",void 0,r.relationInfer.accessor)),Q=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${C(r.key,"Data")}: GetManyResponse;
                    };

                    const ${C(r.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${C(r.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${m("item",void 0,r.accessor)}
                        );
                    })


                    return (
                        <HStack>
                            {${C(r.key,"")}?.map((item, index) => (
                                <TagField key={index} value={${W}} />
                            ))}
                        </HStack>
                    )
                }
            `}else r!=null&&r.relationInfer?Q=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${C(r.key,"Data")}: GetManyResponse;
                        };

                        const ${C(r.key,"")} = meta.${w}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${m(C(r.key),void 0,(h=r==null?void 0:r.relationInfer)==null?void 0:h.accessor)} ?? "Loading...";
                    },`:Q="";return`
                {
                    ${H},
                    ${A},
                    ${V},
                    ${Q}
                }
            `}},x=r=>{if(r.type==="image"){a.push(["Image","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    ${r!=null&&r.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${m("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                }
            `;if(r.multiple){let V=m("item",void 0,r.accessor," + ");A=`
                    cell: function render({ getValue }) {
                        ${r!=null&&r.accessor?"try {":""}
                            return (
                                <HStack>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${V}} key={index} sx={{ height: "50px", maxWidth: "100px" }} />
                                    ))}
                                </HStack>
                            )
                        ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},b=r=>{if(r.type==="email"){a.push(["EmailField","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    return <EmailField value={${m("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(a.push(["TagField","@pankod/refine-chakra-ui"]),A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},I=r=>{if(r.type==="url"){a.push(["UrlField","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    return <UrlField value={${m("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(a.push(["TagField","@pankod/refine-chakra-ui"]),A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},c=r=>{if((r==null?void 0:r.type)==="boolean"){a.push(["BooleanField","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    return <BooleanField value={${m("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},R=r=>{if(r.type==="date"){a.push(["DateField","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    return <DateField value={${m("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},d=r=>{if((r==null?void 0:r.type)==="richtext"){a.push(["MarkdownField","@pankod/refine-chakra-ui"]);let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A=f`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${m("getValue<string>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return r.multiple&&(A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},i=r=>{if(r&&(r.type==="text"||r.type==="number")){let h=`id: "${r.key}"`,w=q(r),H=`header: "${g(r.key)}"`,A="";return r.multiple&&(a.push(["TagField","@pankod/refine-chakra-ui"]),A=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${m("item",void 0,r.accessor,' + " " + ')}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),!r.multiple&&Array.isArray(r.accessor)&&(A=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${m("getValue<any>()",r.key,r.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${h},
                    ${w},
                    ${H},
                    ${A}
                }
            `}},{canEdit:S,canShow:$,canDelete:v}=e!=null?e:{};S&&a.push(["EditButton","@pankod/refine-chakra-ui"]),$&&a.push(["ShowButton","@pankod/refine-chakra-ui"]),v&&a.push(["DeleteButton","@pankod/refine-chakra-ui"]);let L=S||$||v?f`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <HStack>
                ${$?f`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${S?f`
                    <EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${v?f`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </HStack>
            );
        },
    },
        `:"",t=n.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return i(r);case"richtext":return d(r);case"email":return b(r);case"image":return x(r);case"date":return R(r);case"boolean":return c(r);case"url":return I(r);case"relation":return F(r);default:return}});return z(a),f`
    import React from "react";
    ${O(a)}
    
    export const ${o}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...t,L].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${s?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${y}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${l.join(", ")}
            },
        }));

        return (
            <List>
                <TableContainer whiteSpace="pre-line">
                    <Table variant="simple">
                        <Thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <Tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <Th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody>
                            {getRowModel().rows.map((row) => (
                                <Tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <Td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </Td>
                                    ))}
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </TableContainer>
                <Pagination
                    current={current}
                    pageCount={pageCount}
                    setCurrent={setCurrent}
                />
            </List>   
        );
    };

    type PaginationProps = {
        current: number;
        pageCount: number;
        setCurrent: (page: number) => void;
    };

    const Pagination: React.FC<PaginationProps> = ({
        current,
        pageCount,
        setCurrent,
    }) => {
        const pagination = usePagination({
            current,
            pageCount,
        });
    
        return (
            <Box display="flex" justifyContent="flex-end">
                <HStack my="3" spacing="1">
                    {pagination?.prev && (
                        <IconButton
                            aria-label="previous page"
                            onClick={() => setCurrent(current - 1)}
                            disabled={!pagination?.prev}
                            variant="outline"
                        >
                            <IconChevronLeft size="18" />
                        </IconButton>
                    )}
    
                    {pagination?.items.map((page) => {
                        if (typeof page === "string")
                            return <span key={page}>...</span>;
    
                        return (
                            <Button
                                key={page}
                                onClick={() => setCurrent(page)}
                                variant={page === current ? "solid" : "outline"}
                            >
                                {page}
                            </Button>
                        );
                    })}
                    {pagination?.next && (
                        <IconButton
                            aria-label="next page"
                            onClick={() => setCurrent(current + 1)}
                            variant="outline"
                        >
                            <IconChevronRight size="18" />
                        </IconButton>
                    )}
                </HStack>
            </Box>
        );
    };
    `},Ce=U({type:"list",additionalScope:[["@pankod/refine-chakra-ui","RefineChakraUI",Yr],["@pankod/refine-react-table","RefineReactTable",Jr],["@tabler/icons","TablerIcons",en]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:or});import*as rn from"@pankod/refine-core";import*as nn from"@pankod/refine-chakra-ui";import*as tn from"@pankod/refine-react-hook-form";var ar=({resource:e,fields:n,isCustomPage:s})=>{var I;let o=B((I=e.label)!=null?I:e.name,"create"),u=[["Create","@pankod/refine-chakra-ui"],["FormControl","@pankod/refine-chakra-ui"],["FormLabel","@pankod/refine-chakra-ui"],["FormErrorMessage","@pankod/refine-chakra-ui"],["useForm","@pankod/refine-react-hook-form"]],p=n.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useSelect","@pankod/refine-core"]),`
                const { options: ${C(c.key,"Options")} } =
                useSelect({
                    resource: "${c.resource.name}",
                    ${J(c)}
                });
            `}).filter(Boolean),y=c=>{if(c.relation&&c.resource){u.push(["useSelect","@pankod/refine-core"]),u.push(["Select","@pankod/refine-chakra-ui"]);let R=C(c.key,"Options");return f`
            <FormControl mb="3" isInvalid={!!errors?.${E(c.key,void 0)}}>
                <FormLabel>${g(c.key)}</FormLabel>
                <Select
                    placeholder="Select ${D(c.resource.name)}"
                    {...register("${E(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${R}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${m("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},l=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return Y(c.key)||(u.push(["Input","@pankod/refine-chakra-ui"]),c.multiple)?void 0:f`
                <FormControl mb="3" isInvalid={!!${m("(errors as any)",c.key,c.accessor,!1)}}>
                    <FormLabel>${g(c.key)}</FormLabel>
                    <Input
                        ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                        {...register("${E(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `},F=c=>{if(c.type==="boolean")return u.push(["Checkbox","@pankod/refine-chakra-ui"]),c.multiple?void 0:f`
                <FormControl mb="3" isInvalid={!!${m("errors",c.key,c.accessor,!1)}}>
                    <FormLabel>${g(c.key)}</FormLabel>
                    <Checkbox
                        {...register("${E(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("errors",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `},x=c=>{if(c.type==="date"){let R=l(c);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${R!=null?R:""}
                `}},b=n.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return l(c);case"date":return x(c);case"boolean":return F(c);case"relation":return y(c);default:return}});return z(u),f`
    ${O(u)}
    
    export const ${o} = () => {
        const {
            refineCore: { formLoading },
            saveButtonProps,
            register,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${p}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${b.join("")}
            </Create>
        );
    };
    `},ve=U({type:"create",additionalScope:[["@pankod/refine-core","RefineCore",rn],["@pankod/refine-chakra-ui","RefineChakraUI",nn],["@pankod/refine-react-hook-form","RefineReactHookForm",tn]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:ar});import*as on from"@pankod/refine-core";import*as an from"@pankod/refine-chakra-ui";import*as sn from"@pankod/refine-react-hook-form";var sr=({resource:e,fields:n,isCustomPage:s,id:o})=>{var R,d;let u=B((R=e.label)!=null?R:e.name,"edit"),a=C((d=e.label)!=null?d:e.name,"Data"),p=[["React","react",!0],["Edit","@pankod/refine-chakra-ui"],["FormControl","@pankod/refine-chakra-ui"],["FormLabel","@pankod/refine-chakra-ui"],["FormErrorMessage","@pankod/refine-chakra-ui"],["useForm","@pankod/refine-react-hook-form"]],l=n.filter(i=>(i==null?void 0:i.relation)&&!(i!=null&&i.fieldable)&&(i==null?void 0:i.resource)).filter(Boolean).map(i=>{if((i==null?void 0:i.relation)&&!i.fieldable&&i.resource){p.push(["useSelect","@pankod/refine-core"]);let S=m(a,i.key,i.accessor,!1);return i.multiple&&i.accessor&&(S=`${m(a,i.key)}?.map((item: any) => ${m("item",void 0,i.accessor)})`),`
                const { options: ${C(i.key,"Options")} } =
                useSelect({
                    resource: "${i.resource.name}",
                    defaultValue: ${S},
                    ${J(i)}
                });

                React.useEffect(() => {
                    resetField("${E(i.key,void 0,i.accessor)}");
                }, [${C(i.key,"Options")}]);
            `}}).filter(Boolean),F=i=>{if(i.relation&&i.resource){p.push(["useSelect","@pankod/refine-core"]),p.push(["Select","@pankod/refine-chakra-ui"]);let S=C(i.key,"Options");return f`
            <FormControl mb="3" isInvalid={!!errors?.${E(i.key,void 0)}}>
                <FormLabel>${g(i.key)}</FormLabel>
                <Select
                    placeholder="Select ${D(i.resource.name)}"
                    {...register("${E(i.key,void 0,i.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${S}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${m("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},x=i=>{if(i.type==="text"||i.type==="url"||i.type==="email"||i.type==="number"||i.type==="date"||i.type==="richtext"){if(p.push(["Input","@pankod/refine-chakra-ui"]),i.multiple){let S=E(i.key,"${index}",i.accessor),$=m(m("(errors as any)",i.key,void 0,!1)+"?.[index]",void 0,i.accessor);return`
                    <>
                        {${m(a,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${$}}>
                                <FormLabel>${g(i.key)} #{index + 1}</FormLabel>
                                <Input
                                    {...register(\`${S}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${m($,"message")} as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return f`
                <FormControl mb="3" isInvalid={!!${m("(errors as any)",i.key,i.accessor,!1)}}>
                    <FormLabel>${g(i.key)}</FormLabel>
                    <Input
                        ${Y(i.key)?"disabled":""}
                        ${i.type!=="date"&&i.type!=="richtext"?`type="${i.type}"`:""}
                        {...register("${E(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `}},b=i=>{if(i.type==="boolean"){if(p.push(["Checkbox","@pankod/refine-chakra-ui"]),i.multiple){let S=E(i.key,void 0,i.accessor),$=m("(errors as any)",i.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${m(a,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${$}}>
                                <FormLabel>${g(i.key)} #{index + 1}</FormLabel>
                                <Checkbox
                                    {...register(\`${S}.\${index}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${$}?.message as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return f`
                <FormControl mb="3" isInvalid={!!${m("errors",i.key,i.accessor,!1)}}>
                    <FormLabel>${g(i.key)}</FormLabel>
                    <Checkbox
                        {...register("${E(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${m("errors",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `}},I=i=>{if(i.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${x(i)}
                `},c=n.map(i=>{switch(i==null?void 0:i.type){case"text":case"number":case"email":case"url":case"richtext":return x(i);case"date":return I(i);case"boolean":return b(i);case"relation":return F(i);default:return}});return z(p),f`
    ${O(p)}
    
    export const ${u} = () => {
        const {
            refineCore: { formLoading, queryResult },
            saveButtonProps,
            register,
            resetField,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${o},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${a} = queryResult?.data?.data;
    
        ${l}

        return (
            <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${c.join("")}
            </Edit>
        );
    };
    `},Ae=U({type:"edit",additionalScope:[["@pankod/refine-core","RefineCore",on],["@pankod/refine-chakra-ui","RefineChakraUI",an],["@pankod/refine-react-hook-form","RefineReactHookForm",sn]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:sr});var ba=({action:e,id:n,...s})=>{let{useParams:o}=cn(),{action:u,id:a}=o();switch(e!=null?e:u){case"show":return ae.createElement(be,{...s,id:n!=null?n:a});case"create":return ae.createElement(ve,{...s,id:n!=null?n:a});case"edit":return ae.createElement(Ae,{...s,id:n!=null?n:a});default:return ae.createElement(Ce,{...s,id:n!=null?n:a})}};export{ve as ChakraUICreateInferencer,ar as ChakraUICreateRenderer,Ae as ChakraUIEditInferencer,sr as ChakraUIEditRenderer,ba as ChakraUIInferencer,Ce as ChakraUIListInferencer,or as ChakraUIListRenderer,be as ChakraUIShowInferencer,tr as ChakraUIShowRenderer};
//# sourceMappingURL=chakra-ui.js.map