import ae from"react";import{useRouterContext as Xr}from"@pankod/refine-core";import*as Ur from"@pankod/refine-mantine";import E from"react";import{useResource as rr}from"@pankod/refine-core";var sr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,se=(r,t)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];sr.test(r)&&i.unshift("url");let s=i.find(u=>u in t&&!!t[u]);if(s)return s==="firstName"&&"lastName"in t?["firstName","lastName"]:s};function ie(r,t,i){var u;if(t)return t;let s=i==null?void 0:i.find(o=>o.name===r);return(u=s==null?void 0:s.options)!=null&&u.dataProviderName?s.options.dataProviderName:"default"}var Q=r=>{var t;return(t=r==null?void 0:r.options)==null?void 0:t.dataProviderName};var ce=r=>{let t=[...r].filter(Boolean).sort((i,s)=>(s.priority||0)-(i.priority||0))[0];return t||null};import ir from"prettier/standalone";import cr from"prettier/parser-typescript";var ue=r=>{try{return ir.format(r,{parser:"typescript",plugins:[cr],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),r}};var pe=r=>r.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var me=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ae=(r,t)=>{let i=me.test(r),s=typeof t=="string"||typeof t=="number",u=Array.isArray(t)&&t.every(o=>typeof o=="string"||typeof o=="number");return i&&s||i&&u?{key:r,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var G=r=>r.replace(me,"");var g=r=>G(r).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(c=>c.charAt(0).toUpperCase()+c.slice(1)).join(" ");var le=r=>r.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var we=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,ur=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,pr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,de=(r,t={})=>{let i=r.matchAll(we),s=new Set;for(let u of i){let[,o,c,y,m]=u;if(m in t){let $=t[m];if(m==="react")continue;o&&s.add(`const { default: ${o} } = ${$};`),c&&s.add(`const${c.replace(pr,"$1: $3$4")} = ${$};`),y&&s.add(`const ${y} = ${$};`)}}return pe(`
    ${Array.from(s).join(`
`)}
    ${r.replace(we,"").replace(ur,"")}
    `)};import te from"pluralize";var ye=(r,t)=>r?t.find(s=>{let u=G(r.key);return s.name===u||s.name===(te.isPlural(u)?u:te.plural(u))||s.name===(te.isSingular(u)?u:te.singular(u))}):void 0;import mr from"pluralize";var M=(r,t,i="Inferred")=>{let s=r.replace(/[^a-zA-Z0-9]/g," "),u=mr.singular(s),c=g(u).replace(/ /g,"")||i,y=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(c)?`${c}${y}`:`${y}${c}`};var lr=r=>r?Array.isArray(r)?r.join(""):typeof r=="string"?r:typeof r=="object"||typeof r=="function"?r.toString():typeof r=="number"?String(r):typeof r=="boolean"&&r?"true":r:"",f=(r,...t)=>r.reduce((s,u,o)=>`${s}${u}${lr(t[o])}`,"").trim();var fe=(r,t)=>`
    ${r!=null?r:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var ge=r=>r==null?void 0:r.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var dr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,ke=r=>dr.test(r);function he(r,t,i){let s=`${r}`;return t&&(s+="?.",ke(t)?s+=t:s+=`['${t}']`),i&&(s+="?.",ke(i)?s+=i:s+=`['${i}']`),s}function yr(r,t,i){return(i!=null?i:[]).map(u=>he(r,t,u))}var l=(r,t,i,s=' + " " + ')=>Array.isArray(i)?s?yr(r,t,i).join(s):he(r,t,i[0]):he(r,t,i),R=(r,t,i)=>{let s=r;return t&&(s+=`.${t}`),i&&(Array.isArray(i)?s+=`.${i[0]}`:s+=`.${i}`),s};var B=r=>{let t=r.reduce((s,[u,o,c])=>(s[o]||(s[o]=[]),s[o].includes(u)||(c?s[o].push([u,!0]):s[o].push(u)),s),{});return Object.entries(t).map(([s,u])=>{let o=u.find($=>Array.isArray($)&&$[1]),c=u.filter($=>typeof $=="string"),y=o?`${o[0]}`:"",m=c.length?`{ ${c.join(", ")} }`:"";return`import ${y}${y&&m?", ":""}${m} from "${s}";`})};import Re from"pluralize";var K=(r="")=>Re.isSingular(r)?r:Re.singular(r);import Se from"pluralize";var Z=(r="")=>Se.isPlural(r)?r:Se.plural(r);var fr=/^id$/i,q=r=>fr.test(r);var Y=r=>r.relationInfer&&r.relationInfer.accessor?Array.isArray(r.relationInfer.accessor)?`optionLabel: "${r.relationInfer.accessor[0]}",`:r.relationInfer.accessor!=="title"?`optionLabel: "${r.relationInfer.accessor}",`:"":"";var O=r=>{};var T=(r,t="")=>{if(Number.isInteger(Number(r)))return t.charAt(0).toLowerCase()+t.slice(1)+r;let s=r.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=g(s).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Ne=r=>{let t=(i,s,u,o=t)=>{let c=r.map(m=>m(i,s,u,o));return ce(c)};return t};var Ve=r=>(i,s,u,o,c)=>r.reduce((y,m)=>m(y,s,u,o,c),i);var Le=(r,t,i,s)=>{let u=Array.isArray(t),o=Array.isArray(t)&&t.every(c=>typeof c=="string"||typeof c=="number");if(u){if(!o){let y=s(r,t[0],i,s);return y?{...y,key:r,multiple:!0,priority:1}:!1}let c=s(r,t[0],i,s)||{type:"string"};return{key:r,multiple:!0,priority:1,type:c==null?void 0:c.type}}return!1};var Ge=(r,t)=>typeof t=="boolean"?{key:r,type:"boolean"}:!1;import Pe from"dayjs";var gr=/(_at|_on|At|On|AT|ON)(\[\])?$/,Me=(r,t)=>{let i=gr.test(r)&&Pe(t).isValid(),s=typeof t=="string"&&Pe(t).isValid(),u=typeof t=="string"&&t.length>4;return i||s&&u?{key:r,type:"date",priority:1}:!1};var kr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,De=(r,t)=>typeof t=="string"&&kr.test(t)?{key:r,type:"email",priority:1}:!1;var hr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,Ee=(r,t)=>typeof t=="string"&&hr.test(t)?{key:r,type:"image",priority:2}:!1;var Be=(r,t)=>typeof t>"u"||t===null?null:!1;var Oe=(r,t)=>typeof t=="number"?{key:r,type:"number"}:!1;var $r=/id$/i,Ke=(r,t,i,s)=>{let u=t!==null,o=!Array.isArray(t);if(u&&o&&typeof t=="object"){if(Object.keys(t).length===1&&$r.test(Object.keys(t)[0]))return{key:r,type:"relation",relation:!0,accessor:"id",priority:1};let m=se(r,t);if((m?m.length>0:!1)&&m){let x=m&&Array.isArray(m)?m[0]:m,b=s(x,t[x],t,s);if(b){let h=Array.isArray(m)?m.map(F=>b.accessor?`${F}.${Array.isArray(b.accessor)?b.accessor[0]:b.accessor}`:F):b.accessor?Array.isArray(b.accessor)?`${m}.${b.accessor[0]}`:`${m}.${b.accessor}`:m;return{...b,fieldable:!0,key:r,accessor:h,priority:1}}}return{key:r,fieldable:!1,type:"object",priority:1}}return!1};var ze=(r,t)=>typeof t=="string"&&t.length>100?{key:r,type:"richtext",priority:1}:!1;var je=(r,t)=>typeof t=="string"?{key:r,type:"text"}:!1;var Ir=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,_e=(r,t)=>typeof t=="string"&&Ir.test(t)?{key:r,type:"url",priority:1}:!1;var He=[Le,Ge,Me,De,Ee,Be,Oe,Ke,Ae,ze,je,_e];var Ue=(r,t,i,s)=>r.map(o=>{if(!o.relation&&(o.type==="text"||o.type==="richtext"||o.type==="number")&&!o.canRelation){let c=/^[a-z0-9-]+$/,y=h=>c.test(`${h}`),m=o.key.toLowerCase()!=="id";return!(!o.accessor||typeof o.accessor=="string")||!m?o:(o.multiple?s[o.key]:[s[o.key]]).every(h=>y(o.accessor?h[o.accessor]:h))?{...o,canRelation:!0}:o}return o});var xr=/(image|photo|avatar|cover|thumbnail|icon)/i,We=r=>r.map(i=>i.type==="url"&&xr.test(i.key)?{...i,type:"image"}:i);var qe=(r,t)=>r.map(s=>{let u=ye(s,t);return u?{...s,relation:!0,type:"relation",resource:u}:s});var Ze=(r,t,i,s,u)=>r.map(c=>{if(c.relation&&c.type==="relation"&&!c.resource){let y=c.accessor?s[c.key][c.accessor]:s[c.key],m=u(c.key,y,s,u);if(m&&m.type!=="relation")return{...c,fieldable:!0,relation:!1,type:m.type,canRelation:!0}}return c});var Je=[We,qe,Ze,Ue];import ee,{useEffect as br}from"react";import Fr,{defaultProps as Cr}from"prism-react-renderer";import Tr from"prism-react-renderer/themes/vsDark";var $e=({code:r,wrapperProps:t})=>(br(()=>{var s;let i=document.createElement("style");i.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(s=document.getElementById("code-highlight"))==null||s.appendChild(i)},[]),ee.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},ee.createElement(Fr,{...Cr,theme:Tr,code:r,language:"tsx"},({className:i,style:s,tokens:u,getLineProps:o,getTokenProps:c})=>ee.createElement("pre",{className:i,style:{...s,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((y,m)=>ee.createElement("div",{key:m,...o({line:y,key:m})},y.map(($,x)=>ee.createElement("span",{key:x,...c({token:$,key:x})}))))))));import D from"react";import*as vr from"@pankod/refine-core";import{LivePreview as Ar,LiveProvider as wr}from"@aliemir/react-live";var Xe=[["react","React",D],["@pankod/refine-core","RefineCore",vr]],Ie=D.createContext({}),xe=({fetchError:r,code:t,additionalScope:i,errorComponent:s})=>{var y;let u=(y=t&&le(de(t,[...Xe,...i!=null?i:[]].reduce((m,[$,x,b,h])=>h?m:{...m,[$]:x},{}))))!=null?y:"",o=D.useMemo(()=>({React:D,...D,...[...Xe,...i!=null?i:[]].reduce((m,[$,x,b])=>({...m,[x]:b}),{})}),[i]),c=D.useMemo(()=>()=>{let{error:$}=D.useContext(Ie);return s?D.createElement(s,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof r=="string"?r:r?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[s,r]);return D.createElement(wr,{Context:Ie,code:u,scope:o,noInline:!0},!r&&D.createElement(Ar,{Context:Ie}),D.createElement(c,null))};import J from"react";import{useDataProvider as Rr,useResource as Sr}from"@pankod/refine-core";var Qe=(r,t,i)=>{let{resource:s,resourceName:u,id:o,resources:c}=Sr({resourceNameOrRouteName:t}),y=i!=null?i:o,m=Rr(),[$,x]=J.useState(void 0),[b,h]=J.useState(void 0),[F,L]=J.useState(!0),[p,N]=J.useState(!1),v=J.useCallback(async a=>{var e,d;let I=(e=Q(s))!=null?e:ie(u,void 0,c),V=m(I);N(!0),x(void 0);try{if(r==="list"||r==="create"){let k=(d=(await V.getList({resource:u})).data)==null?void 0:d[0];k||x(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(k),setTimeout(()=>{N(!1)},500)}if((r==="edit"||r==="show")&&a){let k=(await V.getOne({resource:u,id:a})).data;k||x(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(k),setTimeout(()=>{N(!1)},500)}}catch(n){console.warn("An error occured while fetching the resource data. Please check the error message below:",n),x(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${u}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{N(!1)},500)}},[r,m,s,u,c]);return J.useEffect(()=>{L(!1),!p&&!b&&v(y)},[v,y]),{data:b,loading:p,initial:F,error:$}};import re from"react";import{useDataProvider as Nr}from"@pankod/refine-core";import{get as Ye}from"lodash";var er=({record:r,fields:t,infer:i})=>{let s=Nr(),[u,o]=re.useState([]),[c,y]=re.useState(!0),[m,$]=re.useState(!1),x=re.useCallback(async b=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let h=[];$(!0);try{let F=b.map(async p=>{if(p&&(p.relation||p.canRelation)&&r){let N=Q(p.resource),v=s(N),a=Array.isArray(p.accessor)?void 0:p.multiple?r[p.key].map(I=>p.accessor?Ye(I,p.accessor):I)[0]:p.accessor?Ye(r[p.key],p.accessor):r[p.key];if(a&&p.resource)try{let{data:I}=await v.getOne({resource:p.resource.name,id:a});h.push({status:"success",resource:p.resource.name,field:p.key});let V=i("__",I,{},i);return{...p,relationInfer:V}}catch{return h.push({status:"error",resource:p.resource.name,field:p.key}),{...p,relationInfer:null}}if(a){let I,V;try{let{data:n}=await v.getOne({resource:Z(G(p.key)),id:a});h.push({status:"success",resource:Z(G(p.key)),field:p.key}),I=n,V=!0}catch{h.push({status:"error",resource:Z(G(p.key)),field:p.key});try{let{data:k}=await v.getOne({resource:K(G(p.key)),id:a});h.push({status:"success",resource:K(G(p.key)),field:p.key}),I=k,V=!1}catch{return h.push({status:"error",resource:K(G(p.key)),field:p.key}),{...p,relationInfer:null}}}let e=i("__",I,{},i),d=G(p.key);return{...p,relation:!0,type:"relation",resource:{name:V?Z(d):K(d)},fieldable:!1,canRelation:void 0,relationInfer:e}}return{...p,relationInfer:null}}return p}),L=await Promise.all(F);o(L.filter(p=>p)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${h.length} attempts and succeeded with ${h.filter(F=>F.status==="success").length} attempts.`),console.groupEnd()},500)},[s,r]);return re.useEffect(()=>{y(!1),!m&&t&&t.length>0&&u.length===0&&x(t)},[x,m,t,x]),{fields:u,loading:m,initial:c}};var z=({type:r,additionalScope:t=[],customElements:i=[],fieldTransformers:s=[],renderer:u,loadingComponent:o,errorComponent:c,codeViewerComponent:y})=>{let m=Ne([...He,...i]),$=Ve([...Je,...s]),x=({resourceName:h,fieldTransformer:F,id:L})=>{var w;let{resource:p,resources:N}=rr({resourceNameOrRouteName:h}),{resource:v}=rr(),{data:a,loading:I,initial:V,error:e}=Qe(r,h!=null?h:p==null?void 0:p.name,L),d=E.useMemo(()=>{if(a){let C=Object.keys(a).map(W=>{let ne=a[W];return m(W,ne,a,m)}).filter(Boolean),P=$(C,N,p,a,m);return F?P.flatMap(W=>{let ne=F(W);return ne?[ne]:[]}):P}return[]},[a,N,p,F]),{fields:n,loading:k}=er({record:a,fields:d,infer:m}),A=E.useMemo(()=>!I&&!k&&!V?u({resource:p,resources:N,fields:n,infer:m,isCustomPage:p.name!==v.name,id:L}):"",[p,N,n,I,k]);return E.createElement(E.Fragment,null,o&&(I||k)&&E.createElement(o,null),!I&&!k&&E.createElement(E.Fragment,null,E.createElement(xe,{fetchError:!I&&e?e:!I&&!V&&!a,code:fe(A,M((w=p.label)!=null?w:p.name,r)),errorComponent:c,additionalScope:t}),y&&E.createElement(y,{code:ge(A),loading:I||k})))};return({name:h,resource:F,fieldTransformer:L,id:p})=>E.createElement(x,{fieldTransformer:L,resourceName:F!=null?F:h,key:F!=null?F:h,id:p})};import oe from"react";import{Alert as Vr,Center as Lr}from"@pankod/refine-mantine";import{IconAlertCircle as Gr}from"@tabler/icons";var j=({error:r})=>r?oe.createElement(Lr,{style:{minHeight:300}},oe.createElement(Vr,{title:"Error",color:"red",icon:oe.createElement(Gr,null)},oe.createElement("div",{dangerouslySetInnerHTML:{__html:r!=null?r:""}}))):null;import Pr from"react";import{LoadingOverlay as Mr}from"@pankod/refine-mantine";var _=()=>Pr.createElement(Mr,{visible:!0});import S from"react";import{Affix as Dr,Button as be,Modal as Er,Group as Br,ActionIcon as Or}from"@pankod/refine-mantine";import{IconCode as Kr,IconMessageCircle as zr,IconX as jr,IconCopy as _r,IconCheck as Hr}from"@tabler/icons";var H=({code:r,loading:t})=>{let i=S.useMemo(()=>ue(r!=null?r:""),[r]),s=S.useRef(null),[u,o]=S.useState(!1),[c,y]=S.useState(!1);if(t)return null;let m=()=>{var $,x,b,h;($=s==null?void 0:s.current)==null||$.select(),(x=s==null?void 0:s.current)==null||x.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((h=(b=s==null?void 0:s.current)==null?void 0:b.value)!=null?h:""),y(!0),setTimeout(()=>{y(!1)},1e3))};return i?S.createElement(S.Fragment,null,S.createElement(Dr,{position:{bottom:12,right:60}},S.createElement(Br,{spacing:"xs"},S.createElement(be,{leftIcon:S.createElement(Kr,{size:18}),variant:"filled",color:"primary",onClick:()=>o(!0)},"Show Code"),S.createElement(be,{leftIcon:S.createElement(zr,{size:18}),variant:"default",component:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),S.createElement("div",{style:{height:"50px"}}),S.createElement(Er,{size:800,opened:u,onClose:()=>o(!1),styles:{modal:{padding:"0px !important",borderRadius:0},header:{display:"none"}}},S.createElement(Or,{onClick:()=>o(!1),variant:"transparent",sx:{position:"absolute",right:0,top:0,height:56,width:56}},S.createElement(jr,{size:18,style:{color:"#666b7a"}})),S.createElement($e,{code:i}),S.createElement("textarea",{ref:s,defaultValue:(i!=null?i:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}}),S.createElement(be,{sx:{position:"absolute",bottom:12,right:12,width:115},key:"copy",variant:"default",leftIcon:c?S.createElement(Hr,{size:18,style:{color:"green"}}):S.createElement(_r,{size:18}),onClick:m},c?"Copied":"Copy"))):null};var nr=({resource:r,fields:t,isCustomPage:i,id:s})=>{var V;let u=M((V=r.label)!=null?V:r.name,"show"),o="record",c=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-mantine"],["Title","@pankod/refine-mantine"]],m=t.filter(e=>(e==null?void 0:e.relation)&&!(e!=null&&e.fieldable)&&(e==null?void 0:e.resource)).filter(Boolean).map(e=>{if((e==null?void 0:e.relation)&&!e.fieldable&&e.resource){if(e.multiple){c.push(["useMany","@pankod/refine-core"]);let d=l(o,e.key);return e.accessor&&(d=`${l(o,e.key)}?.map((item: any) => ${l("item",void 0,e.accessor)})`),`
                const { data: ${T(e.key,"Data")}, isLoading: ${T(e.key,"IsLoading")} } =
                useMany({
                    resource: "${e.resource.name}",
                    ids: ${d} || [],
                    queryOptions: {
                        enabled: !!${o},
                    },
                });
                `}return c.push(["useOne","@pankod/refine-core"]),`
                const { data: ${T(e.key,"Data")}, isLoading: ${T(e.key,"IsLoading")} } =
                useOne({
                    resource: "${e.resource.name}",
                    id: ${l(o,e.key,e.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${o},
                    },
                });
            `}}).filter(Boolean),$=e=>{if(e.relation&&e.resource){let d=T(e.key,"Data"),n=T(e.key,"IsLoading");return e.multiple?(c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]),f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var k,A;if(e.relationInfer)if((k=e.relationInfer)!=null&&k.accessor){if(Array.isArray(e.relationInfer.accessor))return"Not Handled.";{let w=K((A=e.resource)==null?void 0:A.name),C=l(w,void 0,e.relationInfer.accessor);return`
                                    <Group spacing="xs">
                                        {${d}?.data?.map((${w}: any) => <TagField key={${C}} value={${C}} />)}
                                    </Group>
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var k;return e.relationInfer?(k=e.relationInfer)!=null&&k.accessor?Array.isArray(e.relationInfer.accessor)?`{${l(`${d}?.data`,void 0,e.relationInfer.accessor,' + " " + ')}}`:`{${d}?.data?.${e.relationInfer.accessor}}`:`{${d}?.data}`:`{${d}?.data?.id}`})()}
                    </>
                )}
                
                `}},x=e=>{if(e.type==="text"){if(c.push(["TextField","@pankod/refine-mantine"]),e.multiple){c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <TextField value={${l(o,e.key,e.accessor)}} />
            `}},b=e=>{if(e.type==="image"){if(c.push(["Image","@pankod/refine-mantine"]),e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <Image sx={{ maxWidth: 200 }} src={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Image sx={{ maxWidth: 200 }} src={${l(o,e.key,e.accessor," + ")}} />
                `}},h=e=>{if(e.type==="email"){if(c.push(["EmailField","@pankod/refine-mantine"]),e.multiple){c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <EmailField value={${l(o,e.key,e.accessor," + ")}} />
            `}},F=e=>{if(e.type==="url"){if(c.push(["UrlField","@pankod/refine-mantine"]),e.multiple){c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <UrlField value={${l(o,e.key,e.accessor," + ")}} />
            `}},L=e=>{if(e.type==="boolean"){if(c.push(["BooleanField","@pankod/refine-mantine"]),e.multiple){c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <TagField value={${d}} key={index} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <BooleanField value={${l(o,e.key,e.accessor," && ")}} />
            `}},p=e=>{if(e.type==="date"){if(c.push(["DateField","@pankod/refine-mantine"]),e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <DateField value={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <DateField value={${l(o,e.key,e.accessor," + ' ' + ")}} />
            `}},N=e=>{if(e.type==="richtext")return c.push(["MarkdownField","@pankod/refine-mantine"]),f`
                <Title mt="xs" order={5}>${g(e.key)}</Title>
                <MarkdownField value={${l(o,e.key,e.accessor,' + " " + ')}} />
            `},v=e=>{if(e.type==="number"){if(c.push(["NumberField","@pankod/refine-mantine"]),e.multiple){c.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let d=l("item",void 0,e.accessor);return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${d}} key={${d}} />
                    ))}
                </Group>
            `}return f`
                <Title my="xs" order={5}>${g(e.key)}</Title>
                <NumberField value={${l(o,e.key,e.accessor,' + " " + ')} ?? ""} />
            `}},a=e=>{if(e)return f`
                ${e}
            `},I=t.map(e=>{switch(e==null?void 0:e.type){case"text":return a(x(e));case"number":return a(v(e));case"richtext":return a(N(e));case"email":return a(h(e));case"image":return a(b(e));case"date":return a(p(e));case"boolean":return a(L(e));case"url":return a(F(e));case"relation":return a($(e));default:return}});return O(c),f`
    ${B(c)}
    
    export const ${u} = () => {
        const { queryResult } = useShow(${i?`{ 
                    resource: "${r.name}", 
                    id: ${s}
                }`:""});
        const { data, isLoading } = queryResult;
    
        const ${o} = data?.data;
    
        ${m}

        return (
            <Show isLoading={isLoading}>
                ${I.join("")}
            </Show>
        );
    };
    `},Fe=z({type:"show",additionalScope:[["@pankod/refine-mantine","RefineMantine",Ur]],codeViewerComponent:H,loadingComponent:_,errorComponent:j,renderer:nr});import*as Wr from"@pankod/refine-mantine";import*as qr from"@pankod/refine-react-table";var U=r=>Array.isArray(r.accessor)||r.multiple?`accessorKey: "${r.key}"`:r.accessor?`accessorKey: "${R(r.key,void 0,r.accessor)}"`:`accessorKey: "${r.key}"`,tr=({resource:r,fields:t,isCustomPage:i})=>{var d;let s=M((d=r.label)!=null?d:r.name,"list"),u="tableData?.data",o=[["IResourceComponentsProps","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"],["ScrollArea","@pankod/refine-mantine"],["List","@pankod/refine-mantine"],["Table","@pankod/refine-mantine"],["Pagination","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"],["EditButton","@pankod/refine-mantine"],["ShowButton","@pankod/refine-mantine"],["DeleteButton","@pankod/refine-mantine"]],c=t.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)),y=c.filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){o.push(["GetManyResponse","@pankod/refine-core"]),o.push(["useMany","@pankod/refine-core"]);let k="";return n.multiple?k=`[].concat(...(${u}?.map((item) => ${l("item",n.key,n.accessor,!1)}) ?? []))`:k=`${u}?.map((item) => ${l("item",n.key,n.accessor,!1)}) ?? []`,`
                const { data: ${T(n.key,"Data")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${k},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),m=c==null?void 0:c.map(n=>{if(n&&n.resource)return T(n.key,"Data")}).filter(Boolean),$=n=>{var k;if(n.relation&&n.resource){let A=`${T(n.key,"Data")}?.data`;if(Array.isArray(n.accessor))return;let w=`id: "${n.key}"`,C=`header: "${g(n.key)}"`,P=U(n),X="";if(n.multiple){o.push(["TagField","@pankod/refine-mantine"]);let W="item";n!=null&&n.relationInfer&&(W=l("item",void 0,n.relationInfer.accessor)),X=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${T(n.key,"Data")}: GetManyResponse;
                    };

                    const ${T(n.key)} = getValue<any[]>()?.map((item) => {
                        return meta.${T(n.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,n.accessor)}
                        );
                    })

                    return (
                        <Group spacing="xs">
                            {${T(n.key)}?.map((item, index) => (
                                <TagField key={index} value={${W}} />
                            ))}
                        </Group>
                    )
                }
            `}else n!=null&&n.relationInfer?X=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${T(n.key,"Data")}: GetManyResponse;
                        };

                        const ${T(n.key)} = meta.${A}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(T(n.key),void 0,(k=n==null?void 0:n.relationInfer)==null?void 0:k.accessor)} ?? "Loading...";
                    },`:X="";return`
                {
                    ${w},
                    ${C},
                    ${P},
                    ${X}
                }
            `}},x=n=>{if(n.type==="image"){o.push(["Image","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    ${n!=null&&n.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                    ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                   
                }
            `;if(n.multiple){let P=l("item",void 0,n.accessor," + ");C=`
                    cell: function render({ getValue }) {
                        ${n!=null&&n.accessor?"try {":""}
                            return (
                                <Group spacing="xs">
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${P}} key={index} sx={{ maxWidth: "100px" }} />
                                    ))}
                                </Group>
                            )
                        ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},b=n=>{if(n.type==="email"){o.push(["EmailField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    return <EmailField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},h=n=>{if(n.type==="url"){o.push(["UrlField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    return <UrlField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},F=n=>{if((n==null?void 0:n.type)==="boolean"){o.push(["BooleanField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    return <BooleanField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},L=n=>{if(n.type==="date"){o.push(["DateField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    return <DateField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},p=n=>{if((n==null?void 0:n.type)==="richtext"){o.push(["MarkdownField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C=f`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${l("getValue<string>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return n.multiple&&(C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},N=n=>{if(n&&(n.type==="text"||n.type==="number")){let k=`id: "${n.key}"`,A=U(n),w=`header: "${g(n.key)}"`,C="";return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),C=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor,' + " " + ')}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),!n.multiple&&Array.isArray(n.accessor)&&(C=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue()",n.key,n.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${k},
                    ${A},
                    ${w},
                    ${C}
                }
            `}},{canEdit:v,canShow:a,canDelete:I}=r!=null?r:{};v&&o.push(["EditButton","@pankod/refine-mantine"]),a&&o.push(["ShowButton","@pankod/refine-mantine"]),I&&o.push(["DeleteButton","@pankod/refine-mantine"]);let V=v||a||I?f`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <Group spacing="xs" noWrap>
                    ${a?f`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${v?f`<EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />`:""}
                    ${I?f`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </Group>
            );
        },
    },
        `:"",e=t.map(n=>{switch(n==null?void 0:n.type){case"text":case"number":return N(n);case"richtext":return p(n);case"email":return b(n);case"image":return x(n);case"date":return L(n);case"boolean":return F(n);case"url":return h(n);case"relation":return $(n);default:return}});return O(o),f`
    import React from "react";
    ${B(o)}
    
    export const ${s}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...e,V].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${i?`
            refineCoreProps: {
                resource: "${r.name}",
            }
            `:""}
        });

        ${y}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${m.join(", ")}
            },
        }));

        return (
            <List>
                <ScrollArea>
                    <Table highlightOnHover>
                        <thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => {
                                        return (
                                            <th key={header.id}>
                                                {!header.isPlaceholder && (
                                                    flexRender(
                                                        header.column
                                                            .columnDef
                                                            .header,
                                                        header.getContext(),
                                                    )
                                                )}
                                            </th>
                                        );
                                    })}
                                </tr>
                            ))}
                        </thead>
                        <tbody>
                            {getRowModel().rows.map((row) => {
                                return (
                                    <tr key={row.id}>
                                        {row.getVisibleCells().map((cell) => {
                                            return (
                                                <td key={cell.id}>
                                                    {flexRender(
                                                        cell.column.columnDef.cell,
                                                        cell.getContext(),
                                                    )}
                                                </td>
                                            );
                                        })}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </Table>
                </ScrollArea>    
                <br />
                <Pagination
                    position="right"
                    total={pageCount}
                    page={current}
                    onChange={setCurrent}
                />
            </List>
        );
    };
    `},Ce=z({type:"list",additionalScope:[["@pankod/refine-mantine","RefineMantine",Wr],["@pankod/refine-react-table","RefineReactTable",qr]],codeViewerComponent:H,loadingComponent:_,errorComponent:j,renderer:tr});import*as Zr from"@pankod/refine-mantine";var or=({resource:r,fields:t,isCustomPage:i})=>{var v;let s=M((v=r.label)!=null?v:r.name,"create"),u=[["Create","@pankod/refine-mantine"],["useForm","@pankod/refine-mantine"]],o={},y=t.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource)return u.push(["useSelect","@pankod/refine-mantine"]),`
                const { selectProps: ${T(a.key,"SelectProps")} } =
                useSelect({
                    resource: "${a.resource.name}",
                    ${Y(a)}
                });
            `}).filter(Boolean),m=a=>{if(a.relation&&a.resource){o={...o,[a.key]:a.multiple?[]:a.accessor?{[typeof a.accessor=="string"?a.accessor:a.accessor[0]]:""}:""};let I=T(a.key,"SelectProps");return a.multiple?(u.push(["MultiSelect","@pankod/refine-mantine"]),f`
                    <MultiSelect mt="sm" label="${g(a.key)}" {...getInputProps("${R(a.key,void 0)}")} {...${I}} filterDataOnExactSearchMatch={undefined} />
                `):(u.push(["Select","@pankod/refine-mantine"]),f`
                <Select mt="sm" label="${g(a.key)}" {...getInputProps("${R(a.key,void 0,a.accessor)}")} {...${I}} />
            `)}},$=a=>{if(a.type==="text"||a.type==="email"||a.type==="date"||a.type==="url")return q(a.key)||(u.push(["TextInput","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple)?void 0:f`
                <TextInput mt="sm" label="${g(a.key)}" {...getInputProps("${R(a.key,void 0,a.accessor)}")} />
            `},x=a=>{if(a.type==="image")return f`
            {/* 
                Dropzone component is not included in "@pankod/refine-mantine" package.
                To use a <Dropzone> component, you can follow the official documentation for Mantine.
                
                Docs: https://mantine.dev/others/dropzone/
            */}
            `},b=a=>{if(a.type==="boolean")return u.push(["Checkbox","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple?void 0:f`
                <Checkbox mt="sm" label="${g(a.key)}" {...getInputProps("${R(a.key,void 0,a.accessor)}", { type: 'checkbox' })} />
            `},h=a=>{if(a.type==="date"){let I=$(a);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mantine" package.
                    To use a <DatePicker> component, you can follow the official documentation for Mantine.
                    
                    Docs: https://mantine.dev/dates/date-picker/
                */}
                ${I!=null?I:""}
            `}},F=a=>{if(a.type==="richtext")return u.push(["Textarea","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple?void 0:f`
                <Textarea mt="sm" label="${g(a.key)}" autosize {...getInputProps("${R(a.key,void 0,a.accessor)}")} />
            `},L=a=>{if(a.type==="number")return q(a.key)||(u.push(["NumberInput","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple)?void 0:f`
                <NumberInput mt="sm" label="${g(a.key)}" {...getInputProps("${R(a.key,void 0,a.accessor)}")}/>
            `},p=a=>{if(a)return f`
                ${a}
        `},N=t.map(a=>{switch(a==null?void 0:a.type){case"url":case"text":case"email":return p($(a));case"number":return p(L(a));case"richtext":return p(F(a));case"image":return p(x(a));case"date":return p(h(a));case"boolean":return p(b(a));case"relation":return p(m(a));default:return}});return O(u),f`
    ${B(u)}
    
    export const ${s} = () => {
        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { formLoading } } = useForm({
            initialValues: ${JSON.stringify(o)},
            ${i?`refineCoreProps: {
                        resource: "${r.name}",
                        action: "create",  
                    }`:""}
        });
    
        ${y}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${N.join("")}
            </Create>
        );
    };
    `},Te=z({type:"create",additionalScope:[["@pankod/refine-mantine","RefineMantine",Zr]],codeViewerComponent:H,loadingComponent:_,errorComponent:j,renderer:or});import*as Jr from"@pankod/refine-mantine";var ar=({resource:r,fields:t,isCustomPage:i,id:s})=>{var I,V;let u=M((I=r.label)!=null?I:r.name,"edit"),o=T((V=r.label)!=null?V:r.name,"Data"),c=[["Edit","@pankod/refine-mantine"],["useForm","@pankod/refine-mantine"]],y={},$=t.filter(e=>(e==null?void 0:e.relation)&&!(e!=null&&e.fieldable)&&(e==null?void 0:e.resource)).filter(Boolean).map(e=>{if((e==null?void 0:e.relation)&&!e.fieldable&&e.resource){c.push(["useSelect","@pankod/refine-mantine"]);let d=l(o,e.key,e.accessor,!1);e.multiple&&e.accessor&&(d=`${l(o,e.key)}?.map((item: any) => ${l("item",void 0,e.accessor)})`);let n="";return e.multiple&&e.accessor&&(n=`React.useEffect(() => {
                        setFieldValue("${e.key}", ${d});
                    }, [${o}]);`),`
                const { selectProps: ${T(e.key,"SelectProps")} } =
                useSelect({
                    resource: "${e.resource.name}",
                    defaultValue: ${d},
                    ${Y(e)}
                });

                ${n}
            `}}).filter(Boolean),x=e=>{if(e.relation&&e.resource){y={...y,[e.key]:e.multiple?[]:e.accessor?{[typeof e.accessor=="string"?e.accessor:e.accessor[0]]:""}:""};let d=T(e.key,"SelectProps");return e.multiple?(c.push(["MultiSelect","@pankod/refine-mantine"]),f`
                    <MultiSelect mt="sm" label="${g(e.key)}" {...getInputProps("${R(e.key,void 0)}")} {...${d}} filterDataOnExactSearchMatch={undefined} />
                `):(c.push(["Select","@pankod/refine-mantine"]),f`
                <Select mt="sm" label="${g(e.key)}" {...getInputProps("${R(e.key,void 0,e.accessor)}")} {...${d}} />
            `)}},b=e=>{if(e.type==="text"||e.type==="email"||e.type==="date"||e.type==="url"){if(c.push(["TextInput","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=R(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <TextInput mt="sm" key={index} label={\`${g(e.key)} \${index + 1} \`} {...getInputProps(\`${d}\`)} />
                    ))}
                </Group>
                `}return f`
                <TextInput mt="sm" ${q(e.key)?"disabled":""} label="${g(e.key)}" {...getInputProps("${R(e.key,void 0,e.accessor)}")} />
            `}},h=e=>{if(e.type==="image")return f`
            {/* 
                Dropzone component is not included in "@pankod/refine-mantine" package.
                To use a <Dropzone> component, you can follow the official documentation for Mantine.
                
                Docs: https://mantine.dev/others/dropzone/
            */}
            `},F=e=>{if(e.type==="boolean"){if(c.push(["Checkbox","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=R(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <Checkbox mt="sm" key={index} label={\`${g(e.key)} \${index + 1} \`} {...getInputProps(\`${d}\`, { type: 'checkbox' })} />
                    ))}
                </Group>
                `}return f`
                <Checkbox mt="sm" label="${g(e.key)}" {...getInputProps("${R(e.key,void 0,e.accessor)}", { type: 'checkbox' })} />
            `}},L=e=>{if(e.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mantine" package.
                    To use a <DatePicker> component, you can follow the official documentation for Mantine.
                    
                    Docs: https://mantine.dev/dates/date-picker/
                */}
                ${b(e)}
            `},p=e=>{if(e.type==="richtext"){if(c.push(["Textarea","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=R(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <Textarea mt="sm" key={index} label={\`${g(e.key)} \${index + 1} \`} {...getInputProps(\`${d}\`)} />
                    ))}
                </Group>
                `}return f`
                <Textarea mt="sm" label="${g(e.key)}" autosize {...getInputProps("${R(e.key,void 0,e.accessor)}")} />
            `}},N=e=>{if(e.type==="number"){if(c.push(["NumberInput","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){c.push(["Group","@pankod/refine-mantine"]);let d=R(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <NumberInput mt="sm" key={index} label={\`${g(e.key)} \${index + 1} \`} {...getInputProps(\`${d}\`)} />
                    ))}
                </Group>
                `}return f`
                <NumberInput mt="sm" ${q(e.key)?"disabled":""} label="${g(e.key)}" {...getInputProps("${R(e.key,void 0,e.accessor)}")}/>
            `}},v=e=>{if(e)return f`
                ${e}
        `},a=t.map(e=>{switch(e==null?void 0:e.type){case"url":case"text":case"email":return v(b(e));case"number":return v(N(e));case"richtext":return v(p(e));case"image":return v(h(e));case"date":return v(L(e));case"boolean":return v(F(e));case"relation":return v(x(e));default:return}});return O(c),f`
    ${B(c)}
    
    export const ${u} = () => {
        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { queryResult } } = useForm({
            initialValues: ${JSON.stringify(y)},
            ${i?`refineCoreProps: {
                        resource: "${r.name}",
                        id: ${s},
                        action: "edit",  
                    }`:""}
        });
    
        const ${o} = queryResult?.data?.data;
    
        ${$}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                ${a.join("")}
            </Edit>
        );
    };
    `},ve=z({type:"edit",additionalScope:[["@pankod/refine-mantine","RefineMantine",Jr]],codeViewerComponent:H,loadingComponent:_,errorComponent:j,renderer:ar});var ya=({action:r,id:t,...i})=>{let{useParams:s}=Xr(),{action:u,id:o}=s();switch(r!=null?r:u){case"show":return ae.createElement(Fe,{...i,id:t!=null?t:o});case"create":return ae.createElement(Te,{...i,id:t!=null?t:o});case"edit":return ae.createElement(ve,{...i,id:t!=null?t:o});default:return ae.createElement(Ce,{...i,id:t!=null?t:o})}};export{Te as MantineCreateInferencer,or as MantineCreateRenderer,ve as MantineEditInferencer,ar as MantineEditRenderer,ya as MantineInferencer,Ce as MantineListInferencer,tr as MantineListRenderer,Fe as MantineShowInferencer,nr as MantineShowRenderer};
//# sourceMappingURL=mantine.js.map