import se from"react";import{useRouterContext as Mr}from"@pankod/refine-core";import M from"react";import{useResource as rr}from"@pankod/refine-core";var ar=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,ae=(e,t)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];ar.test(e)&&i.unshift("url");let s=i.find(p=>p in t&&!!t[p]);if(s)return s==="firstName"&&"lastName"in t?["firstName","lastName"]:s};function ie(e,t,i){var p;if(t)return t;let s=i==null?void 0:i.find(c=>c.name===e);return(p=s==null?void 0:s.options)!=null&&p.dataProviderName?s.options.dataProviderName:"default"}var X=e=>{var t;return(t=e==null?void 0:e.options)==null?void 0:t.dataProviderName};var ce=e=>{let t=[...e].filter(Boolean).sort((i,s)=>(s.priority||0)-(i.priority||0))[0];return t||null};import ir from"prettier/standalone";import cr from"prettier/parser-typescript";var pe=e=>{try{return ir.format(e,{parser:"typescript",plugins:[cr],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),e}};var ue=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var le=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,we=(e,t)=>{let i=le.test(e),s=typeof t=="string"||typeof t=="number",p=Array.isArray(t)&&t.every(c=>typeof c=="string"||typeof c=="number");return i&&s||i&&p?{key:e,relation:!0,multiple:!!p,type:"relation",priority:1}:!1};var P=e=>e.replace(le,"");var y=e=>P(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(u=>u.charAt(0).toUpperCase()+u.slice(1)).join(" ");var me=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(p=>!p.trim().startsWith("export default")).join(`
`);var Re=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,pr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,ur=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,de=(e,t={})=>{let i=e.matchAll(Re),s=new Set;for(let p of i){let[,c,u,f,m]=p;if(m in t){let $=t[m];if(m==="react")continue;c&&s.add(`const { default: ${c} } = ${$};`),u&&s.add(`const${u.replace(ur,"$1: $3$4")} = ${$};`),f&&s.add(`const ${f} = ${$};`)}}return ue(`
    ${Array.from(s).join(`
`)}
    ${e.replace(Re,"").replace(pr,"")}
    `)};import oe from"pluralize";var ye=(e,t)=>e?t.find(s=>{let p=P(e.key);return s.name===p||s.name===(oe.isPlural(p)?p:oe.plural(p))||s.name===(oe.isSingular(p)?p:oe.singular(p))}):void 0;import lr from"pluralize";var z=(e,t,i="Inferred")=>{let s=e.replace(/[^a-zA-Z0-9]/g," "),p=lr.singular(s),u=y(p).replace(/ /g,"")||i,f=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(u)?`${u}${f}`:`${f}${u}`};var mr=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",g=(e,...t)=>e.reduce((s,p,c)=>`${s}${p}${mr(t[c])}`,"").trim();var ge=(e,t)=>`
    ${e!=null?e:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var fe=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var dr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,he=e=>dr.test(e);function $e(e,t,i){let s=`${e}`;return t&&(s+="?.",he(t)?s+=t:s+=`['${t}']`),i&&(s+="?.",he(i)?s+=i:s+=`['${i}']`),s}function yr(e,t,i){return(i!=null?i:[]).map(p=>$e(e,t,p))}var l=(e,t,i,s=' + " " + ')=>Array.isArray(i)?s?yr(e,t,i).join(s):$e(e,t,i[0]):$e(e,t,i),V=(e,t,i)=>{let s=e;return t&&(s+=`.${t}`),i&&(Array.isArray(i)?s+=`.${i[0]}`:s+=`.${i}`),s};var _=e=>{let t=e.reduce((s,[p,c,u])=>(s[c]||(s[c]=[]),s[c].includes(p)||(u?s[c].push([p,!0]):s[c].push(p)),s),{});return Object.entries(t).map(([s,p])=>{let c=p.find($=>Array.isArray($)&&$[1]),u=p.filter($=>typeof $=="string"),f=c?`${c[0]}`:"",m=u.length?`{ ${u.join(", ")} }`:"";return`import ${f}${f&&m?", ":""}${m} from "${s}";`})};import Se from"pluralize";var E=(e="")=>Se.isSingular(e)?e:Se.singular(e);import Te from"pluralize";var O=(e="")=>Te.isPlural(e)?e:Te.plural(e);var gr=/^id$/i,J=e=>gr.test(e);var ee=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var B=e=>{};var F=(e,t="")=>{if(Number.isInteger(Number(e)))return t.charAt(0).toLowerCase()+t.slice(1)+e;let s=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),p=y(s).replace(/ /g,"");return`${p.charAt(0).toLowerCase()+p.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Ne=e=>{let t=(i,s,p,c=t)=>{let u=e.map(m=>m(i,s,p,c));return ce(u)};return t};var Le=e=>(i,s,p,c,u)=>e.reduce((f,m)=>m(f,s,p,c,u),i);var Ve=(e,t,i,s)=>{let p=Array.isArray(t),c=Array.isArray(t)&&t.every(u=>typeof u=="string"||typeof u=="number");if(p){if(!c){let f=s(e,t[0],i,s);return f?{...f,key:e,multiple:!0,priority:1}:!1}let u=s(e,t[0],i,s)||{type:"string"};return{key:e,multiple:!0,priority:1,type:u==null?void 0:u.type}}return!1};var Ee=(e,t)=>typeof t=="boolean"?{key:e,type:"boolean"}:!1;import Pe from"dayjs";var fr=/(_at|_on|At|On|AT|ON)(\[\])?$/,De=(e,t)=>{let i=fr.test(e)&&Pe(t).isValid(),s=typeof t=="string"&&Pe(t).isValid(),p=typeof t=="string"&&t.length>4;return i||s&&p?{key:e,type:"date",priority:1}:!1};var hr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,Oe=(e,t)=>typeof t=="string"&&hr.test(t)?{key:e,type:"email",priority:1}:!1;var $r=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,je=(e,t)=>typeof t=="string"&&$r.test(t)?{key:e,type:"image",priority:2}:!1;var ze=(e,t)=>typeof t>"u"||t===null?null:!1;var He=(e,t)=>typeof t=="number"?{key:e,type:"number"}:!1;var xr=/id$/i,Ke=(e,t,i,s)=>{let p=t!==null,c=!Array.isArray(t);if(p&&c&&typeof t=="object"){if(Object.keys(t).length===1&&xr.test(Object.keys(t)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let m=ae(e,t);if((m?m.length>0:!1)&&m){let v=m&&Array.isArray(m)?m[0]:m,b=s(v,t[v],t,s);if(b){let h=Array.isArray(m)?m.map(I=>b.accessor?`${I}.${Array.isArray(b.accessor)?b.accessor[0]:b.accessor}`:I):b.accessor?Array.isArray(b.accessor)?`${m}.${b.accessor[0]}`:`${m}.${b.accessor}`:m;return{...b,fieldable:!0,key:e,accessor:h,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var Me=(e,t)=>typeof t=="string"&&t.length>100?{key:e,type:"richtext",priority:1}:!1;var _e=(e,t)=>typeof t=="string"?{key:e,type:"text"}:!1;var Ir=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,Be=(e,t)=>typeof t=="string"&&Ir.test(t)?{key:e,type:"url",priority:1}:!1;var qe=[Ve,Ee,De,Oe,je,ze,He,Ke,we,Me,_e,Be];var Ue=(e,t,i,s)=>e.map(c=>{if(!c.relation&&(c.type==="text"||c.type==="richtext"||c.type==="number")&&!c.canRelation){let u=/^[a-z0-9-]+$/,f=h=>u.test(`${h}`),m=c.key.toLowerCase()!=="id";return!(!c.accessor||typeof c.accessor=="string")||!m?c:(c.multiple?s[c.key]:[s[c.key]]).every(h=>f(c.accessor?h[c.accessor]:h))?{...c,canRelation:!0}:c}return c});var br=/(image|photo|avatar|cover|thumbnail|icon)/i,We=e=>e.map(i=>i.type==="url"&&br.test(i.key)?{...i,type:"image"}:i);var Ze=(e,t)=>e.map(s=>{let p=ye(s,t);return p?{...s,relation:!0,type:"relation",resource:p}:s});var Ge=(e,t,i,s,p)=>e.map(u=>{if(u.relation&&u.type==="relation"&&!u.resource){let f=u.accessor?s[u.key][u.accessor]:s[u.key],m=p(u.key,f,s,p);if(m&&m.type!=="relation")return{...u,fieldable:!0,relation:!1,type:m.type,canRelation:!0}}return u});var Ye=[We,Ze,Ge,Ue];import re,{useEffect as kr}from"react";import vr,{defaultProps as Cr}from"prism-react-renderer";import Fr from"prism-react-renderer/themes/vsDark";var xe=({code:e,wrapperProps:t})=>(kr(()=>{var s;let i=document.createElement("style");i.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(s=document.getElementById("code-highlight"))==null||s.appendChild(i)},[]),re.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},re.createElement(vr,{...Cr,theme:Fr,code:e,language:"tsx"},({className:i,style:s,tokens:p,getLineProps:c,getTokenProps:u})=>re.createElement("pre",{className:i,style:{...s,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},p.map((f,m)=>re.createElement("div",{key:m,...c({line:f,key:m})},f.map(($,v)=>re.createElement("span",{key:v,...u({token:$,key:v})}))))))));import H from"react";import*as Ar from"@pankod/refine-core";import{LivePreview as wr,LiveProvider as Rr}from"@aliemir/react-live";var Qe=[["react","React",H],["@pankod/refine-core","RefineCore",Ar]],Ie=H.createContext({}),be=({fetchError:e,code:t,additionalScope:i,errorComponent:s})=>{var f;let p=(f=t&&me(de(t,[...Qe,...i!=null?i:[]].reduce((m,[$,v,b,h])=>h?m:{...m,[$]:v},{}))))!=null?f:"",c=H.useMemo(()=>({React:H,...H,...[...Qe,...i!=null?i:[]].reduce((m,[$,v,b])=>({...m,[v]:b}),{})}),[i]),u=H.useMemo(()=>()=>{let{error:$}=H.useContext(Ie);return s?H.createElement(s,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[s,e]);return H.createElement(Rr,{Context:Ie,code:p,scope:c,noInline:!0},!e&&H.createElement(wr,{Context:Ie}),H.createElement(u,null))};import Q from"react";import{useDataProvider as Sr,useResource as Tr}from"@pankod/refine-core";var Xe=(e,t,i)=>{let{resource:s,resourceName:p,id:c,resources:u}=Tr({resourceNameOrRouteName:t}),f=i!=null?i:c,m=Sr(),[$,v]=Q.useState(void 0),[b,h]=Q.useState(void 0),[I,w]=Q.useState(!0),[o,A]=Q.useState(!1),T=Q.useCallback(async a=>{var N,D;let k=(N=X(s))!=null?N:ie(p,void 0,u),R=m(k);A(!0),v(void 0);try{if(e==="list"||e==="create"){let x=(D=(await R.getList({resource:p})).data)==null?void 0:D[0];x||v(`<p>No records/data found for resource "${p}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(x),setTimeout(()=>{A(!1)},500)}if((e==="edit"||e==="show")&&a){let x=(await R.getOne({resource:p,id:a})).data;x||v(`<p>No records/data found for resource "${p}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(x),setTimeout(()=>{A(!1)},500)}}catch(r){console.warn("An error occured while fetching the resource data. Please check the error message below:",r),v(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${p}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{A(!1)},500)}},[e,m,s,p,u]);return Q.useEffect(()=>{w(!1),!o&&!b&&T(f)},[T,f]),{data:b,loading:o,initial:I,error:$}};import te from"react";import{useDataProvider as Nr}from"@pankod/refine-core";import{get as Je}from"lodash";var er=({record:e,fields:t,infer:i})=>{let s=Nr(),[p,c]=te.useState([]),[u,f]=te.useState(!0),[m,$]=te.useState(!1),v=te.useCallback(async b=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let h=[];$(!0);try{let I=b.map(async o=>{if(o&&(o.relation||o.canRelation)&&e){let A=X(o.resource),T=s(A),a=Array.isArray(o.accessor)?void 0:o.multiple?e[o.key].map(k=>o.accessor?Je(k,o.accessor):k)[0]:o.accessor?Je(e[o.key],o.accessor):e[o.key];if(a&&o.resource)try{let{data:k}=await T.getOne({resource:o.resource.name,id:a});h.push({status:"success",resource:o.resource.name,field:o.key});let R=i("__",k,{},i);return{...o,relationInfer:R}}catch{return h.push({status:"error",resource:o.resource.name,field:o.key}),{...o,relationInfer:null}}if(a){let k,R;try{let{data:r}=await T.getOne({resource:O(P(o.key)),id:a});h.push({status:"success",resource:O(P(o.key)),field:o.key}),k=r,R=!0}catch{h.push({status:"error",resource:O(P(o.key)),field:o.key});try{let{data:x}=await T.getOne({resource:E(P(o.key)),id:a});h.push({status:"success",resource:E(P(o.key)),field:o.key}),k=x,R=!1}catch{return h.push({status:"error",resource:E(P(o.key)),field:o.key}),{...o,relationInfer:null}}}let N=i("__",k,{},i),D=P(o.key);return{...o,relation:!0,type:"relation",resource:{name:R?O(D):E(D)},fieldable:!1,canRelation:void 0,relationInfer:N}}return{...o,relationInfer:null}}return o}),w=await Promise.all(I);c(w.filter(o=>o)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${h.length} attempts and succeeded with ${h.filter(I=>I.status==="success").length} attempts.`),console.groupEnd()},500)},[s,e]);return te.useEffect(()=>{f(!1),!m&&t&&t.length>0&&p.length===0&&v(t)},[v,m,t,v]),{fields:p,loading:m,initial:u}};var q=({type:e,additionalScope:t=[],customElements:i=[],fieldTransformers:s=[],renderer:p,loadingComponent:c,errorComponent:u,codeViewerComponent:f})=>{let m=Ne([...qe,...i]),$=Le([...Ye,...s]),v=({resourceName:h,fieldTransformer:I,id:w})=>{var n;let{resource:o,resources:A}=rr({resourceNameOrRouteName:h}),{resource:T}=rr(),{data:a,loading:k,initial:R,error:N}=Xe(e,h!=null?h:o==null?void 0:o.name,w),D=M.useMemo(()=>{if(a){let d=Object.keys(a).map(K=>{let G=a[K];return m(K,G,a,m)}).filter(Boolean),L=$(d,A,o,a,m);return I?L.flatMap(K=>{let G=I(K);return G?[G]:[]}):L}return[]},[a,A,o,I]),{fields:r,loading:x}=er({record:a,fields:D,infer:m}),S=M.useMemo(()=>!k&&!x&&!R?p({resource:o,resources:A,fields:r,infer:m,isCustomPage:o.name!==T.name,id:w}):"",[o,A,r,k,x]);return M.createElement(M.Fragment,null,c&&(k||x)&&M.createElement(c,null),!k&&!x&&M.createElement(M.Fragment,null,M.createElement(be,{fetchError:!k&&N?N:!k&&!R&&!a,code:ge(S,z((n=o.label)!=null?n:o.name,e)),errorComponent:u,additionalScope:t}),f&&M.createElement(f,{code:fe(S),loading:k||x})))};return({name:h,resource:I,fieldTransformer:w,id:o})=>M.createElement(v,{fieldTransformer:w,resourceName:I!=null?I:h,key:I!=null?I:h,id:o})};import ke from"react";var U=({error:e})=>e?ke.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px",position:"relative"}},ke.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},ke.createElement("div",{style:{fontSize:"1.5rem",fontWeight:"bold"},dangerouslySetInnerHTML:{__html:e!=null?e:""}}))):null;import ne from"react";var W=()=>{let[e,t]=ne.useState(0);return ne.useEffect(()=>{if(typeof window<"u"){let i=setInterval(()=>{t(s=>s===3?0:s+1)},300);return()=>{clearInterval(i)}}return()=>{}},[]),ne.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"120px",position:"relative"}},ne.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},ne.createElement("span",{style:{fontSize:"1rem",fontWeight:600}},"loading",".".repeat(e))))};import C from"react";import{IconCode as Lr,IconMessageCircle as Vr,IconCopy as Er,IconCheck as Pr}from"@tabler/icons";var Dr=({visible:e,onClose:t,children:i})=>e?C.createElement("div",{style:{position:"fixed",top:0,left:0,right:0,bottom:0,zIndex:9999,backgroundColor:"rgba(0, 0, 0, 0.5)"}},C.createElement("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",width:"80%",height:"80%",backgroundColor:"#fff",maxWidth:"700px",borderRadius:"4px",padding:"16px",paddingTop:"32px"}},C.createElement("div",{style:{position:"absolute",top:4,right:6,width:"32px",height:"32px",fontSize:"24px",lineHeight:"32px",cursor:"pointer",textAlign:"center"},onClick:t},"\xD7"),i)):null,Z=({code:e,loading:t})=>{let i=C.useMemo(()=>pe(e!=null?e:""),[e]),s=C.useRef(null),[p,c]=C.useState(!1),[u,f]=C.useState(!1),m=C.useCallback(()=>{f(!0)},[]),$=C.useCallback(()=>{f(!1)},[]);if(t)return null;let v=()=>{var b,h,I,w;(b=s==null?void 0:s.current)==null||b.select(),(h=s==null?void 0:s.current)==null||h.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((w=(I=s==null?void 0:s.current)==null?void 0:I.value)!=null?w:""),c(!0),setTimeout(()=>{c(!1)},1e3))};return i?C.createElement(C.Fragment,null,C.createElement("div",{style:{position:"fixed",bottom:"12px",right:"64px"}},C.createElement("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"center",width:"100%",height:"100%",gap:"12px"}},C.createElement("button",{style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",fontFamily:"sans-serif",alignItems:"center"},onClick:m},C.createElement(Lr,{size:18}),C.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},"Show Code")),C.createElement("a",{href:"https://github.com/refinedev/refine/discussions/3046",target:"_blank",rel:"noreferrer",style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",alignItems:"center",textDecoration:"none",color:"#666B7A",fontFamily:"sans-serif"}},C.createElement(Vr,{size:18}),C.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},"Give Feedback")))),C.createElement("div",{style:{height:"50px"}}),C.createElement(Dr,{visible:u,onClose:$},C.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"space-between",width:"100%",height:"100%"}},C.createElement("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"center",width:"100%",height:"100%"}},C.createElement(xe,{code:i,wrapperProps:{style:{width:"100%",maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"}}}),C.createElement("textarea",{ref:s,defaultValue:(i!=null?i:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),C.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"flex-end",justifyContent:"center",paddingTop:"8px",width:"100%",height:"100%"}},C.createElement("button",{style:{backgroundColor:"#fff",border:"1px solid #e2e8f0",borderRadius:"4px",padding:"8px 16px",cursor:"pointer",display:"flex",alignItems:"center"},onClick:v},p?C.createElement(Pr,{size:18}):C.createElement(Er,{size:18}),C.createElement("span",{style:{marginLeft:"8px",fontSize:"14px",color:"#666B7A"}},p?"Copied":"Copy")))))):null};var tr=({resource:e,fields:t,isCustomPage:i,id:s})=>{var r,x,S;let p=z((r=e.label)!=null?r:e.name,"show"),c="record",u=[["React","react",!0],["useShow","@pankod/refine-core"],["useResource","@pankod/refine-core"],["useNavigation","@pankod/refine-core"]],m=t.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)).filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){if(n.multiple){u.push(["useMany","@pankod/refine-core"]);let d=l(c,n.key);return n.accessor&&(d=`${l(c,n.key)}?.map((item: any) => ${l("item",void 0,n.accessor)})`),`
                const { data: ${F(n.key,"Data")}, isLoading: ${F(n.key,"IsLoading")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${d} || [],
                    queryOptions: {
                        enabled: !!${c},
                    },
                });
                `}return u.push(["useOne","@pankod/refine-core"]),`
                const { data: ${F(n.key,"Data")}, isLoading: ${F(n.key,"IsLoading")} } =
                useOne({
                    resource: "${n.resource.name}",
                    id: ${l(c,n.key,n.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${c},
                    },
                });
            `}}).filter(Boolean),$=n=>{if(n.relation&&n.resource){let d=F(n.key,"Data"),L=F(n.key,"IsLoading");return n.multiple?g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                    {${L} ? <>Loading...</> : (
                        <>
                        ${(()=>{var j;if(n.relationInfer)if((j=n.relationInfer)!=null&&j.accessor){if(Array.isArray(n.relationInfer.accessor))return"";{let K=F(n.key),G=l(K,void 0,n.relationInfer.accessor);return g`
                                            {${d}?.data?.map((${K}: any) => <li key={${G}}>{${G}}</li>)}
                                        `}}else return"";else return""})()}
                        </>
                    )}
                    </ul>
                </div>
                `:g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <div>
                    {${L} ? <>Loading...</> : (
                        <>
                        ${(()=>{var j;return n.relationInfer?(j=n.relationInfer)!=null&&j.accessor?Array.isArray(n.relationInfer.accessor)?`{${l(`${d}?.data`,void 0,n.relationInfer.accessor,' + " " + ')}}`:`{${d}?.data?.${n.relationInfer.accessor}}`:`{${d}?.data}`:`{${d}?.data?.id}`})()}
                        </>
                    )}
                    </div>
                </div>
                `}},v=n=>{if(n.type==="text"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${d}}>
                                {${d}}
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <div>
                    {${l(c,n.key,n.accessor)}}
                    </div>
                </div>
            `}},b=n=>{if(n.type==="image"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                    {${l(c,n.key)}?.map((item: any) => (
                        <li key={${d}}>
                            <img style={{ maxWidth: 200 }} src={${d}}/>
                        </li>
                    ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <img src={{ maxWidth: 200 }} src={${l(c,n.key,n.accessor," + ")}} />
                </div>
                `}},h=n=>{if(n.type==="email"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${d}}>
                                <a href={"mailto:" + ${d}}>{${d}}</a>
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <div>
                        <a href={"mailto:" + ${l(c,n.key,n.accessor," + ")}}>
                            {${l(c,n.key,n.accessor," + ")}}
                        </a>
                    </div>
                </div>
            `}},I=n=>{if(n.type==="url"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${d}}>
                                <a href={${d}}>{${d}}</a>
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${y(n.key)}</h5>
                <div>
                    <a href={${l(c,n.key,n.accessor," + ")}} target="_blank" rel="noreferrer">
                        {${l(c,n.key,n.accessor," + ")}}
                    </a>
                </div>
            </div>
            `}},w=n=>{if(n.type==="boolean"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                            <li key={${d}}>
                                {${d} ? "Yes" : "No"}
                            </li>
                        ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${y(n.key)}</h5>
                <div>
                {${l(c,n.key,n.accessor," && ")} ? "Yes" : "No"}
                </div>
            </div>
            `}},o=n=>{if(n.type==="date"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                    {${l(c,n.key)}?.map((item: any) => (
                        <li key={${d}}>
                            {(new Date(${d})).toLocaleString(undefined, { timeZone: "UTC" })}
                        </li>
                    ))}
                    </ul>
                </div>
            `}return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${y(n.key)}</h5>
                <div>
                    {(new Date(${l(c,n.key,n.accessor," + ' ' + ")})).toLocaleString(undefined, { timeZone: "UTC" })}
                </div>
            </div>
            `}},A=n=>{if(n.type==="richtext")return g`
            <div style={{ marginTop: "6px" }}>
                <h5>${y(n.key)}</h5>
                <p>
                {${l(c,n.key,n.accessor,' + " " + ')}}
                </p>
            </div>
            `},T=n=>{if(n.type==="number"){if(n.multiple){let d=l("item",void 0,n.accessor);return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <ul>
                        {${l(c,n.key)}?.map((item: any) => (
                        <li key={${d}}>
                            {${d}}
                        </li>
                        ))}
                    </ul>
                </div>
                `}return g`
                <div style={{ marginTop: "6px" }}>
                    <h5>${y(n.key)}</h5>
                    <div>
                    {${l(c,n.key,n.accessor,' + " " + ')} ?? ""}
                    </div>
                </div>
            `}},a=n=>{if(n)return g`
                ${n}
            `},k=t.map(n=>{switch(n==null?void 0:n.type){case"text":return a(v(n));case"number":return a(T(n));case"richtext":return a(A(n));case"email":return a(h(n));case"image":return a(b(n));case"date":return a(o(n));case"boolean":return a(w(n));case"url":return a(I(n));case"relation":return a($(n));default:return}}),{canEdit:R,list:N}=e!=null?e:{},D=!!N;return B(u),g`
    ${_(u)}
    
    export const ${p} = () => {
        const { edit, list } = useNavigation();
        ${i?"":"const { id } = useResource();"}
        const { queryResult } = useShow(${i?`{ 
                    resource: "${e.name}", 
                    id: ${s}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${c} = data?.data;
    
        ${m}

        return (
            <div style={{ padding: "16px" }}>
            <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
                <h1>
                ${y(E((x=e.label)!=null?x:e.name))}
                </h1>
                <div style={{ display: "flex", gap: "8px" }}>
                ${D?g`<button onClick={() => list("${e.name}")}>${y(O((S=e.label)!=null?S:e.name)+" list")}</button>`:""}
                ${R?g`<button onClick={() => edit("${e.name}", ${i?`"${s}"`:"id ?? ''"})}>Edit</button>`:""}
                </div>
            </div>
                <div>
                    ${k.join("")}
                </div>
            </div>
        );
    };
    `},ve=q({type:"show",additionalScope:[],codeViewerComponent:Z,loadingComponent:W,errorComponent:U,renderer:tr});import*as Or from"@pankod/refine-react-table";var Y=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${V(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,nr=({resource:e,fields:t,isCustomPage:i})=>{var N,D;let s=z((N=e.label)!=null?N:e.name,"list"),p="tableData?.data",c=[["React","react",!0],["IResourceComponentsProps","@pankod/refine-core"],["useNavigation","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"]],u=t.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),f=u.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){c.push(["GetManyResponse","@pankod/refine-core"]),c.push(["useMany","@pankod/refine-core"]);let x="";return r.multiple?x=`[].concat(...(${p}?.map((item) => ${l("item",r.key,r.accessor,!1)}) ?? []))`:x=`${p}?.map((item) => ${l("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${F(r.key,"Data")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${x},
                    queryOptions: {
                        enabled: !!${p},
                    },
                });
                `}}).filter(Boolean),m=u==null?void 0:u.map(r=>{if(r&&r.resource)return F(r.key,"Data")}).filter(Boolean),$=r=>{var x;if(r.relation&&r.resource){let S=`${F(r.key,"Data")}?.data`;if(Array.isArray(r.accessor))return;let n=`id: "${r.key}"`,d=`header: "${y(r.key)}"`,L=Y(r),j="";if(r.multiple){let K="item";r!=null&&r.relationInfer&&(K=l("item",void 0,r.relationInfer.accessor)),j=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${F(r.key,"Data")}: GetManyResponse;
                    };

                    ${r!=null&&r.accessor?"try {":""}

                    const ${F(r.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${F(r.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,r.accessor)}
                        );
                    })


                    return (
                        <ul>
                            {${F(r.key,"")}?.map((item, index) => (
                                <li key={index}>
                                    {${K}}
                                </li>
                            ))}
                        </ul>
                    )
                    ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                }
            `}else r!=null&&r.relationInfer?j=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${F(r.key,"Data")}: GetManyResponse;
                        };

                        ${r!=null&&r.accessor?"try {":""}

                        const ${F(r.key,"")} = meta.${S}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(F(r.key),void 0,(x=r==null?void 0:r.relationInfer)==null?void 0:x.accessor)} ?? "Loading...";

                        ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                    },`:j="";return`
                {
                    ${n},
                    ${d},
                    ${L},
                    ${j}
                }
            `}},v=r=>{if(r.type==="image"){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d=g`
                cell: function render({ getValue }) {
                    ${r!=null&&r.accessor?"try {":""}
                        return <img style={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                }
            `;if(r.multiple){let L=l("item",void 0,r.accessor," + ");d=`
                    cell: function render({ getValue }) {
                        ${r!=null&&r.accessor?"try {":""}
                            return (
                                <ul>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <li key={index}><img src={${L}} style={{ height: "50px", maxWidth: "100px" }} /></li>
                                    ))}
                                </ul>
                            )
                        ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},b=r=>{if(r.type==="email"){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d=g`
                cell: function render({ getValue }) {
                    return <a href={"mailto:" + ${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}}>{${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}}</a>
                }
            `;return r.multiple&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,r.accessor," + ")}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},h=r=>{if(r.type==="url"){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d=g`
                cell: function render({ getValue }) {
                    return <a href={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}}>{${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}}</a>
                }
            `;return r.multiple&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,r.accessor," + ")}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},I=r=>{if((r==null?void 0:r.type)==="boolean"){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d=g`
                cell: function render({ getValue }) {
                    return ${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")} ? "yes" : "no"
                }
            `;return r.multiple&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,r.accessor," + ")} ? "yes" : "no"}
                                    </li>
                                ))}
                            </ul>
                        );
                    }
                `),`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},w=r=>{if(r.type==="date"){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d=g`
                cell: function render({ getValue }) {
                    return (new Date(${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')})).toLocaleString(undefined, { timeZone: "UTC" })
                }
            `;return r.multiple&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                    {(new Date(${l("item",void 0,r.accessor," + ")})).toLocaleString(undefined, { timeZone: "UTC" })}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},o=r=>{if(r&&(r.type==="text"||r.type==="number"||r.type==="richtext")){let x=`id: "${r.key}"`,S=Y(r),n=`header: "${y(r.key)}"`,d="";return r.multiple&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <ul>
                                {getValue<any[]>()?.map((item, index) => (
                                    <li key={index}>
                                        {${l("item",void 0,r.accessor,' + " " + ')}}
                                    </li>
                                ))}
                            </ul>
                        )
                    }
                `),!r.multiple&&Array.isArray(r.accessor)&&(d=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue<any>()",r.key,r.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${x},
                    ${S},
                    ${n},
                    ${d}
                }
            `}},{canEdit:A,canShow:T,canCreate:a}=e!=null?e:{},k=A||T?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <div
                    style={{
                        display: "flex",
                        flexDirection: "row",
                        flexWrap: "wrap",
                        gap: "4px",
                    }}
                >
                ${T?g`
                    <button
                        onClick={() => {
                            show("${e.name}", getValue() as string);
                        }}
                    >
                        Show
                    </button>
                    `:""}
                    ${A?g`
                            <button
                            onClick={() => {
                                edit("${e.name}", getValue() as string);
                            }}
                        >
                            Edit
                        </button>
                    `:""}
                </div>
            );
        },
    },
        `:"",R=t.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":case"richtext":return o(r);case"email":return b(r);case"image":return v(r);case"date":return w(r);case"boolean":return I(r);case"url":return h(r);case"relation":return $(r);default:return}});return B(c),g`
    ${_(c)}
    
    export const ${s}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...R,k].filter(Boolean).join(",")}
        ], []);

        ${A||T?g`
        const { ${A?"edit,":""} ${T?"show,":""} ${a?"create,":""} } = useNavigation();
        `:""}

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                tableQueryResult: { data: tableData },
            },
            getState,
            setPageIndex,
            getCanPreviousPage,
            getPageCount,
            getCanNextPage,
            nextPage,
            previousPage,
            setPageSize,
            getColumn,
        } = useTable({
            columns,
            ${i?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${f}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${m.join(", ")}
            },
        }));

        return (
            <div style={{ padding: "16px" }}>
            <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
                <h1>${y((D=e.label)!=null?D:e.name)}</h1>
                ${a?g`<button onClick={() => create("${e.name}")}>Create</button>`:""}
            </div>
                <div style={{ maxWidth: "100%", overflowY: "scroll" }}>
                    <table>
                        <thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </th>
                                    ))}
                                </tr>
                            ))}
                        </thead>
                        <tbody>
                            {getRowModel().rows.map((row) => (
                                <tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </td>
                                    ))}
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
                <div style={{ marginTop: "12px" }}>
                    <button
                        onClick={() => setPageIndex(0)}
                        disabled={!getCanPreviousPage()}
                    >
                        {"<<"}
                    </button>
                    <button
                        onClick={() => previousPage()}
                        disabled={!getCanPreviousPage()}
                    >
                        {"<"}
                    </button>
                    <button onClick={() => nextPage()} disabled={!getCanNextPage()}>
                        {">"}
                    </button>
                    <button
                        onClick={() => setPageIndex(getPageCount() - 1)}
                        disabled={!getCanNextPage()}
                    >
                        {">>"}
                    </button>
                    <span>
                        Page
                        <strong>
                            {getState().pagination.pageIndex + 1} of{" "}
                            {getPageCount()}
                        </strong>
                    </span>
                    <span>
                        | Go to page:
                        <input
                            type="number"
                            defaultValue={getState().pagination.pageIndex + 1}
                            onChange={(e) => {
                                const page = e.target.value
                                    ? Number(e.target.value) - 1
                                    : 0;
                                setPageIndex(page);
                            }}
                        />
                    </span>{" "}
                    <select
                        value={getState().pagination.pageSize}
                        onChange={(e) => {
                            setPageSize(Number(e.target.value));
                        }}
                    >
                        {[10, 20, 30, 40, 50].map((pageSize) => (
                            <option key={pageSize} value={pageSize}>
                                Show {pageSize}
                            </option>
                        ))}
                    </select>
                </div>
            </div>   
        );
    };
    `},Ce=q({type:"list",additionalScope:[["@pankod/refine-react-table","RefineReactTable",Or]],codeViewerComponent:Z,loadingComponent:W,errorComponent:U,renderer:nr});import*as jr from"@pankod/refine-core";import*as zr from"@pankod/refine-react-hook-form";var or=({resource:e,fields:t,isCustomPage:i})=>{var h,I,w;let s=z((h=e.label)!=null?h:e.name,"create"),p=[["React","react",!0],["useNavigation","@pankod/refine-core"],["useForm","@pankod/refine-react-hook-form"]],u=t.filter(o=>(o==null?void 0:o.relation)&&!(o!=null&&o.fieldable)&&(o==null?void 0:o.resource)).filter(Boolean).map(o=>{if((o==null?void 0:o.relation)&&!o.fieldable&&o.resource)return p.push(["useSelect","@pankod/refine-core"]),`
                const { options: ${F(o.key,"Options")} } =
                useSelect({
                    resource: "${o.resource.name}",
                    ${ee(o)}
                });
            `}).filter(Boolean),f=o=>{if(o.relation&&o.resource){p.push(["useSelect","@pankod/refine-core"]);let A=F(o.key,"Options");return g`
            <label>
                <span style={{ marginRight: "8px" }}>
                    ${y(o.key)}
                </span>
                <select
                    placeholder="Select ${E(o.resource.name)}"
                    {...register("${V(o.key,void 0,o.accessor)}", {
                        required: ${o.multiple?"false":'"This field is required"'},
                    })}
                >
                    {${A}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </select>
                <span style={{ color: "red" }}>
                    {${l("(errors as any)",o.key,o.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},m=o=>{if(o.type==="text"||o.type==="url"||o.type==="email"||o.type==="number"||o.type==="date"||o.type==="richtext"){if(J(o.key)||o.multiple)return;let A=o.type==="richtext"?"textarea":"input";return g`
                <label>
                    <span style={{ marginRight: "8px" }}>
                        ${y(o.key)}
                    </span>
                    <${A}
                        ${o.type!=="date"&&o.type!=="richtext"?`type="${o.type}"`:""}
                        ${A==="textarea"?`
                            rows={5}
                            cols={33}
                            style={{ verticalAlign: "top" }}
                        `:""}
                        {...register("${V(o.key,void 0,o.accessor)}", {
                            required: "This field is required",
                        })}

                    />
                    <span style={{ color: "red" }}>
                        {${l("(errors as any)",o.key,o.accessor,!1)}?.message as string}
                    </span>
                </label>
            `}},$=o=>{if(o.type==="boolean")return o.multiple?void 0:g`
                <label>
                    <span style={{ marginRight: "8px" }}>
                        ${y(o.key)}
                    </span>
                    <input
                        type="checkbox"
                        {...register("${V(o.key,void 0,o.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <span style={{ color: "red" }}>
                        {${l("errors",o.key,o.accessor,!1)}?.message as string}
                    </span>
                </label>
            `},v=t.map(o=>{switch(o==null?void 0:o.type){case"text":case"number":case"email":case"url":case"richtext":case"date":return m(o);case"boolean":return $(o);case"relation":return f(o);default:return}}),b=!!e.list;return B(p),g`
    ${_(p)}
    
    export const ${s} = () => {
        ${b?`
        const { list } = useNavigation();
        `:""}
        const {
            refineCore: { onFinish, formLoading },
            register,
            handleSubmit,
            resetField,
            formState: { errors },
        } = useForm(
            ${i?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${u}

        return (
            <div style={{ padding: "16px" }}>
                <div style={{ display: "flex", justifyContent: ${b?'"space-between"':'"flex-start"'} }}>
                    <h1>
                        ${y(E((I=e.label)!=null?I:e.name)+" Create")}
                    </h1>
                    ${b?g`
                            <div>
                        <button
                                onClick={() => {
                                    list("${e.name}");
                                }}
                        >
                            ${y(O((w=e.label)!=null?w:e.name)+" List")}
                        </button>
                        </div>
                    `:""}
                </div>
                <form onSubmit={handleSubmit(onFinish)}>
                    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
                        ${v.join("")}
                        <div>
                            <input type="submit" value="Save" />
                        </div>
                    </div>
                </form>
            </div>
        );
    };
    `},Fe=q({type:"create",additionalScope:[["@pankod/refine-core","RefineCore",jr],["@pankod/refine-react-hook-form","RefineReactHookForm",zr]],codeViewerComponent:Z,loadingComponent:W,errorComponent:U,renderer:or});import*as Hr from"@pankod/refine-core";import*as Kr from"@pankod/refine-react-hook-form";var sr=({resource:e,fields:t,isCustomPage:i,id:s})=>{var w,o,A,T;let p=z((w=e.label)!=null?w:e.name,"edit"),c=F((o=e.label)!=null?o:e.name,"Data"),u=[["React","react",!0],["useNavigation","@pankod/refine-core"],["useForm","@pankod/refine-react-hook-form"]],m=t.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource){u.push(["useSelect","@pankod/refine-core"]);let k=l(c,a.key,a.accessor,!1);return a.multiple&&a.accessor&&(k=`${l(c,a.key)}?.map((item: any) => ${l("item",void 0,a.accessor)})`),`
                const { options: ${F(a.key,"Options")} } =
                useSelect({
                    resource: "${a.resource.name}",
                    defaultValue: ${k},
                    ${ee(a)}
                });

                React.useEffect(() => {
                    resetField("${V(a.key,void 0,a.accessor)}");
                }, [${F(a.key,"Options")}]);
            `}}).filter(Boolean),$=a=>{if(a.relation&&a.resource){u.push(["useSelect","@pankod/refine-core"]);let k=F(a.key,"Options");return g`
            <label>
                <span style={{ marginRight: "8px" }}>${y(a.key)}</span>
                <select
                    placeholder="Select ${E(a.resource.name)}"
                    {...register("${V(a.key,void 0,a.accessor)}", {
                        required: ${a.multiple?"false":'"This field is required"'},
                    })}
                >
                    {${k}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </select>
                <span style={{ color: "red" }}>
                    {${l("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},v=a=>{if(a.type==="text"||a.type==="url"||a.type==="email"||a.type==="number"||a.type==="date"||a.type==="richtext"){if(a.multiple){let R=V(a.key,"${index}",a.accessor),N=l(l("(errors as any)",a.key,void 0,!1)+"?.[index]",void 0,a.accessor);return`
                    <>
                        {${l(c,a.key)}?.map((item: any, index: number) => (
                            <label key={index}>
                                <span style={{ marginRight: "8px" }}>
                                    ${y(a.key)} #{index + 1}
                                </span>
                                <input ${a.type!=="richtext"?`
                                type="${a.type!=="date"?a.type:"text"}"
                                `:""} {...register(\`${R}\`, { required: "This field is required", })} />
                                <span style={{color: "red"}}>
                                {${l(N,"message")} as string}
                                </span>
                            </label>
                        ))}
                    </>
                `}let k=a.type==="richtext"?"textarea":"input";return g`
            <label>
                <span style={{ marginRight: "8px" }}>${y(a.key)}</span>
                <${k}
                ${J(a.key)?"disabled":""}
                ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                ${k==="textarea"?`
                    rows={5}
                    cols={33}
                    style={{ verticalAlign: "top" }}
                `:""}
                {...register("${V(a.key,void 0,a.accessor)}", {
                    required: "This field is required",
                })}
                />
                <span style={{ color: "red" }}>
                {${l("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},b=a=>{if(a.type==="boolean"){if(a.multiple){let k=V(a.key,void 0,a.accessor),R=l("(errors as any)",a.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${l(c,a.key)}?.map((item: any, index: number) => (
                            <label key={index}>
                            <span style={{ marginRight: "8px" }}>
                            ${y(a.key)} #{index + 1}
                            </span>
                            <input
                                type="checkbox"
                                {...register(\`${k}.\${index}\`, {
                                    required: "This field is required",
                                })}
                            />
                            <span style={{ color: "red" }}>
                                {${R}?.message as string}
                            </span>
                        ))}
                    </>
                `}return g`
            <label>
                <span style={{ marginRight: "8px" }}>${y(a.key)}</span>
                <input type="checkbox" {...register("${V(a.key,void 0,a.accessor)}", {
                    required: "This field is required",
                })} />
                <span style={{ color: "red" }}>
                    {${l("errors",a.key,a.accessor,!1)}?.message as string}
                </span>
            </label>
            `}},h=t.map(a=>{switch(a==null?void 0:a.type){case"text":case"number":case"email":case"url":case"richtext":case"date":return v(a);case"boolean":return b(a);case"relation":return $(a);default:return}}),I=!!e.list;return B(u),g`
    ${_(u)}
    
    export const ${p} = () => {
        ${I?`
        const { list } = useNavigation();
        `:""}
        const {
            refineCore: { onFinish, formLoading, queryResult },
            register,
            handleSubmit,
            resetField,
            formState: { errors },
        } = useForm(
            ${i?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${s},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${c} = queryResult?.data?.data;
    
        ${m}

        return (
            <div style={{ padding: "16px" }}>
                <div style={{ display: "flex", justifyContent: ${I?'"space-between"':'"flex-start"'} }}>
                    <h1>
                        ${y(E((A=e.label)!=null?A:e.name)+" Edit")}
                    </h1>
                    ${I?g`
                    <div>
                        <button
                                onClick={() => {
                                    list("${e.name}");
                                }}
                        >
                            ${y(O((T=e.label)!=null?T:e.name)+" List")}
                        </button>
                    </div>
                    `:""}
                </div>
                <form onSubmit={handleSubmit(onFinish)}>
                    <div style={{ display: "flex", flexDirection: "column", gap: "8px" }}>
                        ${h.join("")}
                        <div>
                            <input type="submit" value="Save" />
                        </div>
                    </div>
                </form>
            </div>
        );
    };
    `},Ae=q({type:"edit",additionalScope:[["@pankod/refine-core","RefineCore",Hr],["@pankod/refine-react-hook-form","RefineReactHookForm",Kr]],codeViewerComponent:Z,loadingComponent:W,errorComponent:U,renderer:sr});var rs=({action:e,id:t,...i})=>{let{useParams:s}=Mr(),{action:p,id:c}=s();switch(e!=null?e:p){case"show":return se.createElement(ve,{...i,id:t!=null?t:c});case"create":return se.createElement(Fe,{...i,id:t!=null?t:c});case"edit":return se.createElement(Ae,{...i,id:t!=null?t:c});default:return se.createElement(Ce,{...i,id:t!=null?t:c})}};export{Fe as HeadlessCreateInferencer,or as HeadlessCreateRenderer,Ae as HeadlessEditInferencer,sr as HeadlessEditRenderer,rs as HeadlessInferencer,Ce as HeadlessListInferencer,nr as HeadlessListRenderer,ve as HeadlessShowInferencer,tr as HeadlessShowRenderer};
//# sourceMappingURL=headless.js.map