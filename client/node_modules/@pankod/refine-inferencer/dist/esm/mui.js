import oe from"react";import{useRouterContext as Qr}from"@pankod/refine-core";import*as Ur from"@pankod/refine-mui";import M from"react";import{useResource as nr}from"@pankod/refine-core";var ur=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,se=(e,t)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];ur.test(e)&&i.unshift("url");let o=i.find(u=>u in t&&!!t[u]);if(o)return o==="firstName"&&"lastName"in t?["firstName","lastName"]:o};function ie(e,t,i){var u;if(t)return t;let o=i==null?void 0:i.find(s=>s.name===e);return(u=o==null?void 0:o.options)!=null&&u.dataProviderName?o.options.dataProviderName:"default"}var J=e=>{var t;return(t=e==null?void 0:e.options)==null?void 0:t.dataProviderName};var ce=e=>{let t=[...e].filter(Boolean).sort((i,o)=>(o.priority||0)-(i.priority||0))[0];return t||null};import pr from"prettier/standalone";import mr from"prettier/parser-typescript";var ue=e=>{try{return pr.format(e,{parser:"typescript",plugins:[mr],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),e}};var pe=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var me=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Se=(e,t)=>{let i=me.test(e),o=typeof t=="string"||typeof t=="number",u=Array.isArray(t)&&t.every(s=>typeof s=="string"||typeof s=="number");return i&&o||i&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var E=e=>e.replace(me,"");var f=e=>E(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(p=>p.charAt(0).toUpperCase()+p.slice(1)).join(" ");var le=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Re=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,lr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,dr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,de=(e,t={})=>{let i=e.matchAll(Re),o=new Set;for(let u of i){let[,s,p,y,d]=u;if(d in t){let $=t[d];if(d==="react")continue;s&&o.add(`const { default: ${s} } = ${$};`),p&&o.add(`const${p.replace(dr,"$1: $3$4")} = ${$};`),y&&o.add(`const ${y} = ${$};`)}}return pe(`
    ${Array.from(o).join(`
`)}
    ${e.replace(Re,"").replace(lr,"")}
    `)};import te from"pluralize";var ye=(e,t)=>e?t.find(o=>{let u=E(e.key);return o.name===u||o.name===(te.isPlural(u)?u:te.plural(u))||o.name===(te.isSingular(u)?u:te.singular(u))}):void 0;import yr from"pluralize";var V=(e,t,i="Inferred")=>{let o=e.replace(/[^a-zA-Z0-9]/g," "),u=yr.singular(o),p=f(u).replace(/ /g,"")||i,y=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(p)?`${p}${y}`:`${y}${p}`};var fr=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",I=(e,...t)=>e.reduce((o,u,s)=>`${o}${u}${fr(t[s])}`,"").trim();var fe=(e,t)=>`
    ${e!=null?e:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var ge=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var gr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,he=e=>gr.test(e);function ke(e,t,i){let o=`${e}`;return t&&(o+="?.",he(t)?o+=t:o+=`['${t}']`),i&&(o+="?.",he(i)?o+=i:o+=`['${i}']`),o}function hr(e,t,i){return(i!=null?i:[]).map(u=>ke(e,t,u))}var m=(e,t,i,o=' + " " + ')=>Array.isArray(i)?o?hr(e,t,i).join(o):ke(e,t,i[0]):ke(e,t,i),B=(e,t,i)=>{let o=e;return t&&(o+=`.${t}`),i&&(Array.isArray(i)?o+=`.${i[0]}`:o+=`.${i}`),o};var W=e=>{let t=e.reduce((o,[u,s,p])=>(o[s]||(o[s]=[]),o[s].includes(u)||(p?o[s].push([u,!0]):o[s].push(u)),o),{});return Object.entries(t).map(([o,u])=>{let s=u.find($=>Array.isArray($)&&$[1]),p=u.filter($=>typeof $=="string"),y=s?`${s[0]}`:"",d=p.length?`{ ${p.join(", ")} }`:"";return`import ${y}${y&&d?", ":""}${d} from "${o}";`})};import Le from"pluralize";var K=(e="")=>Le.isSingular(e)?e:Le.singular(e);import Ne from"pluralize";var Z=(e="")=>Ne.isPlural(e)?e:Ne.plural(e);var kr=/^id$/i,z=e=>kr.test(e);var O=e=>{};var R=(e,t="")=>{if(Number.isInteger(Number(e)))return t.charAt(0).toLowerCase()+t.slice(1)+e;let o=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=f(o).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Pe=e=>{let t=(i,o,u,s=t)=>{let p=e.map(d=>d(i,o,u,s));return ce(p)};return t};var Be=e=>(i,o,u,s,p)=>e.reduce((y,d)=>d(y,o,u,s,p),i);var Ee=(e,t,i,o)=>{let u=Array.isArray(t),s=Array.isArray(t)&&t.every(p=>typeof p=="string"||typeof p=="number");if(u){if(!s){let y=o(e,t[0],i,o);return y?{...y,key:e,multiple:!0,priority:1}:!1}let p=o(e,t[0],i,o)||{type:"string"};return{key:e,multiple:!0,priority:1,type:p==null?void 0:p.type}}return!1};var Ve=(e,t)=>typeof t=="boolean"?{key:e,type:"boolean"}:!1;import De from"dayjs";var $r=/(_at|_on|At|On|AT|ON)(\[\])?$/,Me=(e,t)=>{let i=$r.test(e)&&De(t).isValid(),o=typeof t=="string"&&De(t).isValid(),u=typeof t=="string"&&t.length>4;return i||o&&u?{key:e,type:"date",priority:1}:!1};var Ir=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,We=(e,t)=>typeof t=="string"&&Ir.test(t)?{key:e,type:"email",priority:1}:!1;var xr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,Oe=(e,t)=>typeof t=="string"&&xr.test(t)?{key:e,type:"image",priority:2}:!1;var je=(e,t)=>typeof t>"u"||t===null?null:!1;var _e=(e,t)=>typeof t=="number"?{key:e,type:"number"}:!1;var br=/id$/i,Ge=(e,t,i,o)=>{let u=t!==null,s=!Array.isArray(t);if(u&&s&&typeof t=="object"){if(Object.keys(t).length===1&&br.test(Object.keys(t)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let d=se(e,t);if((d?d.length>0:!1)&&d){let b=d&&Array.isArray(d)?d[0]:d,v=o(b,t[b],t,o);if(v){let g=Array.isArray(d)?d.map(c=>v.accessor?`${c}.${Array.isArray(v.accessor)?v.accessor[0]:v.accessor}`:c):v.accessor?Array.isArray(v.accessor)?`${d}.${v.accessor[0]}`:`${d}.${v.accessor}`:d;return{...v,fieldable:!0,key:e,accessor:g,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var He=(e,t)=>typeof t=="string"&&t.length>100?{key:e,type:"richtext",priority:1}:!1;var ze=(e,t)=>typeof t=="string"?{key:e,type:"text"}:!1;var vr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,qe=(e,t)=>typeof t=="string"&&vr.test(t)?{key:e,type:"url",priority:1}:!1;var Ue=[Ee,Ve,Me,We,Oe,je,_e,Ge,Se,He,ze,qe];var Ke=(e,t,i,o)=>e.map(s=>{if(!s.relation&&(s.type==="text"||s.type==="richtext"||s.type==="number")&&!s.canRelation){let p=/^[a-z0-9-]+$/,y=g=>p.test(`${g}`),d=s.key.toLowerCase()!=="id";return!(!s.accessor||typeof s.accessor=="string")||!d?s:(s.multiple?o[s.key]:[o[s.key]]).every(g=>y(s.accessor?g[s.accessor]:g))?{...s,canRelation:!0}:s}return s});var Cr=/(image|photo|avatar|cover|thumbnail|icon)/i,Ze=e=>e.map(i=>i.type==="url"&&Cr.test(i.key)?{...i,type:"image"}:i);var Xe=(e,t)=>e.map(o=>{let u=ye(o,t);return u?{...o,relation:!0,type:"relation",resource:u}:o});var Ye=(e,t,i,o,u)=>e.map(p=>{if(p.relation&&p.type==="relation"&&!p.resource){let y=p.accessor?o[p.key][p.accessor]:o[p.key],d=u(p.key,y,o,u);if(d&&d.type!=="relation")return{...p,fieldable:!0,relation:!1,type:d.type,canRelation:!0}}return p});var Je=[Ze,Xe,Ye,Ke];import Q,{useEffect as Fr}from"react";import Ar,{defaultProps as Tr}from"prism-react-renderer";import wr from"prism-react-renderer/themes/vsDark";var $e=({code:e,wrapperProps:t})=>(Fr(()=>{var o;let i=document.createElement("style");i.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(o=document.getElementById("code-highlight"))==null||o.appendChild(i)},[]),Q.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},Q.createElement(Ar,{...Tr,theme:wr,code:e,language:"tsx"},({className:i,style:o,tokens:u,getLineProps:s,getTokenProps:p})=>Q.createElement("pre",{className:i,style:{...o,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((y,d)=>Q.createElement("div",{key:d,...s({line:y,key:d})},y.map(($,b)=>Q.createElement("span",{key:b,...p({token:$,key:b})}))))))));import D from"react";import*as Sr from"@pankod/refine-core";import{LivePreview as Rr,LiveProvider as Lr}from"@aliemir/react-live";var Qe=[["react","React",D],["@pankod/refine-core","RefineCore",Sr]],Ie=D.createContext({}),xe=({fetchError:e,code:t,additionalScope:i,errorComponent:o})=>{var y;let u=(y=t&&le(de(t,[...Qe,...i!=null?i:[]].reduce((d,[$,b,v,g])=>g?d:{...d,[$]:b},{}))))!=null?y:"",s=D.useMemo(()=>({React:D,...D,...[...Qe,...i!=null?i:[]].reduce((d,[$,b,v])=>({...d,[b]:v}),{})}),[i]),p=D.useMemo(()=>()=>{let{error:$}=D.useContext(Ie);return o?D.createElement(o,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[o,e]);return D.createElement(Lr,{Context:Ie,code:u,scope:s,noInline:!0},!e&&D.createElement(Rr,{Context:Ie}),D.createElement(p,null))};import X from"react";import{useDataProvider as Nr,useResource as Pr}from"@pankod/refine-core";var er=(e,t,i)=>{let{resource:o,resourceName:u,id:s,resources:p}=Pr({resourceNameOrRouteName:t}),y=i!=null?i:s,d=Nr(),[$,b]=X.useState(void 0),[v,g]=X.useState(void 0),[c,w]=X.useState(!0),[l,a]=X.useState(!1),F=X.useCallback(async x=>{var h,N;let C=(h=J(o))!=null?h:ie(u,void 0,p),n=d(C);a(!0),b(void 0);try{if(e==="list"||e==="create"){let k=(N=(await n.getList({resource:u})).data)==null?void 0:N[0];k||b(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),g(k),setTimeout(()=>{a(!1)},500)}if((e==="edit"||e==="show")&&x){let k=(await n.getOne({resource:u,id:x})).data;k||b(`<p>No records/data found for resource "${u}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),g(k),setTimeout(()=>{a(!1)},500)}}catch(r){console.warn("An error occured while fetching the resource data. Please check the error message below:",r),b(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${u}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{a(!1)},500)}},[e,d,o,u,p]);return X.useEffect(()=>{w(!1),!l&&!v&&F(y)},[F,y]),{data:v,loading:l,initial:c,error:$}};import ee from"react";import{useDataProvider as Br}from"@pankod/refine-core";import{get as rr}from"lodash";var tr=({record:e,fields:t,infer:i})=>{let o=Br(),[u,s]=ee.useState([]),[p,y]=ee.useState(!0),[d,$]=ee.useState(!1),b=ee.useCallback(async v=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let g=[];$(!0);try{let c=v.map(async l=>{if(l&&(l.relation||l.canRelation)&&e){let a=J(l.resource),F=o(a),x=Array.isArray(l.accessor)?void 0:l.multiple?e[l.key].map(C=>l.accessor?rr(C,l.accessor):C)[0]:l.accessor?rr(e[l.key],l.accessor):e[l.key];if(x&&l.resource)try{let{data:C}=await F.getOne({resource:l.resource.name,id:x});g.push({status:"success",resource:l.resource.name,field:l.key});let n=i("__",C,{},i);return{...l,relationInfer:n}}catch{return g.push({status:"error",resource:l.resource.name,field:l.key}),{...l,relationInfer:null}}if(x){let C,n;try{let{data:r}=await F.getOne({resource:Z(E(l.key)),id:x});g.push({status:"success",resource:Z(E(l.key)),field:l.key}),C=r,n=!0}catch{g.push({status:"error",resource:Z(E(l.key)),field:l.key});try{let{data:k}=await F.getOne({resource:K(E(l.key)),id:x});g.push({status:"success",resource:K(E(l.key)),field:l.key}),C=k,n=!1}catch{return g.push({status:"error",resource:K(E(l.key)),field:l.key}),{...l,relationInfer:null}}}let h=i("__",C,{},i),N=E(l.key);return{...l,relation:!0,type:"relation",resource:{name:n?Z(N):K(N)},fieldable:!1,canRelation:void 0,relationInfer:h}}return{...l,relationInfer:null}}return l}),w=await Promise.all(c);s(w.filter(l=>l)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${g.length} attempts and succeeded with ${g.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[o,e]);return ee.useEffect(()=>{y(!1),!d&&t&&t.length>0&&u.length===0&&b(t)},[b,d,t,b]),{fields:u,loading:d,initial:p}};var j=({type:e,additionalScope:t=[],customElements:i=[],fieldTransformers:o=[],renderer:u,loadingComponent:s,errorComponent:p,codeViewerComponent:y})=>{let d=Pe([...Ue,...i]),$=Be([...Je,...o]),b=({resourceName:g,fieldTransformer:c,id:w})=>{var L;let{resource:l,resources:a}=nr({resourceNameOrRouteName:g}),{resource:F}=nr(),{data:x,loading:C,initial:n,error:h}=er(e,g!=null?g:l==null?void 0:l.name,w),N=M.useMemo(()=>{if(x){let A=Object.keys(x).map(q=>{let U=x[q];return d(q,U,x,d)}).filter(Boolean),P=$(A,a,l,x,d);return c?P.flatMap(q=>{let U=c(q);return U?[U]:[]}):P}return[]},[x,a,l,c]),{fields:r,loading:k}=tr({record:x,fields:N,infer:d}),S=M.useMemo(()=>!C&&!k&&!n?u({resource:l,resources:a,fields:r,infer:d,isCustomPage:l.name!==F.name,id:w}):"",[l,a,r,C,k]);return M.createElement(M.Fragment,null,s&&(C||k)&&M.createElement(s,null),!C&&!k&&M.createElement(M.Fragment,null,M.createElement(xe,{fetchError:!C&&h?h:!C&&!n&&!x,code:fe(S,V((L=l.label)!=null?L:l.name,e)),errorComponent:p,additionalScope:t}),y&&M.createElement(y,{code:ge(S),loading:C||k})))};return({name:g,resource:c,fieldTransformer:w,id:l})=>M.createElement(b,{fieldTransformer:w,resourceName:c!=null?c:g,key:c!=null?c:g,id:l})};import ne from"react";import{Alert as Er,AlertTitle as Vr,Box as Dr}from"@pankod/refine-mui";var _=({error:e})=>e?ne.createElement(Dr,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"200px"}},ne.createElement(Er,{severity:"error"},ne.createElement(Vr,null,"Error"),ne.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}}))):null;import or from"react";import{Box as Mr,CircularProgress as Wr}from"@pankod/refine-mui";var G=()=>or.createElement(Mr,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px"}},or.createElement(Wr,{size:"large"}));import T from"react";import{Button as be,Box as ve,Modal as Or,IconButton as jr}from"@pankod/refine-mui";import{IconCode as _r,IconMessageCircle as Gr,IconX as Hr,IconCopy as zr,IconCheck as qr}from"@tabler/icons";var H=({code:e,loading:t})=>{let i=T.useMemo(()=>ue(e!=null?e:""),[e]),o=T.useRef(null),[u,s]=T.useState(!1),[p,y]=T.useState(!1);if(t)return null;let d=()=>{var $,b,v,g;($=o==null?void 0:o.current)==null||$.select(),(b=o==null?void 0:o.current)==null||b.setSelectionRange(0,99999),typeof navigator<"u"&&(navigator.clipboard.writeText((g=(v=o==null?void 0:o.current)==null?void 0:v.value)!=null?g:""),y(!0),setTimeout(()=>{y(!1)},1e3))};return i?T.createElement(T.Fragment,null,T.createElement(ve,{sx:{position:"fixed",bottom:12,right:60}},T.createElement(ve,{sx:{display:"flex",gap:2}},T.createElement(be,{variant:"contained",color:"primary",onClick:()=>s(!0),startIcon:T.createElement(_r,{size:18}),sx:{whiteSpace:"nowrap"}},"Show Code"),T.createElement(be,{variant:"contained",color:"secondary",component:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046",startIcon:T.createElement(Gr,{size:18}),sx:{whiteSpace:"nowrap"}},"Give Feedback"))),T.createElement("div",{style:{height:"50px"}}),T.createElement(Or,{open:u,onClose:()=>s(!1)},T.createElement(ve,{sx:{position:"absolute",maxWidth:"800px",width:"100%",top:"50%",left:"50%",transform:"translate(-50%, -50%)",boxShadow:24}},T.createElement(jr,{onClick:()=>s(!1),disableRipple:!0,sx:{position:"absolute",right:0,top:0,height:56,width:56,display:"flex",alignItems:"center",justifyContent:"center"}},T.createElement(Hr,{size:18,style:{color:"#666b7a"}})),T.createElement($e,{code:i}),T.createElement("textarea",{ref:o,defaultValue:(i!=null?i:"").replace(/\\n/g,`\r
`),id:"code-input",style:{display:"none"}}),T.createElement("div",{style:{position:"absolute",bottom:12,right:12}},T.createElement(be,{key:"copy",sx:{textTransform:"capitalize",width:100},startIcon:p?T.createElement(qr,{size:18,style:{color:"green"}}):T.createElement(zr,{size:18}),color:"inherit",variant:"contained",onClick:d},p?"Copied":"Copy"))))):null};var ar=({resource:e,fields:t,isCustomPage:i,id:o})=>{var C;let u=V((C=e.label)!=null?C:e.name,"show"),s="record",p=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-mui"],["Typography","@pankod/refine-mui"],["Stack","@pankod/refine-mui"]],d=t.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)).filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){if(n.multiple){p.push(["useMany","@pankod/refine-core"]);let h=m(s,n.key);return n.accessor&&(h=`${m(s,n.key)}?.map((item: any) => ${m("item",void 0,n.accessor)})`),`
                const { data: ${R(n.key,"Data")}, isLoading: ${R(n.key,"IsLoading")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${h} || [],
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
                `}return p.push(["useOne","@pankod/refine-core"]),`
                const { data: ${R(n.key,"Data")}, isLoading: ${R(n.key,"IsLoading")} } =
                useOne({
                    resource: "${n.resource.name}",
                    id: ${m(s,n.key,n.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
            `}}).filter(Boolean),$=n=>{if(n.relation&&n.resource){let h=R(n.key,"Data"),N=R(n.key,"IsLoading");return n.multiple?(p.push(["TagField","@pankod/refine-mui"]),I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                {${N} ? (
                    <>
                        Loading...
                    </>
                    ) : (
                    <>
                    ${(()=>{var r;if(n.relationInfer)if((r=n.relationInfer)!=null&&r.accessor){if(Array.isArray(n.relationInfer.accessor))return"Not Handled.";{let k=R(n.key),S=m(k,void 0,n.relationInfer.accessor);return`
                                        <Stack direction="row" spacing={1}>
                                            {${h}?.data?.map((${k}: any) => (
                                                <TagField key={${S}} value={${S}} />
                                            ))}
                                        </Stack>
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>

                {${N} ? (
                    <>Loading...</>
                ) : (
                    <>
                    ${(()=>{var r;return n.relationInfer?(r=n.relationInfer)!=null&&r.accessor?Array.isArray(n.relationInfer.accessor)?`{${m(`${h}?.data`,void 0,n.relationInfer.accessor,' + " " + ')}}`:`{${h}?.data?.${n.relationInfer.accessor}}`:`{${h}?.data}`:`{${h}?.data?.id}`})()}
                    </>
                )}
                `}},b=n=>{if(n.type==="text"){if(p.push(["TextFieldComponent as TextField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <TextField value={${m(s,n.key,n.accessor)}} />
            `}},v=n=>{if(n.type==="image"){if(n.multiple){let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${m(s,n.key,n.accessor," + ")}} />
                `}},g=n=>{if(n.type==="email"){if(p.push(["EmailField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <EmailField value={${m(s,n.key,n.accessor," + ")}} />
            `}},c=n=>{if(n.type==="url"){if(p.push(["UrlField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <UrlField value={${m(s,n.key,n.accessor," + ")}} />
            `}},w=n=>{if(n.type==="boolean"){if(p.push(["BooleanField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any, index: number) => (
                    <TagField value={${h}} key={index} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <BooleanField value={${m(s,n.key,n.accessor," && ")}} />
            `}},l=n=>{if(n.type==="date"){if(p.push(["DateField","@pankod/refine-mui"]),n.multiple){let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <DateField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <DateField value={${m(s,n.key,n.accessor," + ' ' + ")}} />
            `}},a=n=>{if(n.type==="richtext")return p.push(["MarkdownField","@pankod/refine-mui"]),I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <MarkdownField value={${m(s,n.key,n.accessor,' + " " + ')}} />
            `},F=n=>{if(n.type==="number"){if(p.push(["NumberField","@pankod/refine-mui"]),n.multiple){p.push(["TagField","@pankod/refine-mui"]);let h=m("item",void 0,n.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${m(s,n.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(n.key)}
                </Typography>
                <NumberField value={${m(s,n.key,n.accessor,' + " " + ')} ?? ""} />
            `}},x=t.map(n=>{switch(n==null?void 0:n.type){case"text":return b(n);case"number":return F(n);case"richtext":return a(n);case"email":return g(n);case"image":return v(n);case"date":return l(n);case"boolean":return w(n);case"url":return c(n);case"relation":return $(n);default:return}});return O(p),I`
    ${W(p)}

    export const ${u} = () => {
        const { queryResult } = useShow(${i?`{ 
                    resource: "${e.name}", 
                    id: ${o}
                }`:""});
        const { data, isLoading } = queryResult;
    
        const ${s} = data?.data;
    
        ${d}

        return (
            <Show isLoading={isLoading}>
                <Stack gap={1}>
                    ${x.join("")}
                </Stack>
            </Show>
        );
    };
    `},Ce=j({type:"show",additionalScope:[["@pankod/refine-mui","RefineMui",Ur]],codeViewerComponent:H,loadingComponent:G,errorComponent:_,renderer:ar});import*as Kr from"@pankod/refine-mui";var sr=({resource:e,fields:t,isCustomPage:i})=>{var N;let o=V((N=e.label)!=null?N:e.name,"list"),u="dataGridProps?.rows",s=[["React","react",!0],["useDataGrid","@pankod/refine-mui"],["DataGrid","@pankod/refine-mui"],["GridColumns","@pankod/refine-mui"],["EditButton","@pankod/refine-mui"],["ShowButton","@pankod/refine-mui"],["DeleteButton","@pankod/refine-mui"],["List","@pankod/refine-mui"]],p=t.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),y=p.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){s.push(["useMany","@pankod/refine-core"]);let k="";return r.multiple?k=`[].concat(...(${u}?.map((item: any) => ${m("item",r.key,r.accessor,!1)}) ?? []))`:k=`${u}?.map((item: any) => ${m("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${R(r.key,"Data")}, isLoading: ${R(r.key,"IsLoading")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${k},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),d=p==null?void 0:p.map(r=>{if(r&&r.resource)return`${R(r.key,"Data")}?.data`}).filter(Boolean),$=r=>{var k,S;if(r.relation&&r.resource){let L=`${R(r.key,"Data")}?.data`,A=R(r.key,"IsLoading");if(Array.isArray(r.accessor))return;let P=`${A} ? <>Loading...</> : `,we=`field: "${r.key}"`,q=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",U=`headerName: "${f(r.key)}"`,Y="";if(r.multiple){s.push(["TagField","@pankod/refine-mui"]);let re="item";if(r!=null&&r.relationInfer){let ae=`${L}?.find((resourceItems) => resourceItems.id === ${m("item",void 0,r.accessor)})`;re=m(ae,void 0,(k=r==null?void 0:r.relationInfer)==null?void 0:k.accessor)}Y=`
                renderCell: function render({ value }) {
                    return ${P} (
                        <>
                            {${m("value",void 0)}?.map((item: any, index: number) => (
                                <TagField key={index} value={${re}} />
                            ))}
                        </>
                    )
                }
                `}else if(r!=null&&r.relationInfer){let re=`${L}?.find((item) => item.id === value)`,ae=m(re,void 0,(S=r==null?void 0:r.relationInfer)==null?void 0:S.accessor);Y=`
                    renderCell: function render({ value }) {
                        return ${P} ${ae};
                    }
                    `}else Y="";return`
                {
                    ${we},
                    ${U},${q}
                    minWidth: 300,${Y}
                }
            `}},b=r=>{if(r.type==="image"){let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <img src={${m("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} style={{ height: "50px", maxWidth: "100px" }} />
                    )
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <img src={${m("item",void 0,r.accessor," + ")}} key={index} style={{ height: "50px", maxWidth: "100px" }} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${L}
                    minWidth: 100,${A}
                }
            `}},v=r=>{if(r.type==="email"){s.push(["EmailField","@pankod/refine-mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
            renderCell: function render({ value }) {
                return (
                    <EmailField value={${m("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                )
            }
        `;return r.multiple&&(s.push(["TagField","@pankod/refine-mui"]),A=`
                renderCell: function render({ value }) {
                    return (
                        <>
                        {value?.map((item: any, index: number) => (
                            <TagField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                        ))}
                        </>
                    )
                }
            `),`
            {
                ${k},
                ${S},${L}
                minWidth: 250,${A}
            }
        `}},g=r=>{if(r.type==="url"){s.push(["UrlField","@pankod/refine-mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <UrlField value={${m("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    )
                }
            `;return r.multiple&&(s.push(["TagField","@pankod/refine-mui"]),A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: any) => (
                                <TagField value={${m("item",void 0,r.accessor," + ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${L}
                    minWidth: 250,${A}
                }
            `}},c=r=>{if(r!=null&&r.type){s.push(["Checkbox","@pankod/refine-mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <Checkbox checked={!!${m("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," && ")}} />
                    );
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <Checkbox checked={!!${m("item",void 0,r.accessor," && ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${L}
                    minWidth: 250,${A}
                }
            `}},w=r=>{if(r.type==="date"){s.push(["DateField","@pankod/refine-mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return <DateField value={value} />;
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <DateField value={${m("item",void 0,r.accessor,' + " " + ')}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${L}
                    minWidth: 250,${A}
                }
            `}},l=r=>{if((r==null?void 0:r.type)==="richtext"){s.push(["MarkdownField","@pankod/refine-mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return <MarkdownField value={(value ?? "").slice(0, 80) + "..."} />;
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <MarkdownField value={(${m("item",void 0,r.accessor,' + " " + ')}).slice(0, 80) + "..."} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${L}
                    minWidth: 250,${A}
                }
            `}},a=r=>{if(r&&(r.type==="text"||r.type==="number")){let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,L=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${m("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A="";if(r.multiple){s.push(["TagField","@pankod/refine-mui"]);let P=m("item",void 0,r.accessor,' + " " + ');A=`
                renderCell: function render({ row }) {
                    return (
                        <>
                            {(${m("row",r.key)})?.map((item: any) => (
                                <TagField value={${P}} key={${P}} />
                            ))}
                        </>
                    )
                }
                `}return!r.multiple&&Array.isArray(r.accessor)&&(A=`
                renderCell: function render({ row }) {
                    return (
                        <>{${m("row",r.key,r.accessor)}}</>
                    );
                }
                `),`
            {
                ${k},
                ${S},${L}${r.type==="number"?"type: 'number',":""}
                minWidth: ${z(r.key)?50:200},${A}
            }
            `}},{canEdit:F,canShow:x,canDelete:C}=e!=null?e:{};F&&s.push(["EditButton","@pankod/refine-mui"]),x&&s.push(["ShowButton","@pankod/refine-mui"]),C&&s.push(["DeleteButton","@pankod/refine-mui"]);let n=F||x||C?I`
            {
                field: "actions",
                headerName: "Actions",
                renderCell: function render({ row }) {
                    return (
                        <>
                            ${F?I`<EditButton hideText recordItemId={row.id} />`:""}
                            ${x?I`<ShowButton hideText recordItemId={row.id} />`:""}
                            ${C?I`<DeleteButton hideText recordItemId={row.id} />`:""}
                        </>
                    );
                },
                align: "center",
                headerAlign: "center",
                minWidth: 80,
            },
    `:"",h=t.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return a(r);case"richtext":return l(r);case"email":return v(r);case"image":return b(r);case"date":return w(r);case"boolean":return c(r);case"url":return g(r);case"relation":return $(r);default:return}});return O(s),I`
    ${W(s)}
    
    export const ${o} = () => {
        const { dataGridProps } = useDataGrid(
            ${i?`{ resource: "${e.name}" }`:""} 
        );
    
        ${y}

        const columns = React.useMemo<GridColumns<any>>(() => [
            ${[...h,n].filter(Boolean).join(`,\r
`)}
        ], [${d.join(",")}]);

        return (
            <List>
                <DataGrid {...dataGridProps} columns={columns} autoHeight />
            </List>
        );
    };
    `},Fe=j({type:"list",additionalScope:[["@pankod/refine-mui","RefineMui",Kr]],codeViewerComponent:H,loadingComponent:G,errorComponent:_,renderer:sr});import*as Zr from"@pankod/refine-mui";import*as Xr from"@pankod/refine-react-hook-form";var ir=({resource:e,fields:t,isCustomPage:i})=>{var g;let o=V((g=e.label)!=null?g:e.name,"create"),u=[["Create","@pankod/refine-mui"],["Box","@pankod/refine-mui"],["useForm","@pankod/refine-react-hook-form"]],p=t.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useAutocomplete","@pankod/refine-mui"]),`
                const { autocompleteProps: ${R(c.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${c.resource.name}",
                });
            `}).filter(Boolean),y=c=>{if(c.relation&&c.resource){u.push(["Autocomplete","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]);let w=R(c.key,"AutocompleteProps"),l=c.relationInfer&&c.relationInfer.accessor?typeof c.relationInfer.accessor=="string"?c.relationInfer.accessor:c.relationInfer.accessor[0]:"title",a=l.includes(".")||l.includes("[")||l.includes("]")||l.includes("-"),F=c.accessor?m("item",void 0,c.accessor,!1):"(item?.id ?? item)",x=c.accessor?m("value",void 0,c.accessor,!1):"(value?.id ?? value)",C=c.accessor?"value":c.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return I`
                <Controller
                    control={control}
                    name="${B(c.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${c.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"} 
                    render={({ field }) => (
                        <Autocomplete
                            {...${w}}
                            {...field}
                            ${c.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${C});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${w}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${F}?.toString(),
                                    )?.${a?`["${l}"]`:l} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option.id.toString() === ${x}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${f(c.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${m("(errors as any)",c.key,c.accessor,!1)}}
                                    helperText={${m("(errors as any)",c.key,c.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},d=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return z(c.key)||(u.push(["TextField","@pankod/refine-mui"]),c.multiple)?void 0:I`
                <TextField
                    {...register("${B(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                    error={!!${m("(errors as any)",c.key,c.accessor,!1)}}
                    helperText={${m("(errors as any)",c.key,c.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                    ${c.type==="richtext"?"multiline":""}
                    label="${f(c.key)}"
                    name="${B(c.key,void 0,c.accessor)}"
                />
            `},$=c=>{if(c.type==="boolean")return u.push(["Checkbox","@pankod/refine-mui"],["FormControlLabel","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]),c.multiple?void 0:I`
                <Controller
                    control={control}
                    name="${B(c.key,void 0,c.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${f(c.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `},b=c=>{if(c.type==="date"){let w=d(c);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.
                    
                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${w!=null?w:""}
                `}},v=t.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return d(c);case"date":return b(c);case"boolean":return $(c);case"relation":return y(c);default:return}});return O(u),I`
    ${W(u)}
    
    export const ${o} = () => {
        const {
            saveButtonProps,
            refineCore: { formLoading },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{ 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${p}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${v.join("")}
                </Box>
            </Create>
        );
    };
    `},Ae=j({type:"create",additionalScope:[["@pankod/refine-mui","RefineMui",Zr],["@pankod/refine-react-hook-form","RefineReactHookForm",Xr]],codeViewerComponent:H,loadingComponent:G,errorComponent:_,renderer:ir});import*as Yr from"@pankod/refine-mui";import*as Jr from"@pankod/refine-react-hook-form";var cr=({resource:e,fields:t,isCustomPage:i,id:o})=>{var w,l;let u=V((w=e.label)!=null?w:e.name,"edit"),s=R((l=e.label)!=null?l:e.name,"Data"),p=[["Edit","@pankod/refine-mui"],["Box","@pankod/refine-mui"],["useForm","@pankod/refine-react-hook-form"]],d=t.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource){p.push(["useAutocomplete","@pankod/refine-mui"]);let F=m(s,a.key,a.accessor,!1);return a.multiple&&a.accessor&&(F=`${m(s,a.key)}?.map((item: any) => ${m("item",void 0,a.accessor)})`),`
                const { autocompleteProps: ${R(a.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${a.resource.name}",
                    defaultValue: ${F},
                });
            `}}).filter(Boolean),$=a=>{if(a.relation&&a.resource){p.push(["Autocomplete","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]);let F=R(a.key,"AutocompleteProps"),x=a.relationInfer&&a.relationInfer.accessor?typeof a.relationInfer.accessor=="string"?a.relationInfer.accessor:a.relationInfer.accessor[0]:"title",C=x.includes(".")||x.includes("[")||x.includes("]")||x.includes("-"),n=a.accessor?m("item",void 0,a.accessor,!1):"(item?.id ?? item)",h=a.accessor?m("value",void 0,a.accessor,!1):"(value?.id ?? value)",N=a.accessor?"value":a.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return I`
                <Controller
                    control={control}
                    name="${B(a.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${a.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"} 
                    render={({ field }) => (
                        <Autocomplete
                            {...${F}}
                            {...field}
                            ${a.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${N});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${F}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${n}?.toString(),
                                    )?.${C?`["${x}"]`:x} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option?.id?.toString() === ${h}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${f(a.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${m("(errors as any)",a.key,a.accessor,!1)}}
                                    helperText={${m("(errors as any)",a.key,a.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},b=a=>{if(a.type==="text"||a.type==="url"||a.type==="email"||a.type==="number"||a.type==="date"||a.type==="richtext"){if(p.push(["TextField","@pankod/refine-mui"]),a.multiple){p.push(["Box","@pankod/refine-mui"]);let F=B(a.key,"${index}",a.accessor),x=m("(errors as any)",a.key,void 0,!1)+"?.[index]";return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${m(s,a.key)}?.map((item: any, index: number) => (
                            <TextField
                                key={index}
                                {...register(\`${F}\`, {
                                    required: "This field is required",
                                })}
                                error={!!${x}}
                                helperText={${x}?.message as string}
                                margin="normal"
                                fullWidth
                                InputLabelProps={{ shrink: true }}
                                ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                                ${a.type==="richtext"?"multiline":""}
                                label={\`${f(a.key)} \${index+1}\`}
                                name={\`${B(a.key,void 0,a.accessor)}.\${index}\`}
                            />
                        ))}
                    </Box>
                `}return I`
                <TextField
                    {...register("${B(a.key,void 0,a.accessor)}", {
                        required: "This field is required",
                    })}
                    error={!!${m("(errors as any)",a.key,a.accessor,!1)}}
                    helperText={${m("(errors as any)",a.key,a.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                    ${a.type==="richtext"?"multiline":""}
                    label="${f(a.key)}"
                    name="${B(a.key,void 0,a.accessor)}"
                    ${z(a.key)?"disabled":""}
                />
            `}},v=a=>{if(a.type==="boolean"){if(p.push(["Checkbox","@pankod/refine-mui"],["FormControlLabel","@pankod/refine-mui"],["Controller","@pankod/refine-react-hook-form"]),a.multiple){p.push(["Box","@pankod/refine-mui"]);let F=B(a.key,"${index}",a.accessor);return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${m(s,a.key)}?.map((item: any, index: number) => (
                            <Controller
                                key={index}
                                control={control}
                                name={\`${F}\`}
                                // eslint-disable-next-line
                                defaultValue={null as any}
                                render={({ field }) => (
                                    <FormControlLabel label={\`${f(a.key)} \${index+1}\`} control={
                                        <Checkbox
                                            {...field}
                                            checked={field.value}
                                            onChange={(event) => {
                                                field.onChange(event.target.checked);
                                            }}
                                        />
                                    } />
                                )}
                            />
                        ))}
                    </Box>
                `}return I`
                <Controller
                    control={control}
                    name="${B(a.key,void 0,a.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${f(a.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `}},g=a=>{if(a.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.
                    
                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${b(a)}
                `},c=t.map(a=>{switch(a==null?void 0:a.type){case"text":case"number":case"email":case"url":case"richtext":return b(a);case"date":return g(a);case"boolean":return v(a);case"relation":return $(a);default:return}});return O(p),I`
    ${W(p)}
    
    export const ${u} = () => {
        const {
            saveButtonProps,
            refineCore: { queryResult },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{ 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${o},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${s} = queryResult?.data?.data;
    
        ${d}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${c.join("")}
                </Box>
            </Edit>
        );
    };
    `},Te=j({type:"edit",additionalScope:[["@pankod/refine-mui","RefineMui",Yr],["@pankod/refine-react-hook-form","RefineReactHookForm",Jr]],codeViewerComponent:H,loadingComponent:G,errorComponent:_,renderer:cr});var ga=({action:e,id:t,...i})=>{let{useParams:o}=Qr(),{action:u,id:s}=o();switch(e!=null?e:u){case"show":return oe.createElement(Ce,{...i,id:t!=null?t:s});case"create":return oe.createElement(Ae,{...i,id:t!=null?t:s});case"edit":return oe.createElement(Te,{...i,id:t!=null?t:s});default:return oe.createElement(Fe,{...i,id:t!=null?t:s})}};export{Ae as MuiCreateInferencer,ir as MuiCreateRenderer,Te as MuiEditInferencer,cr as MuiEditRenderer,ga as MuiInferencer,Fe as MuiListInferencer,sr as MuiListRenderer,Ce as MuiShowInferencer,ar as MuiShowRenderer};
//# sourceMappingURL=mui.js.map