var Cr=Object.create;var pe=Object.defineProperty;var Tr=Object.getOwnPropertyDescriptor;var Ar=Object.getOwnPropertyNames;var vr=Object.getPrototypeOf,Rr=Object.prototype.hasOwnProperty;var wr=(r,t)=>{for(var i in t)pe(r,i,{get:t[i],enumerable:!0})},_e=(r,t,i,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let c of Ar(t))!Rr.call(r,c)&&c!==i&&pe(r,c,{get:()=>t[c],enumerable:!(s=Tr(t,c))||s.enumerable});return r};var R=(r,t,i)=>(i=r!=null?Cr(vr(r)):{},_e(t||!r||!r.__esModule?pe(i,"default",{value:r,enumerable:!0}):i,r)),Sr=r=>_e(pe({},"__esModule",{value:!0}),r);var Xr={};wr(Xr,{MantineCreateInferencer:()=>Ie,MantineCreateRenderer:()=>ze,MantineEditInferencer:()=>ke,MantineEditRenderer:()=>je,MantineInferencer:()=>Jr,MantineListInferencer:()=>ge,MantineListRenderer:()=>Ke,MantineShowInferencer:()=>ye,MantineShowRenderer:()=>Oe});module.exports=Sr(Xr);var ce=R(require("react")),Fr=require("@pankod/refine-core");var Hr=R(require("@pankod/refine-mantine"));var K=R(require("react")),Be=require("@pankod/refine-core");var Nr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,he=(r,t)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];Nr.test(r)&&i.unshift("url");let s=i.find(c=>c in t&&!!t[c]);if(s)return s==="firstName"&&"lastName"in t?["firstName","lastName"]:s};function $e(r,t,i){var c;if(t)return t;let s=i==null?void 0:i.find(o=>o.name===r);return(c=s==null?void 0:s.options)!=null&&c.dataProviderName?s.options.dataProviderName:"default"}var oe=r=>{var t;return(t=r==null?void 0:r.options)==null?void 0:t.dataProviderName};var xe=r=>{let t=[...r].filter(Boolean).sort((i,s)=>(s.priority||0)-(i.priority||0))[0];return t||null};var He=R(require("prettier/standalone")),Ue=R(require("prettier/parser-typescript")),be=r=>{try{return He.default.format(r,{parser:"typescript",plugins:[Ue.default],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),r}};var Fe=r=>r.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var Ce=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,We=(r,t)=>{let i=Ce.test(r),s=typeof t=="string"||typeof t=="number",c=Array.isArray(t)&&t.every(o=>typeof o=="string"||typeof o=="number");return i&&s||i&&c?{key:r,relation:!0,multiple:!!c,type:"relation",priority:1}:!1};var M=r=>r.replace(Ce,"");var I=r=>M(r).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(u=>u.charAt(0).toUpperCase()+u.slice(1)).join(" ");var Te=r=>r.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(c=>!c.trim().startsWith("export default")).join(`
`);var qe=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Vr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Lr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Ae=(r,t={})=>{let i=r.matchAll(qe),s=new Set;for(let c of i){let[,o,u,y,m]=c;if(m in t){let $=t[m];if(m==="react")continue;o&&s.add(`const { default: ${o} } = ${$};`),u&&s.add(`const${u.replace(Lr,"$1: $3$4")} = ${$};`),y&&s.add(`const ${y} = ${$};`)}}return Fe(`
    ${Array.from(s).join(`
`)}
    ${r.replace(qe,"").replace(Vr,"")}
    `)};var ae=R(require("pluralize"));var ve=(r,t)=>r?t.find(s=>{let c=M(r.key);return s.name===c||s.name===(ae.default.isPlural(c)?c:ae.default.plural(c))||s.name===(ae.default.isSingular(c)?c:ae.default.singular(c))}):void 0;var Ze=R(require("pluralize"));var O=(r,t,i="Inferred")=>{let s=r.replace(/[^a-zA-Z0-9]/g," "),c=Ze.default.singular(s),u=I(c).replace(/ /g,"")||i,y=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(u)?`${u}${y}`:`${y}${u}`};var Pr=r=>r?Array.isArray(r)?r.join(""):typeof r=="string"?r:typeof r=="object"||typeof r=="function"?r.toString():typeof r=="number"?String(r):typeof r=="boolean"&&r?"true":r:"",g=(r,...t)=>r.reduce((s,c,o)=>`${s}${c}${Pr(t[o])}`,"").trim();var Re=(r,t)=>`
    ${r!=null?r:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var we=r=>r==null?void 0:r.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var Gr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Se=r=>Gr.test(r);function Ne(r,t,i){let s=`${r}`;return t&&(s+="?.",Se(t)?s+=t:s+=`['${t}']`),i&&(s+="?.",Se(i)?s+=i:s+=`['${i}']`),s}function Mr(r,t,i){return(i!=null?i:[]).map(c=>Ne(r,t,c))}var l=(r,t,i,s=' + " " + ')=>Array.isArray(i)?s?Mr(r,t,i).join(s):Ne(r,t,i[0]):Ne(r,t,i),V=(r,t,i)=>{let s=r;return t&&(s+=`.${t}`),i&&(Array.isArray(i)?s+=`.${i[0]}`:s+=`.${i}`),s};var j=r=>{let t=r.reduce((s,[c,o,u])=>(s[o]||(s[o]=[]),s[o].includes(c)||(u?s[o].push([c,!0]):s[o].push(c)),s),{});return Object.entries(t).map(([s,c])=>{let o=c.find($=>Array.isArray($)&&$[1]),u=c.filter($=>typeof $=="string"),y=o?`${o[0]}`:"",m=u.length?`{ ${u.join(", ")} }`:"";return`import ${y}${y&&m?", ":""}${m} from "${s}";`})};var Ve=R(require("pluralize")),H=(r="")=>Ve.default.isSingular(r)?r:Ve.default.singular(r);var Le=R(require("pluralize")),re=(r="")=>Le.default.isPlural(r)?r:Le.default.plural(r);var Dr=/^id$/i,Y=r=>Dr.test(r);var se=r=>r.relationInfer&&r.relationInfer.accessor?Array.isArray(r.relationInfer.accessor)?`optionLabel: "${r.relationInfer.accessor[0]}",`:r.relationInfer.accessor!=="title"?`optionLabel: "${r.relationInfer.accessor}",`:"":"";var _=r=>{};var A=(r,t="")=>{if(Number.isInteger(Number(r)))return t.charAt(0).toLowerCase()+t.slice(1)+r;let s=r.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),c=I(s).replace(/ /g,"");return`${c.charAt(0).toLowerCase()+c.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Je=r=>{let t=(i,s,c,o=t)=>{let u=r.map(m=>m(i,s,c,o));return xe(u)};return t};var Xe=r=>(i,s,c,o,u)=>r.reduce((y,m)=>m(y,s,c,o,u),i);var Qe=(r,t,i,s)=>{let c=Array.isArray(t),o=Array.isArray(t)&&t.every(u=>typeof u=="string"||typeof u=="number");if(c){if(!o){let y=s(r,t[0],i,s);return y?{...y,key:r,multiple:!0,priority:1}:!1}let u=s(r,t[0],i,s)||{type:"string"};return{key:r,multiple:!0,priority:1,type:u==null?void 0:u.type}}return!1};var Ye=(r,t)=>typeof t=="boolean"?{key:r,type:"boolean"}:!1;var Pe=R(require("dayjs")),Er=/(_at|_on|At|On|AT|ON)(\[\])?$/,er=(r,t)=>{let i=Er.test(r)&&(0,Pe.default)(t).isValid(),s=typeof t=="string"&&(0,Pe.default)(t).isValid(),c=typeof t=="string"&&t.length>4;return i||s&&c?{key:r,type:"date",priority:1}:!1};var Br=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,rr=(r,t)=>typeof t=="string"&&Br.test(t)?{key:r,type:"email",priority:1}:!1;var Or=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,nr=(r,t)=>typeof t=="string"&&Or.test(t)?{key:r,type:"image",priority:2}:!1;var tr=(r,t)=>typeof t>"u"||t===null?null:!1;var or=(r,t)=>typeof t=="number"?{key:r,type:"number"}:!1;var Kr=/id$/i,ar=(r,t,i,s)=>{let c=t!==null,o=!Array.isArray(t);if(c&&o&&typeof t=="object"){if(Object.keys(t).length===1&&Kr.test(Object.keys(t)[0]))return{key:r,type:"relation",relation:!0,accessor:"id",priority:1};let m=he(r,t);if((m?m.length>0:!1)&&m){let b=m&&Array.isArray(m)?m[0]:m,F=s(b,t[b],t,s);if(F){let h=Array.isArray(m)?m.map(C=>F.accessor?`${C}.${Array.isArray(F.accessor)?F.accessor[0]:F.accessor}`:C):F.accessor?Array.isArray(F.accessor)?`${m}.${F.accessor[0]}`:`${m}.${F.accessor}`:m;return{...F,fieldable:!0,key:r,accessor:h,priority:1}}}return{key:r,fieldable:!1,type:"object",priority:1}}return!1};var sr=(r,t)=>typeof t=="string"&&t.length>100?{key:r,type:"richtext",priority:1}:!1;var ir=(r,t)=>typeof t=="string"?{key:r,type:"text"}:!1;var zr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,cr=(r,t)=>typeof t=="string"&&zr.test(t)?{key:r,type:"url",priority:1}:!1;var ur=[Qe,Ye,er,rr,nr,tr,or,ar,We,sr,ir,cr];var pr=(r,t,i,s)=>r.map(o=>{if(!o.relation&&(o.type==="text"||o.type==="richtext"||o.type==="number")&&!o.canRelation){let u=/^[a-z0-9-]+$/,y=h=>u.test(`${h}`),m=o.key.toLowerCase()!=="id";return!(!o.accessor||typeof o.accessor=="string")||!m?o:(o.multiple?s[o.key]:[s[o.key]]).every(h=>y(o.accessor?h[o.accessor]:h))?{...o,canRelation:!0}:o}return o});var jr=/(image|photo|avatar|cover|thumbnail|icon)/i,mr=r=>r.map(i=>i.type==="url"&&jr.test(i.key)?{...i,type:"image"}:i);var lr=(r,t)=>r.map(s=>{let c=ve(s,t);return c?{...s,relation:!0,type:"relation",resource:c}:s});var dr=(r,t,i,s,c)=>r.map(u=>{if(u.relation&&u.type==="relation"&&!u.resource){let y=u.accessor?s[u.key][u.accessor]:s[u.key],m=c(u.key,y,s,c);if(m&&m.type!=="relation")return{...u,fieldable:!0,relation:!1,type:m.type,canRelation:!0}}return u});var fr=[mr,lr,dr,pr];var U=R(require("react")),me=R(require("prism-react-renderer")),yr=R(require("prism-react-renderer/themes/vsDark")),Ge=({code:r,wrapperProps:t})=>((0,U.useEffect)(()=>{var s;let i=document.createElement("style");i.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(s=document.getElementById("code-highlight"))==null||s.appendChild(i)},[]),U.default.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},U.default.createElement(me.default,{...me.defaultProps,theme:yr.default,code:r,language:"tsx"},({className:i,style:s,tokens:c,getLineProps:o,getTokenProps:u})=>U.default.createElement("pre",{className:i,style:{...s,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},c.map((y,m)=>U.default.createElement("div",{key:m,...o({line:y,key:m})},y.map(($,b)=>U.default.createElement("span",{key:b,...u({token:$,key:b})}))))))));var E=R(require("react")),_r=R(require("@pankod/refine-core")),le=require("@aliemir/react-live");var gr=[["react","React",E.default],["@pankod/refine-core","RefineCore",_r]],Me=E.default.createContext({}),De=({fetchError:r,code:t,additionalScope:i,errorComponent:s})=>{var y;let c=(y=t&&Te(Ae(t,[...gr,...i!=null?i:[]].reduce((m,[$,b,F,h])=>h?m:{...m,[$]:b},{}))))!=null?y:"",o=E.default.useMemo(()=>({React:E.default,...E.default,...[...gr,...i!=null?i:[]].reduce((m,[$,b,F])=>({...m,[b]:F}),{})}),[i]),u=E.default.useMemo(()=>()=>{let{error:$}=E.default.useContext(Me);return s?E.default.createElement(s,{error:$?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${$}</code>`:typeof r=="string"?r:r?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[s,r]);return E.default.createElement(le.LiveProvider,{Context:Me,code:c,scope:o,noInline:!0},!r&&E.default.createElement(le.LivePreview,{Context:Me}),E.default.createElement(u,null))};var ee=R(require("react")),de=require("@pankod/refine-core");var Ir=(r,t,i)=>{let{resource:s,resourceName:c,id:o,resources:u}=(0,de.useResource)({resourceNameOrRouteName:t}),y=i!=null?i:o,m=(0,de.useDataProvider)(),[$,b]=ee.default.useState(void 0),[F,h]=ee.default.useState(void 0),[C,G]=ee.default.useState(!0),[p,L]=ee.default.useState(!1),v=ee.default.useCallback(async a=>{var e,f;let x=(e=oe(s))!=null?e:$e(c,void 0,u),P=m(x);L(!0),b(void 0);try{if(r==="list"||r==="create"){let k=(f=(await P.getList({resource:c})).data)==null?void 0:f[0];k||b(`<p>No records/data found for resource "${c}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(k),setTimeout(()=>{L(!1)},500)}if((r==="edit"||r==="show")&&a){let k=(await P.getOne({resource:c,id:a})).data;k||b(`<p>No records/data found for resource "${c}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),h(k),setTimeout(()=>{L(!1)},500)}}catch(n){console.warn("An error occured while fetching the resource data. Please check the error message below:",n),b(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${c}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{L(!1)},500)}},[r,m,s,c,u]);return ee.default.useEffect(()=>{G(!1),!p&&!F&&v(y)},[v,y]),{data:F,loading:p,initial:C,error:$}};var ne=R(require("react")),kr=require("@pankod/refine-core");var Ee=require("lodash"),hr=({record:r,fields:t,infer:i})=>{let s=(0,kr.useDataProvider)(),[c,o]=ne.default.useState([]),[u,y]=ne.default.useState(!0),[m,$]=ne.default.useState(!1),b=ne.default.useCallback(async F=>{console.groupCollapsed("@pankod/refine-inferencer is trying to detect relations");let h=[];$(!0);try{let C=F.map(async p=>{if(p&&(p.relation||p.canRelation)&&r){let L=oe(p.resource),v=s(L),a=Array.isArray(p.accessor)?void 0:p.multiple?r[p.key].map(x=>p.accessor?(0,Ee.get)(x,p.accessor):x)[0]:p.accessor?(0,Ee.get)(r[p.key],p.accessor):r[p.key];if(a&&p.resource)try{let{data:x}=await v.getOne({resource:p.resource.name,id:a});h.push({status:"success",resource:p.resource.name,field:p.key});let P=i("__",x,{},i);return{...p,relationInfer:P}}catch{return h.push({status:"error",resource:p.resource.name,field:p.key}),{...p,relationInfer:null}}if(a){let x,P;try{let{data:n}=await v.getOne({resource:re(M(p.key)),id:a});h.push({status:"success",resource:re(M(p.key)),field:p.key}),x=n,P=!0}catch{h.push({status:"error",resource:re(M(p.key)),field:p.key});try{let{data:k}=await v.getOne({resource:H(M(p.key)),id:a});h.push({status:"success",resource:H(M(p.key)),field:p.key}),x=k,P=!1}catch{return h.push({status:"error",resource:H(M(p.key)),field:p.key}),{...p,relationInfer:null}}}let e=i("__",x,{},i),f=M(p.key);return{...p,relation:!0,type:"relation",resource:{name:P?re(f):H(f)},fieldable:!1,canRelation:void 0,relationInfer:e}}return{...p,relationInfer:null}}return p}),G=await Promise.all(C);o(G.filter(p=>p)),setTimeout(()=>{$(!1)},500)}catch{setTimeout(()=>{$(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${h.length} attempts and succeeded with ${h.filter(C=>C.status==="success").length} attempts.`),console.groupEnd()},500)},[s,r]);return ne.default.useEffect(()=>{y(!1),!m&&t&&t.length>0&&c.length===0&&b(t)},[b,m,t,b]),{fields:c,loading:m,initial:u}};var W=({type:r,additionalScope:t=[],customElements:i=[],fieldTransformers:s=[],renderer:c,loadingComponent:o,errorComponent:u,codeViewerComponent:y})=>{let m=Je([...ur,...i]),$=Xe([...fr,...s]),b=({resourceName:h,fieldTransformer:C,id:G})=>{var N;let{resource:p,resources:L}=(0,Be.useResource)({resourceNameOrRouteName:h}),{resource:v}=(0,Be.useResource)(),{data:a,loading:x,initial:P,error:e}=Ir(r,h!=null?h:p==null?void 0:p.name,G),f=K.default.useMemo(()=>{if(a){let T=Object.keys(a).map(Q=>{let ue=a[Q];return m(Q,ue,a,m)}).filter(Boolean),D=$(T,L,p,a,m);return C?D.flatMap(Q=>{let ue=C(Q);return ue?[ue]:[]}):D}return[]},[a,L,p,C]),{fields:n,loading:k}=hr({record:a,fields:f,infer:m}),S=K.default.useMemo(()=>!x&&!k&&!P?c({resource:p,resources:L,fields:n,infer:m,isCustomPage:p.name!==v.name,id:G}):"",[p,L,n,x,k]);return K.default.createElement(K.default.Fragment,null,o&&(x||k)&&K.default.createElement(o,null),!x&&!k&&K.default.createElement(K.default.Fragment,null,K.default.createElement(De,{fetchError:!x&&e?e:!x&&!P&&!a,code:Re(S,O((N=p.label)!=null?N:p.name,r)),errorComponent:u,additionalScope:t}),y&&K.default.createElement(y,{code:we(S),loading:x||k})))};return({name:h,resource:C,fieldTransformer:G,id:p})=>K.default.createElement(b,{fieldTransformer:G,resourceName:C!=null?C:h,key:C!=null?C:h,id:p})};var ie=R(require("react")),fe=require("@pankod/refine-mantine"),$r=require("@tabler/icons"),q=({error:r})=>r?ie.default.createElement(fe.Center,{style:{minHeight:300}},ie.default.createElement(fe.Alert,{title:"Error",color:"red",icon:ie.default.createElement($r.IconAlertCircle,null)},ie.default.createElement("div",{dangerouslySetInnerHTML:{__html:r!=null?r:""}}))):null;var xr=R(require("react")),br=require("@pankod/refine-mantine"),Z=()=>xr.default.createElement(br.LoadingOverlay,{visible:!0});var w=R(require("react")),B=require("@pankod/refine-mantine"),z=require("@tabler/icons");var J=({code:r,loading:t})=>{let i=w.default.useMemo(()=>be(r!=null?r:""),[r]),s=w.default.useRef(null),[c,o]=w.default.useState(!1),[u,y]=w.default.useState(!1);if(t)return null;let m=()=>{var $,b,F,h;($=s==null?void 0:s.current)==null||$.select(),(b=s==null?void 0:s.current)==null||b.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((h=(F=s==null?void 0:s.current)==null?void 0:F.value)!=null?h:""),y(!0),setTimeout(()=>{y(!1)},1e3))};return i?w.default.createElement(w.default.Fragment,null,w.default.createElement(B.Affix,{position:{bottom:12,right:60}},w.default.createElement(B.Group,{spacing:"xs"},w.default.createElement(B.Button,{leftIcon:w.default.createElement(z.IconCode,{size:18}),variant:"filled",color:"primary",onClick:()=>o(!0)},"Show Code"),w.default.createElement(B.Button,{leftIcon:w.default.createElement(z.IconMessageCircle,{size:18}),variant:"default",component:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),w.default.createElement("div",{style:{height:"50px"}}),w.default.createElement(B.Modal,{size:800,opened:c,onClose:()=>o(!1),styles:{modal:{padding:"0px !important",borderRadius:0},header:{display:"none"}}},w.default.createElement(B.ActionIcon,{onClick:()=>o(!1),variant:"transparent",sx:{position:"absolute",right:0,top:0,height:56,width:56}},w.default.createElement(z.IconX,{size:18,style:{color:"#666b7a"}})),w.default.createElement(Ge,{code:i}),w.default.createElement("textarea",{ref:s,defaultValue:(i!=null?i:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}}),w.default.createElement(B.Button,{sx:{position:"absolute",bottom:12,right:12,width:115},key:"copy",variant:"default",leftIcon:u?w.default.createElement(z.IconCheck,{size:18,style:{color:"green"}}):w.default.createElement(z.IconCopy,{size:18}),onClick:m},u?"Copied":"Copy"))):null};var Oe=({resource:r,fields:t,isCustomPage:i,id:s})=>{var P;let c=O((P=r.label)!=null?P:r.name,"show"),o="record",u=[["useShow","@pankod/refine-core"],["Show","@pankod/refine-mantine"],["Title","@pankod/refine-mantine"]],m=t.filter(e=>(e==null?void 0:e.relation)&&!(e!=null&&e.fieldable)&&(e==null?void 0:e.resource)).filter(Boolean).map(e=>{if((e==null?void 0:e.relation)&&!e.fieldable&&e.resource){if(e.multiple){u.push(["useMany","@pankod/refine-core"]);let f=l(o,e.key);return e.accessor&&(f=`${l(o,e.key)}?.map((item: any) => ${l("item",void 0,e.accessor)})`),`
                const { data: ${A(e.key,"Data")}, isLoading: ${A(e.key,"IsLoading")} } =
                useMany({
                    resource: "${e.resource.name}",
                    ids: ${f} || [],
                    queryOptions: {
                        enabled: !!${o},
                    },
                });
                `}return u.push(["useOne","@pankod/refine-core"]),`
                const { data: ${A(e.key,"Data")}, isLoading: ${A(e.key,"IsLoading")} } =
                useOne({
                    resource: "${e.resource.name}",
                    id: ${l(o,e.key,e.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${o},
                    },
                });
            `}}).filter(Boolean),$=e=>{if(e.relation&&e.resource){let f=A(e.key,"Data"),n=A(e.key,"IsLoading");return e.multiple?(u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]),g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var k,S;if(e.relationInfer)if((k=e.relationInfer)!=null&&k.accessor){if(Array.isArray(e.relationInfer.accessor))return"Not Handled.";{let N=H((S=e.resource)==null?void 0:S.name),T=l(N,void 0,e.relationInfer.accessor);return`
                                    <Group spacing="xs">
                                        {${f}?.data?.map((${N}: any) => <TagField key={${T}} value={${T}} />)}
                                    </Group>
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                {${n} ? <>Loading...</> : (
                    <>
                    ${(()=>{var k;return e.relationInfer?(k=e.relationInfer)!=null&&k.accessor?Array.isArray(e.relationInfer.accessor)?`{${l(`${f}?.data`,void 0,e.relationInfer.accessor,' + " " + ')}}`:`{${f}?.data?.${e.relationInfer.accessor}}`:`{${f}?.data}`:`{${f}?.data?.id}`})()}
                    </>
                )}
                
                `}},b=e=>{if(e.type==="text"){if(u.push(["TextField","@pankod/refine-mantine"]),e.multiple){u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <TextField value={${l(o,e.key,e.accessor)}} />
            `}},F=e=>{if(e.type==="image"){if(u.push(["Image","@pankod/refine-mantine"]),e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <Image sx={{ maxWidth: 200 }} src={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Image sx={{ maxWidth: 200 }} src={${l(o,e.key,e.accessor," + ")}} />
                `}},h=e=>{if(e.type==="email"){if(u.push(["EmailField","@pankod/refine-mantine"]),e.multiple){u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <EmailField value={${l(o,e.key,e.accessor," + ")}} />
            `}},C=e=>{if(e.type==="url"){if(u.push(["UrlField","@pankod/refine-mantine"]),e.multiple){u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <UrlField value={${l(o,e.key,e.accessor," + ")}} />
            `}},G=e=>{if(e.type==="boolean"){if(u.push(["BooleanField","@pankod/refine-mantine"]),e.multiple){u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <TagField value={${f}} key={index} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <BooleanField value={${l(o,e.key,e.accessor," && ")}} />
            `}},p=e=>{if(e.type==="date"){if(u.push(["DateField","@pankod/refine-mantine"]),e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <DateField value={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <DateField value={${l(o,e.key,e.accessor," + ' ' + ")}} />
            `}},L=e=>{if(e.type==="richtext")return u.push(["MarkdownField","@pankod/refine-mantine"]),g`
                <Title mt="xs" order={5}>${I(e.key)}</Title>
                <MarkdownField value={${l(o,e.key,e.accessor,' + " " + ')}} />
            `},v=e=>{if(e.type==="number"){if(u.push(["NumberField","@pankod/refine-mantine"]),e.multiple){u.push(["TagField","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"]);let f=l("item",void 0,e.accessor);return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any) => (
                        <TagField value={${f}} key={${f}} />
                    ))}
                </Group>
            `}return g`
                <Title my="xs" order={5}>${I(e.key)}</Title>
                <NumberField value={${l(o,e.key,e.accessor,' + " " + ')} ?? ""} />
            `}},a=e=>{if(e)return g`
                ${e}
            `},x=t.map(e=>{switch(e==null?void 0:e.type){case"text":return a(b(e));case"number":return a(v(e));case"richtext":return a(L(e));case"email":return a(h(e));case"image":return a(F(e));case"date":return a(p(e));case"boolean":return a(G(e));case"url":return a(C(e));case"relation":return a($(e));default:return}});return _(u),g`
    ${j(u)}
    
    export const ${c} = () => {
        const { queryResult } = useShow(${i?`{ 
                    resource: "${r.name}", 
                    id: ${s}
                }`:""});
        const { data, isLoading } = queryResult;
    
        const ${o} = data?.data;
    
        ${m}

        return (
            <Show isLoading={isLoading}>
                ${x.join("")}
            </Show>
        );
    };
    `},ye=W({type:"show",additionalScope:[["@pankod/refine-mantine","RefineMantine",Hr]],codeViewerComponent:J,loadingComponent:Z,errorComponent:q,renderer:Oe});var Ur=R(require("@pankod/refine-mantine")),Wr=R(require("@pankod/refine-react-table"));var X=r=>Array.isArray(r.accessor)||r.multiple?`accessorKey: "${r.key}"`:r.accessor?`accessorKey: "${V(r.key,void 0,r.accessor)}"`:`accessorKey: "${r.key}"`,Ke=({resource:r,fields:t,isCustomPage:i})=>{var f;let s=O((f=r.label)!=null?f:r.name,"list"),c="tableData?.data",o=[["IResourceComponentsProps","@pankod/refine-core"],["useTable","@pankod/refine-react-table"],["ColumnDef","@pankod/refine-react-table"],["flexRender","@pankod/refine-react-table"],["ScrollArea","@pankod/refine-mantine"],["List","@pankod/refine-mantine"],["Table","@pankod/refine-mantine"],["Pagination","@pankod/refine-mantine"],["Group","@pankod/refine-mantine"],["EditButton","@pankod/refine-mantine"],["ShowButton","@pankod/refine-mantine"],["DeleteButton","@pankod/refine-mantine"]],u=t.filter(n=>(n==null?void 0:n.relation)&&!(n!=null&&n.fieldable)&&(n==null?void 0:n.resource)),y=u.filter(Boolean).map(n=>{if((n==null?void 0:n.relation)&&!n.fieldable&&n.resource){o.push(["GetManyResponse","@pankod/refine-core"]),o.push(["useMany","@pankod/refine-core"]);let k="";return n.multiple?k=`[].concat(...(${c}?.map((item) => ${l("item",n.key,n.accessor,!1)}) ?? []))`:k=`${c}?.map((item) => ${l("item",n.key,n.accessor,!1)}) ?? []`,`
                const { data: ${A(n.key,"Data")} } =
                useMany({
                    resource: "${n.resource.name}",
                    ids: ${k},
                    queryOptions: {
                        enabled: !!${c},
                    },
                });
                `}}).filter(Boolean),m=u==null?void 0:u.map(n=>{if(n&&n.resource)return A(n.key,"Data")}).filter(Boolean),$=n=>{var k;if(n.relation&&n.resource){let S=`${A(n.key,"Data")}?.data`;if(Array.isArray(n.accessor))return;let N=`id: "${n.key}"`,T=`header: "${I(n.key)}"`,D=X(n),te="";if(n.multiple){o.push(["TagField","@pankod/refine-mantine"]);let Q="item";n!=null&&n.relationInfer&&(Q=l("item",void 0,n.relationInfer.accessor)),te=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${A(n.key,"Data")}: GetManyResponse;
                    };

                    const ${A(n.key)} = getValue<any[]>()?.map((item) => {
                        return meta.${A(n.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,n.accessor)}
                        );
                    })

                    return (
                        <Group spacing="xs">
                            {${A(n.key)}?.map((item, index) => (
                                <TagField key={index} value={${Q}} />
                            ))}
                        </Group>
                    )
                }
            `}else n!=null&&n.relationInfer?te=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${A(n.key,"Data")}: GetManyResponse;
                        };

                        const ${A(n.key)} = meta.${S}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(A(n.key),void 0,(k=n==null?void 0:n.relationInfer)==null?void 0:k.accessor)} ?? "Loading...";
                    },`:te="";return`
                {
                    ${N},
                    ${T},
                    ${D},
                    ${te}
                }
            `}},b=n=>{if(n.type==="image"){o.push(["Image","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    ${n!=null&&n.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                    ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                   
                }
            `;if(n.multiple){let D=l("item",void 0,n.accessor," + ");T=`
                    cell: function render({ getValue }) {
                        ${n!=null&&n.accessor?"try {":""}
                            return (
                                <Group spacing="xs">
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${D}} key={index} sx={{ maxWidth: "100px" }} />
                                    ))}
                                </Group>
                            )
                        ${n!=null&&n.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},F=n=>{if(n.type==="email"){o.push(["EmailField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <EmailField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},h=n=>{if(n.type==="url"){o.push(["UrlField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <UrlField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},C=n=>{if((n==null?void 0:n.type)==="boolean"){o.push(["BooleanField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <BooleanField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0," + ")}} />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},G=n=>{if(n.type==="date"){o.push(["DateField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <DateField value={${l("getValue<any>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0,' + " " + ')}} />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},p=n=>{if((n==null?void 0:n.type)==="richtext"){o.push(["MarkdownField","@pankod/refine-mantine"]);let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T=g`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${l("getValue<string>()",void 0,Array.isArray(n.accessor)?n.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return n.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${l("item",void 0,n.accessor," + ")}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},L=n=>{if(n&&(n.type==="text"||n.type==="number")){let k=`id: "${n.key}"`,S=X(n),N=`header: "${I(n.key)}"`,T="";return n.multiple&&(o.push(["TagField","@pankod/refine-mantine"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <Group spacing="xs">
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,n.accessor,' + " " + ')}} key={index} />
                                ))}
                            </Group>
                        )
                    }
                `),!n.multiple&&Array.isArray(n.accessor)&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue()",n.key,n.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${k},
                    ${S},
                    ${N},
                    ${T}
                }
            `}},{canEdit:v,canShow:a,canDelete:x}=r!=null?r:{};v&&o.push(["EditButton","@pankod/refine-mantine"]),a&&o.push(["ShowButton","@pankod/refine-mantine"]),x&&o.push(["DeleteButton","@pankod/refine-mantine"]);let P=v||a||x?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <Group spacing="xs" noWrap>
                    ${a?g`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${v?g`<EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />`:""}
                    ${x?g`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </Group>
            );
        },
    },
        `:"",e=t.map(n=>{switch(n==null?void 0:n.type){case"text":case"number":return L(n);case"richtext":return p(n);case"email":return F(n);case"image":return b(n);case"date":return G(n);case"boolean":return C(n);case"url":return h(n);case"relation":return $(n);default:return}});return _(o),g`
    import React from "react";
    ${j(o)}
    
    export const ${s}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...e,P].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${i?`
            refineCoreProps: {
                resource: "${r.name}",
            }
            `:""}
        });

        ${y}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${m.join(", ")}
            },
        }));

        return (
            <List>
                <ScrollArea>
                    <Table highlightOnHover>
                        <thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => {
                                        return (
                                            <th key={header.id}>
                                                {!header.isPlaceholder && (
                                                    flexRender(
                                                        header.column
                                                            .columnDef
                                                            .header,
                                                        header.getContext(),
                                                    )
                                                )}
                                            </th>
                                        );
                                    })}
                                </tr>
                            ))}
                        </thead>
                        <tbody>
                            {getRowModel().rows.map((row) => {
                                return (
                                    <tr key={row.id}>
                                        {row.getVisibleCells().map((cell) => {
                                            return (
                                                <td key={cell.id}>
                                                    {flexRender(
                                                        cell.column.columnDef.cell,
                                                        cell.getContext(),
                                                    )}
                                                </td>
                                            );
                                        })}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </Table>
                </ScrollArea>    
                <br />
                <Pagination
                    position="right"
                    total={pageCount}
                    page={current}
                    onChange={setCurrent}
                />
            </List>
        );
    };
    `},ge=W({type:"list",additionalScope:[["@pankod/refine-mantine","RefineMantine",Ur],["@pankod/refine-react-table","RefineReactTable",Wr]],codeViewerComponent:J,loadingComponent:Z,errorComponent:q,renderer:Ke});var qr=R(require("@pankod/refine-mantine"));var ze=({resource:r,fields:t,isCustomPage:i})=>{var v;let s=O((v=r.label)!=null?v:r.name,"create"),c=[["Create","@pankod/refine-mantine"],["useForm","@pankod/refine-mantine"]],o={},y=t.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource)return c.push(["useSelect","@pankod/refine-mantine"]),`
                const { selectProps: ${A(a.key,"SelectProps")} } =
                useSelect({
                    resource: "${a.resource.name}",
                    ${se(a)}
                });
            `}).filter(Boolean),m=a=>{if(a.relation&&a.resource){o={...o,[a.key]:a.multiple?[]:a.accessor?{[typeof a.accessor=="string"?a.accessor:a.accessor[0]]:""}:""};let x=A(a.key,"SelectProps");return a.multiple?(c.push(["MultiSelect","@pankod/refine-mantine"]),g`
                    <MultiSelect mt="sm" label="${I(a.key)}" {...getInputProps("${V(a.key,void 0)}")} {...${x}} filterDataOnExactSearchMatch={undefined} />
                `):(c.push(["Select","@pankod/refine-mantine"]),g`
                <Select mt="sm" label="${I(a.key)}" {...getInputProps("${V(a.key,void 0,a.accessor)}")} {...${x}} />
            `)}},$=a=>{if(a.type==="text"||a.type==="email"||a.type==="date"||a.type==="url")return Y(a.key)||(c.push(["TextInput","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple)?void 0:g`
                <TextInput mt="sm" label="${I(a.key)}" {...getInputProps("${V(a.key,void 0,a.accessor)}")} />
            `},b=a=>{if(a.type==="image")return g`
            {/* 
                Dropzone component is not included in "@pankod/refine-mantine" package.
                To use a <Dropzone> component, you can follow the official documentation for Mantine.
                
                Docs: https://mantine.dev/others/dropzone/
            */}
            `},F=a=>{if(a.type==="boolean")return c.push(["Checkbox","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple?void 0:g`
                <Checkbox mt="sm" label="${I(a.key)}" {...getInputProps("${V(a.key,void 0,a.accessor)}", { type: 'checkbox' })} />
            `},h=a=>{if(a.type==="date"){let x=$(a);return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mantine" package.
                    To use a <DatePicker> component, you can follow the official documentation for Mantine.
                    
                    Docs: https://mantine.dev/dates/date-picker/
                */}
                ${x!=null?x:""}
            `}},C=a=>{if(a.type==="richtext")return c.push(["Textarea","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple?void 0:g`
                <Textarea mt="sm" label="${I(a.key)}" autosize {...getInputProps("${V(a.key,void 0,a.accessor)}")} />
            `},G=a=>{if(a.type==="number")return Y(a.key)||(c.push(["NumberInput","@pankod/refine-mantine"]),o={...o,[a.key]:a.multiple?[]:""},a.multiple)?void 0:g`
                <NumberInput mt="sm" label="${I(a.key)}" {...getInputProps("${V(a.key,void 0,a.accessor)}")}/>
            `},p=a=>{if(a)return g`
                ${a}
        `},L=t.map(a=>{switch(a==null?void 0:a.type){case"url":case"text":case"email":return p($(a));case"number":return p(G(a));case"richtext":return p(C(a));case"image":return p(b(a));case"date":return p(h(a));case"boolean":return p(F(a));case"relation":return p(m(a));default:return}});return _(c),g`
    ${j(c)}
    
    export const ${s} = () => {
        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { formLoading } } = useForm({
            initialValues: ${JSON.stringify(o)},
            ${i?`refineCoreProps: {
                        resource: "${r.name}",
                        action: "create",  
                    }`:""}
        });
    
        ${y}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${L.join("")}
            </Create>
        );
    };
    `},Ie=W({type:"create",additionalScope:[["@pankod/refine-mantine","RefineMantine",qr]],codeViewerComponent:J,loadingComponent:Z,errorComponent:q,renderer:ze});var Zr=R(require("@pankod/refine-mantine"));var je=({resource:r,fields:t,isCustomPage:i,id:s})=>{var x,P;let c=O((x=r.label)!=null?x:r.name,"edit"),o=A((P=r.label)!=null?P:r.name,"Data"),u=[["Edit","@pankod/refine-mantine"],["useForm","@pankod/refine-mantine"]],y={},$=t.filter(e=>(e==null?void 0:e.relation)&&!(e!=null&&e.fieldable)&&(e==null?void 0:e.resource)).filter(Boolean).map(e=>{if((e==null?void 0:e.relation)&&!e.fieldable&&e.resource){u.push(["useSelect","@pankod/refine-mantine"]);let f=l(o,e.key,e.accessor,!1);e.multiple&&e.accessor&&(f=`${l(o,e.key)}?.map((item: any) => ${l("item",void 0,e.accessor)})`);let n="";return e.multiple&&e.accessor&&(n=`React.useEffect(() => {
                        setFieldValue("${e.key}", ${f});
                    }, [${o}]);`),`
                const { selectProps: ${A(e.key,"SelectProps")} } =
                useSelect({
                    resource: "${e.resource.name}",
                    defaultValue: ${f},
                    ${se(e)}
                });

                ${n}
            `}}).filter(Boolean),b=e=>{if(e.relation&&e.resource){y={...y,[e.key]:e.multiple?[]:e.accessor?{[typeof e.accessor=="string"?e.accessor:e.accessor[0]]:""}:""};let f=A(e.key,"SelectProps");return e.multiple?(u.push(["MultiSelect","@pankod/refine-mantine"]),g`
                    <MultiSelect mt="sm" label="${I(e.key)}" {...getInputProps("${V(e.key,void 0)}")} {...${f}} filterDataOnExactSearchMatch={undefined} />
                `):(u.push(["Select","@pankod/refine-mantine"]),g`
                <Select mt="sm" label="${I(e.key)}" {...getInputProps("${V(e.key,void 0,e.accessor)}")} {...${f}} />
            `)}},F=e=>{if(e.type==="text"||e.type==="email"||e.type==="date"||e.type==="url"){if(u.push(["TextInput","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=V(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <TextInput mt="sm" key={index} label={\`${I(e.key)} \${index + 1} \`} {...getInputProps(\`${f}\`)} />
                    ))}
                </Group>
                `}return g`
                <TextInput mt="sm" ${Y(e.key)?"disabled":""} label="${I(e.key)}" {...getInputProps("${V(e.key,void 0,e.accessor)}")} />
            `}},h=e=>{if(e.type==="image")return g`
            {/* 
                Dropzone component is not included in "@pankod/refine-mantine" package.
                To use a <Dropzone> component, you can follow the official documentation for Mantine.
                
                Docs: https://mantine.dev/others/dropzone/
            */}
            `},C=e=>{if(e.type==="boolean"){if(u.push(["Checkbox","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=V(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <Checkbox mt="sm" key={index} label={\`${I(e.key)} \${index + 1} \`} {...getInputProps(\`${f}\`, { type: 'checkbox' })} />
                    ))}
                </Group>
                `}return g`
                <Checkbox mt="sm" label="${I(e.key)}" {...getInputProps("${V(e.key,void 0,e.accessor)}", { type: 'checkbox' })} />
            `}},G=e=>{if(e.type==="date")return`
                {/* 
                    DatePicker component is not included in "@pankod/refine-mantine" package.
                    To use a <DatePicker> component, you can follow the official documentation for Mantine.
                    
                    Docs: https://mantine.dev/dates/date-picker/
                */}
                ${F(e)}
            `},p=e=>{if(e.type==="richtext"){if(u.push(["Textarea","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=V(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <Textarea mt="sm" key={index} label={\`${I(e.key)} \${index + 1} \`} {...getInputProps(\`${f}\`)} />
                    ))}
                </Group>
                `}return g`
                <Textarea mt="sm" label="${I(e.key)}" autosize {...getInputProps("${V(e.key,void 0,e.accessor)}")} />
            `}},L=e=>{if(e.type==="number"){if(u.push(["NumberInput","@pankod/refine-mantine"]),y={...y,[e.key]:e.multiple?[]:""},e.multiple){u.push(["Group","@pankod/refine-mantine"]);let f=V(e.key,"${index}",e.accessor);return`
                <Group spacing="xs">
                    {${l(o,e.key)}?.map((item: any, index: number) => (
                        <NumberInput mt="sm" key={index} label={\`${I(e.key)} \${index + 1} \`} {...getInputProps(\`${f}\`)} />
                    ))}
                </Group>
                `}return g`
                <NumberInput mt="sm" ${Y(e.key)?"disabled":""} label="${I(e.key)}" {...getInputProps("${V(e.key,void 0,e.accessor)}")}/>
            `}},v=e=>{if(e)return g`
                ${e}
        `},a=t.map(e=>{switch(e==null?void 0:e.type){case"url":case"text":case"email":return v(F(e));case"number":return v(L(e));case"richtext":return v(p(e));case"image":return v(h(e));case"date":return v(G(e));case"boolean":return v(C(e));case"relation":return v(b(e));default:return}});return _(u),g`
    ${j(u)}
    
    export const ${c} = () => {
        const { getInputProps, saveButtonProps, setFieldValue, refineCore: { queryResult } } = useForm({
            initialValues: ${JSON.stringify(y)},
            ${i?`refineCoreProps: {
                        resource: "${r.name}",
                        id: ${s},
                        action: "edit",  
                    }`:""}
        });
    
        const ${o} = queryResult?.data?.data;
    
        ${$}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                ${a.join("")}
            </Edit>
        );
    };
    `},ke=W({type:"edit",additionalScope:[["@pankod/refine-mantine","RefineMantine",Zr]],codeViewerComponent:J,loadingComponent:Z,errorComponent:q,renderer:je});var Jr=({action:r,id:t,...i})=>{let{useParams:s}=(0,Fr.useRouterContext)(),{action:c,id:o}=s();switch(r!=null?r:c){case"show":return ce.default.createElement(ye,{...i,id:t!=null?t:o});case"create":return ce.default.createElement(Ie,{...i,id:t!=null?t:o});case"edit":return ce.default.createElement(ke,{...i,id:t!=null?t:o});default:return ce.default.createElement(ge,{...i,id:t!=null?t:o})}};
//# sourceMappingURL=mantine.js.map