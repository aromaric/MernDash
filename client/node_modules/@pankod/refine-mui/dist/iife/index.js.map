{"version":3,"sources":["../../../core/src/index.tsx","../../../core/src/components/pages/error/index.tsx","../../../core/src/hooks/auth/usePermissions/index.ts","../../../core/src/contexts/auth/index.tsx","../../../core/src/hooks/auth/useGetIdentity/index.ts","../../../core/src/hooks/auth/useLogout/index.ts","../../../core/src/hooks/auth/useLogin/index.ts","../../../core/src/hooks/auth/useRegister/index.ts","../../../core/src/hooks/auth/useForgotPassword/index.ts","../../../core/src/hooks/auth/useUpdatePassword/index.ts","../../../core/src/hooks/auth/useAuthenticated/index.ts","../../../core/src/hooks/auth/useCheckError/index.ts","../../../core/src/hooks/auth/useIsExistAuthentication.ts","../../../core/src/hooks/data/useList.ts","../../../core/src/definitions/helpers/userFriendlySeconds/index.ts","../../../core/src/definitions/helpers/importCSVMapper/index.ts","../../../core/src/definitions/helpers/userFriendlyResourceName/index.ts","../../../core/src/definitions/table/index.ts","../../../core/src/definitions/upload/file2Base64/index.ts","../../../core/src/definitions/helpers/handleUseParams/index.tsx","../../../core/src/definitions/helpers/queryKeys/index.ts","../../../core/src/definitions/helpers/hasPermission/index.ts","../../../core/src/definitions/helpers/routeGenerator/index.ts","../../../core/src/definitions/helpers/treeView/createTreeView/index.ts","../../../core/src/definitions/helpers/humanizeString/index.ts","../../../core/src/contexts/refine/index.tsx","../../../core/src/components/layoutWrapper/defaultLayout/index.tsx","../../../core/src/definitions/helpers/handleRefineOptions/index.ts","../../../core/src/definitions/helpers/redirectPage/index.ts","../../../core/src/definitions/helpers/sequentialPromises/index.ts","../../../core/src/definitions/helpers/pickDataProvider/index.ts","../../../core/src/definitions/helpers/handleMultiple/index.ts","../../../core/src/definitions/helpers/useInfinitePagination/index.ts","../../../core/src/hooks/data/useOne.ts","../../../core/src/hooks/data/useMany.ts","../../../core/src/hooks/data/useUpdate.ts","../../../core/src/contexts/undoableQueue/undoableQueueContext.tsx","../../../core/src/hooks/data/useCreate.ts","../../../core/src/hooks/data/useDelete.ts","../../../core/src/hooks/data/useCreateMany.ts","../../../core/src/hooks/data/useUpdateMany.ts","../../../core/src/hooks/data/useDeleteMany.ts","../../../core/src/hooks/data/useApiUrl.ts","../../../core/src/hooks/data/useCustom.ts","../../../core/src/hooks/data/useCustomMutation.ts","../../../core/src/hooks/data/useDataProvider.tsx","../../../core/src/contexts/data/index.tsx","../../../core/src/hooks/data/useInfiniteList.ts","../../../core/src/hooks/live/useResourceSubscription/index.ts","../../../core/src/contexts/live/index.tsx","../../../core/src/hooks/live/useLiveMode/index.ts","../../../core/src/hooks/live/useSubscription/index.ts","../../../core/src/hooks/live/usePublish/index.ts","../../../core/src/hooks/resource/useResource/index.ts","../../../core/src/contexts/resource/index.tsx","../../../core/src/hooks/resource/useResourceWithRoute/index.ts","../../../core/src/hooks/notification/useCancelNotification/index.tsx","../../../core/src/hooks/notification/useNotification/index.ts","../../../core/src/contexts/notification/index.tsx","../../../core/src/hooks/notification/useHandleNotification/index.ts","../../../core/src/hooks/translate/useSetLocale.ts","../../../core/src/contexts/translation/index.tsx","../../../core/src/hooks/translate/useTranslate.ts","../../../core/src/hooks/translate/useGetLocale.ts","../../../core/src/hooks/refine/useMutationMode.ts","../../../core/src/hooks/refine/useWarnAboutChange/index.ts","../../../core/src/contexts/unsavedWarn/index.tsx","../../../core/src/hooks/refine/useSyncWithLocation.ts","../../../core/src/hooks/refine/useTitle.tsx","../../../core/src/hooks/refine/useRefineContext.ts","../../../core/src/hooks/export/index.ts","../../../core/src/hooks/form/useForm.ts","../../../core/src/hooks/redirection/index.ts","../../../core/src/hooks/navigation/index.ts","../../../core/src/hooks/show/useShow.ts","../../../core/src/hooks/import/index.tsx","../../../core/src/hooks/modal/useModal/index.tsx","../../../core/src/hooks/router/useRouterContext.ts","../../../core/src/contexts/router/index.tsx","../../../core/src/hooks/accessControl/useCan/index.ts","../../../core/src/contexts/accessControl/index.tsx","../../../core/src/hooks/accessControl/useCanWithoutCache.ts","../../../core/src/hooks/useSelect/index.ts","../../../core/src/hooks/useTable/index.ts","../../../core/src/hooks/auditLog/useLog/index.ts","../../../core/src/contexts/auditLog/index.tsx","../../../core/src/hooks/auditLog/useLogList/index.ts","../../../core/src/hooks/invalidate/index.tsx","../../../core/src/hooks/breadcrumb/index.ts","../../../core/src/hooks/menu/useMenu.tsx","../../../core/src/components/pages/login/index.tsx","../../../core/src/components/pages/auth/index.tsx","../../../core/src/components/pages/auth/components/login/index.tsx","../../../core/src/components/pages/auth/components/register/index.tsx","../../../core/src/components/pages/auth/components/forgotPassword/index.tsx","../../../core/src/components/pages/auth/components/updatePassword/index.tsx","../../../core/src/components/pages/ready/index.tsx","../../../core/src/components/containers/refine/index.tsx","../../../core/src/components/telemetry/index.tsx","../../../core/src/hooks/useTelemetryData/index.ts","../../../core/src/hooks/deepMemo/index.tsx","../../../core/src/hooks/memoized/index.tsx","../../../core/src/components/undoableQueue/index.tsx","../../../core/src/components/layoutWrapper/index.tsx","../../../core/src/components/authenticated/index.tsx","../../../core/src/components/routeChangeHandler/index.tsx","../../../core/src/components/canAccess/index.tsx","../../../react-hook-form/src/index.ts","../../../react-hook-form/src/useForm/index.ts","../../../react-hook-form/src/useStepsForm/index.ts","../../../react-hook-form/src/useModalForm/index.ts","../../../ui-types/src/index.tsx","../../../ui-types/src/ids.tsx","../../src/index.tsx","../../src/components/layout/index.tsx","../../src/components/layout/sider/index.tsx","../../src/components/layout/header/index.tsx","../../src/components/layout/title/index.tsx","../../src/components/pages/login/index.tsx","../../src/components/pages/ready/index.tsx","../../src/components/pages/error/index.tsx","../../src/components/pages/auth/index.tsx","../../src/components/pages/auth/components/login/index.tsx","../../src/components/pages/auth/components/styles.ts","../../src/components/pages/auth/components/register/index.tsx","../../src/components/pages/auth/components/forgotPassword/index.tsx","../../src/components/pages/auth/components/updatePassword/index.tsx","../../src/components/crud/create/index.tsx","../../src/components/crud/edit/index.tsx","../../src/components/crud/list/index.tsx","../../src/components/crud/show/index.tsx","../../src/components/buttons/create/index.tsx","../../src/components/buttons/edit/index.tsx","../../src/components/buttons/delete/index.tsx","../../src/components/buttons/refresh/index.tsx","../../src/components/buttons/show/index.tsx","../../src/components/buttons/list/index.tsx","../../src/components/buttons/export/index.tsx","../../src/components/buttons/save/index.tsx","../../src/components/buttons/clone/index.tsx","../../src/components/buttons/import/index.tsx","../../src/components/circularDeterminate/index.tsx","../../src/components/fields/text/index.tsx","../../src/components/fields/tag/index.tsx","../../src/components/fields/email/index.tsx","../../src/components/fields/boolean/index.tsx","../../src/components/fields/date/index.tsx","../../src/components/fields/file/index.tsx","../../src/components/fields/url/index.tsx","../../src/components/fields/number/index.tsx","../../src/components/fields/markdown/index.tsx","../../src/components/breadcrumb/index.tsx","../../src/hooks/useAutocomplete/index.ts","../../src/hooks/useDataGrid/index.ts","../../src/definitions/dataGrid/index.ts","../../src/hooks/useMenu/index.tsx","../../src/theme/index.ts","../../src/theme/palette/lightPalette.ts","../../src/theme/palette/darkPalette.ts","../../src/theme/typography.ts","../../src/providers/notificationProvider/index.tsx","../../src/providers/refineSnackbarProvider/index.tsx"],"sourcesContent":["export * from \"@tanstack/react-query\";\n\nexport * from \"./components\";\nexport * from \"./hooks\";\n\nexport {\n    Action,\n    ActionWithPage,\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthProvider,\n    BaseKey,\n    BaseRecord,\n    CanParams,\n    CanReturnType,\n    ConditionalFilter,\n    CreateManyResponse,\n    CreateResponse,\n    CrudFilter,\n    CrudFilters,\n    CrudOperators,\n    CrudSort,\n    CrudSorting,\n    CustomResponse,\n    DeleteManyResponse,\n    DeleteOneResponse,\n    FormAction,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    LayoutProps,\n    LiveEvent,\n    LiveModeProps,\n    LogicalFilter,\n    LogParams,\n    MapDataFn,\n    MetaDataQuery,\n    MutationMode,\n    NotificationProvider,\n    OpenNotificationParams,\n    Option,\n    Pagination,\n    PromptProps,\n    RedirectionTypes,\n    RedirectAction,\n    ResourceErrorRouterParams,\n    ResourceProps,\n    ResourceRouterParams,\n    RouteAction,\n    SortOrder,\n    SuccessErrorNotification,\n    TitleProps,\n    TranslationProvider,\n    UpdateManyResponse,\n    UpdateResponse,\n    I18nProvider,\n    IAccessControlContext,\n    IAuthContext,\n    IDataContextProvider as DataProvider,\n    ILiveContext as LiveProvider,\n    ILog,\n    ILogData,\n    ILoginForm,\n    INotificationContext,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext as ResourceProvider,\n    ITranslationContext,\n    IResourceItem,\n    IRouterProvider,\n    ITreeMenu,\n    IQueryKeys,\n} from \"./interfaces\";\n\n// all auth types\nexport * from \"./interfaces/auth\";\n\nexport {\n    getDefaultFilter,\n    getDefaultSortOrder,\n    parseTableParams,\n    parseTableParamsFromQuery,\n    setInitialFilters,\n    setInitialSorters,\n    stringifyTableParams,\n    unionFilters,\n    unionSorters,\n} from \"./definitions/table\";\nexport {\n    createTreeView,\n    handleUseParams,\n    importCSVMapper,\n    routeGenerator,\n    userFriendlyResourceName,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"./definitions/helpers\";\nexport { file2Base64 } from \"./definitions/upload\";\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport { ResourceErrorRouterParams, ActionWithPage } from \"../../../interfaces\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes: ActionWithPage[] = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        if (params.resource) {\n            const resourceFromRoute = resource(params.resource);\n            if (\n                params.action &&\n                actionTypes.includes(params.action) &&\n                !resourceFromRoute[params.action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: params.action,\n                            resource: params.resource,\n                        },\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button onClick={() => push(\"/\")}>\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const usePermissions = <TData = any>(\n    options?: UseQueryOptions<TData>,\n): UseQueryResult<TData, unknown> => {\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"usePermissions\"],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getPermissions ?? (() => Promise.resolve(undefined)),\n        {\n            enabled: !!getPermissions,\n            ...options,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useNavigation } from \"@hooks\";\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const AuthContext = React.createContext<IAuthContext>({});\n\nexport const AuthContextProvider: React.FC<\n    IAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n    const queryClient = useQueryClient();\n\n    const invalidateAuthStore = () => {\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\n        queryClient.invalidateQueries([\"usePermissions\"]);\n    };\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            invalidateAuthStore();\n\n            return Promise.resolve(redirectPath);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n","import React from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\nexport type UseGetIdentityProps<TData> = {\n    queryOptions?: UseQueryOptions<TData>;\n};\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const useGetIdentity = <TData = any>({\n    queryOptions,\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"getUserIdentity\"],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getUserIdentity ?? (() => Promise.resolve({})),\n        {\n            enabled: !!getUserIdentity,\n            retry: false,\n            ...queryOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\n *\n */\nexport const useLogout = <TVariables = {}>({\n    mutationOptions,\n}: UseLogoutProps<TVariables> = {}): UseMutationResult<\n    TLogoutData,\n    Error,\n    (TVariables & Variables) | void,\n    unknown\n> => {\n    const { push } = useNavigation();\n    const { logout: logoutFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n    const { open } = useNotification();\n\n    const queryResponse = useMutation<\n        TLogoutData,\n        Error,\n        (TVariables & Variables) | void,\n        unknown\n    >([\"useLogout\"], logoutFromContext, {\n        onSuccess: (data, variables) => {\n            const redirectPath = variables?.redirectPath ?? data;\n\n            if (redirectPath === false) {\n                return;\n            }\n\n            if (redirectPath) {\n                push(redirectPath);\n                return;\n            }\n\n            push(\"/login\");\n        },\n        onError: (error: Error) => {\n            open?.({\n                key: \"useLogout-error\",\n                type: \"error\",\n                message: error?.name || \"Logout Error\",\n                description:\n                    error?.message || \"Something went wrong during logout\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\nimport { AuthContext } from \"@contexts/auth\";\n\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\n\nexport type UseLoginProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TLoginData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useLogin = <TVariables = {}>({\n    mutationOptions,\n}: UseLoginProps<TVariables> = {}): UseMutationResult<\n    TLoginData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { login: loginFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n    const { close, open } = useNotification();\n\n    const { to } = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\n        [\"useLogin\"],\n        loginFromContext,\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (to) {\n                    return replace(to as string);\n                }\n\n                if (redirectPathFromAuth !== false) {\n                    if (typeof redirectPathFromAuth === \"string\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        replace(\"/\");\n                    }\n                }\n                close?.(\"login-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Login Error\",\n                    description: error?.message || \"Invalid credentials\",\n                    key: \"login-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TRegisterData } from \"../../../interfaces\";\n\nexport type UseRegisterProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TRegisterData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useRegister = <TVariables = {}>({\n    mutationOptions,\n}: UseRegisterProps<TVariables> = {}): UseMutationResult<\n    TRegisterData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { register: registerFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TRegisterData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useRegister\"], registerFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                } else {\n                    replace(\"/\");\n                }\n            }\n            close?.(\"register-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Register Error\",\n                description: error?.message || \"Error while registering\",\n                key: \"register-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TForgotPasswordData } from \"../../../interfaces\";\n\nexport type UseForgotPasswordProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TForgotPasswordData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useForgotPassword = <TVariables = {}>({\n    mutationOptions,\n}: UseForgotPasswordProps<TVariables> = {}): UseMutationResult<\n    TForgotPasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { forgotPassword: forgotPasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TForgotPasswordData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useForgotPassword\"], forgotPasswordFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                }\n            }\n            close?.(\"forgot-password-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Forgot Password Error\",\n                description: error?.message || \"Error while resetting password\",\n                key: \"forgot-password-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification, useRouterContext } from \"@hooks\";\nimport {\n    IAuthContext,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        mutationOptions?: Omit<\n            UseMutationOptions<TUpdatePasswordData, Error, TVariables, unknown>,\n            \"mutationFn\" | \"onError\" | \"onSuccess\"\n        >;\n    };\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useUpdatePassword = <\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    mutationOptions,\n}: UseUpdatePasswordProps<TVariables> = {}): UseMutationResult<\n    TUpdatePasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { updatePassword: updatePasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n    const { useLocation } = useRouterContext();\n\n    const { search } = useLocation();\n\n    const queryStrings = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<\n        TUpdatePasswordData,\n        Error,\n        TVariables,\n        unknown\n    >(\n        [\"useUpdatePassword\"],\n        async (variables) => {\n            return updatePasswordFromContext?.({\n                ...queryStrings,\n                ...variables,\n            });\n        },\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        replace(redirectPathFromAuth);\n                    }\n                }\n                close?.(\"update-password-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Update Password Error\",\n                    description:\n                        error?.message || \"Error while updating password\",\n                    key: \"update-password-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\n/**\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\n *\n */\nexport const useAuthenticated = (\n    params?: any,\n): UseQueryResult<any, unknown> => {\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery(\n        [\"useAuthenticated\", params],\n        async () => (await checkAuth?.(params)) ?? {},\n        {\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useMutation, UseMutationResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport { useLogout } from \"@hooks\";\n\n/**\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport const useCheckError = (): UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n> => {\n    const { checkError: checkErrorFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { mutate: logout } = useLogout();\n\n    const queryResponse = useMutation(\n        [\"useCheckError\"],\n        checkErrorFromContext,\n        {\n            onError: (redirectPath?: string) => {\n                logout({ redirectPath });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../interfaces\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\n\n    return isProvided || false;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport {\n    GetListResponse,\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     */\n    config?: UseListConfig;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options,\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseListProps<TData, TError>): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash/zip\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash/unionWith\";\nimport differenceWith from \"lodash/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (sorter as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        { ...rest, ...(pagination ? pagination : {}), sorter, filters },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaDataQuery } from \"src/interfaces\";\n\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    metaData?: MetaDataQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            { ...config, ...metaData } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...metaData } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...metaData } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","import { ResourceProps } from \"src/interfaces\";\n\nconst getParentOf = (item: ResourceProps) => {\n    return (resourceItem: ResourceProps) =>\n        item.parentName ? resourceItem.name === item.parentName : false;\n};\n\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const resourceRoute = item.options?.route ?? item.name;\n\n    if (item.parentName) {\n        const parent = resourcesFromProps.find(getParentOf(item));\n\n        if (parent?.parentName) {\n            const routePrefix = routeGenerator(parent, resourcesFromProps);\n\n            route = `${routePrefix}/${resourceRoute}`;\n        } else if (item.parentName) {\n            const parentPrefix =\n                parent?.options?.route ?? parent?.name ?? item.parentName;\n            route = `${parentPrefix}/${resourceRoute}`;\n        }\n    } else {\n        route = resourceRoute;\n    }\n    return route;\n};\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route = parent.route ?? parent.options?.route ?? \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | React.ComponentProps<typeof ReactQueryDevtools>;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import {\n    FormAction,\n    IRefineContextOptions,\n    RedirectAction,\n} from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: FormAction;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"@contexts/resource\";\n\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    if (resource?.options?.dataProviderName) {\n        return resource.options.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    GetOneResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useTranslate,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\n\nexport type UseOneProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useOne = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        channel: `resources/${resource}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            metaData,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled: queryOptions?.enabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\n        queryKey.detail(id),\n        ({ queryKey, pageParam, signal }) =>\n            getOne<TData>({\n                resource,\n                id,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, metaData }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { id, metaData }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-getOne-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    BaseRecord,\n    BaseKey,\n    GetManyResponse,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\nexport type UseManyProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseManyProps<TData, TError>): QueryObserverResult<\n    GetManyResponse<TData>\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getMany, getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            ids: ids ?? [],\n            metaData,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\n        queryKey.many(ids),\n        ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource,\n                    ids,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TData>({\n                            resource,\n                            id,\n                            metaData: {\n                                ...metaData,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids[0]}-${resource}-getMany-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateResponse,\n    MutationMode,\n    PrevContext as UpdateContext,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport pluralize from \"pluralize\";\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type UpdateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Callback that runs when undo button is clicked on `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            id,\n            values,\n            resource,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource,\n                    id,\n                    variables: values,\n                    metaData,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                resource,\n                id,\n                mutationMode,\n                values,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    return {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    record = {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.detail(id),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            return {\n                                ...previous,\n                                data: {\n                                    ...previous.data,\n                                    ...values,\n                                },\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\", \"detail\"],\n                },\n            ) => {\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                    id,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    values,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: data.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                let previousData: any;\n                if (context) {\n                    const queryData = queryClient.getQueryData<\n                        UpdateResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData = Object.keys(values).reduce<any>(\n                        (acc, item) => {\n                            acc[item] = queryData?.data?.[item];\n                            return acc;\n                        },\n                        {},\n                    );\n                }\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"update\",\n                    resource,\n                    data: values,\n                    previousData,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { id, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: translate(\n                                    `${resource}.${resource}`,\n                                    resourceSingular,\n                                ),\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\nimport { pickDataProvider } from \"@definitions/helpers\";\n\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\n\ntype useCreateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TVariables>,\n        unknown\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TVariables>) => {\n            return dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource,\n                variables: values,\n                metaData,\n            });\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    resource,\n                    successNotification: successNotificationFromProp,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    metaData,\n                },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, values, resource)\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully created ${resourceSingular}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids: data?.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"create\",\n                    resource,\n                    data: values,\n                    meta: {\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id: data?.data?.id ?? undefined,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                {\n                    resource,\n                    errorNotification: errorNotificationFromProp,\n                    values,\n                },\n            ) => {\n                checkError(err);\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, values, resource)\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    DeleteOneResponse,\n    MutationMode,\n    PrevContext as DeleteContext,\n    BaseRecord,\n    BaseKey,\n    HttpError,\n    GetListResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type DeleteParams<TVariables> = {\n    id: BaseKey;\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TVariables>,\n    DeleteContext<TData>\n>;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource,\n                    id,\n                    metaData,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        {\n            onMutate: async ({\n                id,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) =>\n                                    record.id?.toString() !== id.toString(),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    return (\n                                        record.id?.toString() !== id?.toString()\n                                    );\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, id, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully deleted a ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: {\n                        ids: id ? [id] : [],\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"delete\",\n                    resource,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, id, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { handleMultiple, pickDataProvider } from \"@definitions\";\n\ntype useCreateManyParams<TVariables> = {\n    resource: string;\n    values: TVariables[];\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TVariables>\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TVariables>) => {\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource,\n                    variables: values,\n                    metaData,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource,\n                            variables: val,\n                            metaData,\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            onSuccess: (\n                response,\n                {\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                },\n            ) => {\n                const resourcePlural = pluralize.plural(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(response, values, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully created ${resourcePlural}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                const ids = response?.data\n                    .filter((item) => item?.id !== undefined)\n                    .map((item) => item.id!);\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids,\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (err: TError, { resource, errorNotification, values }) => {\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, values, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useCancelNotification,\n    useCheckError,\n    useMutationMode,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateManyResponse,\n    HttpError,\n    MutationMode,\n    QueryResponse,\n    PrevContext as UpdateContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\ntype UpdateManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const { mutate: checkError } = useCheckError();\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            ids,\n            values,\n            resource,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        variables: values,\n                        metaData,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n\n        {\n            onMutate: async ({\n                resource,\n                ids,\n                values,\n                mutationMode,\n                dataProviderName,\n                metaData,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                    metaData,\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries = queryClient.getQueriesData<\n                    QueryResponse<TData>\n                >(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = {\n                                    ...previous.data,\n                                    ...values,\n                                };\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    invalidates: [\"list\", \"many\"],\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                });\n\n                ids.forEach((id) =>\n                    invalidateStore({\n                        resource,\n                        invalidates: [\"detail\"],\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id,\n                    }),\n                );\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                { ids, resource, successNotification, values },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { ids, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: ids.map(String),\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (\n                err: TError,\n                { ids, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ids, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-updateMany-error-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    DeleteManyResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MutationMode,\n    PreviousQuery,\n    GetListResponse,\n    PrevContext as DeleteContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useMutationMode,\n    useCancelNotification,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { queryKeys, pickDataProvider, handleMultiple } from \"@definitions\";\n\nexport type DeleteManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            resource,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        metaData,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                ids,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (item) =>\n                                    item.id &&\n                                    !ids\n                                        .map(String)\n                                        .includes(item.id.toString()),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    if (record.id) {\n                                        return !ids\n                                            .map(String)\n                                            .includes(record.id.toString());\n                                    }\n                                    return false;\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: any | null) => {\n                                if (!previous || previous.data.id == id) {\n                                    return null;\n                                }\n                                return {\n                                    ...previous,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            // Always refetch after error or success:\n            onSettled: (\n                _data,\n                _error,\n                {\n                    resource,\n                    ids,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                { ids, resource, successNotification },\n                context,\n            ) => {\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully deleted ${resource}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: { ids },\n                    date: new Date(),\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n            },\n            onError: (err, { ids, resource, errorNotification }, context) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, ids, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useDataProvider } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n\n    const { getApiUrl } = dataProvider(dataProviderName);\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    CustomResponse,\n    CrudSorting,\n    CrudFilters,\n    BaseRecord,\n    HttpError,\n    MetaDataQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useTranslate,\n    useCheckError,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sort using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n *\n */\nexport const useCustom = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    dataProviderName,\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\n    CustomResponse<TData>,\n    TError\n> => {\n    const dataProvider = useDataProvider();\n\n    const { custom } = dataProvider(dataProviderName);\n    const { mutate: checkError } = useCheckError();\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n\n    if (custom) {\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\n            [\n                dataProviderName,\n                \"custom\",\n                method,\n                url,\n                { ...config, ...metaData },\n            ],\n            ({ queryKey, pageParam, signal }) =>\n                custom<TData>({\n                    url,\n                    method,\n                    ...config,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            {\n                ...queryOptions,\n                onSuccess: (data) => {\n                    queryOptions?.onSuccess?.(data);\n\n                    const notificationConfig =\n                        typeof successNotification === \"function\"\n                            ? successNotification(data, {\n                                  ...config,\n                                  ...metaData,\n                              })\n                            : successNotification;\n\n                    handleNotification(notificationConfig);\n                },\n                onError: (err: TError) => {\n                    checkError(err);\n                    queryOptions?.onError?.(err);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ...config, ...metaData })\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${method}-notification`,\n                        message: translate(\n                            \"notifications.error\",\n                            { statusCode: err.statusCode },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                },\n            },\n        );\n        return queryResponse;\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useCheckError,\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n} from \"../../interfaces\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> => {\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TVariables>) => {\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    metaData,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import {\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverResult,\n} from \"@tanstack/react-query\";\nimport {\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n    GetListResponse,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"@definitions/helpers\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseInfiniteListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * react-query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options,\n     */\n    queryOptions?: UseInfiniteQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useInfiniteList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseInfiniteListProps<TData, TError>): InfiniteQueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useInfiniteQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            const pagination = {\n                ...config?.pagination,\n                current: pageParam,\n            };\n\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                pagination,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination,\n                    ...rest,\n                };\n            });\n        },\n        {\n            getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n            getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useInfiniteList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext, useEffect } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { queryKeys } from \"@definitions\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource: string;\n    enabled?: boolean;\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n}: UseResourceSubscriptionProps): void => {\n    const queryClient = useQueryClient();\n    const queryKey = queryKeys(resource);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource,\n                    ...params,\n                },\n                types,\n                callback: (event) => {\n                    if (liveMode === \"auto\") {\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                    }\n\n                    onLiveEvent?.(event);\n                    onLiveEventContextCallback?.(event);\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n    RouteAction,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\n\nexport type UseResourcePropsType = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\ntype UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource: IResourceItem;\n    resourceName: string;\n    id?: BaseKey;\n    action: RouteAction;\n};\n\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\n */\nexport const useResource = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName,\n    recordItemId,\n}: UseResourcePropsType = {}): UseResourceReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(\n        resourceNameOrRouteName ?? params.resource,\n    );\n\n    const resourceName = propResourceName ?? resource.name;\n\n    const id = recordItemId ?? params.id;\n\n    return { resources, resource, resourceName, id, action: params.action };\n};\n","import React, { ReactNode } from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"./IResourceContext\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    IResourceContext & { children: ReactNode }\n> = ({ resources, children }) => {\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const resource = resources.find((p) => p.route === route);\n\n            if (!resource) {\n                const resourceWithName = resources.find(\n                    (p) => p.name === route,\n                );\n                return (\n                    resourceWithName ??\n                    ({ name: route, route: route } as IResourceItem)\n                );\n            }\n            return resource;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useState } from \"react\";\nimport {\n    useResource,\n    useResourceWithRoute,\n    useRouterContext,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { userFriendlyResourceName, pickDataProvider } from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    sorter,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resources } = useResource();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const dataProvider = useDataProvider();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    let { name: resource } = resourceWithRoute(routeResourceName);\n\n    if (resourceName) {\n        resource = resourceName;\n    }\n\n    const filename = `${userFriendlyResourceName(\n        resource,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource,\n                    filters,\n                    sort: sorter,\n                    pagination: {\n                        current,\n                        pageSize,\n                    },\n                    metaData,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport {\n    useResourceWithRoute,\n    useRouterContext,\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    ResourceRouterParams,\n    RedirectAction,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TData> | UpdateResponse<TData>,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TError,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n} & SuccessErrorNotification &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = ActionFormProps<TData, TError, TVariables> & ActionParams & LiveModeProps;\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\n    mutationResult:\n        | UseUpdateReturnType<TData, TError, TVariables>\n        | UseCreateReturnType<TData, TError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n    ) => void;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    metaData,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { options } = useRefineContext();\n    const { useParams } = useRouterContext();\n    const {\n        resource: resourceFromRoute,\n        action: actionFromRoute,\n        id: idFromParams,\n    } = useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProps || resourceFromProps === resourceFromRoute\n            ? idFromProps ?? idFromParams\n            : idFromProps;\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== id) {\n            setId(idFromProps);\n        }\n    }, [idFromProps]);\n\n    const resourceName = resourceFromProps ?? resourceFromRoute;\n    const action =\n        actionFromProps ??\n        (actionFromRoute === \"show\" ? \"create\" : actionFromRoute) ??\n        \"create\";\n\n    const resourceWithRoute = useResourceWithRoute();\n    const resource = resourceWithRoute(resourceName);\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    const redirect = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<TData, TError, TVariables>({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return mutateCreate(\n                {\n                    values,\n                    resource: resource.name,\n                    successNotification,\n                    errorNotification,\n                    metaData,\n                    dataProviderName,\n                    invalidates,\n                },\n                {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        const responseId = data?.data?.id;\n\n                        onSuccess(responseId);\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                },\n            );\n        });\n    };\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const variables: UpdateParams<TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            metaData,\n            dataProviderName,\n            invalidates,\n        };\n\n        const onSuccess = () => {\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\n            setId(defaultId);\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return setTimeout(() => {\n                mutateUpdate(variables, {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        if (mutationMode === \"pessimistic\") {\n                            onSuccess();\n                        }\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                });\n            });\n        });\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    return {\n        ...result,\n        queryResult,\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n            });\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport { BaseKey, IResourceItem, RedirectAction } from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource: IResourceItem;\n    id?: BaseKey;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n            }: {\n                redirect: RedirectAction;\n                resource: IResourceItem;\n                id?: BaseKey;\n            }) => {\n                if (redirect && resource.route) {\n                    if (resource.canShow && redirect === \"show\" && id) {\n                        return show(resource.route, id);\n                    }\n\n                    if (resource.canEdit && redirect === \"edit\" && id) {\n                        return edit(resource.route, id);\n                    }\n\n                    if (resource.canCreate && redirect === \"create\") {\n                        return create(resource.route);\n                    }\n\n                    return list(resource.route, \"push\");\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\nimport { BaseKey } from \"../../interfaces\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        type === \"push\" ? history.push(url) : history.replace(url);\n    };\n\n    const createUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}/create`;\n    };\n\n    const editUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n\n        return `/${resourceName.route}/edit/${encodedId}`;\n    };\n\n    const cloneUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/clone/${encodedId}`;\n    };\n\n    const showUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/show/${encodedId}`;\n    };\n\n    const listUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}`;\n    };\n\n    const create = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(createUrl(resource), type);\n    };\n\n    const edit = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(editUrl(resource, id), type);\n    };\n\n    const clone = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(cloneUrl(resource, id), type);\n    };\n\n    const show = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(showUrl(resource, id), type);\n    };\n\n    const list = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(listUrl(resource), type);\n    };\n\n    const push = (path: string, ...rest: unknown[]) => {\n        history.push(path, ...rest);\n    };\n\n    const replace = (path: string, ...rest: unknown[]) => {\n        history.replace(path, ...rest);\n    };\n\n    const goBack = () => {\n        history.goBack();\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n} from \"../../interfaces\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n};\n\nexport type useShowProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\n */\nexport const useShow = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n}: useShowProps<TData, TError> = {}): useShowReturnType<TData> => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, id: idFromRoute } =\n        useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProp || resourceFromProp === routeResourceName\n            ? id ?? idFromRoute\n            : id;\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== showId) {\n            setShowId(defaultId);\n        }\n    }, [defaultId]);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash/chunk\";\n\nimport {\n    useCreate,\n    useCreateMany,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport {\n    MapDataFn,\n    BaseRecord,\n    HttpError,\n    ResourceRouterParams,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { importCSVMapper, sequentialPromises } from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const resourceWithRoute = useResourceWithRoute();\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    const { name: resource } = resourceWithRoute(\n        resourceName ?? routeResourceName,\n    );\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource,\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        metaData,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource,\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            metaData,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { useContext } from \"react\";\nimport { RouterContext } from \"@contexts/router\";\n\nexport const useRouterContext = () => {\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        useContext(RouterContext);\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const RouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContextProvider: React.FC<\n    IRouterContext & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory,\n                useLocation,\n                useParams,\n                Prompt,\n                Link,\n                routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n        icon: _icon,\n        list: _list,\n        edit: _edit,\n        create: _create,\n        show: _show,\n        children: _children,\n        ...restResource\n    } = _resource ?? {};\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const queryResponse = useQuery<CanReturnType>(\n        [\n            \"useCan\",\n            {\n                action,\n                resource,\n                params: { ...paramsRest, resource: restResource },\n                enabled: queryOptions?.enabled,\n            },\n        ],\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        () =>\n            can?.({ action, resource, params }) ??\n            Promise.resolve({ can: true }),\n        {\n            enabled: typeof can !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport { IAccessControlContext } from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\n    {},\n);\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children }) => {\n    return (\n        <AccessControlContext.Provider value={{ can }}>\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can } = useContext(AccessControlContext);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash/uniqBy\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\n\nimport { useList, useMany } from \"@hooks\";\nimport {\n    CrudSorting,\n    Option,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n} from \"../../interfaces\";\n\nexport type UseSelectProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: string;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: string;\n    /**\n     * Allow us to sort the options\n     */\n    sort?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Pagination;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `undefined`\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Metadata query for `dataProvider`\n     * @default `{}`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: Option[];\n};\n\nexport const useSelect = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props: UseSelectProps<TData, TError>,\n): UseSelectReturnType<TData> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n\n    const {\n        resource,\n        sort,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        metaData,\n        dataProviderName,\n    } = props;\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map((item) => ({\n                    label: get(item, optionLabel),\n                    value: get(item, optionValue),\n                })),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TData, TError>({\n        resource,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptionsFromProps?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map((item) => ({\n                        label: get(item, optionLabel),\n                        value: get(item, optionValue),\n                    })),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TData, TError>({\n        resource,\n        config: {\n            sort,\n            filters: filters.concat(search),\n            pagination: {\n                current: pagination?.current,\n                pageSize: pagination?.pageSize ?? fetchSize,\n            },\n            hasPagination,\n        },\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: useMemo(\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\n            [options, selectedOptions],\n        ),\n        onSearch: debounce(onSearch, debounceValue),\n    };\n};\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash/differenceWith\";\nimport isEqual from \"lodash/isEqual\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useResourceWithRoute,\n    useList,\n    useLiveMode,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n} from \"../../interfaces\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Initial page index\n     * @default 10\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     */\n    initialPageSize?: number;\n    /**\n     * Initial sorter state\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Initial filter state\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * WDefault and unchangeable filter state\n     * @default `[]`\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     *Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTablePaginationKeys =\n    | \"current\"\n    | \"setCurrent\"\n    | \"pageSize\"\n    | \"setPageSize\"\n    | \"pageCount\";\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    sorter: CrudSorting;\n    setSorter: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n};\n\nexport type useTableNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = Omit<useTableReturnType<TData, TError>, useTablePaginationKeys> &\n    Record<useTablePaginationKeys, undefined>;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\n// overload with pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination?: true;\n    },\n): useTableReturnType<TData, TError>;\n// overload without pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination: false;\n    },\n): useTableNoPaginationReturnType<TData, TError>;\n// implementation\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    initialCurrent = 1,\n    initialPageSize = 10,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior = \"merge\",\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: useTableProps<TData, TError> = {}):\n    | useTableReturnType<TData, TError>\n    | useTableNoPaginationReturnType<TData, TError> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const { useLocation, useParams } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search);\n\n    const defaultCurrent = parsedCurrent || initialCurrent;\n    const defaultPageSize = parsedPageSize || initialPageSize;\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const { replace } = useNavigation();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const [sorter, setSorter] = useState<CrudSorting>(\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n        const stringifyParams = stringifyTableParams({\n            pagination: {\n                pageSize,\n                current,\n            },\n            sorter,\n            filters,\n            ...currentQueryParams,\n        });\n        return `${pathname}?${stringifyParams}`;\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        // We get QueryString parameters that are uncontrolled by refine.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n            search,\n            {\n                ignoreQueryPrefix: true,\n            },\n        );\n\n        return rest;\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            const queryParams = currentQueryParams();\n            const stringifyParams = stringifyTableParams({\n                ...(hasPagination\n                    ? {\n                          pagination: {\n                              pageSize,\n                              current,\n                          },\n                      }\n                    : {}),\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\n                filters: differenceWith(filters, permanentFilter, isEqual),\n                ...queryParams,\n            });\n\n            // Careful! This triggers render\n            return replace(`${pathname}?${stringifyParams}`, undefined, {\n                shallow: true,\n            });\n        }\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\n\n    const queryResult = useList<TData, TError>({\n        resource: resource.name,\n        config: {\n            hasPagination,\n            pagination: { current, pageSize },\n            filters: unionFilters(permanentFilter, filters),\n            sort: unionSorters(permanentSorter, sorter),\n        },\n        queryOptions,\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(permanentFilter, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(permanentFilter, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\n    };\n\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorter(() => unionSorters(permanentSorter, newSorter));\n    };\n\n    const paginationValues = useMemo(() => {\n        if (hasPagination) {\n            return {\n                current,\n                setCurrent,\n                pageSize,\n                setPageSize,\n                pageCount: pageSize\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n                    : 1,\n            };\n        }\n\n        return {\n            current: undefined,\n            setCurrent: undefined,\n            pageSize: undefined,\n            setPageSize: undefined,\n            pageCount: undefined,\n        };\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\n\n    return {\n        tableQueryResult: queryResult,\n        sorter,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        ...paginationValues,\n        createLinkForSyncWithLocation,\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        queryOptions: {\n            enabled: !!auditLogContext,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = resources.find((p) => p.name === params.resource);\n            const logPermissions = resource?.options?.auditLog?.permissions;\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        logMutationOptions,\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    const queryKey = queryKeys(data?.resource);\n                    queryClient.invalidateQueries(queryKey.logList());\n                }\n            },\n            ...renameMutationOptions,\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { queryKeys } from \"@definitions/helpers\";\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\n\nexport type UseLogProps<TData, TError> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TData, TError>;\n    metaData?: MetaDataQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\n */\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n\n    const queryKey = queryKeys(resource, undefined, metaData);\n\n    const queryResponse = useQuery<TData, TError>(\n        queryKey.logList(meta),\n        () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        {\n            enabled: typeof get !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useCallback } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n};\n\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const queryKey = queryKeys(\n                resource,\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            invalidates.forEach((key) => {\n                switch (key) {\n                    case \"all\":\n                        queryClient.invalidateQueries(queryKey.all);\n                        break;\n                    case \"list\":\n                        queryClient.invalidateQueries(queryKey.list());\n                        break;\n                    case \"many\":\n                        queryClient.invalidateQueries(queryKey.many());\n                        break;\n                    case \"resourceAll\":\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                        break;\n                    case \"detail\":\n                        queryClient.invalidateQueries(\n                            queryKey.detail(id || \"\"),\n                        );\n                        break;\n                    default:\n                        break;\n                }\n            });\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { humanizeString } from \"@definitions\";\n\nimport { ResourceRouterParams } from \"../../interfaces\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\n    const { useParams } = useRouterContext();\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const translate = useTranslate();\n\n    const { resources, resource } = useResource();\n\n    const { action } = useParams<ResourceRouterParams>();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string) => {\n        const parentResource = resources.find(\n            (resource) => resource.name === parentName,\n        );\n\n        if (parentResource) {\n            if (parentResource.parentName) {\n                addBreadcrumb(parentResource.parentName);\n            }\n            breadcrumbs.push({\n                label:\n                    parentResource.label ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        humanizeString(parentResource.name),\n                    ),\n\n                href: !!parentResource.list\n                    ? `/${parentResource.route}`\n                    : undefined,\n                icon: parentResource.icon,\n            });\n        }\n    };\n\n    if (resource.parentName) {\n        addBreadcrumb(resource.parentName);\n    }\n\n    breadcrumbs.push({\n        label:\n            resource.label ??\n            translate(\n                `${resource.name}.${resource.name}`,\n                humanizeString(resource.name),\n            ),\n        href: !!resource.list ? `/${resource.route}` : undefined,\n        icon: resource.icon,\n    });\n\n    if (action) {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(`buttons.${action}`, humanizeString(action)),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, humanizeString(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport {\n    useRefineContext,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"..\";\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const { resources } = useResource();\n    const translate = useTranslate();\n\n    const { useLocation, useParams } = useRouterContext();\n    const location = useLocation();\n    const params = useParams<{ resource: string }>();\n\n    const { hasDashboard } = useRefineContext();\n\n    const selectedKey = React.useMemo(() => {\n        let selectedResource = resources.find(\n            (el) => location?.pathname === `/${el.route}`,\n        );\n\n        if (!selectedResource) {\n            selectedResource = resources.find(\n                (el) => params?.resource === (el.route as string),\n            );\n        }\n\n        let _selectedKey: string;\n        if (selectedResource?.route) {\n            _selectedKey = `/${selectedResource?.route}`;\n        } else if (location.pathname === \"/\") {\n            _selectedKey = \"/\";\n        } else {\n            _selectedKey = location?.pathname;\n        }\n        return _selectedKey;\n    }, [resources, location, params]);\n\n    const treeMenuItems: IMenuItem[] = React.useMemo(\n        () =>\n            resources.map((resource) => {\n                const route = `/${resource.route}`;\n\n                return {\n                    ...resource,\n                    icon: resource.icon,\n                    route: route,\n                    key: resource.key ?? route,\n                    label:\n                        resource.label ??\n                        translate(\n                            `${resource.name}.${resource.name}`,\n                            userFriendlyResourceName(resource.name, \"plural\"),\n                        ),\n                };\n            }),\n        [resources, hasDashboard, translate],\n    );\n    const menuItems: ITreeMenu[] = React.useMemo(\n        () => createTreeView(treeMenuItems),\n        [treeMenuItems],\n    );\n\n    const crawlNestedKeys = React.useCallback(\n        (\n            currentKey: string,\n            currentResources: typeof resources,\n            isParent = false,\n        ): string[] => {\n            const currentElement = currentResources.find((el) =>\n                isParent ? el.name === currentKey : el.route === currentKey,\n            );\n\n            if (currentElement) {\n                const keysArray: string[] = [];\n\n                if (isParent && currentElement.route) {\n                    keysArray.unshift(...[currentElement.route]);\n                }\n\n                if (currentElement.parentName) {\n                    keysArray.unshift(\n                        ...crawlNestedKeys(\n                            currentElement.parentName,\n                            currentResources,\n                            true,\n                        ),\n                    );\n                }\n                return keysArray;\n            }\n\n            return [];\n        },\n        [],\n    );\n\n    const defaultOpenKeys = React.useMemo(\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\n        [selectedKey, treeMenuItems],\n    );\n\n    const values = React.useMemo(() => {\n        const filterMenuItemsByListViewAndHideOption = (\n            menus: ITreeMenu[],\n        ): ITreeMenu[] => {\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\n                if (obj.children.length > 0 && obj.options?.hide !== true)\n                    return [\n                        ...menuItem,\n                        {\n                            ...obj,\n                            children: filterMenuItemsByListViewAndHideOption(\n                                obj.children,\n                            ),\n                        },\n                    ];\n                else if (\n                    typeof obj.list !== \"undefined\" &&\n                    obj.options?.hide !== true\n                )\n                    return [...menuItem, obj];\n\n                return menuItem;\n            }, []);\n        };\n\n        return {\n            defaultOpenKeys,\n            selectedKey,\n            menuItems: filterMenuItemsByListViewAndHideOption(menuItems),\n        };\n    }, [defaultOpenKeys, selectedKey, menuItems]);\n\n    return values;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<ILoginForm>();\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#authpage} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<LoginFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ email, password, remember });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.login.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"text\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\"pages.login.fields.password\", \"Password\")}\n                    </label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    {rememberMe ?? (\n                        <>\n                            <label>\n                                {translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                                <input\n                                    name=\"remember\"\n                                    type=\"checkbox\"\n                                    size={20}\n                                    checked={remember}\n                                    value={remember.toString()}\n                                    onChange={() => {\n                                        setRemember(!remember);\n                                    }}\n                                />\n                            </label>\n                        </>\n                    )}\n                    <br />\n                    {forgotPasswordLink ??\n                        renderLink(\n                            \"/forgot-password\",\n                            translate(\n                                \"pages.login.buttons.forgotPassword\",\n                                \"Forgot password?\",\n                            ),\n                        )}\n                    <input\n                        type=\"submit\"\n                        value={translate(\"pages.login.signin\", \"Sign in\")}\n                    />\n                    {registerLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.login.buttons.noAccount\",\n                                \"Don’t have an account?\",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/register\",\n                                translate(\"pages.login.register\", \"Sign up\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport { useTranslate, useRouterContext, useRegister } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: register, isLoading } = useRegister();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    register({ email, password });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.register.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"email\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        value={translate(\n                            \"pages.register.buttons.submit\",\n                            \"Sign up\",\n                        )}\n                        disabled={isLoading}\n                    />\n                    {loginLink ?? (\n                        <>\n                            <span>\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}{\" \"}\n                                {renderLink(\n                                    \"login\",\n                                    translate(\"pages.login.signin\", \"Sign in\"),\n                                )}\n                            </span>\n                        </>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useTranslate, useRouterContext, useForgotPassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    QueryClientProvider,\n    QueryClient,\n    QueryCache,\n    MutationCache,\n    DefaultOptions,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { AuthContextProvider } from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { ResourceContextProvider, IResourceItem } from \"@contexts/resource\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { RouterContextProvider } from \"@contexts/router\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { handleRefineOptions, routeGenerator } from \"@definitions\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\n\nimport {\n    MutationMode,\n    IDataContextProvider,\n    I18nProvider,\n    LayoutProps,\n    TitleProps,\n    IRouterProvider,\n    ResourceProps,\n    ILiveContext,\n    LiveModeProps,\n    IDataMultipleContextProvider,\n    AuthProvider,\n    NotificationProvider,\n    AccessControlProvider,\n    AuditLogProvider,\n    DashboardPageProps,\n    IRefineOptions,\n    INotificationContext,\n} from \"../../../interfaces\";\n\ninterface QueryClientConfig {\n    queryCache?: QueryCache;\n    mutationCache?: MutationCache;\n    defaultOptions?: DefaultOptions;\n}\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the main building block of a refine app. A resource represents an entity in an endpoint in the API.\n     * @type [`ResourceProps[]`](/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](/docs/api-reference/core/providers/router-provider/)\n     */\n    routerProvider: IRouterProvider;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](/docs/api-reference/core/components/refine-config/#catchall)\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#loginpage)\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](/docs/api-reference/core/components/refine-config/#dashboardpage)\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#readypage)\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](/docs/api-reference/core/components/refine-config/#layout)\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#sider)\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#header)\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#footer)\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](/docs/api-reference/core/components/refine-config/#title)\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](/docs/api-reference/core/components/refine-config/#options-1)\n     * */\n    options?: IRefineOptions;\n    /**\n     * **refine** implements a simple and transparent telemetry module for collecting usage statistics defined in a very limited scope. This telemetry module is used to improve the refine experience.\n     * @deprecated  `disableTelemetry`  property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n     * @type [`boolean`](/docs/api-reference/core/components/refine-config/#disabletelemetry)\n     */\n    disableTelemetry?: boolean;\n    /** \n     *  Config for React Query client that refine uses.\n        @deprecated `reactQueryClientConfig` property is deprecated. Use `clientConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ reactQuery: { clientConfig: { queryCache: new QueryCache() } } }}`\n        @see https://refine.dev/docs/core/components/refine-config/#clientconfig\n          @type [`QueryClientConfig` | `false`](/docs/api-reference/core/components/refine-config/#reactquery)\n     */\n    reactQueryClientConfig?: QueryClientConfig;\n    /** \n           *  Config for customize React Query Devtools.\n              @deprecated `reactQueryDevtoolConfig` property is deprecated. Use `devtoolConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ reactQuery: { devtoolConfig: false } }}`\n              @see https://refine.dev/docs/core/components/refine-config/#devtoolConfig\n              @type [`ReactQueryDevtools` | `false`](/docs/api-reference/core/components/refine-config/#devtoolconfig)\n           */\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n\n    /** \n           *  Whether to update data automatically (auto) or not (manual) if a related live event is received. The off value is used to avoid creating a subscription.\n              @deprecated `liveMode` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ liveMode: \"auto\" }}`\n              @see https://refine.dev/docs/core/components/refine-config/#livemode\n              @type [`LiveModeProps[\"liveMode\"]`](/docs/api-reference/core/components/refine-config/#livemode)\n           */\n    liveMode?: LiveModeProps[\"liveMode\"];\n    /** \n        @deprecated `disableTelemetry` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ disableTelemetry: true }}`\n     */\n    /**\n     * `mutationMode` determines which mode the mutations run with. (e.g. useUpdate, useDelete).\n     * @deprecated `mutationMode` property is deprecated at this level. Use it from within `options` instead.\n     * @type [`MutationMode`](/docs/api-reference/core/components/refine-config/#mutationmode)\n     * @default \"pessimistic\"\n     */\n    mutationMode?: MutationMode;\n    /** \n       * List query parameter values can be edited manually by typing directly in the URL. To activate this feature syncWithLocation needs to be set to true.\n          @deprecated `syncWithLocation` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ syncWithLocation: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#syncwithlocation\n       *  @type [`boolean`](/docs/api-reference/core/components/refine-config/#syncwithlocation)\n       */\n    syncWithLocation?: boolean;\n    /** \n       *  When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n          @deprecated `warnwhenunsavedchanges` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ warnwhenunsavedchanges: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#warnwhenunsavedchanges\n      *   @type [`boolean`](/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges)\n       */\n    warnWhenUnsavedChanges?: boolean;\n    /** \n       *  The duration of the timeout period in undoable mode, shown in milliseconds. Mutations can be cancelled during this period.\n          @deprecated `undoableTimeout` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ undoableTimeout: 5000 }}`\n          @see https://refine.dev/docs/core/components/refine-config/#undoabletimeout\n      *   @type [`number`](/docs/api-reference/core/components/refine-config/#undoabletimeout)\n       */\n    undoableTimeout?: number;\n}\n\n/**\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    authProvider,\n    dataProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources: resourcesFromProps,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    mutationMode,\n    syncWithLocation,\n    warnWhenUnsavedChanges,\n    undoableTimeout,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    liveMode,\n    onLiveEvent,\n    disableTelemetry,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n        disableTelemetry,\n        liveMode,\n        mutationMode,\n        reactQueryClientConfig,\n        reactQueryDevtoolConfig,\n        syncWithLocation,\n        warnWhenUnsavedChanges,\n        undoableTimeout,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        const _resources: IResourceItem[] = [];\n\n        resourcesFromProps?.forEach((resource) => {\n            _resources.push({\n                key: resource.key,\n                name: resource.name,\n                label: resource.options?.label,\n                icon: resource.icon,\n                route: routeGenerator(resource, resourcesFromProps),\n                canCreate: !!resource.create,\n                canEdit: !!resource.edit,\n                canShow: !!resource.show,\n                canDelete: resource.canDelete,\n                create: resource.create,\n                show: resource.show,\n                list: resource.list,\n                edit: resource.edit,\n                options: resource.options,\n                parentName: resource.parentName,\n            });\n        });\n\n        return _resources;\n    }, [resourcesFromProps]);\n\n    if (resources.length === 0) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    const { RouterComponent = React.Fragment } = routerProvider;\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <AuthContextProvider\n                    {...(authProvider ?? {})}\n                    isProvided={Boolean(authProvider)}\n                >\n                    <DataContextProvider {...dataProvider}>\n                        <LiveContextProvider liveProvider={liveProvider}>\n                            <RouterContextProvider {...routerProvider}>\n                                <ResourceContextProvider resources={resources}>\n                                    <TranslationContextProvider\n                                        i18nProvider={i18nProvider}\n                                    >\n                                        <AccessControlContextProvider\n                                            {...(accessControlProvider ?? {})}\n                                        >\n                                            <AuditLogContextProvider\n                                                {...(auditLogProvider ?? {})}\n                                            >\n                                                <UndoableQueueContextProvider>\n                                                    <RefineContextProvider\n                                                        mutationMode={\n                                                            optionsWithDefaults.mutationMode\n                                                        }\n                                                        warnWhenUnsavedChanges={\n                                                            optionsWithDefaults.warnWhenUnsavedChanges\n                                                        }\n                                                        syncWithLocation={\n                                                            optionsWithDefaults.syncWithLocation\n                                                        }\n                                                        Title={Title}\n                                                        undoableTimeout={\n                                                            optionsWithDefaults.undoableTimeout\n                                                        }\n                                                        catchAll={catchAll}\n                                                        DashboardPage={\n                                                            DashboardPage\n                                                        }\n                                                        LoginPage={LoginPage}\n                                                        Layout={Layout}\n                                                        Sider={Sider}\n                                                        Footer={Footer}\n                                                        Header={Header}\n                                                        OffLayoutArea={\n                                                            OffLayoutArea\n                                                        }\n                                                        hasDashboard={\n                                                            !!DashboardPage\n                                                        }\n                                                        liveMode={\n                                                            optionsWithDefaults.liveMode\n                                                        }\n                                                        onLiveEvent={\n                                                            onLiveEvent\n                                                        }\n                                                        options={\n                                                            optionsWithDefaults\n                                                        }\n                                                    >\n                                                        <UnsavedWarnContextProvider>\n                                                            <RouterComponent>\n                                                                {children}\n                                                                {!disableTelemetryWithDefault && (\n                                                                    <Telemetry />\n                                                                )}\n                                                                <RouteChangeHandler />\n                                                            </RouterComponent>\n                                                        </UnsavedWarnContextProvider>\n                                                    </RefineContextProvider>\n                                                </UndoableQueueContextProvider>\n                                            </AuditLogContextProvider>\n                                        </AccessControlContextProvider>\n                                    </TranslationContextProvider>\n                                </ResourceContextProvider>\n                            </RouterContextProvider>\n                        </LiveContextProvider>\n                    </DataContextProvider>\n                </AuthContextProvider>\n            </NotificationContextProvider>\n            {reactQueryWithDefaults.devtoolConfig === false ? null : (\n                <ReactQueryDevtools\n                    initialIsOpen={false}\n                    position=\"bottom-right\"\n                    {...reactQueryWithDefaults.devtoolConfig}\n                />\n            )}\n        </QueryClientProvider>\n    );\n};\n","import { useEffect } from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\nconst encode = (payload: ITelemetryData): string => {\n    const stringifyedPayload = JSON.stringify(payload || {});\n\n    if (typeof btoa !== \"undefined\") {\n        return btoa(stringifyedPayload);\n    }\n\n    return Buffer.from(stringifyedPayload).toString(\"base64\");\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" && !Image) {\n            return;\n        }\n\n        const img = new Image();\n        img.src = `https://telemetry.refine.dev/telemetry?payload=${encode(\n            payload,\n        )}`;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"3.99.2\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const authContext = useContext(AuthContext);\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n\n    const auth = authContext.isProvided;\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n    };\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\n\nexport type AuthenticatedProps = {\n    /**\n     * Content to show if user is not logged in. If undefined, routes to `/`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in\n     */\n    loading?: React.ReactNode;\n    children: React.ReactNode;\n};\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\n    children,\n    fallback,\n    loading,\n}) => {\n    const { isSuccess, isLoading, isError } = useAuthenticated();\n\n    const { replace } = useNavigation();\n    const { useLocation } = useRouterContext();\n    const { pathname, search } = useLocation();\n\n    if (isLoading) {\n        return <>{loading}</> || null;\n    }\n    if (isError) {\n        if (!fallback) {\n            const toURL = `${pathname}${search}`;\n            if (!pathname.includes(\"/login\")) {\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\n            }\n            return null;\n        }\n\n        return <>{fallback}</>;\n    }\n\n    if (isSuccess) {\n        return <>{children}</>;\n    }\n\n    return null;\n};\n","import { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { useRouterContext } from \"@hooks\";\n\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React from \"react\";\n\nimport { useCan } from \"@hooks\";\nimport { CanParams } from \"../../interfaces\";\n\nexport type CanAccessProps = CanParams & {\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    children: React.ReactNode;\n};\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource,\n    action,\n    params,\n    fallback,\n    children,\n    ...rest\n}) => {\n    const { data } = useCan({\n        resource,\n        action,\n        params,\n    });\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n","export { useForm, UseFormProps, UseFormReturnType } from \"./useForm\";\nexport {\n    useStepsForm,\n    UseStepsFormProps,\n    UseStepsFormReturnType,\n} from \"./useStepsForm\";\nexport {\n    useModalForm,\n    UseModalFormProps,\n    UseModalFormReturnType,\n} from \"./useModalForm\";\n\nexport type {\n    BatchFieldArrayUpdate,\n    ChangeHandler,\n    Control,\n    ControllerFieldState,\n    ControllerProps,\n    ControllerRenderProps,\n    CriteriaMode,\n    CustomElement,\n    DeepMap,\n    DeepPartial,\n    DeepPartialSkipArrayKey,\n    DefaultValues,\n    DelayCallback,\n    EmptyObject,\n    ErrorOption,\n    EventType,\n    Field,\n    FieldArray,\n    FieldArrayMethodProps,\n    FieldArrayWithId,\n    FieldElement,\n    FieldError,\n    FieldErrors,\n    FieldName,\n    FieldNamesMarkedBoolean,\n    FieldRefs,\n    FieldValue,\n    FieldValues,\n    FormProviderProps,\n    FormState,\n    FormStateProxy,\n    FormStateSubjectRef,\n    GetIsDirty,\n    InternalFieldErrors,\n    InternalFieldName,\n    InternalNameSet,\n    IsAny,\n    IsFlatObject,\n    KeepStateOptions,\n    LiteralUnion,\n    Message,\n    Mode,\n    MultipleFieldErrors,\n    Names,\n    NativeFieldValue,\n    NestedValue,\n    NonUndefined,\n    Noop,\n    Primitive,\n    ReadFormState,\n    Ref,\n    RefCallBack,\n    RegisterOptions,\n    Resolver,\n    ResolverError,\n    ResolverOptions,\n    ResolverResult,\n    ResolverSuccess,\n    SetFieldValue,\n    SetValueConfig,\n    Subjects,\n    SubmitErrorHandler,\n    SubmitHandler,\n    TriggerConfig,\n    UnpackNestedValue,\n    UseControllerProps,\n    UseControllerReturn,\n    UseFieldArrayProps,\n    UseFieldArrayReturn,\n    UseFieldArrayReplace,\n    UseFormClearErrors,\n    UseFormGetValues,\n    UseFormHandleSubmit,\n    UseFormProps as UseReactHookFormProps,\n    UseFormRegister,\n    UseFormRegisterReturn,\n    UseFormReset,\n    UseFormResetField,\n    UseFormReturn,\n    UseFormSetError,\n    UseFormSetFocus,\n    UseFormSetValue,\n    UseFormStateProps,\n    UseFormStateReturn,\n    UseFormTrigger,\n    UseFormUnregister,\n    UseFormWatch,\n    UseWatchProps,\n    Validate,\n    ValidateResult,\n    ValidationMode,\n    ValidationRule,\n    ValidationValue,\n    ValidationValueMessage,\n    WatchInternal,\n    WatchObserver,\n    ArrayPath,\n    FieldPath,\n    FieldPathValue,\n    FieldPathValues,\n    BrowserNativeObject,\n    DeepRequired,\n    FieldErrorsImpl,\n    IsNever,\n    Merge,\n    SetFocusOptions,\n    UseFieldArrayAppend,\n    UseFieldArrayInsert,\n    UseFieldArrayMove,\n    UseFieldArrayPrepend,\n    UseFieldArrayRemove,\n    UseFieldArraySwap,\n    UseFieldArrayUpdate,\n    UseFormGetFieldState,\n    FieldArrayPath,\n    FieldArrayPathValue,\n    FieldPathByValue,\n    PathString,\n    Path,\n    PathValue,\n} from \"react-hook-form\";\n\nexport {\n    appendErrors,\n    get,\n    set,\n    useController,\n    useFieldArray,\n    useForm as useReactHookForm,\n    useFormContext,\n    useFormState,\n    useWatch,\n    Controller,\n    FormProvider,\n} from \"react-hook-form\";\n","import React, { useEffect } from \"react\";\nimport {\n    useForm as useHookForm,\n    UseFormProps as UseHookFormProps,\n    UseFormReturn,\n    FieldValues,\n    UseFormHandleSubmit,\n    SubmitHandler,\n    SubmitErrorHandler,\n} from \"react-hook-form\";\nimport {\n    BaseRecord,\n    HttpError,\n    useForm as useFormCore,\n    useWarnAboutChange,\n    UseFormProps as UseFormCoreProps,\n    UseFormReturnType as UseFormReturnTypeCore,\n} from \"@pankod/refine-core\";\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturn<TVariables, TContext> & {\n    refineCore: UseFormReturnTypeCore<TData, TError, TVariables>;\n    saveButtonProps: {\n        disabled: boolean;\n        onClick: (e: React.BaseSyntheticEvent) => void;\n    };\n};\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = {\n    /**\n     * Configuration object for the core of the [useForm](/docs/api-reference/core/hooks/useForm/)\n     * @type [`UseFormCoreProps<TData, TError, TVariables>`](/docs/api-reference/core/hooks/useForm/#properties)\n     */\n    refineCoreProps?: UseFormCoreProps<TData, TError, TVariables>;\n    /**\n     * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n     * @default `false*`\n     */\n    warnWhenUnsavedChanges?: boolean;\n} & UseHookFormProps<TVariables, TContext>;\n\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    refineCoreProps,\n    warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n    ...rest\n}: UseFormProps<TData, TError, TVariables, TContext> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> => {\n    const {\n        warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine,\n        setWarnWhen,\n    } = useWarnAboutChange();\n    const warnWhenUnsavedChanges =\n        warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n    const useFormCoreResult = useFormCore<TData, TError, TVariables>({\n        ...refineCoreProps,\n    });\n\n    const { queryResult, onFinish, formLoading } = useFormCoreResult;\n\n    const useHookFormResult = useHookForm<TVariables, TContext>({\n        ...rest,\n    });\n\n    const {\n        watch,\n        reset,\n        getValues,\n        handleSubmit: handleSubmitReactHookForm,\n    } = useHookFormResult;\n\n    useEffect(() => {\n        if (typeof queryResult?.data !== \"undefined\") {\n            const fields: any = {};\n            const registeredFields = Object.keys(getValues());\n            Object.entries(queryResult?.data?.data || {}).forEach(\n                ([key, value]) => {\n                    if (registeredFields.includes(key)) {\n                        fields[key] = value;\n                    }\n                },\n            );\n\n            reset(fields as any);\n        }\n    }, [queryResult?.data]);\n\n    useEffect(() => {\n        const subscription = watch((values: any, { type }: { type?: any }) => {\n            if (type === \"change\") {\n                onValuesChange(values);\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [watch]);\n\n    const onValuesChange = (changeValues: Record<string, any>) => {\n        if (warnWhenUnsavedChanges) {\n            setWarnWhen(true);\n        }\n        return changeValues;\n    };\n\n    const handleSubmit: UseFormHandleSubmit<TVariables> =\n        (onValid, onInvalid) => async (e) => {\n            setWarnWhen(false);\n            return await handleSubmitReactHookForm(onValid, onInvalid)(e);\n        };\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: (e: React.BaseSyntheticEvent) => {\n            handleSubmit(onFinish, () => false)(e);\n        },\n    };\n\n    return {\n        ...useHookFormResult,\n        handleSubmit,\n        refineCore: useFormCoreResult,\n        saveButtonProps,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { FieldValues } from \"react-hook-form\";\nimport { BaseRecord, HttpError } from \"@pankod/refine-core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturnType<TData, TError, TVariables, TContext> & {\n    steps: {\n        currentStep: number;\n        gotoStep: (step: number) => void;\n    };\n};\n\nexport type UseStepsFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormProps<TData, TError, TVariables, TContext> & {\n    /**\n     * @description Configuration object for the steps.\n     * `defaultStep`: Allows you to set the initial step.\n     * \n     * `isBackValidate`: Whether to validation the current step when going back.\n     * @type `{\n      defaultStep?: number;\n      isBackValidate?: boolean;\n      }`\n     * @default `defaultStep = 0` `isBackValidate = false`\n     */\n    stepsProps?: {\n        defaultStep?: number;\n        isBackValidate?: boolean;\n    };\n};\n\nexport const useStepsForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    stepsProps,\n    ...rest\n}: UseStepsFormProps<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> = {}): UseStepsFormReturnType<TData, TError, TVariables, TContext> => {\n    const { defaultStep = 0, isBackValidate = false } = stepsProps ?? {};\n    const [current, setCurrent] = useState(defaultStep);\n\n    const useHookFormResult = useForm({\n        ...rest,\n    });\n    const {\n        trigger,\n        getValues,\n        reset,\n        formState: { dirtyFields },\n        refineCore: { queryResult },\n    } = useHookFormResult;\n\n    useEffect(() => {\n        if (queryResult?.data) {\n            const fields: any = {};\n            const registeredFields = Object.keys(getValues());\n            Object.entries(queryResult?.data?.data).forEach(([key, value]) => {\n                if (registeredFields.includes(key)) {\n                    if (dirtyFields[key]) {\n                        fields[key] = getValues(key as any);\n                    } else {\n                        fields[key] = value;\n                    }\n                }\n            });\n\n            reset(fields as any, {\n                keepDirty: true,\n                keepValues: true,\n            });\n        }\n    }, [queryResult?.data, current]);\n\n    const go = (step: number) => {\n        let targetStep = step;\n\n        if (step < 0) {\n            targetStep = 0;\n        }\n\n        setCurrent(targetStep);\n    };\n\n    const gotoStep = async (step: number) => {\n        if (step === current) {\n            return;\n        }\n\n        if (step < current && !isBackValidate) {\n            go(step);\n            return;\n        }\n\n        const isValid = await trigger();\n        if (isValid) {\n            go(step);\n        }\n    };\n\n    return {\n        ...useHookFormResult,\n        steps: {\n            currentStep: current,\n            gotoStep,\n        },\n    };\n};\n","import { useCallback } from \"react\";\nimport {\n    BaseKey,\n    BaseRecord,\n    HttpError,\n    useModal,\n    useResource,\n    userFriendlyResourceName,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@pankod/refine-core\";\nimport { FieldValues } from \"react-hook-form\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseModalFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturnType<TData, TError, TVariables, TContext> & {\n    modal: {\n        submit: (values: TVariables) => void;\n        close: () => void;\n        show: (id?: BaseKey) => void;\n        visible: boolean;\n        title: string;\n    };\n};\n\nexport type UseModalFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormProps<TData, TError, TVariables, TContext> & {\n    /**\n     * @description Configuration object for the modal.\n     * `defaultVisible`: Initial visibility state of the modal.\n     * \n     * `autoSubmitClose`: Whether the form should be submitted when the modal is closed.\n     * \n     * `autoResetForm`: Whether the form should be reset when the form is submitted.\n     * @type `{\n      defaultVisible?: boolean;\n      autoSubmitClose?: boolean;\n      autoResetForm?: boolean;\n      }`\n     * @default `defaultVisible = false` `autoSubmitClose = true` `autoResetForm = true`\n     */\n    modalProps?: {\n        defaultVisible?: boolean;\n        autoSubmitClose?: boolean;\n        autoResetForm?: boolean;\n    };\n};\n\nexport const useModalForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    modalProps,\n    refineCoreProps,\n    ...rest\n}: UseModalFormProps<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> = {}): UseModalFormReturnType<TData, TError, TVariables, TContext> => {\n    const translate = useTranslate();\n\n    const { resource: resourceProp, action: actionProp } =\n        refineCoreProps ?? {};\n    const {\n        defaultVisible = false,\n        autoSubmitClose = true,\n        autoResetForm = true,\n    } = modalProps ?? {};\n\n    const useHookFormResult = useForm<TData, TError, TVariables, TContext>({\n        refineCoreProps,\n        ...rest,\n    });\n\n    const {\n        reset,\n        refineCore: { onFinish, setId },\n        saveButtonProps,\n        handleSubmit,\n    } = useHookFormResult;\n\n    const { visible, show, close } = useModal({\n        defaultVisible,\n    });\n\n    const submit = async (values: TVariables) => {\n        await onFinish(values);\n\n        if (autoSubmitClose) {\n            close();\n        }\n\n        if (autoResetForm) {\n            reset();\n        }\n    };\n\n    const { resourceName } = useResource({\n        resourceNameOrRouteName: resourceProp,\n    });\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const handleClose = useCallback(() => {\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setId?.(undefined);\n        close();\n    }, [warnWhen]);\n\n    const handleShow = useCallback((id?: BaseKey) => {\n        setId?.(id);\n\n        show();\n    }, []);\n\n    const title = translate(\n        `${resourceName}.titles.${actionProp}`,\n        undefined,\n        `${userFriendlyResourceName(\n            `${actionProp} ${resourceName}`,\n            \"singular\",\n        )}`,\n    );\n\n    return {\n        modal: {\n            submit,\n            close: handleClose,\n            show: handleShow,\n            visible,\n            title,\n        },\n        ...useHookFormResult,\n        saveButtonProps: {\n            ...saveButtonProps,\n            onClick: (e) => handleSubmit(submit)(e),\n        },\n    };\n};\n","export type { RefineBreadcrumbProps } from \"./types\";\n\nexport type {\n    RefineButtonCommonProps,\n    RefineButtonDataProps,\n    RefineButtonLinkingProps,\n    RefineButtonResourceProps,\n    RefineButtonSingleProps,\n    RefineCloneButtonProps,\n    RefineCreateButtonProps,\n    RefineDeleteButtonProps,\n    RefineEditButtonProps,\n    RefineExportButtonProps,\n    RefineImportButtonProps,\n    RefineListButtonProps,\n    RefineRefreshButtonProps,\n    RefineSaveButtonProps,\n    RefineShowButtonProps,\n} from \"./types\";\n\nexport type {\n    RefineCrudCreateProps,\n    RefineCrudEditProps,\n    RefineCrudListProps,\n    RefineCrudShowProps,\n    ActionButtonRenderer,\n} from \"./types\";\n\nexport type { RefineErrorPageProps, RefineReadyPageProps } from \"./types\";\n\nexport type {\n    RefineFieldBooleanProps,\n    RefineFieldCommonProps,\n    RefineFieldDateProps,\n    RefineFieldEmailProps,\n    RefineFieldFileProps,\n    RefineFieldImageProps,\n    RefineFieldUrlProps,\n    RefineFieldMarkdownProps,\n    RefineFieldNumberProps,\n    RefineFieldTagProps,\n    RefineFieldTextProps,\n    RefineFieldTooltipProps,\n} from \"./types\";\n\nexport type {\n    RefineLayoutFooterProps,\n    RefineLayoutHeaderProps,\n    RefineLayoutLayoutProps,\n    RefineLayoutSiderProps,\n    RefineLayoutTitleProps,\n} from \"./types\";\n\nexport { RefineButtonTestIds } from \"./ids\";\n","export const RefineButtonTestIds = {\n    CloneButton: \"refine-clone-button\",\n    DeleteButton: \"refine-delete-button\",\n    EditButton: \"refine-edit-button\",\n    SaveButton: \"refine-save-button\",\n    CreateButton: \"refine-create-button\",\n    ImportButton: \"refine-import-button\",\n    ExportButton: \"refine-export-button\",\n    ListButton: \"refine-list-button\",\n    RefreshButton: \"refine-refresh-button\",\n    ShowButton: \"refine-show-button\",\n};\n","export * from \"@mui/x-data-grid\";\nexport * from \"@mui/system\";\n\nexport { default as LoadingButton } from \"@mui/lab/LoadingButton\";\nexport * from \"@mui/lab/LoadingButton\";\n\nimport * as colors from \"@mui/material/colors\";\nimport * as locale from \"@mui/material/locale\";\n\nexport { colors };\nexport { locale };\nexport {\n    alpha,\n    createStyles,\n    createTheme,\n    css,\n    darken,\n    decomposeColor,\n    duration,\n    easing,\n    emphasize,\n    experimentalStyled,\n    experimental_extendTheme,\n    getContrastRatio,\n    getInitColorSchemeScript,\n    getLuminance,\n    hexToRgb,\n    hslToRgb,\n    keyframes,\n    lighten,\n    makeStyles,\n    recomposeColor,\n    responsiveFontSizes,\n    rgbToHex,\n    styled,\n    unstable_createMuiStrictModeTheme,\n    unstable_getUnit,\n    unstable_toUnitless,\n    useColorScheme,\n    useTheme,\n    useThemeProps,\n    withStyles,\n    ThemeProvider,\n    withTheme,\n} from \"@mui/material/styles\";\nexport type {\n    Breakpoint,\n    BreakpointOverrides,\n    Breakpoints,\n    BreakpointsOptions,\n    CSSInterpolation,\n    CSSObject,\n    ClassNameMap,\n    ColorFormat,\n    ColorObject,\n    ColorSchemeOverrides,\n    ComponentNameToClassKey,\n    Components,\n    ComponentsOverrides,\n    ComponentsProps,\n    ComponentsPropsList,\n    ComponentsVariants,\n    CreateMUIStyled,\n    DeprecatedThemeOptions,\n    Direction,\n    Duration,\n    Easing,\n    Experimental_CssVarsProvider,\n    Interpolation,\n    Opacity,\n    Palette,\n    PaletteColor,\n    PaletteColorOptions,\n    PaletteOptions,\n    SimplePaletteColorOptions,\n    StyledComponentProps,\n    SupportedColorScheme,\n    SxProps,\n    Theme,\n    ThemeOptions,\n    ThemeWithProps,\n    ThemedProps,\n    Transitions,\n    TransitionsOptions,\n    TypeAction,\n    TypeBackground,\n    TypeText,\n    TypographyStyle,\n    TypographyVariant,\n    TypographyVariants,\n    TypographyVariantsOptions,\n} from \"@mui/material/styles\";\n\n/** @deprecated not exists anymore - this type exists as a fallback for existing usages */\nexport type ThemeInput = any;\n\nexport type {\n    DefaultColorScheme,\n    ExtendedColorScheme,\n} from \"@mui/material/styles/experimental_extendTheme\";\n\nexport * from \"@mui/material/utils\";\n\nexport { default as Accordion } from \"@mui/material/Accordion\";\nexport * from \"@mui/material/Accordion\";\n\nexport { default as AccordionActions } from \"@mui/material/AccordionActions\";\nexport * from \"@mui/material/AccordionActions\";\n\nexport { default as AccordionDetails } from \"@mui/material/AccordionDetails\";\nexport * from \"@mui/material/AccordionDetails\";\n\nexport { default as AccordionSummary } from \"@mui/material/AccordionSummary\";\nexport * from \"@mui/material/AccordionSummary\";\n\nexport { default as Alert } from \"@mui/material/Alert\";\nexport * from \"@mui/material/Alert\";\n\nexport { default as AlertTitle } from \"@mui/material/AlertTitle\";\nexport * from \"@mui/material/AlertTitle\";\n\nexport { default as AppBar } from \"@mui/material/AppBar\";\nexport * from \"@mui/material/AppBar\";\n\nexport { default as Autocomplete } from \"@mui/material/Autocomplete\";\nexport * from \"@mui/material/Autocomplete\";\n\nexport { default as Avatar } from \"@mui/material/Avatar\";\nexport * from \"@mui/material/Avatar\";\n\nexport { default as AvatarGroup } from \"@mui/material/AvatarGroup\";\nexport * from \"@mui/material/AvatarGroup\";\n\nexport { default as Backdrop } from \"@mui/material/Backdrop\";\nexport * from \"@mui/material/Backdrop\";\n\nexport { default as Badge } from \"@mui/material/Badge\";\nexport * from \"@mui/material/Badge\";\n\nexport { default as BottomNavigation } from \"@mui/material/BottomNavigation\";\nexport * from \"@mui/material/BottomNavigation\";\n\nexport { default as BottomNavigationAction } from \"@mui/material/BottomNavigationAction\";\nexport * from \"@mui/material/BottomNavigationAction\";\n\nexport { default as Box } from \"@mui/material/Box\";\n\nexport { default as Breadcrumbs } from \"@mui/material/Breadcrumbs\";\nexport * from \"@mui/material/Breadcrumbs\";\n\nexport { default as Button } from \"@mui/material/Button\";\nexport * from \"@mui/material/Button\";\n\nexport { default as ButtonBase } from \"@mui/material/ButtonBase\";\nexport * from \"@mui/material/ButtonBase\";\n\nexport { default as ButtonGroup } from \"@mui/material/ButtonGroup\";\nexport * from \"@mui/material/ButtonGroup\";\n\nexport { default as Card } from \"@mui/material/Card\";\nexport * from \"@mui/material/Card\";\n\nexport { default as CardActionArea } from \"@mui/material/CardActionArea\";\nexport * from \"@mui/material/CardActionArea\";\n\nexport { default as CardActions } from \"@mui/material/CardActions\";\nexport * from \"@mui/material/CardActions\";\n\nexport { default as CardContent } from \"@mui/material/CardContent\";\nexport * from \"@mui/material/CardContent\";\n\nexport { default as CardHeader } from \"@mui/material/CardHeader\";\nexport * from \"@mui/material/CardHeader\";\n\nexport { default as CardMedia } from \"@mui/material/CardMedia\";\nexport * from \"@mui/material/CardMedia\";\n\nexport { default as Checkbox } from \"@mui/material/Checkbox\";\nexport * from \"@mui/material/Checkbox\";\n\nexport { default as Chip } from \"@mui/material/Chip\";\nexport * from \"@mui/material/Chip\";\n\nexport { default as CircularProgress } from \"@mui/material/CircularProgress\";\nexport * from \"@mui/material/CircularProgress\";\n\nexport { default as ClickAwayListener } from \"@mui/material/ClickAwayListener\";\nexport * from \"@mui/material/ClickAwayListener\";\n\nexport { default as Collapse } from \"@mui/material/Collapse\";\nexport * from \"@mui/material/Collapse\";\n\nexport { default as Container } from \"@mui/material/Container\";\nexport type {\n    ContainerClassKey,\n    ContainerClasses,\n    ContainerProps,\n    ContainerTypeMap,\n} from \"@mui/material/Container\";\n\nexport { default as CssBaseline } from \"@mui/material/CssBaseline\";\nexport * from \"@mui/material/CssBaseline\";\n\nexport { default as darkScrollbar } from \"@mui/material/darkScrollbar\";\nexport * from \"@mui/material/darkScrollbar\";\n\nexport { default as Dialog } from \"@mui/material/Dialog\";\nexport * from \"@mui/material/Dialog\";\n\nexport { default as DialogActions } from \"@mui/material/DialogActions\";\nexport * from \"@mui/material/DialogActions\";\n\nexport { default as DialogContent } from \"@mui/material/DialogContent\";\nexport * from \"@mui/material/DialogContent\";\n\nexport { default as DialogContentText } from \"@mui/material/DialogContentText\";\nexport * from \"@mui/material/DialogContentText\";\n\nexport { default as DialogTitle } from \"@mui/material/DialogTitle\";\nexport * from \"@mui/material/DialogTitle\";\n\nexport { default as Divider } from \"@mui/material/Divider\";\nexport * from \"@mui/material/Divider\";\n\nexport { default as Drawer } from \"@mui/material/Drawer\";\nexport * from \"@mui/material/Drawer\";\n\nexport { default as Fab } from \"@mui/material/Fab\";\nexport * from \"@mui/material/Fab\";\n\nexport { default as Fade } from \"@mui/material/Fade\";\nexport * from \"@mui/material/Fade\";\n\nexport { default as FilledInput } from \"@mui/material/FilledInput\";\nexport * from \"@mui/material/FilledInput\";\n\nexport { default as FormControl } from \"@mui/material/FormControl\";\nexport * from \"@mui/material/FormControl\";\n\nexport { default as FormControlLabel } from \"@mui/material/FormControlLabel\";\nexport * from \"@mui/material/FormControlLabel\";\n\nexport { default as FormGroup } from \"@mui/material/FormGroup\";\nexport * from \"@mui/material/FormGroup\";\n\nexport { default as FormHelperText } from \"@mui/material/FormHelperText\";\nexport * from \"@mui/material/FormHelperText\";\n\nexport { default as FormLabel } from \"@mui/material/FormLabel\";\nexport * from \"@mui/material/FormLabel\";\n\nexport { default as Grid } from \"@mui/material/Grid\";\nexport { getGridUtilityClass, gridClasses } from \"@mui/material/Grid\";\nexport type {\n    GridClassKey,\n    GridClasses,\n    GridDirection,\n    GridProps,\n    GridSize,\n    GridSpacing,\n    GridTypeMap,\n    GridWrap,\n} from \"@mui/material/Grid\";\n\nexport { default as Grow } from \"@mui/material/Grow\";\nexport * from \"@mui/material/Grow\";\n\nexport { default as Hidden } from \"@mui/material/Hidden\";\nexport * from \"@mui/material/Hidden\";\n\nexport { default as Icon } from \"@mui/material/Icon\";\nexport * from \"@mui/material/Icon\";\n\nexport { default as IconButton } from \"@mui/material/IconButton\";\nexport * from \"@mui/material/IconButton\";\n\nexport { default as ImageList } from \"@mui/material/ImageList\";\nexport * from \"@mui/material/ImageList\";\n\nexport { default as ImageListItem } from \"@mui/material/ImageListItem\";\nexport * from \"@mui/material/ImageListItem\";\n\nexport { default as ImageListItemBar } from \"@mui/material/ImageListItemBar\";\nexport * from \"@mui/material/ImageListItemBar\";\n\nexport { default as Input } from \"@mui/material/Input\";\nexport * from \"@mui/material/Input\";\n\nexport { default as InputAdornment } from \"@mui/material/InputAdornment\";\nexport * from \"@mui/material/InputAdornment\";\n\nexport { default as InputBase } from \"@mui/material/InputBase\";\nexport * from \"@mui/material/InputBase\";\n\nexport { default as InputLabel } from \"@mui/material/InputLabel\";\nexport * from \"@mui/material/InputLabel\";\n\nexport { default as LinearProgress } from \"@mui/material/LinearProgress\";\nexport * from \"@mui/material/LinearProgress\";\n\nexport { default as Link } from \"@mui/material/Link\";\nexport * from \"@mui/material/Link\";\n\nexport { default as MuiList } from \"@mui/material/List\";\nexport { getListUtilityClass, listClasses } from \"@mui/material/List\";\nexport type {\n    ExtendList,\n    ExtendListTypeMap,\n    ListClassKey,\n    ListClasses,\n    ListProps as MuiListProps,\n    ListTypeMap,\n} from \"@mui/material/List\";\n\nexport { default as ListItem } from \"@mui/material/ListItem\";\nexport * from \"@mui/material/ListItem\";\n\nexport { default as ListItemAvatar } from \"@mui/material/ListItemAvatar\";\nexport * from \"@mui/material/ListItemAvatar\";\n\nexport { default as ListItemButton } from \"@mui/material/ListItemButton\";\nexport * from \"@mui/material/ListItemButton\";\n\nexport { default as ListItemIcon } from \"@mui/material/ListItemIcon\";\nexport * from \"@mui/material/ListItemIcon\";\n\nexport { default as ListItemSecondaryAction } from \"@mui/material/ListItemSecondaryAction\";\nexport * from \"@mui/material/ListItemSecondaryAction\";\n\nexport { default as ListItemText } from \"@mui/material/ListItemText\";\nexport * from \"@mui/material/ListItemText\";\n\nexport { default as ListSubheader } from \"@mui/material/ListSubheader\";\nexport * from \"@mui/material/ListSubheader\";\n\nexport { default as Menu } from \"@mui/material/Menu\";\nexport * from \"@mui/material/Menu\";\n\nexport { default as MenuItem } from \"@mui/material/MenuItem\";\nexport * from \"@mui/material/MenuItem\";\n\nexport { default as MenuList } from \"@mui/material/MenuList\";\nexport * from \"@mui/material/MenuList\";\n\nexport { default as MobileStepper } from \"@mui/material/MobileStepper\";\nexport * from \"@mui/material/MobileStepper\";\n\nexport { default as Modal } from \"@mui/material/Modal\";\nexport * from \"@mui/material/Modal\";\n\nexport { default as NativeSelect } from \"@mui/material/NativeSelect\";\nexport * from \"@mui/material/NativeSelect\";\n\nexport { default as NoSsr } from \"@mui/material/NoSsr\";\nexport * from \"@mui/material/NoSsr\";\n\nexport { default as OutlinedInput } from \"@mui/material/OutlinedInput\";\nexport * from \"@mui/material/OutlinedInput\";\n\nexport { default as Pagination } from \"@mui/material/Pagination\";\nexport * from \"@mui/material/Pagination\";\n\nexport { default as PaginationItem } from \"@mui/material/PaginationItem\";\nexport * from \"@mui/material/PaginationItem\";\n\nexport { default as Paper } from \"@mui/material/Paper\";\nexport * from \"@mui/material/Paper\";\n\nexport { default as Popover } from \"@mui/material/Popover\";\nexport * from \"@mui/material/Popover\";\n\nexport { default as Popper } from \"@mui/material/Popper\";\nexport * from \"@mui/material/Popper\";\n\nexport { default as Portal } from \"@mui/material/Portal\";\nexport * from \"@mui/material/Portal\";\n\nexport { default as Radio } from \"@mui/material/Radio\";\nexport * from \"@mui/material/Radio\";\n\nexport { default as RadioGroup } from \"@mui/material/RadioGroup\";\nexport * from \"@mui/material/RadioGroup\";\n\nexport { default as Rating } from \"@mui/material/Rating\";\nexport * from \"@mui/material/Rating\";\n\nexport { default as ScopedCssBaseline } from \"@mui/material/ScopedCssBaseline\";\nexport * from \"@mui/material/ScopedCssBaseline\";\n\nexport { default as Select } from \"@mui/material/Select\";\nexport * from \"@mui/material/Select\";\n\nexport { default as Skeleton } from \"@mui/material/Skeleton\";\nexport * from \"@mui/material/Skeleton\";\n\nexport { default as Slide } from \"@mui/material/Slide\";\nexport * from \"@mui/material/Slide\";\n\nexport { default as Slider } from \"@mui/material/Slider\";\nexport * from \"@mui/material/Slider\";\n\nexport { default as Snackbar } from \"@mui/material/Snackbar\";\nexport * from \"@mui/material/Snackbar\";\n\nexport { default as SnackbarContent } from \"@mui/material/SnackbarContent\";\nexport * from \"@mui/material/SnackbarContent\";\n\nexport { default as SpeedDial } from \"@mui/material/SpeedDial\";\nexport * from \"@mui/material/SpeedDial\";\n\nexport { default as SpeedDialAction } from \"@mui/material/SpeedDialAction\";\nexport * from \"@mui/material/SpeedDialAction\";\n\nexport { default as SpeedDialIcon } from \"@mui/material/SpeedDialIcon\";\nexport * from \"@mui/material/SpeedDialIcon\";\n\nexport { default as Stack } from \"@mui/material/Stack\";\nexport type { StackProps, StackTypeMap } from \"@mui/material/Stack\";\n\nexport { default as Step } from \"@mui/material/Step\";\nexport * from \"@mui/material/Step\";\n\nexport { default as StepButton } from \"@mui/material/StepButton\";\nexport * from \"@mui/material/StepButton\";\n\nexport { default as StepConnector } from \"@mui/material/StepConnector\";\nexport * from \"@mui/material/StepConnector\";\n\nexport { default as StepContent } from \"@mui/material/StepContent\";\nexport * from \"@mui/material/StepContent\";\n\nexport { default as StepIcon } from \"@mui/material/StepIcon\";\nexport * from \"@mui/material/StepIcon\";\n\nexport { default as StepLabel } from \"@mui/material/StepLabel\";\nexport * from \"@mui/material/StepLabel\";\n\nexport { default as Stepper } from \"@mui/material/Stepper\";\nexport * from \"@mui/material/Stepper\";\n\nexport { default as SvgIcon } from \"@mui/material/SvgIcon\";\nexport * from \"@mui/material/SvgIcon\";\n\nexport { default as SwipeableDrawer } from \"@mui/material/SwipeableDrawer\";\nexport * from \"@mui/material/SwipeableDrawer\";\n\nexport { default as Switch } from \"@mui/material/Switch\";\nexport * from \"@mui/material/Switch\";\n\nexport { default as Tab } from \"@mui/material/Tab\";\nexport * from \"@mui/material/Tab\";\n\nexport { default as Table } from \"@mui/material/Table\";\nexport * from \"@mui/material/Table\";\n\nexport { default as TableBody } from \"@mui/material/TableBody\";\nexport * from \"@mui/material/TableBody\";\n\nexport { default as TableCell } from \"@mui/material/TableCell\";\nexport * from \"@mui/material/TableCell\";\n\nexport { default as TableContainer } from \"@mui/material/TableContainer\";\nexport * from \"@mui/material/TableContainer\";\n\nexport { default as TableFooter } from \"@mui/material/TableFooter\";\nexport * from \"@mui/material/TableFooter\";\n\nexport { default as TableHead } from \"@mui/material/TableHead\";\nexport * from \"@mui/material/TableHead\";\n\nexport { default as TablePagination } from \"@mui/material/TablePagination\";\nexport * from \"@mui/material/TablePagination\";\n\nexport { default as TableRow } from \"@mui/material/TableRow\";\nexport * from \"@mui/material/TableRow\";\n\nexport { default as TableSortLabel } from \"@mui/material/TableSortLabel\";\nexport * from \"@mui/material/TableSortLabel\";\n\nexport { default as Tabs } from \"@mui/material/Tabs\";\nexport * from \"@mui/material/Tabs\";\n\nexport { default as TabScrollButton } from \"@mui/material/TabScrollButton\";\nexport * from \"@mui/material/TabScrollButton\";\n\nexport { default as TextField } from \"@mui/material/TextField\";\nexport { textFieldClasses } from \"@mui/material/TextField\";\nexport type {\n    BaseTextFieldProps,\n    FilledTextFieldProps,\n    OutlinedTextFieldProps,\n    StandardTextFieldProps,\n    TextFieldClassKey,\n    TextFieldClasses,\n    TextFieldProps as MuiTextFieldProps,\n    TextFieldPropsColorOverrides,\n    TextFieldPropsSizeOverrides,\n    getTextFieldUtilityClass,\n} from \"@mui/material/TextField\";\n\nexport { default as TextareaAutosize } from \"@mui/material/TextareaAutosize\";\nexport * from \"@mui/material/TextareaAutosize\";\n\nexport { default as ToggleButton } from \"@mui/material/ToggleButton\";\nexport * from \"@mui/material/ToggleButton\";\n\nexport { default as ToggleButtonGroup } from \"@mui/material/ToggleButtonGroup\";\nexport * from \"@mui/material/ToggleButtonGroup\";\n\nexport { default as Toolbar } from \"@mui/material/Toolbar\";\nexport * from \"@mui/material/Toolbar\";\n\nexport { default as Tooltip } from \"@mui/material/Tooltip\";\nexport * from \"@mui/material/Tooltip\";\n\nexport { default as Typography } from \"@mui/material/Typography\";\nexport {\n    getTypographyUtilityClass,\n    typographyClasses,\n} from \"@mui/material/Typography\";\nexport type {\n    TypographyClassKey,\n    TypographyClasses,\n    TypographyPropsVariantOverrides,\n    TypographyProps,\n    TypographyTypeMap,\n} from \"@mui/material/Typography\";\n\nexport { default as useMediaQuery } from \"@mui/material/useMediaQuery\";\nexport * from \"@mui/material/useMediaQuery\";\n\nexport { default as usePagination } from \"@mui/material/usePagination\";\nexport * from \"@mui/material/usePagination\";\n\nexport { default as useScrollTrigger } from \"@mui/material/useScrollTrigger\";\nexport * from \"@mui/material/useScrollTrigger\";\n\nexport { default as Zoom } from \"@mui/material/Zoom\";\nexport * from \"@mui/material/Zoom\";\n\nexport { default as useMuiAutocomplete } from \"@mui/material/useAutocomplete\";\n\nexport { default as GlobalStyles } from \"@mui/material/GlobalStyles\";\n\nexport { default as unstable_composeClasses } from \"@mui/base/composeClasses\";\n\nexport { default as generateUtilityClass } from \"@mui/base/generateUtilityClass\";\nexport * from \"@mui/base/generateUtilityClass\";\n\nexport { default as generateUtilityClasses } from \"@mui/base/generateUtilityClasses\";\n\n/** Notistack */\n/**\n * Part of the following typing and documentation is from material-ui/src/Snackbar/Snackbar.d.ts\n */\nexport {\n    SnackbarProvider,\n    withSnackbar,\n    SnackbarContent as NotistackSnackbarContent,\n    useSnackbar,\n} from \"notistack\";\n\nexport type {\n    WithSnackbarProps,\n    SnackbarKey,\n    ProviderContext,\n    VariantType,\n    CloseReason,\n    SnackbarMessage,\n    SnackbarAction,\n    SnackbarContentCallback,\n    TransitionCloseHandler,\n    TransitionEnterHandler,\n    TransitionHandler,\n    ContainerClassKey as NotistackContainerClassKey,\n    VariantClassKey,\n    CombinedClassKey,\n    SnackbarOrigin,\n    IconVariant,\n    TransitionHandlerProps,\n    SnackbarContentProps,\n    SnackbarProps,\n    SharedProps,\n    OptionsObject,\n    SnackbarProviderProps,\n} from \"notistack\";\n\nexport * from \"./components\";\nexport * from \"./hooks\";\nexport * from \"./theme\";\nexport * from \"./providers\";\n","import React from \"react\";\nimport { Box } from \"@mui/material\";\n\nimport { RefineLayoutLayoutProps } from \"./types\";\nimport { Sider as DefaultSider } from \"./sider\";\nimport { Header as DefaultHeader } from \"./header\";\n\nexport const Layout: React.FC<RefineLayoutLayoutProps> = ({\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    children,\n}) => {\n    const SiderToRender = Sider ?? DefaultSider;\n    const HeaderToRender = Header ?? DefaultHeader;\n\n    return (\n        <Box display=\"flex\" flexDirection=\"row\">\n            <SiderToRender />\n            <Box\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    flex: 1,\n                    minHeight: \"100vh\",\n                }}\n            >\n                <HeaderToRender />\n                <Box\n                    component=\"main\"\n                    sx={{\n                        p: { xs: 1, md: 2, lg: 3 },\n                        flexGrow: 1,\n                        bgcolor: (theme) => theme.palette.background.default,\n                    }}\n                >\n                    {children}\n                </Box>\n                {Footer && <Footer />}\n            </Box>\n            {OffLayoutArea && <OffLayoutArea />}\n        </Box>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Drawer,\n    List,\n    ListItemButton,\n    ListItemIcon,\n    ListItemText,\n    Collapse,\n    Tooltip,\n    Button,\n    IconButton,\n} from \"@mui/material\";\nimport {\n    ListOutlined,\n    Logout,\n    ExpandLess,\n    ExpandMore,\n    ChevronLeft,\n    ChevronRight,\n    MenuRounded,\n    Dashboard,\n} from \"@mui/icons-material\";\nimport {\n    CanAccess,\n    ITreeMenu,\n    useIsExistAuthentication,\n    useLogout,\n    useTitle,\n    useTranslate,\n    useRouterContext,\n    useMenu,\n    useRefineContext,\n} from \"@pankod/refine-core\";\nimport { RefineLayoutSiderProps } from \"../types\";\n\nimport { Title as DefaultTitle } from \"@components\";\n\nexport const Sider: React.FC<RefineLayoutSiderProps> = ({ render }) => {\n    const [collapsed, setCollapsed] = useState(false);\n    const [opened, setOpened] = useState(false);\n\n    const drawerWidth = () => {\n        if (collapsed) return 64;\n        return 200;\n    };\n\n    const t = useTranslate();\n    const { Link } = useRouterContext();\n    const { hasDashboard } = useRefineContext();\n    const translate = useTranslate();\n\n    const { menuItems, selectedKey, defaultOpenKeys } = useMenu();\n    const isExistAuthentication = useIsExistAuthentication();\n    const { mutate: mutateLogout } = useLogout();\n    const Title = useTitle();\n\n    const [open, setOpen] = useState<{ [k: string]: any }>({});\n\n    React.useEffect(() => {\n        setOpen((previous) => {\n            const previousKeys: string[] = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter(\n                (key) => previous[key],\n            );\n\n            const uniqueKeys = new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys,\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(\n                Array.from(uniqueKeys.values()).map((key) => [key, true]),\n            );\n            return uniqueKeysRecord;\n        });\n    }, [defaultOpenKeys]);\n\n    const RenderToTitle = Title ?? DefaultTitle;\n\n    const handleClick = (key: string) => {\n        setOpen({ ...open, [key]: !open[key] });\n    };\n\n    const renderTreeView = (tree: ITreeMenu[], selectedKey: string) => {\n        return tree.map((item: ITreeMenu) => {\n            const { icon, label, route, name, children, parentName } = item;\n            const isOpen = open[route || \"\"] || false;\n\n            const isSelected = route === selectedKey;\n            const isNested = !(parentName === undefined);\n\n            if (children.length > 0) {\n                return (\n                    <CanAccess\n                        key={route}\n                        resource={name.toLowerCase()}\n                        action=\"list\"\n                        params={{\n                            resource: item,\n                        }}\n                    >\n                        <div key={route}>\n                            <Tooltip\n                                title={label ?? name}\n                                placement=\"right\"\n                                disableHoverListener={!collapsed}\n                                arrow\n                            >\n                                <ListItemButton\n                                    onClick={() => {\n                                        if (collapsed) {\n                                            setCollapsed(false);\n                                            if (!isOpen) {\n                                                handleClick(route || \"\");\n                                            }\n                                        } else {\n                                            handleClick(route || \"\");\n                                        }\n                                    }}\n                                    sx={{\n                                        pl: isNested ? 4 : 2,\n                                        justifyContent: \"center\",\n                                        \"&.Mui-selected\": {\n                                            \"&:hover\": {\n                                                backgroundColor: \"transparent\",\n                                            },\n                                            backgroundColor: \"transparent\",\n                                        },\n                                    }}\n                                >\n                                    <ListItemIcon\n                                        sx={{\n                                            justifyContent: \"center\",\n                                            minWidth: 36,\n                                            color: \"primary.contrastText\",\n                                        }}\n                                    >\n                                        {icon ?? <ListOutlined />}\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        primary={label}\n                                        primaryTypographyProps={{\n                                            noWrap: true,\n                                            fontSize: \"14px\",\n                                            fontWeight: isSelected\n                                                ? \"bold\"\n                                                : \"normal\",\n                                        }}\n                                    />\n                                    {!collapsed &&\n                                        (isOpen ? (\n                                            <ExpandLess />\n                                        ) : (\n                                            <ExpandMore />\n                                        ))}\n                                </ListItemButton>\n                            </Tooltip>\n                            {!collapsed && (\n                                <Collapse\n                                    in={open[route || \"\"]}\n                                    timeout=\"auto\"\n                                    unmountOnExit\n                                >\n                                    <List component=\"div\" disablePadding>\n                                        {renderTreeView(children, selectedKey)}\n                                    </List>\n                                </Collapse>\n                            )}\n                        </div>\n                    </CanAccess>\n                );\n            }\n\n            return (\n                <CanAccess\n                    key={route}\n                    resource={name.toLowerCase()}\n                    action=\"list\"\n                    params={{ resource: item }}\n                >\n                    <Tooltip\n                        title={label ?? name}\n                        placement=\"right\"\n                        disableHoverListener={!collapsed}\n                        arrow\n                    >\n                        <ListItemButton\n                            component={Link}\n                            to={route}\n                            selected={isSelected}\n                            onClick={() => {\n                                setOpened(false);\n                            }}\n                            sx={{\n                                pl: isNested ? 4 : 2,\n                                py: isNested ? 1.25 : 1,\n                                \"&.Mui-selected\": {\n                                    \"&:hover\": {\n                                        backgroundColor: \"transparent\",\n                                    },\n                                    backgroundColor: \"transparent\",\n                                },\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <ListItemIcon\n                                sx={{\n                                    justifyContent: \"center\",\n                                    minWidth: 36,\n                                    color: \"primary.contrastText\",\n                                }}\n                            >\n                                {icon ?? <ListOutlined />}\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={label}\n                                primaryTypographyProps={{\n                                    noWrap: true,\n                                    fontSize: \"14px\",\n                                    fontWeight: isSelected ? \"bold\" : \"normal\",\n                                }}\n                            />\n                        </ListItemButton>\n                    </Tooltip>\n                </CanAccess>\n            );\n        });\n    };\n\n    const dashboard = hasDashboard ? (\n        <CanAccess resource=\"dashboard\" action=\"list\">\n            <Tooltip\n                title={translate(\"dashboard.title\", \"Dashboard\")}\n                placement=\"right\"\n                disableHoverListener={!collapsed}\n                arrow\n            >\n                <ListItemButton\n                    component={Link}\n                    to=\"/\"\n                    selected={selectedKey === \"/\"}\n                    onClick={() => {\n                        setOpened(false);\n                    }}\n                    sx={{\n                        pl: 2,\n                        py: 1,\n                        \"&.Mui-selected\": {\n                            \"&:hover\": {\n                                backgroundColor: \"transparent\",\n                            },\n                            backgroundColor: \"transparent\",\n                        },\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <ListItemIcon\n                        sx={{\n                            justifyContent: \"center\",\n                            minWidth: 36,\n                            color: \"primary.contrastText\",\n                        }}\n                    >\n                        <Dashboard />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={translate(\"dashboard.title\", \"Dashboard\")}\n                        primaryTypographyProps={{\n                            noWrap: true,\n                            fontSize: \"14px\",\n                            fontWeight: selectedKey === \"/\" ? \"bold\" : \"normal\",\n                        }}\n                    />\n                </ListItemButton>\n            </Tooltip>\n        </CanAccess>\n    ) : null;\n\n    const logout = isExistAuthentication && (\n        <Tooltip\n            title={t(\"buttons.logout\", \"Logout\")}\n            placement=\"right\"\n            disableHoverListener={!collapsed}\n            arrow\n        >\n            <ListItemButton\n                key=\"logout\"\n                onClick={() => mutateLogout()}\n                sx={{ justifyContent: \"center\" }}\n            >\n                <ListItemIcon\n                    sx={{\n                        justifyContent: \"center\",\n                        minWidth: 36,\n                        color: \"primary.contrastText\",\n                    }}\n                >\n                    <Logout />\n                </ListItemIcon>\n                <ListItemText\n                    primary={t(\"buttons.logout\", \"Logout\")}\n                    primaryTypographyProps={{\n                        noWrap: true,\n                        fontSize: \"14px\",\n                    }}\n                />\n            </ListItemButton>\n        </Tooltip>\n    );\n\n    const items = renderTreeView(menuItems, selectedKey);\n\n    const renderSider = () => {\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed,\n            });\n        }\n        return (\n            <>\n                {dashboard}\n                {items}\n                {logout}\n            </>\n        );\n    };\n\n    const drawer = (\n        <List disablePadding sx={{ mt: 1, color: \"primary.contrastText\" }}>\n            {renderSider()}\n        </List>\n    );\n\n    return (\n        <>\n            <Box\n                sx={{\n                    width: { xs: drawerWidth() },\n                    display: {\n                        xs: \"none\",\n                        md: \"block\",\n                    },\n                    transition: \"width 0.3s ease\",\n                }}\n            />\n            <Box\n                component=\"nav\"\n                sx={{\n                    position: \"fixed\",\n                    zIndex: 1101,\n                    width: { sm: drawerWidth() },\n                    display: \"flex\",\n                }}\n            >\n                <Drawer\n                    variant=\"temporary\"\n                    open={opened}\n                    onClose={() => setOpened(false)}\n                    ModalProps={{\n                        keepMounted: true, // Better open performance on mobile.\n                    }}\n                    sx={{\n                        display: { sm: \"block\", md: \"none\" },\n                        \"& .MuiDrawer-paper\": {\n                            width: 256,\n                            bgcolor: \"secondary.main\",\n                        },\n                    }}\n                >\n                    <Box\n                        sx={{\n                            height: 64,\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                        <RenderToTitle collapsed={false} />\n                    </Box>\n                    {drawer}\n                </Drawer>\n                <Drawer\n                    variant=\"permanent\"\n                    PaperProps={{ elevation: 1 }}\n                    sx={{\n                        display: { xs: \"none\", md: \"block\" },\n                        \"& .MuiDrawer-paper\": {\n                            width: drawerWidth,\n                            bgcolor: \"secondary.main\",\n                            overflow: \"hidden\",\n                            transition:\n                                \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\",\n                        },\n                    }}\n                    open\n                >\n                    <Box\n                        sx={{\n                            height: 64,\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                        <RenderToTitle collapsed={collapsed} />\n                    </Box>\n                    <Box\n                        sx={{\n                            flexGrow: 1,\n                            overflowX: \"hidden\",\n                            overflowY: \"auto\",\n                        }}\n                    >\n                        {drawer}\n                    </Box>\n                    <Button\n                        sx={{\n                            background: \"rgba(0,0,0,.5)\",\n                            color: \"primary.contrastText\",\n                            textAlign: \"center\",\n                            borderRadius: 0,\n                            borderTop: \"1px solid #ffffff1a\",\n                        }}\n                        fullWidth\n                        size=\"large\"\n                        onClick={() => setCollapsed((prev) => !prev)}\n                    >\n                        {collapsed ? <ChevronRight /> : <ChevronLeft />}\n                    </Button>\n                </Drawer>\n                <Box\n                    sx={{\n                        display: { xs: \"block\", md: \"none\" },\n                        position: \"fixed\",\n                        top: \"64px\",\n                        left: \"0px\",\n                        borderRadius: \"0 6px 6px 0\",\n                        bgcolor: \"secondary.main\",\n                        zIndex: 1199,\n                        width: \"36px\",\n                    }}\n                >\n                    <IconButton\n                        sx={{ color: \"#fff\", width: \"36px\" }}\n                        onClick={() => setOpened((prev) => !prev)}\n                    >\n                        <MenuRounded />\n                    </IconButton>\n                </Box>\n            </Box>\n        </>\n    );\n};\n","import React from \"react\";\nimport { useGetIdentity } from \"@pankod/refine-core\";\nimport { AppBar, Stack, Toolbar, Typography, Avatar } from \"@mui/material\";\n\nimport { RefineLayoutHeaderProps } from \"../types\";\n\nexport const Header: React.FC<RefineLayoutHeaderProps> = () => {\n    const { data: user } = useGetIdentity();\n\n    const shouldRenderHeader = user && (user.name || user.avatar);\n\n    return shouldRenderHeader ? (\n        <AppBar color=\"default\" position=\"sticky\" elevation={1}>\n            <Toolbar>\n                <Stack\n                    direction=\"row\"\n                    width=\"100%\"\n                    justifyContent=\"flex-end\"\n                    alignItems=\"center\"\n                >\n                    <Stack\n                        direction=\"row\"\n                        gap=\"16px\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                    >\n                        <Typography variant=\"subtitle2\">\n                            {user?.name}\n                        </Typography>\n                        <Avatar src={user?.avatar} alt={user?.name} />\n                    </Stack>\n                </Stack>\n            </Toolbar>\n        </AppBar>\n    ) : null;\n};\n","import React from \"react\";\nimport { useRouterContext, TitleProps } from \"@pankod/refine-core\";\nimport { Button } from \"@mui/material\";\n\nexport const Title: React.FC<TitleProps> = ({ collapsed }) => {\n    const { Link } = useRouterContext();\n\n    return (\n        <Button fullWidth variant=\"text\" disableRipple>\n            <Link to=\"/\">\n                {collapsed ? (\n                    <img\n                        src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\"\n                        alt=\"Refine\"\n                        width=\"28px\"\n                        style={{ maxHeight: \"38px\" }}\n                    />\n                ) : (\n                    <img\n                        src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                        alt=\"Refine\"\n                        width=\"140px\"\n                    />\n                )}\n            </Link>\n        </Button>\n    );\n};\n","import * as React from \"react\";\nimport { LoginPageProps } from \"@pankod/refine-core\";\nimport { useForm } from \"@pankod/refine-react-hook-form\";\nimport {\n    Button,\n    TextField,\n    FormControlLabel,\n    Checkbox,\n    Link,\n    Box,\n    Typography,\n    Container,\n    Card,\n    CardContent,\n} from \"@mui/material\";\n\nimport {\n    BaseRecord,\n    HttpError,\n    useLogin,\n    useTranslate,\n} from \"@pankod/refine-core\";\n\ntype ILoginForm = {\n    username: string;\n    password: string;\n    remember?: boolean;\n};\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/api-reference/mui/components/mui-auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC<LoginPageProps> = () => {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<BaseRecord, HttpError, ILoginForm>();\n\n    const { mutate: login, isLoading } = useLogin<ILoginForm>();\n    const translate = useTranslate();\n\n    return (\n        <>\n            <Box\n                component=\"div\"\n                sx={{\n                    background: `radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)`,\n                    backgroundSize: \"cover\",\n                }}\n            >\n                <Container\n                    component=\"main\"\n                    maxWidth=\"xs\"\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        height: \"100vh\",\n                    }}\n                >\n                    <Box\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        <div>\n                            <img\n                                src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                                alt=\"Refine Logo\"\n                                style={{ maxWidth: 200 }}\n                            />\n                        </div>\n                        <Box mt={4}>\n                            <Card>\n                                <CardContent sx={{ paddingX: \"32px\" }}>\n                                    <Typography\n                                        component=\"h1\"\n                                        variant=\"h5\"\n                                        align=\"center\"\n                                        sx={{\n                                            fontWeight: \"700\",\n                                            margin: \"12px 0\",\n                                        }}\n                                    >\n                                        {translate(\n                                            \"pages.login.title\",\n                                            \"Sign in your account\",\n                                        )}\n                                    </Typography>\n                                    <Box\n                                        component=\"form\"\n                                        onSubmit={handleSubmit((data) => {\n                                            login(data);\n                                        })}\n                                        gap=\"16px\"\n                                    >\n                                        <TextField\n                                            {...register(\"username\", {\n                                                required: true,\n                                            })}\n                                            id=\"username\"\n                                            margin=\"normal\"\n                                            size=\"small\"\n                                            fullWidth\n                                            label={translate(\n                                                \"pages.login.username\",\n                                                \"Username\",\n                                            )}\n                                            name=\"username\"\n                                            autoComplete=\"username\"\n                                            autoFocus\n                                        />\n                                        <TextField\n                                            {...register(\"password\", {\n                                                required: true,\n                                            })}\n                                            id=\"password\"\n                                            size=\"small\"\n                                            margin=\"normal\"\n                                            fullWidth\n                                            name=\"password\"\n                                            label={translate(\n                                                \"pages.login.password\",\n                                                \"Password\",\n                                            )}\n                                            helperText={\n                                                errors?.password?.message\n                                            }\n                                            type=\"password\"\n                                            placeholder=\"●●●●●●●●\"\n                                            autoComplete=\"current-password\"\n                                        />\n                                        <Box\n                                            component=\"div\"\n                                            sx={{\n                                                display: \"flex\",\n                                                justifyContent: \"space-between\",\n                                                alignItems: \"center\",\n                                            }}\n                                        >\n                                            <FormControlLabel\n                                                sx={{\n                                                    span: {\n                                                        fontSize: \"12px\",\n                                                        color: \"text.secondary\",\n                                                    },\n                                                }}\n                                                color=\"secondary\"\n                                                control={\n                                                    <Checkbox\n                                                        size=\"small\"\n                                                        id=\"remember\"\n                                                        {...register(\n                                                            \"remember\",\n                                                        )}\n                                                    />\n                                                }\n                                                label={translate(\n                                                    \"pages.login.remember\",\n                                                    \"Remember me\",\n                                                )}\n                                            />\n                                            <Link\n                                                href=\"#\"\n                                                sx={{\n                                                    fontSize: \"12px\",\n                                                    textDecoration: \"none\",\n                                                }}\n                                            >\n                                                <Typography\n                                                    sx={{\n                                                        fontSize: \"12px\",\n                                                    }}\n                                                >\n                                                    {translate(\n                                                        \"pages.login.forgotPassword\",\n                                                        \"Forgot password?\",\n                                                    )}\n                                                </Typography>\n                                            </Link>\n                                        </Box>\n                                        <Button\n                                            type=\"submit\"\n                                            fullWidth\n                                            variant=\"contained\"\n                                            sx={{\n                                                my: \"8px\",\n                                                color: \"white\",\n                                            }}\n                                            disabled={isLoading}\n                                        >\n                                            {translate(\n                                                \"pages.login.signin\",\n                                                \"Sign in\",\n                                            )}\n                                        </Button>\n                                        <Box style={{ marginTop: 8 }}>\n                                            <Typography variant=\"subtitle2\">\n                                                {translate(\n                                                    \"pages.login.noAccount\",\n                                                    \"Don’t have an account?\",\n                                                )}{\" \"}\n                                                <Link\n                                                    underline=\"none\"\n                                                    href=\"#\"\n                                                    style={{\n                                                        fontWeight: \"bold\",\n                                                    }}\n                                                >\n                                                    {translate(\n                                                        \"pages.login.signup\",\n                                                        \"Sign up\",\n                                                    )}\n                                                </Link>\n                                            </Typography>\n                                        </Box>\n                                    </Box>\n                                </CardContent>\n                            </Card>\n                        </Box>\n                    </Box>\n                </Container>\n            </Box>\n        </>\n    );\n};\n","import * as React from \"react\";\nimport { RefineReadyPageProps } from \"@pankod/refine-ui-types\";\nimport { Stack, Grid, Typography, Button, Link } from \"@mui/material\";\n\nexport const ReadyPage: React.FC<RefineReadyPageProps> = () => {\n    const renderCode = (text: string) => (\n        <Typography\n            sx={{\n                backgroundColor: (theme) =>\n                    theme.palette.secondary.contrastText,\n                color: (theme) => theme.palette.secondary.main,\n                display: \"inline-block\",\n                fontFamily: \"monospace\",\n            }}\n        >\n            {text}\n        </Typography>\n    );\n    return (\n        <>\n            <Grid\n                container\n                sx={{\n                    backgroundColor: (theme) => theme.palette.secondary.main,\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    height: \"100vh\",\n                    backgroundImage:\n                        \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n                    backgroundSize: \"cover\",\n                }}\n                p={3}\n            >\n                <Grid\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    flex={1}\n                    alignItems=\"center\"\n                    color={(theme) => theme.palette.primary.contrastText}\n                >\n                    <Typography display=\"flex\" justifyContent=\"center\">\n                        <img\n                            style={{ marginBottom: \"48px\" }}\n                            src=\"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\"\n                            alt=\"Refine Logo\"\n                        />\n                    </Typography>\n                    <Typography\n                        variant=\"h2\"\n                        fontWeight=\"bold\"\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                    >\n                        Welcome on board\n                    </Typography>\n                    <Typography variant=\"h5\" mt={2}>\n                        Your configuration is completed.\n                    </Typography>\n                    <Typography variant=\"h6\" mt={2}>\n                        Now you can get started by adding your resources to the{\" \"}\n                        {renderCode(`resources`)} property of{\" \"}\n                        {renderCode(`Refine`)}\n                    </Typography>\n                    <Grid\n                        item\n                        sm={12}\n                        mt={12}\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                    >\n                        <Stack\n                            spacing={2}\n                            direction={{ xs: \"column\", sm: \"row\" }}\n                        >\n                            <Link\n                                href=\"https://refine.dev\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                style={{\n                                    textDecoration: \"none\",\n                                }}\n                            >\n                                <Button variant=\"outlined\" fullWidth>\n                                    Documentation\n                                </Button>\n                            </Link>\n                            <Link\n                                href=\"https://refine.dev/examples\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                style={{\n                                    textDecoration: \"none\",\n                                }}\n                            >\n                                <Button variant=\"outlined\" fullWidth>\n                                    Examples\n                                </Button>\n                            </Link>\n                            <Link\n                                href=\"https://discord.gg/refine\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                style={{\n                                    textDecoration: \"none\",\n                                }}\n                            >\n                                <Button variant=\"outlined\" fullWidth>\n                                    Community\n                                </Button>\n                            </Link>\n                        </Stack>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ResourceErrorRouterParams } from \"@pankod/refine-core\";\nimport { RefineErrorPageProps } from \"@pankod/refine-ui-types\";\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { Stack, Button, Tooltip, Typography, Grid } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\n\nexport const ErrorComponent: React.FC<RefineErrorPageProps> = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        const action = params.action ?? \"list\";\n        const resourceName = params.resource;\n        setErrorMessage(\n            translate(\n                \"pages.error.info\",\n                {\n                    action,\n                    resource: resourceName,\n                },\n                `You may have forgotten to add the \"${action}\" component to \"${resourceName}\" resource.`,\n            ),\n        );\n        if (resourceName) {\n            const resourceFromRoute = resource(resourceName);\n            if (\n                action &&\n                actionTypes.includes(action) &&\n                !resourceFromRoute[action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action,\n                            resource: resourceName,\n                        },\n                        `You may have forgotten to add the \"${action}\" component to \"${resourceName}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <Grid\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            mt={20}\n        >\n            <Grid\n                container\n                direction=\"column\"\n                display=\"flex\"\n                alignItems=\"center\"\n            >\n                <Typography variant=\"h1\">404</Typography>\n                <Stack direction=\"row\" spacing=\"2\">\n                    <Typography>\n                        {translate(\n                            \"pages.error.404\",\n                            \"Sorry, the page you visited does not exist.\",\n                        )}\n                    </Typography>\n\n                    {errorMessage && (\n                        <Tooltip title={errorMessage}>\n                            <Info data-testid=\"error-component-tooltip\" />\n                        </Tooltip>\n                    )}\n                </Stack>\n                <Button onClick={() => push(\"/\")}>\n                    {translate(\"pages.error.backHome\", \"Back Home\")}\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n","import React from \"react\";\nimport { BoxProps, CardProps } from \"@mui/material\";\nimport { AuthPageProps, RegisterFormTypes } from \"@pankod/refine-core\";\nimport { UseFormProps } from \"@pankod/refine-react-hook-form\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nexport interface FormPropsType extends UseFormProps {\n    onSubmit?: (values: RegisterFormTypes) => void;\n}\n\nexport type AuthProps = AuthPageProps<BoxProps, CardProps, FormPropsType>;\n\n/**\n * **refine** has a default auth page form served on the `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/mui-auth-page/} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import * as React from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"@pankod/refine-core\";\nimport { FormProvider, useForm } from \"@pankod/refine-react-hook-form\";\nimport {\n    Button,\n    BoxProps,\n    Box,\n    Checkbox,\n    Container,\n    Card,\n    CardContent,\n    CardContentProps,\n    FormControlLabel,\n    TextField,\n    Typography,\n    Divider,\n    Link as MuiLink,\n} from \"@mui/material\";\n\nimport {\n    BaseRecord,\n    HttpError,\n    useLogin,\n    useTranslate,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { layoutStyles, titleStyles } from \"../styles\";\n\nimport { FormPropsType } from \"../../index\";\ntype LoginProps = LoginPageProps<BoxProps, CardContentProps, FormPropsType>;\n\n/**\n * login will be used as the default type of the <AuthPage> component. The login page will be used to log in to the system.\n * @see {@link https://refine.dev/docs/api-reference/mui/components/mui-auth-page/#login} for more details.\n */\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const methods = useForm<BaseRecord, HttpError, LoginFormTypes>({\n        ...useFormProps,\n    });\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = methods;\n\n    const { mutate: login, isLoading } = useLogin<LoginFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider: any) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                fullWidth\n                                variant=\"outlined\"\n                                sx={{\n                                    my: \"8px\",\n                                    textTransform: \"none\",\n                                }}\n                                onClick={() =>\n                                    login({ providerName: provider.name })\n                                }\n                                startIcon={provider.icon}\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    <Divider style={{ fontSize: 12 }}>\n                        {translate(\"pages.login.divider\", \"or\")}\n                    </Divider>\n                </>\n            );\n        }\n        return null;\n    };\n\n    const Content = (\n        <Card {...(contentProps ?? {})}>\n            <CardContent sx={{ paddingX: \"32px\" }}>\n                <Typography\n                    component=\"h1\"\n                    variant=\"h5\"\n                    align=\"center\"\n                    style={titleStyles}\n                    color=\"primary\"\n                >\n                    {translate(\"pages.login.title\", \"Sign in to your account\")}\n                </Typography>\n                <Box\n                    component=\"form\"\n                    onSubmit={handleSubmit((data) => {\n                        if (onSubmit) {\n                            return onSubmit(data);\n                        }\n\n                        return login(data);\n                    })}\n                    gap=\"16px\"\n                >\n                    {renderProviders()}\n                    <TextField\n                        {...register(\"email\", {\n                            required: true,\n                        })}\n                        id=\"email\"\n                        margin=\"normal\"\n                        fullWidth\n                        label={translate(\"pages.login.fields.email\", \"Email\")}\n                        error={!!errors.email}\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                    />\n                    <TextField\n                        {...register(\"password\", {\n                            required: true,\n                        })}\n                        id=\"password\"\n                        margin=\"normal\"\n                        fullWidth\n                        name=\"password\"\n                        label={translate(\n                            \"pages.login.fields.password\",\n                            \"Password\",\n                        )}\n                        helperText={errors?.password?.message}\n                        error={!!errors.password}\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        autoComplete=\"current-password\"\n                    />\n\n                    <Box\n                        component=\"div\"\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {rememberMe ?? (\n                            <FormControlLabel\n                                sx={{\n                                    span: {\n                                        fontSize: \"14px\",\n                                        color: \"text.secondary\",\n                                    },\n                                }}\n                                color=\"secondary\"\n                                control={\n                                    <Checkbox\n                                        size=\"small\"\n                                        id=\"remember\"\n                                        {...register(\"remember\")}\n                                    />\n                                }\n                                label={translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                            />\n                        )}\n                        {forgotPasswordLink ?? (\n                            <MuiLink\n                                variant=\"body2\"\n                                component={Link}\n                                underline=\"none\"\n                                to=\"/forgot-password\"\n                            >\n                                {translate(\n                                    \"pages.login.buttons.forgotPassword\",\n                                    \"Forgot password?\",\n                                )}\n                            </MuiLink>\n                        )}\n                    </Box>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{\n                            mt: \"8px\",\n                        }}\n                        disabled={isLoading}\n                    >\n                        {translate(\"pages.login.signin\", \"Sign in\")}\n                    </Button>\n                    {registerLink ?? (\n                        <Box style={{ marginTop: 8 }}>\n                            <Typography variant=\"body2\" component=\"span\">\n                                {translate(\n                                    \"pages.login.buttons.noAccount\",\n                                    \"Don’t have an account?\",\n                                )}\n                            </Typography>\n                            <MuiLink\n                                ml=\"8px\"\n                                variant=\"body2\"\n                                component={Link}\n                                underline=\"none\"\n                                to=\"/register\"\n                                fontWeight=\"bold\"\n                            >\n                                {translate(\"pages.login.signup\", \"Sign up\")}\n                            </MuiLink>\n                        </Box>\n                    )}\n                </Box>\n            </CardContent>\n        </Card>\n    );\n\n    return (\n        <FormProvider {...methods}>\n            <Box component=\"div\" style={layoutStyles} {...(wrapperProps ?? {})}>\n                <Container\n                    component=\"main\"\n                    maxWidth=\"xs\"\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        height: \"100vh\",\n                    }}\n                >\n                    <Box\n                        sx={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {renderContent ? renderContent(Content) : Content}\n                    </Box>\n                </Container>\n            </Box>\n        </FormProvider>\n    );\n};\n","import { CSSProperties } from \"react\";\n\nexport const layoutStyles: CSSProperties = {\n    background: `radial-gradient(50% 50% at 50% 50%, #6813CB 0%, #2A2A42 100%)`,\n    backgroundSize: \"cover\",\n};\n\nexport const titleStyles: CSSProperties = {\n    textAlign: \"center\",\n    fontSize: \"24px\",\n    letterSpacing: \"-0.04em\",\n    marginBottom: \"24px\",\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\",\n};\n","import * as React from \"react\";\nimport { RegisterFormTypes, RegisterPageProps } from \"@pankod/refine-core\";\nimport { useForm } from \"@pankod/refine-react-hook-form\";\n\nimport {\n    Button,\n    TextField,\n    Box,\n    Typography,\n    Container,\n    Card,\n    CardContent,\n    BoxProps,\n    CardContentProps,\n    Divider,\n    Link as MuiLink,\n} from \"@mui/material\";\n\nimport {\n    BaseRecord,\n    HttpError,\n    useTranslate,\n    useRouterContext,\n    useRegister,\n} from \"@pankod/refine-core\";\n\nimport { layoutStyles, titleStyles } from \"../styles\";\nimport { FormPropsType } from \"../../index\";\n\ntype RegisterProps = RegisterPageProps<\n    BoxProps,\n    CardContentProps,\n    FormPropsType\n>;\n\n/**\n * The register page will be used to register new users. You can use the following props for the <AuthPage> component when the type is \"register\".\n * @see {@link https://refine.dev/docs/api-reference/mui/components/mui-auth-page/#register} for more details.\n */\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    providers,\n    formProps,\n}) => {\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<BaseRecord, HttpError, RegisterFormTypes>({\n        ...useFormProps,\n    });\n\n    const { mutate: registerMutate, isLoading } =\n        useRegister<RegisterFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const renderProviders = () => {\n        if (providers && providers.length > 0) {\n            return (\n                <>\n                    {providers.map((provider: any) => {\n                        return (\n                            <Button\n                                key={provider.name}\n                                fullWidth\n                                variant=\"outlined\"\n                                sx={{\n                                    my: \"8px\",\n                                    textTransform: \"none\",\n                                }}\n                                onClick={() =>\n                                    registerMutate({\n                                        providerName: provider.name,\n                                    })\n                                }\n                                startIcon={provider.icon}\n                            >\n                                {provider.label}\n                            </Button>\n                        );\n                    })}\n                    <Divider style={{ fontSize: 12 }}>\n                        {translate(\"pages.login.divider\", \"or\")}\n                    </Divider>\n                </>\n            );\n        }\n        return null;\n    };\n\n    const Content = (\n        <Card {...(contentProps ?? {})}>\n            <CardContent sx={{ paddingX: \"32px\" }}>\n                <Typography\n                    component=\"h1\"\n                    variant=\"h5\"\n                    align=\"center\"\n                    style={titleStyles}\n                    color=\"primary\"\n                >\n                    {translate(\n                        \"pages.register.title\",\n                        \"Sign up for your account\",\n                    )}\n                </Typography>\n                {renderProviders()}\n                <Box\n                    component=\"form\"\n                    onSubmit={handleSubmit((data) => {\n                        if (onSubmit) {\n                            return onSubmit(data);\n                        }\n\n                        return registerMutate(data);\n                    })}\n                    gap=\"16px\"\n                >\n                    <TextField\n                        {...register(\"email\", {\n                            required: true,\n                            pattern: {\n                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                message: translate(\n                                    \"pages.register.errors.validEmail\",\n                                    \"Invalid email address\",\n                                ),\n                            },\n                        })}\n                        id=\"email\"\n                        margin=\"normal\"\n                        fullWidth\n                        label={translate(\"pages.register.email\", \"Email\")}\n                        error={!!errors.email}\n                        helperText={\n                            errors[\"email\"] ? errors[\"email\"].message : \"\"\n                        }\n                        name=\"email\"\n                        autoComplete=\"email\"\n                    />\n                    <TextField\n                        {...register(\"password\", {\n                            required: true,\n                        })}\n                        id=\"password\"\n                        margin=\"normal\"\n                        fullWidth\n                        name=\"password\"\n                        label={translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                        helperText={\n                            errors[\"password\"] ? errors[\"password\"].message : \"\"\n                        }\n                        error={!!errors.password}\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        autoComplete=\"current-password\"\n                    />\n\n                    {loginLink ?? (\n                        <Box display=\"flex\" justifyContent=\"flex-end\">\n                            <Typography variant=\"body2\" component=\"span\">\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}\n                            </Typography>\n                            <MuiLink\n                                ml=\"6px\"\n                                variant=\"body2\"\n                                component={Link}\n                                underline=\"none\"\n                                to=\"/login\"\n                                fontWeight=\"bold\"\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </MuiLink>\n                        </Box>\n                    )}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{\n                            my: \"8px\",\n                            color: \"white\",\n                        }}\n                        disabled={isLoading}\n                    >\n                        {translate(\"pages.register.signup\", \"Sign up\")}\n                    </Button>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n\n    return (\n        <Box component=\"div\" style={layoutStyles} {...(wrapperProps ?? {})}>\n            <Container\n                component=\"main\"\n                maxWidth=\"xs\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    height: \"100vh\",\n                }}\n            >\n                {renderContent ? renderContent(Content) : Content}\n            </Container>\n        </Box>\n    );\n};\n","import * as React from \"react\";\nimport {\n    ForgotPasswordPageProps,\n    ForgotPasswordFormTypes,\n} from \"@pankod/refine-core\";\nimport { useForm } from \"@pankod/refine-react-hook-form\";\nimport {\n    Button,\n    TextField,\n    Box,\n    Typography,\n    Container,\n    Card,\n    CardContent,\n    BoxProps,\n    CardContentProps,\n    Link as MuiLink,\n} from \"@mui/material\";\n\nimport {\n    BaseRecord,\n    HttpError,\n    useTranslate,\n    useRouterContext,\n    useForgotPassword,\n} from \"@pankod/refine-core\";\n\nimport { layoutStyles, titleStyles } from \"../styles\";\nimport { FormPropsType } from \"../../index\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    BoxProps,\n    CardContentProps,\n    FormPropsType\n>;\n\n/**\n * The forgotPassword type is a page that allows users to reset their passwords. You can use this page to reset your password.\n * @see {@link https://refine.dev/docs/api-reference/mui/components/mui-auth-page/#forgot-password} for more details.\n */\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<BaseRecord, HttpError, ForgotPasswordFormTypes>({\n        ...useFormProps,\n    });\n\n    const { mutate, isLoading } = useForgotPassword<ForgotPasswordFormTypes>();\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const Content = (\n        <Card {...(contentProps ?? {})}>\n            <CardContent sx={{ paddingX: \"32px\" }}>\n                <Typography\n                    component=\"h1\"\n                    variant=\"h5\"\n                    align=\"center\"\n                    style={titleStyles}\n                    color=\"primary\"\n                >\n                    {translate(\n                        \"pages.forgotPassword.title\",\n                        \"Forgot your password?\",\n                    )}\n                </Typography>\n                <Box\n                    component=\"form\"\n                    onSubmit={handleSubmit((data) => {\n                        if (onSubmit) {\n                            return onSubmit(data);\n                        }\n\n                        return mutate(data);\n                    })}\n                    gap=\"16px\"\n                >\n                    <TextField\n                        {...register(\"email\", {\n                            required: true,\n                            pattern: {\n                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                message: translate(\n                                    \"pages.register.errors.validEmail\",\n                                    \"Invalid email address\",\n                                ),\n                            },\n                        })}\n                        id=\"email\"\n                        margin=\"normal\"\n                        fullWidth\n                        label={translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                        name=\"email\"\n                        type=\"email\"\n                        error={!!errors.email}\n                        autoComplete=\"email\"\n                    />\n                    {loginLink ?? (\n                        <Box textAlign=\"right\">\n                            <Typography variant=\"body2\" component=\"span\">\n                                {translate(\n                                    \"pages.register.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}\n                            </Typography>{\" \"}\n                            <MuiLink\n                                variant=\"body2\"\n                                component={Link}\n                                underline=\"none\"\n                                to=\"/register\"\n                                fontWeight=\"bold\"\n                            >\n                                {translate(\"pages.login.signin\", \"Sign in\")}\n                            </MuiLink>\n                        </Box>\n                    )}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{\n                            mt: \"8px\",\n                        }}\n                        disabled={isLoading}\n                    >\n                        {translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    </Button>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n\n    return (\n        <>\n            <Box component=\"div\" style={layoutStyles} {...(wrapperProps ?? {})}>\n                <Container\n                    component=\"main\"\n                    maxWidth=\"xs\"\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        height: \"100vh\",\n                    }}\n                >\n                    {renderContent ? renderContent(Content) : Content}\n                </Container>\n            </Box>\n        </>\n    );\n};\n","import * as React from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"@pankod/refine-core\";\nimport { useForm } from \"@pankod/refine-react-hook-form\";\nimport {\n    Button,\n    TextField,\n    Box,\n    Typography,\n    Container,\n    Card,\n    CardContent,\n    BoxProps,\n    CardContentProps,\n} from \"@mui/material\";\n\nimport {\n    BaseRecord,\n    HttpError,\n    useTranslate,\n    useUpdatePassword,\n} from \"@pankod/refine-core\";\n\nimport { layoutStyles, titleStyles } from \"../styles\";\nimport { FormPropsType } from \"../../index\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    BoxProps,\n    CardContentProps,\n    FormPropsType\n>;\n\n/**\n * The updatePassword type is the page used to update the password of the user.\n * @see {@link https://refine.dev/docs/api-reference/mui/components/mui-auth-page/#update-password} for more details.\n */\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const {\n        register,\n        watch,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<BaseRecord, HttpError, UpdatePasswordFormTypes>({\n        ...useFormProps,\n    });\n\n    const { mutate: update, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n    const translate = useTranslate();\n\n    const Content = (\n        <Card {...(contentProps ?? {})}>\n            <CardContent sx={{ paddingX: \"32px\" }}>\n                <Typography\n                    component=\"h1\"\n                    variant=\"h5\"\n                    align=\"center\"\n                    style={titleStyles}\n                    color=\"primary\"\n                >\n                    {translate(\n                        \"pages.updatePassword.title\",\n                        \"Set New Password\",\n                    )}\n                </Typography>\n                <Box\n                    component=\"form\"\n                    onSubmit={handleSubmit((data) => {\n                        if (onSubmit) {\n                            return onSubmit(data);\n                        }\n\n                        return update(data);\n                    })}\n                    gap=\"16px\"\n                >\n                    <TextField\n                        {...register(\"password\", {\n                            required: true,\n                        })}\n                        id=\"password\"\n                        margin=\"normal\"\n                        fullWidth\n                        name=\"password\"\n                        label={translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                        helperText={errors?.password?.message}\n                        error={!!errors?.password}\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        autoComplete=\"current-password\"\n                    />\n\n                    <TextField\n                        {...register(\"confirmPassword\", {\n                            required: true,\n                            validate: (value?: string) => {\n                                if (watch(\"password\") !== value) {\n                                    return translate(\n                                        \"pages.updatePassword.errors.confirmPasswordNotMatch\",\n                                        \"Passwords do not match\",\n                                    );\n                                }\n                                return true;\n                            },\n                        })}\n                        id=\"confirmPassword\"\n                        margin=\"normal\"\n                        fullWidth\n                        name=\"confirmPassword\"\n                        label={translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                        helperText={errors?.confirmPassword?.message}\n                        error={!!errors?.confirmPassword}\n                        type=\"password\"\n                        placeholder=\"●●●●●●●●\"\n                        autoComplete=\"current-confirm-password\"\n                    />\n\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{\n                            mt: \"8px\",\n                        }}\n                        disabled={isLoading}\n                    >\n                        {translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    </Button>\n                </Box>\n            </CardContent>\n        </Card>\n    );\n\n    return (\n        <>\n            <Box component=\"div\" style={layoutStyles} {...(wrapperProps ?? {})}>\n                <Container\n                    component=\"main\"\n                    maxWidth=\"xs\"\n                    sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        height: \"100vh\",\n                    }}\n                >\n                    {renderContent ? renderContent(Content) : Content}\n                </Container>\n            </Box>\n        </>\n    );\n};\n","import React from \"react\";\n\nimport {\n    useNavigation,\n    useResourceWithRoute,\n    useRouterContext,\n    useTranslate,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport {\n    Card,\n    CardHeader,\n    CardActions,\n    CardContent,\n    IconButton,\n    Typography,\n    Box,\n} from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\nimport { Breadcrumb, SaveButton } from \"@components\";\nimport { CreateProps } from \"../types\";\n\n/**\n * `<Create>` provides us a layout to display the page.\n * It does not contain any logic but adds extra functionalities like action buttons and giving titles to the page.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/basic-views/create} for more details.\n */\nexport const Create: React.FC<CreateProps> = ({\n    title,\n    actionButtons,\n    children,\n    saveButtonProps,\n    resource: resourceFromProps,\n    isLoading = false,\n    cardProps,\n    cardHeaderProps,\n    cardContentProps,\n    cardActionsProps,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const { goBack } = useNavigation();\n\n    const translate = useTranslate();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, action: routeFromAction } =\n        useParams<ResourceRouterParams>();\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const breadcrumbComponent =\n        typeof breadcrumb !== \"undefined\" ? (\n            <>{breadcrumb}</> ?? undefined\n        ) : (\n            <Breadcrumb />\n        );\n\n    const defaultFooterButtons = (\n        <SaveButton\n            {...(isLoading ? { disabled: true } : {})}\n            {...saveButtonProps}\n        />\n    );\n\n    return (\n        <Card {...(cardProps ?? {})} {...(wrapperProps ?? {})}>\n            {breadcrumbComponent}\n            <CardHeader\n                sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                title={\n                    title ?? (\n                        <Typography variant=\"h5\">\n                            {translate(\n                                `${resource.name}.titles.create`,\n                                `Create ${userFriendlyResourceName(\n                                    resource.label ?? resource.name,\n                                    \"singular\",\n                                )}`,\n                            )}\n                        </Typography>\n                    )\n                }\n                avatar={\n                    typeof goBackFromProps !== \"undefined\" ? (\n                        goBackFromProps\n                    ) : (\n                        <IconButton\n                            onClick={routeFromAction ? goBack : undefined}\n                        >\n                            <ArrowBackIcon />\n                        </IconButton>\n                    )\n                }\n                action={\n                    headerButtons ? (\n                        <Box\n                            display=\"flex\"\n                            gap=\"16px\"\n                            {...(headerButtonProps ?? {})}\n                        >\n                            {headerButtons\n                                ? typeof headerButtons === \"function\"\n                                    ? headerButtons({\n                                          defaultButtons: null,\n                                      })\n                                    : headerButtons\n                                : null}\n                        </Box>\n                    ) : undefined\n                }\n                {...(cardHeaderProps ?? {})}\n                {...(headerProps ?? {})}\n            />\n            <CardContent\n                {...(cardContentProps ?? {})}\n                {...(contentProps ?? {})}\n            >\n                {children}\n            </CardContent>\n            <CardActions\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                    gap: \"16px\",\n                    padding: \"16px\",\n                }}\n                {...(cardActionsProps ?? {})}\n                {...(footerButtonProps ?? {})}\n            >\n                {footerButtons\n                    ? typeof footerButtons === \"function\"\n                        ? footerButtons({\n                              defaultButtons: defaultFooterButtons,\n                          })\n                        : footerButtons\n                    : actionButtons\n                    ? actionButtons\n                    : defaultFooterButtons}\n            </CardActions>\n        </Card>\n    );\n};\n","import React from \"react\";\n\nimport {\n    useResourceWithRoute,\n    useMutationMode,\n    useNavigation,\n    useTranslate,\n    useRouterContext,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport {\n    Card,\n    CardHeader,\n    IconButton,\n    CardContent,\n    CardActions,\n    Typography,\n    Box,\n} from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\nimport {\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    SaveButton,\n    Breadcrumb,\n} from \"@components\";\nimport { EditProps } from \"../types\";\n\n/**\n * `<Edit>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/basic-views/edit} for more details.\n */\nexport const Edit: React.FC<EditProps> = ({\n    title,\n    actionButtons,\n    saveButtonProps,\n    mutationMode: mutationModeProp,\n    recordItemId,\n    children,\n    deleteButtonProps,\n    canDelete,\n    resource: resourceFromProps,\n    isLoading = false,\n    cardProps,\n    cardHeaderProps,\n    cardContentProps,\n    cardActionsProps,\n    breadcrumb: breadcrumbFromProps,\n    dataProviderName,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n\n    const { goBack, list } = useNavigation();\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const { useParams } = useRouterContext();\n\n    const {\n        resource: routeResourceName,\n        action: routeFromAction,\n        id: idFromRoute,\n    } = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const isDeleteButtonVisible =\n        canDelete ?? (resource.canDelete || deleteButtonProps);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const breadcrumbComponent =\n        typeof breadcrumb !== \"undefined\" ? (\n            <>{breadcrumb}</> ?? undefined\n        ) : (\n            <Breadcrumb />\n        );\n\n    const id = recordItemId ?? idFromRoute;\n\n    const defaultHeaderButtons = (\n        <>\n            {!recordItemId && (\n                <ListButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                />\n            )}\n            <RefreshButton\n                {...(isLoading ? { disabled: true } : {})}\n                resourceNameOrRouteName={resource.route}\n                recordItemId={id}\n                dataProviderName={dataProviderName}\n            />\n        </>\n    );\n\n    const defaultFooterButtons = (\n        <>\n            {isDeleteButtonVisible && (\n                <DeleteButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    mutationMode={mutationMode}\n                    variant=\"outlined\"\n                    onSuccess={() => {\n                        list(resource.route ?? resource.name);\n                    }}\n                    dataProviderName={dataProviderName}\n                    {...deleteButtonProps}\n                />\n            )}\n            <SaveButton\n                {...(isLoading ? { disabled: true } : {})}\n                {...saveButtonProps}\n            />\n        </>\n    );\n\n    return (\n        <Card {...(cardProps ?? {})} {...(wrapperProps ?? {})}>\n            {breadcrumbComponent}\n            <CardHeader\n                sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                title={\n                    title ?? (\n                        <Typography variant=\"h5\">\n                            {translate(\n                                `${resource.name}.titles.edit`,\n                                `Edit ${userFriendlyResourceName(\n                                    resource.label ?? resource.name,\n                                    \"singular\",\n                                )}`,\n                            )}\n                        </Typography>\n                    )\n                }\n                avatar={\n                    typeof goBackFromProps !== \"undefined\" ? (\n                        goBackFromProps\n                    ) : (\n                        <IconButton\n                            onClick={routeFromAction ? goBack : undefined}\n                        >\n                            <ArrowBackIcon />\n                        </IconButton>\n                    )\n                }\n                action={\n                    <Box\n                        display=\"flex\"\n                        gap=\"16px\"\n                        {...(headerButtonProps ?? {})}\n                    >\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Box>\n                }\n                {...(cardHeaderProps ?? {})}\n                {...(headerProps ?? {})}\n            />\n            <CardContent\n                {...(cardContentProps ?? {})}\n                {...(contentProps ?? {})}\n            >\n                {children}\n            </CardContent>\n            <CardActions\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                    gap: \"16px\",\n                    padding: \"16px\",\n                }}\n                {...(cardActionsProps ?? {})}\n                {...(footerButtonProps ?? {})}\n            >\n                {footerButtons\n                    ? typeof footerButtons === \"function\"\n                        ? footerButtons({\n                              defaultButtons: defaultFooterButtons,\n                          })\n                        : footerButtons\n                    : actionButtons\n                    ? actionButtons\n                    : defaultFooterButtons}\n            </CardActions>\n        </Card>\n    );\n};\n","import React from \"react\";\n\nimport {\n    useResourceWithRoute,\n    useTranslate,\n    useRouterContext,\n    userFriendlyResourceName,\n    ResourceRouterParams,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport { Card, CardHeader, CardContent, Typography, Box } from \"@mui/material\";\n\nimport { CreateButton, Breadcrumb } from \"@components\";\nimport { ListProps } from \"../types\";\n\n/**\n * `<List>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/basic-views/list} for more details.\n */\nexport const List: React.FC<ListProps> = ({\n    title,\n    canCreate,\n    children,\n    createButtonProps,\n    resource: resourceFromProps,\n    cardProps,\n    cardHeaderProps,\n    cardContentProps,\n    breadcrumb: breadcrumbFromProps,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n}) => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const translate = useTranslate();\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const isCreateButtonVisible =\n        canCreate ?? (resource.canCreate || createButtonProps);\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const breadcrumbComponent =\n        typeof breadcrumb !== \"undefined\" ? (\n            <>{breadcrumb}</> ?? undefined\n        ) : (\n            <Breadcrumb />\n        );\n\n    const defaultHeaderButtons = isCreateButtonVisible ? (\n        <CreateButton\n            resourceNameOrRouteName={resource.route}\n            {...createButtonProps}\n        />\n    ) : null;\n\n    return (\n        <Card {...(cardProps ?? {})} {...(wrapperProps ?? {})}>\n            {breadcrumbComponent}\n            <CardHeader\n                sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                title={\n                    title ?? (\n                        <Typography variant=\"h5\">\n                            {translate(\n                                `${resource.name}.titles.list`,\n                                userFriendlyResourceName(\n                                    resource.label ?? resource.name,\n                                    \"plural\",\n                                ),\n                            )}\n                        </Typography>\n                    )\n                }\n                action={\n                    <Box display=\"flex\" gap=\"16px\" {...headerButtonProps}>\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Box>\n                }\n                {...(cardHeaderProps ?? {})}\n                {...(headerProps ?? {})}\n            />\n            <CardContent\n                {...(cardContentProps ?? {})}\n                {...(contentProps ?? {})}\n            >\n                {children}\n            </CardContent>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport {\n    useNavigation,\n    useResourceWithRoute,\n    useRouterContext,\n    useTranslate,\n    ResourceRouterParams,\n    userFriendlyResourceName,\n    useRefineContext,\n} from \"@pankod/refine-core\";\n\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    IconButton,\n    Box,\n    Typography,\n} from \"@mui/material\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\n\nimport {\n    DeleteButton,\n    RefreshButton,\n    ListButton,\n    EditButton,\n    Breadcrumb,\n} from \"@components\";\nimport { ShowProps } from \"../types\";\n\n/**\n * `<Show>` provides us a layout for displaying the page.\n * It does not contain any logic but adds extra functionalities like a refresh button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/basic-views/show} for more details.\n */\nexport const Show: React.FC<ShowProps> = ({\n    title,\n    canEdit,\n    canDelete,\n    actionButtons,\n    isLoading = false,\n    children,\n    resource: resourceFromProps,\n    recordItemId,\n    cardProps,\n    cardHeaderProps,\n    cardContentProps,\n    cardActionsProps,\n    breadcrumb: breadcrumbFromProps,\n    dataProviderName,\n    wrapperProps,\n    headerProps,\n    contentProps,\n    headerButtonProps,\n    headerButtons,\n    footerButtonProps,\n    footerButtons,\n    goBack: goBackFromProps,\n}) => {\n    const translate = useTranslate();\n\n    const { goBack, list } = useNavigation();\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const {\n        resource: routeResourceName,\n        action: routeFromAction,\n        id: idFromRoute,\n    } = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(resourceFromProps ?? routeResourceName);\n\n    const isDeleteButtonVisible = canDelete ?? resource.canDelete;\n\n    const isEditButtonVisible = canEdit ?? resource.canEdit;\n\n    const { options } = useRefineContext();\n    const breadcrumb =\n        typeof breadcrumbFromProps === \"undefined\"\n            ? options?.breadcrumb\n            : breadcrumbFromProps;\n\n    const breadcrumbComponent =\n        typeof breadcrumb !== \"undefined\" ? (\n            <>{breadcrumb}</> ?? undefined\n        ) : (\n            <Breadcrumb />\n        );\n\n    const id = recordItemId ?? idFromRoute;\n\n    const defaultHeaderButtons = (\n        <>\n            {!recordItemId && (\n                <ListButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                />\n            )}\n            {isEditButtonVisible && (\n                <EditButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                    recordItemId={id}\n                />\n            )}\n            {isDeleteButtonVisible && (\n                <DeleteButton\n                    {...(isLoading ? { disabled: true } : {})}\n                    resourceNameOrRouteName={resource.route}\n                    recordItemId={id}\n                    onSuccess={() => list(resource.route ?? resource.name)}\n                    dataProviderName={dataProviderName}\n                />\n            )}\n            <RefreshButton\n                {...(isLoading ? { disabled: true } : {})}\n                resourceNameOrRouteName={resource.route}\n                recordItemId={id}\n                dataProviderName={dataProviderName}\n            />\n        </>\n    );\n\n    return (\n        <Card {...(cardProps ?? {})} {...(wrapperProps ?? {})}>\n            {breadcrumbComponent}\n            <CardHeader\n                sx={{ display: \"flex\", flexWrap: \"wrap\" }}\n                title={\n                    title ?? (\n                        <Typography variant=\"h5\">\n                            {translate(\n                                `${resource.name}.titles.show`,\n                                `Show ${userFriendlyResourceName(\n                                    resource.label ?? resource.name,\n                                    \"singular\",\n                                )}`,\n                            )}\n                        </Typography>\n                    )\n                }\n                avatar={\n                    typeof goBackFromProps !== \"undefined\" ? (\n                        goBackFromProps\n                    ) : (\n                        <IconButton\n                            onClick={routeFromAction ? goBack : undefined}\n                        >\n                            <ArrowBackIcon />\n                        </IconButton>\n                    )\n                }\n                action={\n                    <Box\n                        display=\"flex\"\n                        gap=\"16px\"\n                        {...(headerButtonProps ?? {})}\n                    >\n                        {headerButtons\n                            ? typeof headerButtons === \"function\"\n                                ? headerButtons({\n                                      defaultButtons: defaultHeaderButtons,\n                                  })\n                                : headerButtons\n                            : defaultHeaderButtons}\n                    </Box>\n                }\n                {...(cardHeaderProps ?? {})}\n                {...(headerProps ?? {})}\n            />\n            <CardContent\n                {...(cardContentProps ?? {})}\n                {...(contentProps ?? {})}\n            >\n                {children}\n            </CardContent>\n            <CardActions\n                sx={{ padding: \"16px\" }}\n                {...(cardActionsProps ?? {})}\n                {...(footerButtonProps ?? {})}\n            >\n                {footerButtons\n                    ? typeof footerButtons === \"function\"\n                        ? footerButtons({ defaultButtons: null })\n                        : footerButtons\n                    : actionButtons\n                    ? actionButtons\n                    : null}\n                {actionButtons ? actionButtons : null}\n            </CardActions>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport {\n    useNavigation,\n    useTranslate,\n    useCan,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button } from \"@mui/material\";\nimport { AddBoxOutlined } from \"@mui/icons-material\";\n\nimport { CreateButtonProps } from \"../types\";\n\n/**\n * <CreateButton> uses Material UI {@link https://mui.com/components/buttons/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#create `create`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful to redirect the app to the create page route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/create-button} for more details.\n */\nexport const CreateButton: React.FC<CreateButtonProps> = ({\n    resourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resource, resourceName } = useResource({\n        resourceNameOrRouteName,\n    });\n\n    const { Link } = useRouterContext();\n    const { createUrl: generateCreateUrl } = useNavigation();\n\n    const translate = useTranslate();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"create\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const createUrl = generateCreateUrl(resource.route!);\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={createUrl}\n            replace={false}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n            style={{ textDecoration: \"none\" }}\n        >\n            <Button\n                disabled={data?.can === false}\n                startIcon={!hideText && <AddBoxOutlined {...svgIconProps} />}\n                title={disabledTitle()}\n                variant=\"contained\"\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.CreateButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <AddBoxOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.create\", \"Create\")\n                )}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button } from \"@mui/material\";\nimport { EditOutlined } from \"@mui/icons-material\";\n\nimport { EditButtonProps } from \"../types\";\n\n/**\n * `<EditButton>` uses uses Material UI {@link https://mui.com/components/buttons/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#edit `edit`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the edit page with the record id route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/edit-button} for more details.\n */\nexport const EditButton: React.FC<EditButtonProps> = ({\n    resourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resourceName, resource, id } = useResource({\n        resourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const translate = useTranslate();\n\n    const { editUrl: generateEditUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"edit\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const editUrl = generateEditUrl(resource.route!, id!);\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={editUrl}\n            replace={false}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n            style={{ textDecoration: \"none\" }}\n        >\n            <Button\n                disabled={data?.can === false}\n                startIcon={\n                    !hideText && (\n                        <EditOutlined\n                            sx={{ selfAlign: \"center\" }}\n                            {...svgIconProps}\n                        />\n                    )\n                }\n                title={disabledTitle()}\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.EditButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <EditOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.edit\", \"Edit\")\n                )}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport {\n    useDelete,\n    useTranslate,\n    useMutationMode,\n    useCan,\n    useResource,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button, Dialog, DialogActions, DialogTitle } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { DeleteOutline } from \"@mui/icons-material\";\n\nimport { DeleteButtonProps } from \"../types\";\n\n/**\n * `<DeleteButton>` uses Material UI {@link https://mui.com/material-ui/api/loading-button/#main-content `<LoadingButton>`} and {@link https://mui.com/material-ui/react-dialog/#main-content `<Dialog>`} components.\n * When you try to delete something, a dialog modal shows up and asks for confirmation. When confirmed it executes the `useDelete` method provided by your `dataProvider`.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/delete-button} for more details.\n */\nexport const DeleteButton: React.FC<DeleteButtonProps> = ({\n    resourceNameOrRouteName,\n    recordItemId,\n    onSuccess,\n    mutationMode: mutationModeProp,\n    children,\n    successNotification,\n    errorNotification,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    metaData,\n    dataProviderName,\n    confirmTitle,\n    confirmOkText,\n    confirmCancelText,\n    svgIconProps,\n    invalidates,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resourceName, id, resource } = useResource({\n        resourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const translate = useTranslate();\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const { mutate, isLoading, variables } = useDelete();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"delete\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCloseOnConfirm = () => {\n        setOpen(false);\n        mutate(\n            {\n                id: id ?? \"\",\n                resource: resourceName,\n                mutationMode,\n                successNotification,\n                errorNotification,\n                metaData,\n                dataProviderName,\n                invalidates,\n            },\n            {\n                onSuccess: (value) => {\n                    onSuccess && onSuccess(value);\n                },\n            },\n        );\n    };\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <div>\n            <LoadingButton\n                color=\"error\"\n                onClick={handleClickOpen}\n                disabled={data?.can === false}\n                loading={id === variables?.id && isLoading}\n                startIcon={!hideText && <DeleteOutline {...svgIconProps} />}\n                sx={{ minWidth: 0, ...sx }}\n                loadingPosition={hideText ? \"center\" : \"start\"}\n                data-testid={RefineButtonTestIds.DeleteButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <DeleteOutline fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.delete\", \"Delete\")\n                )}\n            </LoadingButton>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {confirmTitle ??\n                        translate(\"buttons.confirm\", \"Are you sure?\")}\n                </DialogTitle>\n                <DialogActions sx={{ justifyContent: \"center\" }}>\n                    <Button onClick={handleClose}>\n                        {confirmCancelText ??\n                            translate(\"buttons.cancel\", \"Cancel\")}\n                    </Button>\n                    <Button\n                        color=\"error\"\n                        onClick={handleCloseOnConfirm}\n                        autoFocus\n                    >\n                        {confirmOkText ?? translate(\"buttons.delete\", \"Delete\")}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useOne, useTranslate, useResource } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { RefreshOutlined } from \"@mui/icons-material\";\n\nimport { RefreshButtonProps } from \"../types\";\n\n/**\n * `<RefreshButton>` uses uses Material UI {@link https://mui.com/material-ui/api/loading-button/#main-content `<LoadingButton>`} component\n * to update the data shown on the page via the {@link https://refine.dev/docs/core/hooks/data/useOne `useOne`} method provided by your dataProvider.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/refresh-button} for more details.\n */\nexport const RefreshButton: React.FC<RefreshButtonProps> = ({\n    resourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    metaData,\n    dataProviderName,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const { resourceName, id } = useResource({\n        resourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const translate = useTranslate();\n\n    const { refetch, isFetching } = useOne({\n        resource: resourceName,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: false,\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const { sx, ...restProps } = rest;\n\n    return (\n        <LoadingButton\n            startIcon={!hideText && <RefreshOutlined {...svgIconProps} />}\n            loading={isFetching}\n            loadingPosition={hideText ? \"center\" : \"start\"}\n            onClick={(e) => (onClick ? onClick(e) : refetch())}\n            sx={{ minWidth: 0, ...sx }}\n            data-testid={RefineButtonTestIds.RefreshButton}\n            {...restProps}\n        >\n            {hideText ? (\n                <RefreshOutlined fontSize=\"small\" {...svgIconProps} />\n            ) : (\n                children ?? translate(\"buttons.refresh\", \"Refresh\")\n            )}\n        </LoadingButton>\n    );\n};\n","import React from \"react\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button } from \"@mui/material\";\nimport { VisibilityOutlined } from \"@mui/icons-material\";\n\nimport { ShowButtonProps } from \"../types\";\n\n/**\n * `<ShowButton>` uses uses Material UI {@link https://mui.com/components/buttons/ `<Button>`} component.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#show `show`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when red sirecting the app to the show page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/show-button} for more details.\n */\nexport const ShowButton: React.FC<ShowButtonProps> = ({\n    resourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resourceName, id, resource } = useResource({\n        resourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const { showUrl: generateShowUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"show\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const showUrl = generateShowUrl(resource.route!, id!);\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={showUrl}\n            replace={false}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n            style={{ textDecoration: \"none\" }}\n        >\n            <Button\n                disabled={data?.can === false}\n                startIcon={\n                    !hideText && <VisibilityOutlined {...svgIconProps} />\n                }\n                title={disabledTitle()}\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.ShowButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <VisibilityOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.show\", \"Show\")\n                )}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    userFriendlyResourceName,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button } from \"@mui/material\";\nimport { ListOutlined } from \"@mui/icons-material\";\n\nimport { ListButtonProps } from \"../types\";\n\n/**\n * `<ListButton>` is using uses Material UI {@link https://mui.com/components/buttons/ `<Button>`} component.\n * It uses the  {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#list `list`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation `useNavigation`} under the hood.\n * It can be useful when redirecting the app to the list page route of resource}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/list-button} for more details.\n */\nexport const ListButton: React.FC<ListButtonProps> = ({\n    resourceNameOrRouteName,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resource, resourceName } = useResource({\n        resourceNameOrRouteName,\n    });\n\n    const { listUrl: generateListUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"list\",\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n        params: {\n            resource,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const listUrl = generateListUrl(resource.route!);\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={listUrl}\n            replace={false}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n            style={{ textDecoration: \"none\" }}\n        >\n            <Button\n                disabled={data?.can === false}\n                startIcon={!hideText && <ListOutlined {...svgIconProps} />}\n                title={disabledTitle()}\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.ListButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <ListOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ??\n                    translate(\n                        `${resourceName}.titles.list`,\n                        userFriendlyResourceName(\n                            resource.label ?? resourceName,\n                            \"plural\",\n                        ),\n                    )\n                )}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { ImportExportOutlined } from \"@mui/icons-material\";\n\nimport { ExportButtonProps } from \"../types\";\n\n/**\n * `<ExportButton>` uses Material UI {@link https://mui.com/material-ui/api/loading-button/#main-content `<LoadingButton>`} with a default export icon and a default text with \"Export\".\n * It only has presentational value.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/export-button} for more details.\n */\nexport const ExportButton: React.FC<ExportButtonProps> = ({\n    hideText = false,\n    children,\n    loading = false,\n    svgIconProps,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    const { sx, ...restProps } = rest;\n\n    return (\n        <LoadingButton\n            {...rest}\n            loading={loading}\n            startIcon={!hideText && <ImportExportOutlined {...svgIconProps} />}\n            loadingPosition={hideText ? \"center\" : \"start\"}\n            sx={{ minWidth: 0, ...sx }}\n            data-testid={RefineButtonTestIds.ExportButton}\n            {...restProps}\n        >\n            {hideText ? (\n                <ImportExportOutlined fontSize=\"small\" {...svgIconProps} />\n            ) : (\n                children ?? translate(\"buttons.export\", \"Export\")\n            )}\n        </LoadingButton>\n    );\n};\n","import React from \"react\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { SaveOutlined } from \"@mui/icons-material\";\n\nimport { SaveButtonProps } from \"../types\";\n\n/**\n * `<SaveButton>` uses Material UI {@link https://mui.com/material-ui/api/loading-button/#main-content `<LoadingButton>`} component.\n * It uses it for presantation purposes only. Some of the hooks that refine has adds features to this button.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/save-button} for more details.\n */\nexport const SaveButton: React.FC<SaveButtonProps> = ({\n    hideText = false,\n    svgIconProps,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    const { sx, ...restProps } = rest;\n\n    return (\n        <LoadingButton\n            startIcon={!hideText && <SaveOutlined {...svgIconProps} />}\n            sx={{ minWidth: 0, ...sx }}\n            variant=\"contained\"\n            data-testid={RefineButtonTestIds.SaveButton}\n            {...restProps}\n        >\n            {hideText ? (\n                <SaveOutlined fontSize=\"small\" {...svgIconProps} />\n            ) : (\n                children ?? translate(\"buttons.save\", \"Save\")\n            )}\n        </LoadingButton>\n    );\n};\n","import React from \"react\";\nimport {\n    useCan,\n    useNavigation,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { Button } from \"@mui/material\";\nimport { AddBoxOutlined } from \"@mui/icons-material\";\n\nimport { CloneButtonProps } from \"../types\";\n\n/**\n * `<CloneButton>` uses Material UI {@link https://mui.com/components/buttons/ `<Button> component`}.\n * It uses the {@link https://refine.dev/docs/core/hooks/navigation/useNavigation#clone `clone`} method from {@link https://refine.dev/docs/core/hooks/navigation/useNavigation useNavigation} under the hood.\n * It can be useful when redirecting the app to the create page with the record id route of resource.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/clone-button} for more details.\n *\n */\nexport const CloneButton: React.FC<CloneButtonProps> = ({\n    resourceNameOrRouteName,\n    recordItemId,\n    hideText = false,\n    accessControl,\n    ignoreAccessControlProvider = false,\n    svgIconProps,\n    children,\n    onClick,\n    ...rest\n}) => {\n    const accessControlEnabled =\n        accessControl?.enabled ?? !ignoreAccessControlProvider;\n    const hideIfUnauthorized = accessControl?.hideIfUnauthorized ?? false;\n    const { resourceName, resource, id } = useResource({\n        resourceNameOrRouteName,\n        recordItemId,\n    });\n\n    const { cloneUrl: generateCloneUrl } = useNavigation();\n    const { Link } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { data } = useCan({\n        resource: resourceName,\n        action: \"create\",\n        params: { id, resource },\n        queryOptions: {\n            enabled: accessControlEnabled,\n        },\n    });\n\n    const disabledTitle = () => {\n        if (data?.can) return \"\";\n        else if (data?.reason) return data.reason;\n        else\n            return translate(\n                \"buttons.notAccessTitle\",\n                \"You don't have permission to access\",\n            );\n    };\n\n    const cloneUrl = generateCloneUrl(resource.route!, id!);\n\n    const { sx, ...restProps } = rest;\n\n    if (accessControlEnabled && hideIfUnauthorized && !data?.can) {\n        return null;\n    }\n\n    return (\n        <Link\n            to={cloneUrl}\n            replace={false}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                if (data?.can === false) {\n                    e.preventDefault();\n                    return;\n                }\n                if (onClick) {\n                    e.preventDefault();\n                    onClick(e);\n                }\n            }}\n            style={{ textDecoration: \"none\" }}\n        >\n            <Button\n                disabled={data?.can === false}\n                startIcon={!hideText && <AddBoxOutlined {...svgIconProps} />}\n                title={disabledTitle()}\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.CloneButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <AddBoxOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.clone\", \"Clone\")\n                )}\n            </Button>\n        </Link>\n    );\n};\n","import React from \"react\";\nimport { useTranslate } from \"@pankod/refine-core\";\nimport { RefineButtonTestIds } from \"@pankod/refine-ui-types\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { ImportExportOutlined } from \"@mui/icons-material\";\n\nimport { ImportButtonProps } from \"../types\";\n\n/**\n * `<ImportButton>` is compatible with the {@link https://refine.dev/docs/core/hooks/import-export/useImport/ `useImport`} core hook.\n * It uses Material UI {@link https://mui.com/material-ui/api/loading-button/#main-content  `<LoadingButton>`} and native html {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input  `<input>`} element.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/buttons/import-button} for more details.\n */\nexport const ImportButton: React.FC<ImportButtonProps> = ({\n    inputProps,\n    hideText = false,\n    loading = false,\n    svgIconProps,\n    children,\n    ...rest\n}) => {\n    const translate = useTranslate();\n\n    const { sx, ...restProps } = rest;\n\n    return (\n        <label htmlFor=\"contained-button-file\">\n            <input {...inputProps} id=\"contained-button-file\" multiple hidden />\n            <LoadingButton\n                component=\"span\"\n                startIcon={\n                    !hideText && <ImportExportOutlined {...svgIconProps} />\n                }\n                loadingPosition={hideText ? \"center\" : \"start\"}\n                loading={loading}\n                sx={{ minWidth: 0, ...sx }}\n                data-testid={RefineButtonTestIds.ImportButton}\n                {...restProps}\n            >\n                {hideText ? (\n                    <ImportExportOutlined fontSize=\"small\" {...svgIconProps} />\n                ) : (\n                    children ?? translate(\"buttons.import\", \"Import\")\n                )}\n            </LoadingButton>\n        </label>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Box, CircularProgress, Typography } from \"@mui/material\";\n\ntype CircularDeterminateProps = {\n    undoableTimeout: number;\n    message: string;\n};\n\nexport const CircularDeterminate: React.FC<CircularDeterminateProps> = ({\n    undoableTimeout,\n    message,\n}) => {\n    const [progress, setProgress] = useState(100);\n\n    const [timeCount, setTimeCount] = useState(undoableTimeout);\n\n    useEffect(() => {\n        const increaseProgress = 100 / undoableTimeout;\n        const timer = setInterval(() => {\n            setTimeCount((prevProgress) => prevProgress - 1);\n            setProgress((prevProgress) => prevProgress - increaseProgress);\n        }, 1000);\n\n        if (timeCount === 0) {\n            clearInterval(timer);\n        }\n\n        return () => {\n            clearInterval(timer);\n        };\n    }, [timeCount]);\n\n    return (\n        <>\n            <Box sx={{ position: \"relative\", display: \"inline-flex\" }}>\n                <CircularProgress\n                    color=\"inherit\"\n                    variant=\"determinate\"\n                    value={progress}\n                />\n                <Box\n                    sx={{\n                        top: 0,\n                        left: 0,\n                        bottom: 0,\n                        right: 0,\n                        position: \"absolute\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                    }}\n                >\n                    <Typography component=\"div\">{timeCount}</Typography>\n                </Box>\n            </Box>\n            <Box\n                sx={{\n                    marginLeft: \"10px\",\n                    maxWidth: { xs: \"150px\", md: \"100%\" },\n                }}\n            >\n                <Typography variant=\"subtitle2\">{message}</Typography>\n            </Box>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\n\nimport { TextFieldProps } from \"../types\";\n\n/**\n * This field lets you show basic text. It uses Materail UI {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>`} component.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/text} for more details.\n */\nconst TextField: React.FC<TextFieldProps> = ({ value, ...rest }) => {\n    return (\n        <Typography variant=\"body2\" {...rest}>\n            {value}\n        </Typography>\n    );\n};\n\nexport { TextField as TextFieldComponent };\n","import React from \"react\";\nimport { Chip } from \"@mui/material\";\n\nimport { TagFieldProps } from \"../types\";\n\n/**\n * This field lets you display a value in a tag. It uses Material UI {@link https://mui.com/material-ui/react-chip/#main-content `<Chip>`} component.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/tag} for more details.\n */\nexport const TagField: React.FC<TagFieldProps> = ({ value, ...rest }) => {\n    return <Chip label={value?.toString()} {...rest} />;\n};\n","import React from \"react\";\nimport { Typography, Link } from \"@mui/material\";\n\nimport { EmailFieldProps } from \"../types\";\n\n/**\n * This field is used to display email values. It uses the {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>` }\n * and {@link https://mui.com/material-ui/react-link/#main-content `<Link>`} components from Material UI.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/email} for more details.\n */\nexport const EmailField: React.FC<EmailFieldProps> = ({ value, ...rest }) => {\n    return (\n        <Typography variant=\"body2\">\n            <Link href={`mailto:${value}`} {...rest}>\n                {value}\n            </Link>\n        </Typography>\n    );\n};\n","import React from \"react\";\n\nimport { Tooltip } from \"@mui/material\";\nimport { CheckOutlined, CloseOutlined } from \"@mui/icons-material\";\n\nimport { BooleanFieldProps } from \"../types\";\n\n/**\n * This field is used to display boolean values. It uses the {@link https://mui.com/material-ui/react-tooltip/#main-content `<Tooltip>`} values from Materila UI.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/boolean} for more details.\n */\nexport const BooleanField: React.FC<BooleanFieldProps> = ({\n    value,\n    valueLabelTrue = \"true\",\n    valueLabelFalse = \"false\",\n    trueIcon,\n    falseIcon,\n    svgIconProps,\n    ...rest\n}) => {\n    return (\n        <Tooltip title={value ? valueLabelTrue : valueLabelFalse} {...rest}>\n            {value ? (\n                <span>{trueIcon ?? <CheckOutlined {...svgIconProps} />}</span>\n            ) : (\n                <span>{falseIcon ?? <CloseOutlined {...svgIconProps} />}</span>\n            )}\n        </Tooltip>\n    );\n};\n","import React from \"react\";\n\nimport dayjs from \"dayjs\";\nimport LocalizedFormat from \"dayjs/plugin/localizedFormat\";\nimport { Typography } from \"@mui/material\";\n\nimport { DateFieldProps } from \"../types\";\n\ndayjs.extend(LocalizedFormat);\n\nconst defaultLocale = dayjs.locale();\n\n/**\n * This field is used to display dates. It uses {@link https://day.js.org/docs/en/display/format `Day.js`} to display date format and\n * Material UI {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>`} component\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/date} for more details.\n */\nexport const DateField: React.FC<DateFieldProps> = ({\n    value,\n    locales,\n    format: dateFormat = \"L\",\n    ...rest\n}) => {\n    return (\n        <Typography variant=\"body2\" {...rest}>\n            {dayjs(value)\n                .locale(locales || defaultLocale)\n                .format(dateFormat)}\n        </Typography>\n    );\n};\n","import React from \"react\";\n\nimport { UrlField } from \"@components\";\n\nimport { FileFieldProps } from \"../types\";\n\n/**\n * This field is used to display files and  uses Material UI {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>`}  and {@link https://mui.com/material-ui/react-link/#main-content `<Link>`} components.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/file} for more details.\n */\nexport const FileField: React.FC<FileFieldProps> = ({\n    title,\n    src,\n    ...rest\n}) => {\n    return (\n        <UrlField value={src} title={title} {...rest}>\n            {title ?? src}\n        </UrlField>\n    );\n};\n","import React from \"react\";\nimport { Typography, Link } from \"@mui/material\";\n\nimport { UrlFieldProps } from \"../types\";\n\n/**\n * This field lets you embed a link.It uses the {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>` }\n * and {@link https://mui.com/material-ui/react-link/#main-content `<Link>`} components from Material UI.\n * You can pass a URL in its `value` property and you can show a text in its place by passing any `children`.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/url} for more details.\n */\nexport const UrlField: React.FC<UrlFieldProps> = ({\n    children,\n    value,\n    ...rest\n}) => {\n    return (\n        <Typography variant=\"body2\">\n            <Link href={value} {...rest}>\n                {children ?? value}\n            </Link>\n        </Typography>\n    );\n};\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\n\nimport { NumberFieldProps } from \"../types\";\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(\n        typeof Intl == \"object\" &&\n        Intl &&\n        typeof Intl.NumberFormat == \"function\"\n    );\n}\n\n/**\n * This field is used to display a number formatted according to the browser locale, right aligned. and uses {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl `Intl`} to display date format\n * and Material UI {@link https://mui.com/material-ui/react-typography/#main-content `<Typography>`} component.\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/number} for more details.\n */\nexport const NumberField: React.FC<NumberFieldProps> = ({\n    value,\n    locale,\n    options,\n    ...rest\n}) => {\n    const number = parseFloat(value.toString());\n\n    return (\n        <Typography variant=\"body2\" {...rest}>\n            {toLocaleStringSupportsOptions()\n                ? number.toLocaleString(locale, options)\n                : number}\n        </Typography>\n    );\n};\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\n\nimport { MarkdownFieldProps } from \"../types\";\n\n/**\n * This field lets you display markdown content. It supports {@link https://github.github.com/gfm/ GitHub Flavored Markdown}.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/components/fields/markdown} for more details.\n */\nexport const MarkdownField: React.FC<MarkdownFieldProps> = ({ value = \"\" }) => {\n    return <ReactMarkdown plugins={[gfm]}>{value}</ReactMarkdown>;\n};\n","import React from \"react\";\nimport {\n    useBreadcrumb,\n    useRefineContext,\n    useRouterContext,\n} from \"@pankod/refine-core\";\nimport { RefineBreadcrumbProps } from \"@pankod/refine-ui-types\";\n\nimport {\n    Breadcrumbs,\n    BreadcrumbsProps as MuiBreadcrumbProps,\n    Typography,\n    Link,\n    LinkProps,\n    Grid,\n} from \"@mui/material\";\n\nimport { HomeOutlined } from \"@mui/icons-material\";\n\nexport type BreadcrumbProps = RefineBreadcrumbProps<MuiBreadcrumbProps>;\n\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\n    breadcrumbProps,\n    showHome = true,\n    hideIcons = false,\n}) => {\n    const { breadcrumbs } = useBreadcrumb();\n    const { Link: RouterLink } = useRouterContext();\n    const { hasDashboard } = useRefineContext();\n\n    if (breadcrumbs.length === 1) {\n        return null;\n    }\n\n    const LinkRouter = (props: LinkProps & { to?: string }) => (\n        <Link {...props} component={RouterLink} />\n    );\n\n    return (\n        <Breadcrumbs\n            aria-label=\"breadcrumb\"\n            sx={{\n                paddingY: 2,\n                paddingX: 2,\n                ...(breadcrumbProps?.sx ?? {}),\n            }}\n            {...breadcrumbProps}\n        >\n            {showHome && hasDashboard && (\n                <LinkRouter\n                    underline=\"hover\"\n                    sx={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                    color=\"inherit\"\n                    to=\"/\"\n                >\n                    <HomeOutlined\n                        sx={{\n                            fontSize: \"18px\",\n                        }}\n                    />\n                </LinkRouter>\n            )}\n            {breadcrumbs.map(({ label, icon, href }) => {\n                return (\n                    <Grid\n                        key={label}\n                        sx={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            \"& .MuiSvgIcon-root\": {\n                                fontSize: \"16px\",\n                            },\n                        }}\n                    >\n                        {!hideIcons && icon}\n                        {href ? (\n                            <LinkRouter\n                                underline=\"hover\"\n                                sx={{\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    fontSize: \"14px\",\n                                }}\n                                color=\"inherit\"\n                                to={href}\n                                variant=\"subtitle1\"\n                                marginLeft={0.5}\n                            >\n                                {label}\n                            </LinkRouter>\n                        ) : (\n                            <Typography fontSize=\"14px\">{label}</Typography>\n                        )}\n                    </Grid>\n                );\n            })}\n        </Breadcrumbs>\n    );\n};\n","import {\n    useSelect as useSelectCore,\n    HttpError,\n    UseSelectProps,\n    UseSelectReturnType,\n} from \"@pankod/refine-core\";\nimport { AutocompleteProps } from \"@mui/material/Autocomplete\";\nimport isEqual from \"lodash-es/isEqual\";\nimport unionWith from \"lodash-es/unionWith\";\n\nexport type UseAutocompleteProps<TData, TError> = Pick<\n    UseSelectProps<TData, TError>,\n    \"resource\"\n> &\n    Omit<UseSelectProps<TData, TError>, \"optionLabel\" | \"optionValue\">;\n\ntype AutocompletePropsType<TData> = Required<\n    Pick<\n        AutocompleteProps<TData, boolean, boolean, boolean>,\n        \"options\" | \"loading\" | \"onInputChange\" | \"filterOptions\"\n    >\n>;\n\nexport type UseAutocompleteReturnType<TData> = Omit<\n    UseSelectReturnType<TData>,\n    \"options\"\n> & {\n    autocompleteProps: AutocompletePropsType<TData>;\n};\n\nexport const useAutocomplete = <\n    TData = any,\n    TError extends HttpError = HttpError,\n>(\n    props: UseAutocompleteProps<TData, TError>,\n): UseAutocompleteReturnType<TData> => {\n    const { queryResult, defaultValueQueryResult, onSearch } =\n        useSelectCore(props);\n\n    return {\n        autocompleteProps: {\n            options: unionWith(\n                queryResult.data?.data || [],\n                defaultValueQueryResult.data?.data || [],\n                isEqual,\n            ),\n            loading:\n                queryResult.isFetching || defaultValueQueryResult.isFetching,\n            onInputChange: (event, value) => {\n                if (event?.type === \"change\") {\n                    onSearch(value);\n                }\n            },\n            filterOptions: (x) => x,\n        },\n        onSearch,\n        queryResult,\n        defaultValueQueryResult,\n    };\n};\n","import { useState, useMemo, useEffect } from \"react\";\nimport {\n    BaseRecord,\n    CrudFilters,\n    HttpError,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType as useTableReturnTypeCore,\n    useTableNoPaginationReturnType as useTableNoPaginationReturnTypeCore,\n    useLiveMode,\n} from \"@pankod/refine-core\";\nimport {\n    DataGridProps,\n    GridFilterModel,\n    GridSortModel,\n} from \"@mui/x-data-grid\";\nimport { useTheme, darken } from \"@mui/material\";\nimport differenceWith from \"lodash-es/differenceWith\";\nimport isEqual from \"lodash-es/isEqual\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    transformCrudSortingToSortModel,\n    transformSortModelToCrudSorting,\n    transformFilterModelToCrudFilters,\n    transformCrudFiltersToFilterModel,\n} from \"@definitions\";\n\ntype DataGridPropsType = Pick<DataGridProps, \"filterModel\"> &\n    Required<\n        Pick<\n            DataGridProps,\n            | \"rows\"\n            | \"loading\"\n            | \"rowCount\"\n            | \"sortingMode\"\n            | \"sortModel\"\n            | \"onSortModelChange\"\n            | \"filterMode\"\n            | \"onFilterModelChange\"\n            | \"sx\"\n            | \"disableSelectionOnClick\"\n            | \"onStateChange\"\n        >\n    > &\n    Pick<\n        DataGridProps,\n        | \"hideFooterPagination\"\n        | \"paginationMode\"\n        | \"page\"\n        | \"onPageChange\"\n        | \"pageSize\"\n        | \"onPageSizeChange\"\n    >;\n\nexport type UseDataGridProps<\n    TData,\n    TError,\n    TSearchVariables = unknown,\n> = useTablePropsCore<TData, TError> & {\n    onSearch?: (data: TSearchVariables) => CrudFilters | Promise<CrudFilters>;\n} & {\n    /**\n     * @deprecated columns is deprecated and will be removed in the next major version. # https://github.com/refinedev/refine/pull/2072\n     */\n    columns?: DataGridProps[\"columns\"];\n};\n\nexport type UseDataGridReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n> = useTableReturnTypeCore<TData, TError> & {\n    dataGridProps: DataGridPropsType;\n    search: (value: TSearchVariables) => Promise<void>;\n};\n\nexport type UseDataGridNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TSearchVariables = unknown,\n> = useTableNoPaginationReturnTypeCore<TData> & {\n    dataGridProps: DataGridPropsType;\n    search: (value: TSearchVariables) => Promise<void>;\n};\n\nexport type UseDataGridWithColumnsReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n> = useTableReturnTypeCore<TData, TError> & {\n    dataGridProps: DataGridPropsType & Pick<DataGridProps, \"columns\">;\n    search: (value: TSearchVariables) => Promise<void>;\n};\n\nexport type UseDataGridWithColumnsNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n> = useTableNoPaginationReturnTypeCore<TData, TError> & {\n    dataGridProps: DataGridPropsType & Pick<DataGridProps, \"columns\">;\n    search: (value: TSearchVariables) => Promise<void>;\n};\n\nexport function useDataGrid<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    props?: UseDataGridProps<TData, TError, TSearchVariables> & {\n        hasPagination?: true;\n        columns?: undefined;\n    },\n): UseDataGridReturnType<TData, TError, TSearchVariables>;\nexport function useDataGrid<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    props?: UseDataGridProps<TData, TError, TSearchVariables> & {\n        hasPagination: false;\n        columns?: undefined;\n    },\n): UseDataGridNoPaginationReturnType<TData, TSearchVariables>;\nexport function useDataGrid<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    props?: UseDataGridProps<TData, TError, TSearchVariables> & {\n        hasPagination?: true;\n        columns: DataGridProps<TData>[\"columns\"];\n    },\n): UseDataGridWithColumnsReturnType<TData, TError, TSearchVariables>;\nexport function useDataGrid<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>(\n    props?: UseDataGridProps<TData, TError, TSearchVariables> & {\n        hasPagination: false;\n        columns: DataGridProps<TData>[\"columns\"];\n    },\n): UseDataGridWithColumnsNoPaginationReturnType<\n    TData,\n    TError,\n    TSearchVariables\n>;\nexport function useDataGrid<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TSearchVariables = unknown,\n>({\n    columns,\n    onSearch: onSearchProp,\n    initialCurrent,\n    initialPageSize = 25,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter,\n    defaultSetFilterBehavior = \"replace\",\n    initialFilter,\n    permanentFilter,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: UseDataGridProps<TData, TError, TSearchVariables> = {}):\n    | UseDataGridReturnType<TData, TError, TSearchVariables>\n    | UseDataGridNoPaginationReturnType<TData, TSearchVariables>\n    | UseDataGridWithColumnsReturnType<TData, TError, TSearchVariables>\n    | UseDataGridWithColumnsNoPaginationReturnType<\n          TData,\n          TError,\n          TSearchVariables\n      > {\n    const [columnsTypes, setColumnsType] = useState<Record<string, string>>();\n\n    const {\n        tableQueryResult,\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        filters,\n        setFilters,\n        sorter,\n        setSorter,\n        pageCount,\n        createLinkForSyncWithLocation,\n    } = useTableCore<TData, TError>({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        // @ts-expect-error currently boolean casting is not supported in overloaded types.\n        hasPagination: hasPagination,\n        initialSorter,\n        initialFilter,\n        syncWithLocation: syncWithLocationProp,\n        defaultSetFilterBehavior,\n        resource: resourceFromProp,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const [muiCrudFilters, setMuiCrudFilters] = useState<CrudFilters>(filters);\n\n    useEffect(() => {\n        warnOnce(\n            !!columns,\n            \"[useDataGrid]: `columns` is deprecated and will be removed in the next major version.\\nFor more information, see https://github.com/refinedev/refine/pull/2072\",\n        );\n    }, []);\n\n    const theme = useTheme();\n\n    const { data, isFetched, isLoading } = tableQueryResult;\n\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    const handlePageChange = (page: number) => {\n        if (hasPagination) {\n            setCurrent(page + 1);\n        }\n    };\n    const handlePageSizeChange = (pageSize: number) => {\n        if (hasPagination) {\n            setPageSize(pageSize);\n        }\n    };\n\n    const handleSortModelChange = (sortModel: GridSortModel) => {\n        const crudSorting = transformSortModelToCrudSorting(sortModel);\n        setSorter(crudSorting);\n    };\n\n    const handleFilterModelChange = (filterModel: GridFilterModel) => {\n        const crudFilters = transformFilterModelToCrudFilters(filterModel);\n        setMuiCrudFilters(crudFilters);\n        setFilters(crudFilters.filter((f) => f.value !== \"\"));\n        if (hasPagination) {\n            setCurrent(1);\n        }\n    };\n\n    const search = async (value: TSearchVariables) => {\n        if (onSearchProp) {\n            const searchFilters = await onSearchProp(value);\n            setMuiCrudFilters(searchFilters);\n            setFilters(searchFilters.filter((f) => f.value !== \"\"));\n            if (hasPagination) {\n                setCurrent(1);\n            }\n        }\n    };\n\n    const paginationValues = useMemo(() => {\n        if (hasPagination) {\n            return {\n                current,\n                setCurrent,\n                pageSize,\n                setPageSize,\n                pageCount,\n            };\n        }\n\n        return {\n            current: undefined,\n            setCurrent: undefined,\n            pageSize: undefined,\n            setPageSize: undefined,\n            pageCount: undefined,\n        };\n    }, [hasPagination, current, pageSize, pageCount]);\n\n    const dataGridPaginationValues = () => {\n        if (hasPagination) {\n            return {\n                paginationMode: \"server\" as const,\n                page: (current ?? 1) - 1,\n                onPageChange: handlePageChange,\n                pageSize: pageSize,\n                onPageSizeChange: handlePageSizeChange,\n            };\n        }\n\n        return {\n            hideFooterPagination: true,\n        };\n    };\n\n    const isReturnColumn = () => {\n        if (columns) {\n            return {\n                columns,\n            };\n        }\n\n        return {};\n    };\n\n    return {\n        tableQueryResult,\n        dataGridProps: {\n            ...isReturnColumn(),\n            disableSelectionOnClick: true,\n            rows: data?.data || [],\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            rowCount: data?.total || 0,\n            ...dataGridPaginationValues(),\n            sortingMode: \"server\",\n            sortModel: transformCrudSortingToSortModel(\n                differenceWith(sorter, permanentSorter ?? [], isEqual),\n            ),\n            onSortModelChange: handleSortModelChange,\n            filterMode: \"server\",\n            filterModel: transformCrudFiltersToFilterModel(\n                differenceWith(muiCrudFilters, permanentFilter ?? [], isEqual),\n                columnsTypes,\n            ),\n            onFilterModelChange: handleFilterModelChange,\n            onStateChange: (state) => {\n                const newColumnsTypes = Object.fromEntries(\n                    Object.entries(state.columns.lookup).map(([key, value]) => {\n                        return [key, (value as any).type];\n                    }),\n                );\n                const isStateChanged = !isEqual(newColumnsTypes, columnsTypes);\n\n                if (isStateChanged) {\n                    setColumnsType(newColumnsTypes);\n                }\n            },\n            sx: {\n                border: \"none\",\n                \"& .MuiDataGrid-columnHeaders\": {\n                    background: darken(theme.palette.background.paper, 0.05),\n                    borderBottom: `1px solid ${darken(\n                        theme.palette.background.paper,\n                        0.1,\n                    )}`,\n                },\n                \"& .MuiDataGrid-cell\": {\n                    borderBottom: `1px solid ${darken(\n                        theme.palette.background.paper,\n                        0.05,\n                    )}`,\n                },\n            },\n        },\n        ...paginationValues,\n        sorter,\n        setSorter,\n        filters,\n        setFilters,\n        search,\n        createLinkForSyncWithLocation,\n    };\n}\n","import {\n    GridSortModel,\n    GridFilterModel,\n    GridLinkOperator,\n    GridFilterItem,\n} from \"@mui/x-data-grid\";\nimport {\n    CrudFilters,\n    CrudOperators,\n    CrudSorting,\n    LogicalFilter,\n} from \"@pankod/refine-core\";\n\nexport const transformSortModelToCrudSorting = (\n    sortModel: GridSortModel,\n): CrudSorting => {\n    const sorter = sortModel.map(({ field, sort }) => ({\n        field,\n        order: sort || \"asc\",\n    }));\n    return sorter;\n};\n\nexport const transformCrudSortingToSortModel = (\n    crudSorting: CrudSorting,\n): GridSortModel => {\n    const sortModel = crudSorting.map(({ field, order }) => ({\n        field,\n        sort: order,\n    }));\n    return sortModel;\n};\n\nexport const transformMuiOperatorToCrudOperator = (\n    operatorValue?: string,\n): Exclude<CrudOperators, \"or\"> => {\n    if (!operatorValue) {\n        return \"eq\";\n    }\n\n    switch (operatorValue) {\n        case \"equals\":\n        case \"is\":\n        case \"=\":\n            return \"eq\";\n        case \"!=\":\n        case \"not\":\n            return \"ne\";\n        case \">\":\n        case \"after\":\n            return \"gt\";\n        case \">=\":\n        case \"onOrAfter\":\n            return \"gte\";\n        case \"<\":\n        case \"before\":\n            return \"lt\";\n        case \"<=\":\n        case \"onOrBefore\":\n            return \"lte\";\n        case \"isEmpty\":\n            return \"null\";\n        case \"isNotEmpty\":\n            return \"nnull\";\n        default:\n            return operatorValue as Exclude<CrudOperators, \"or\">;\n    }\n};\n\nexport const transformFilterModelToCrudFilters = ({\n    items,\n    linkOperator,\n}: GridFilterModel): CrudFilters => {\n    const filters = items.map(({ columnField, value, operatorValue }) => ({\n        field: columnField,\n        value: value ?? \"\",\n        operator: transformMuiOperatorToCrudOperator(operatorValue),\n    }));\n\n    if (linkOperator === GridLinkOperator.Or) {\n        return [{ operator: \"or\", value: filters }];\n    }\n    return filters;\n};\n\nexport const transformCrudOperatorToMuiOperator = (\n    operator: CrudOperators,\n    columnType?: string,\n): string => {\n    switch (columnType) {\n        case \"number\":\n            switch (operator) {\n                case \"eq\":\n                    return \"=\";\n                case \"ne\":\n                    return \"!=\";\n                case \"gt\":\n                    return \">\";\n                case \"gte\":\n                    return \">=\";\n                case \"lt\":\n                    return \"<\";\n                case \"lte\":\n                    return \"<=\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        case \"singleSelect\":\n        case \"boolean\":\n            switch (operator) {\n                case \"eq\":\n                    return \"is\";\n                default:\n                    return operator;\n            }\n        case undefined:\n        case \"string\":\n            switch (operator) {\n                case \"eq\":\n                    return \"equals\";\n                case \"contains\":\n                    return \"contains\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        case \"date\":\n        case \"dateTime\":\n            switch (operator) {\n                case \"eq\":\n                    return \"is\";\n                case \"ne\":\n                    return \"not\";\n                case \"gt\":\n                    return \"after\";\n                case \"gte\":\n                    return \"onOrAfter\";\n                case \"lt\":\n                    return \"before\";\n                case \"lte\":\n                    return \"onOrBefore\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        default:\n            return operator;\n    }\n};\n\nexport const transformCrudFiltersToFilterModel = (\n    crudFilters: CrudFilters,\n    columnsType?: Record<string, string>,\n): GridFilterModel | undefined => {\n    const gridFilterItems: GridFilterItem[] = [];\n\n    const isExistOrFilter = crudFilters.some(\n        (filter) => filter.operator === \"or\",\n    );\n\n    if (columnsType) {\n        if (isExistOrFilter) {\n            const orLogicalFilters = crudFilters.find(\n                (filter) => filter.operator === \"or\",\n            )?.value as LogicalFilter[];\n\n            orLogicalFilters.map(({ field, value, operator }) => {\n                const columnType = columnsType[field];\n\n                gridFilterItems.push({\n                    columnField: field,\n                    operatorValue: transformCrudOperatorToMuiOperator(\n                        operator,\n                        columnType,\n                    ),\n                    value: value === \"\" ? undefined : value,\n                    id: field + operator,\n                });\n            });\n        } else {\n            (crudFilters as LogicalFilter[]).map(\n                ({ field, value, operator }) => {\n                    const columnType = columnsType[field];\n\n                    gridFilterItems.push({\n                        columnField: field,\n                        operatorValue: transformCrudOperatorToMuiOperator(\n                            operator,\n                            columnType,\n                        ),\n                        value: value === \"\" ? undefined : value,\n                        id: field + operator,\n                    });\n                },\n            );\n        }\n    }\n\n    return {\n        items: gridFilterItems,\n        // If there is \"or\" filter, default link operator is \"or\"\n        linkOperator: isExistOrFilter\n            ? GridLinkOperator.Or\n            : GridLinkOperator.And,\n    };\n};\n","import React from \"react\";\n\nimport { useMenu as useMenuCore, ITreeMenu } from \"@pankod/refine-core\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: Record<string, boolean>;\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/ui-frameworks/mui/hooks/useMenu} for more details.\n * @deprecated use {@link https://refine.dev/docs/core/hooks/ui/useMenu} instead.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const { selectedKey, menuItems } = useMenuCore();\n\n    const defaultOpenKeys = React.useMemo(() => {\n        const keys = selectedKey.split(\"/\").filter((x) => x !== \"\");\n\n        let _defaultOpenKeys: Record<string, boolean> = {};\n        let key = \"\";\n\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (keys[index] !== \"undefined\") {\n                key = key + `/${keys[index]}`;\n            }\n\n            _defaultOpenKeys = {\n                ..._defaultOpenKeys,\n                [key]: !_defaultOpenKeys[key],\n            };\n        }\n\n        return _defaultOpenKeys;\n    }, []);\n\n    return {\n        selectedKey,\n        defaultOpenKeys,\n        menuItems,\n    };\n};\n","import { createTheme, ThemeOptions } from \"@mui/material\";\n\nimport { lightPalette } from \"./palette/lightPalette\";\nimport { darkPalette } from \"./palette/darkPalette\";\nimport { typography } from \"./typography\";\n\nconst commonThemeProperties: ThemeOptions = {\n    shape: {\n        borderRadius: 6,\n    },\n    typography: {\n        ...typography,\n    },\n};\n\nconst LightTheme = createTheme({\n    ...commonThemeProperties,\n    palette: lightPalette,\n    components: {\n        MuiAppBar: {\n            styleOverrides: {\n                colorDefault: {\n                    backgroundColor: \"#fff\",\n                },\n            },\n        },\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage:\n                        \"linear-gradient(rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.01))\",\n                },\n            },\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\",\n                },\n            },\n        },\n    },\n});\n\nconst DarkTheme = createTheme({\n    ...commonThemeProperties,\n    palette: darkPalette,\n    components: {\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage:\n                        \"linear-gradient(rgba(255, 255, 255, 0.025), rgba(255, 255, 255, 0.025))\",\n                },\n            },\n        },\n        MuiAppBar: {\n            defaultProps: {\n                color: \"transparent\",\n            },\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\",\n                },\n            },\n        },\n    },\n});\n\nexport { LightTheme, DarkTheme };\n","import { PaletteOptions } from \"@mui/material\";\n\nexport const lightPalette: PaletteOptions = {\n    mode: \"light\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\",\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\",\n    },\n    background: {\n        default: \"#f0f0f0\",\n        paper: \"#ffffff\",\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\",\n    },\n    error: {\n        main: \"#fa541c\",\n        contrastText: \"#fff\",\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\",\n    },\n    info: {\n        main: \"#0b82f0\",\n        contrastText: \"#fff\",\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#626262\",\n        secondary: \"#9f9f9f\",\n        disabled: \"#c1c1c1\",\n    },\n};\n","import { PaletteOptions } from \"@mui/material\";\n\nexport const darkPalette: PaletteOptions = {\n    mode: \"dark\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\",\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\",\n    },\n    background: {\n        default: \"#212121\",\n        paper: \"#242424\",\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\",\n    },\n    error: {\n        main: \"#ee2a1e\",\n        contrastText: \"#fff\",\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\",\n    },\n    info: {\n        main: \"#1890ff\",\n        contrastText: \"#fff\",\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#fff\",\n        secondary: \"rgba(255,255,255,0.7)\",\n        disabled: \"#d1d1d1\",\n    },\n};\n","import { TypographyVariantsOptions } from \"@mui/material\";\n\nexport const typography: TypographyVariantsOptions = {\n    fontFamily: [\n        \"Montserrat\",\n        \"-apple-system\",\n        \"BlinkMacSystemFont\",\n        '\"Segoe UI\"',\n        \"Roboto\",\n        '\"Helvetica Neue\"',\n        \"Arial\",\n        \"sans-serif\",\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n};\n","import React from \"react\";\nimport { NotificationProvider } from \"@pankod/refine-core\";\n\nimport { useSnackbar } from \"notistack\";\n\nimport { CircularDeterminate } from \"@components\";\nimport { Box, IconButton, Typography } from \"@mui/material\";\nimport { UndoOutlined } from \"@mui/icons-material\";\n\nexport const notificationProvider = (): NotificationProvider => {\n    const { closeSnackbar, enqueueSnackbar } = useSnackbar();\n\n    const notificationProvider: NotificationProvider = {\n        open: ({\n            message,\n            type,\n            undoableTimeout,\n            key,\n            cancelMutation,\n            description,\n        }) => {\n            if (type === \"progress\") {\n                const action = (key: any) => (\n                    <IconButton\n                        onClick={() => {\n                            cancelMutation?.();\n                            closeSnackbar(key);\n                        }}\n                        color=\"inherit\"\n                    >\n                        <UndoOutlined />\n                    </IconButton>\n                );\n                enqueueSnackbar(\n                    <>\n                        <CircularDeterminate\n                            undoableTimeout={undoableTimeout ?? 0}\n                            message={message}\n                        />\n                    </>,\n                    {\n                        action,\n                        anchorOrigin: {\n                            vertical: \"top\",\n                            horizontal: \"right\",\n                        },\n                        preventDuplicate: true,\n                        key,\n                        autoHideDuration: (undoableTimeout ?? 0) * 1000,\n                        disableWindowBlurListener: true,\n                    },\n                );\n            } else {\n                enqueueSnackbar(\n                    <Box>\n                        <Typography variant=\"subtitle2\" component=\"h6\">\n                            {description}\n                        </Typography>\n                        <Typography variant=\"caption\" component=\"p\">\n                            {message}\n                        </Typography>\n                    </Box>,\n                    {\n                        variant: type,\n                        anchorOrigin: {\n                            vertical: \"top\",\n                            horizontal: \"right\",\n                        },\n                        disableWindowBlurListener: true,\n                    },\n                );\n            }\n        },\n        close: (key) => {\n            closeSnackbar(key);\n        },\n    };\n\n    return notificationProvider;\n};\n","import { styled } from \"@mui/material\";\nimport { SnackbarProvider } from \"notistack\";\n\nexport const RefineSnackbarProvider = styled(SnackbarProvider)`\n    &.SnackbarItem-contentRoot {\n        background-color: ${(props) => props.theme.palette.background.default};\n        color: ${(props) => props.theme.palette.primary.main};\n    }\n    &.SnackbarItem-variantSuccess {\n        background-color: ${(props) => props.theme.palette.success.main};\n        color: ${(props) => props.theme.palette.success.contrastText};\n    }\n    &.SnackbarItem-variantError {\n        background-color: ${(props) => props.theme.palette.error.main};\n        color: ${(props) => props.theme.palette.error.contrastText};\n    }\n    &.SnackbarItem-variantInfo {\n        background-color: ${(props) => props.theme.palette.info.main};\n        color: ${(props) => props.theme.palette.info.contrastText};\n    }\n    &.SnackbarItem-variantWarning {\n        background-color: ${(props) => props.theme.palette.warning.main};\n        color: ${(props) => props.theme.palette.warning.contrastText};\n    }\n`;\n"],"mappings":"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","names":["src_exports","__export","AuthPage","Authenticated","CanAccess","ErrorComponent","LayoutWrapper","LoginPage","ReadyPage","Refine","RouteChangeHandler","UndoableQueue","createTreeView","file2Base64","getDefaultFilter","getDefaultSortOrder","getNextPageParam","getPreviousPageParam","handleUseParams","importCSVMapper","parseTableParams","parseTableParamsFromQuery","routeGenerator","setInitialFilters","setInitialSorters","stringifyTableParams","unionFilters","unionSorters","useApiUrl","useAuthenticated","useBreadcrumb","useCan","useCanWithoutCache","useCancelNotification","useCheckError","useCreate","useCreateMany","useCustom","useCustomMutation","useDataProvider","useDelete","useDeleteMany","useExport","useForgotPassword","useForm","useGetIdentity","useGetLocale","useHandleNotification","useImport","useInfiniteList","useInvalidate","useIsExistAuthentication","useList","useLiveMode","useLog","useLogList","useLogin","useLogout","useMany","useMenu","useModal","useMutationMode","useNavigation","useNotification","useOne","usePermissions","usePublish","useRedirectionAfterSubmission","useRefineContext","useRegister","useResource","useResourceSubscription","useResourceWithRoute","useRouterContext","useSelect","useSetLocale","useShow","useSubscription","useSyncWithLocation","useTable","useTitle","useTranslate","useUpdate","useUpdateMany","useUpdatePassword","useWarnAboutChange","userFriendlyResourceName","module","__toCommonJS","__reExport","import_react","E","import_react_query","AuthContext","sr","React","AuthContextProvider","children","isProvided","authOperations","replace","queryClient","zr","invalidateAuthStore","loginFunc","params","_a","result","error","registerFunc","logoutFunc","redirectPath","checkAuthFunc","options","getPermissions","qr","jr","queryOptions","getUserIdentity","Zr","Jr","mutationOptions","push","logoutFromContext","Xr","open","eo","data","variables","import_qs","loginFromContext","to","useLocation","search","close","oo","qs","ro","redirectPathFromAuth","registerFromContext","ao","no","forgotPasswordFromContext","so","io","updatePasswordFromContext","uo","queryStrings","co","po","checkAuth","lo","mo","checkErrorFromContext","fo","logout","yo","To","userFriendlySecond","miliseconds","import_zip","import_fromPairs","mapData","item","headers","body","entry","Ro","fromPairs","Co","zip","index","array","import_pluralize","import_unionWith","import_differenceWith","import_warn_once","url","current","pageSize","sorter","filters","At","pagination","rest","compareFilters","left","right","compareSorters","permanentFilter","newFilters","prevFilters","f","xo","warnOnce","ir","unionWith","crudFilter","permanentSorter","newSorters","crudSorter","defaultFilter","ur","differenceWith","defaultSorter","columnName","sortItem","operatorType","filter","operator","field","file","resolve","reject","reader","resultHandler","resource","type","humanizeResource","humanizeString","pr","pluralize","queryKeys","dataProviderName","metaData","providerName","keys","config","ids","id","meta","hasPermission","permissions","action","i","getParentOf","resourceItem","resourcesFromProps","_b","_c","_d","_e","route","resourceRoute","parent","resources","tree","resourcesRouteObject","resourcesNameObject","child","name","text","DefaultLayout","Mo","defaultRefineOptions","RefineContext","mr","RefineContextProvider","hasDashboard","mutationMode","warnWhenUnsavedChanges","syncWithLocation","undoableTimeout","DashboardPage","Title","Layout","Header","Sider","Footer","OffLayoutArea","catchAll","liveMode","onLiveEvent","handleRefineOptions","disableTelemetry","reactQueryClientConfig","reactQueryDevtoolConfig","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","optionsWithDefaults","disableTelemetryWithDefault","reactQueryWithDefaults","redirectPage","redirectFromProps","redirectOptions","sequentialPromises","promises","onEachResolve","onEachReject","results","promise","pickDataProvider","resourceName","handleMultiple","res","lastPage","cursor","totalPages","successNotification","errorNotification","liveParams","dataProvider","queryKey","getList","translate","checkError","handleNotification","isEnabled","Io","pageParam","signal","hasPagination","restConfig","notificationConfig","err","getOne","Uo","getMany","So","import_isEqual","UndoableQueueContext","Ye","initialState","undoableQueueReducer","state","notificationItem","Vt","isEqual","UndoableQueueContextProvider","notifications","notificationDispatch","notificationData","notification","Ht","mutationModeContext","undoableTimeoutContext","publish","log","invalidateStore","values","onCancel","mutationModePropOrContext","undoableTimeoutPropOrContext","doMutation","cancelMutation","previousQueries","previous","record","_data","_error","invalidates","context","resourceSingular","Cr","previousData","queryData","acc","fields","operation","query","wo","successNotificationFromProp","Rr","errorNotificationFromProp","Wt","xr","Ao","selectedDataProvider","val","response","resourcePlural","Bo","$t","mutationFn","Pr","Gt","ko","getApiUrl","method","custom","Ho","Wo","defaultDataProvider","DataContext","Dr","DataContextProvider","dataProviders","zt","Go","total","LiveContext","vr","LiveContextProvider","liveProvider","channel","types","enabled","liveModeFromProp","qo","liveDataContext","ft","liveModeFromContext","onLiveEventContextCallback","subscription","event","jo","liveContext","Yo","ResourceContext","hr","ResourceContextProvider","propResourceName","resourceNameOrRouteName","recordItemId","Jo","resourceWithRoute","useParams","qt","p","resourceWithName","Xo","NotificationContext","jt","NotificationContextProvider","ta","ra","fallbackNotification","TranslationContext","Er","TranslationContextProvider","i18nProvider","Yt","lang","Zt","key","defaultMessage","Jt","sa","UnsavedWarnContext","Tt","UnsavedWarnContextProvider","warnWhen","setWarnWhen","Lr","ua","pa","da","import_export_to_csv_fix_source_map","maxItemCount","exportOptions","onError","isLoading","setIsLoading","la","routeResourceName","filename","rawData","preparingData","ma","resourceFromProps","actionFromProps","idFromProps","onMutationSuccess","onMutationError","mutationModeProp","createMutationOptions","updateMutationOptions","resourceFromRoute","actionFromRoute","idFromParams","defaultId","setId","Ir","isCreate","isEdit","isClone","redirect","enableQuery","queryResult","isFetchingQuery","mutationResultCreate","mutateCreate","isLoadingCreate","mutationResultUpdate","mutateUpdate","isLoadingUpdate","handleSubmitWithRedirect","onSuccess","_","responseId","idFromFunction","show","edit","list","create","fa","useHistory","history","handleUrl","createUrl","editUrl","encodedId","cloneUrl","showUrl","listUrl","path","resourceFromProp","idFromRoute","showId","setShowId","er","import_papaparse","import_chunk","paparseOptions","batchSize","onFinish","onProgress","processedAmount","setProcessedAmount","et","totalAmount","setTotalAmount","createMany","mutationResult","handleCleanup","handleFinish","createdValues","handleChange","ya","valueFns","value","currentAmount","chunks","Ta","chunk","chunkedFns","chunkedValues","currentBatchLength","defaultVisible","visible","setVisible","gt","defaultProvider","RouterContext","Sr","RouterContextProvider","Prompt","Link","routes","Ca","AccessControlContext","wr","AccessControlContextProvider","can","xa","_resource","paramsRest","_icon","_list","_edit","_create","_show","_children","restResource","queryResponse","Pa","Da","import_uniqBy","import_debounce","import_get","props","setSearch","Le","setOptions","selectedOptions","setSelectedOptions","sort","optionLabel","optionValue","debounceValue","defaultValueQueryOptionsFromProps","fetchSize","defaultValue","onSearchFromProp","defaultValues","defaultValueQueryOnSuccess","Rt","get","defaultValueQueryOptions","defaultValueQueryResult","defaultQueryOnSuccess","onSearch","va","uniqBy","ba","debounce","defaultPermanentFilter","defaultPermanentSorter","initialCurrent","initialPageSize","initialSorter","defaultSetFilterBehavior","initialFilter","syncWithLocationProp","syncWithLocationContext","pathname","parsedCurrent","parsedPageSize","parsedSorter","parsedFilters","defaultCurrent","defaultPageSize","setSorter","ve","setFilters","setCurrent","setPageSize","createLinkForSyncWithLocation","currentQueryParams","Ar","stringifyParams","queryParams","Br","Nr","setFiltersAsMerge","setFiltersAsReplace","setFiltersWithSetter","setter","prev","setFiltersFn","setterOrFilters","behavior","setSortWithUnion","newSorter","paginationValues","AuditLogContext","kr","AuditLogContextProvider","update","logMutationOptions","renameMutationOptions","xt","auditLogContext","Vr","identityData","refetch","logPermissions","authorData","rename","author","Ea","Ma","Ia","La","Ua","breadcrumbs","addBreadcrumb","parentName","parentResource","actionLabel","Sa","location","selectedKey","We","selectedResource","el","_selectedKey","treeMenuItems","menuItems","crawlNestedKeys","currentKey","currentResources","isParent","currentElement","keysArray","defaultOpenKeys","filterMenuItemsByListViewAndHideOption","menus","menuItem","obj","errorMessage","setErrorMessage","be","actionTypes","username","setUsername","X","password","setPassword","login","e","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","email","setEmail","K","remember","setRemember","renderLink","link","renderProviders","provider","content","RegisterPage","loginLink","register","ForgotPasswordPage","ae","forgotPassword","UpdatePasswordPage","updatePassword","newPassword","setNewPassword","ne","confirmPassword","setConfirmPassword","Oe","se","import_react_query_devtools","REFINE_VERSION","useTelemetryData","authContext","Ie","routerContext","dataContext","notificationContext","accessControlContext","auth","auditLog","live","router","i18n","accessControl","encode","payload","stringifyedPayload","Telemetry","Ha","img","useMemoized","ref","Wa","Oa","useDeepMemo","fn","dependencies","memoizedDependencies","Ga","authProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","Pt","notificationProviderContextValues","q","_resources","RouterComponent","za","timeoutId","setTimeoutId","or","cancelNotification","newTimeoutId","LayoutFromProps","SiderFromProps","HeaderFromProps","TitleFromProps","FooterFromProps","OffLayoutAreaFromProps","LayoutToRender","tt","UnsavedPrompt","warnWhenListener","fallback","loading","isSuccess","isError","$e","toURL","ar","Ge","src_exports","__export","e","useForm","useModalForm","useStepsForm","module","__toCommonJS","import_react","import_react_hook_form","import_refine_core","refineCoreProps","warnWhenUnsavedChangesProp","rest","warnWhenUnsavedChangesRefine","setWarnWhen","h","warnWhenUnsavedChanges","useFormCoreResult","useFormCore","queryResult","onFinish","formLoading","useHookFormResult","A","useHookForm","watch","reset","getValues","handleSubmitReactHookForm","H","_a","fields","registeredFields","key","value","subscription","values","type","onValuesChange","changeValues","handleSubmit","onValid","onInvalid","stepsProps","defaultStep","isBackValidate","current","setCurrent","P","trigger","dirtyFields","go","step","targetStep","modalProps","translate","F","resourceProp","actionProp","defaultVisible","autoSubmitClose","autoResetForm","setId","saveButtonProps","visible","show","close","submit","resourceName","warnWhen","handleClose","D","handleShow","id","title","src_exports","__export","RefineButtonTestIds","module","__toCommonJS","src_exports","__export","AuthPage","BooleanField","Breadcrumb","CircularDeterminate","CloneButton","Create","CreateButton","DarkTheme","DateField","DeleteButton","Edit","EditButton","EmailField","ErrorComponent","ExportButton","FileField","Header","ImportButton","Layout","LightTheme","List","ListButton","LoginPage","MarkdownField","NumberField","ReadyPage","RefineSnackbarProvider","RefreshButton","SaveButton","Show","ShowButton","Sider","TagField","TextField","Title","UrlField","colors","locale","notificationProvider","useAutocomplete","useDataGrid","useMenu","__reExport","import_LoadingButton","import_styles","import_Accordion","import_AccordionActions","import_AccordionDetails","import_AccordionSummary","import_Alert","import_AlertTitle","import_AppBar","import_Autocomplete","import_Avatar","import_AvatarGroup","import_Backdrop","import_Badge","import_BottomNavigation","import_BottomNavigationAction","import_Box","import_Breadcrumbs","import_Button","import_ButtonBase","import_ButtonGroup","import_Card","import_CardActionArea","import_CardActions","import_CardContent","import_CardHeader","import_CardMedia","import_Checkbox","import_Chip","import_CircularProgress","import_ClickAwayListener","import_Collapse","import_Container","import_CssBaseline","import_darkScrollbar","import_Dialog","import_DialogActions","import_DialogContent","import_DialogContentText","import_DialogTitle","import_Divider","import_Drawer","import_Fab","import_Fade","import_FilledInput","import_FormControl","import_FormControlLabel","import_FormGroup","import_FormHelperText","import_FormLabel","import_Grid","import_Grow","import_Hidden","import_Icon","import_IconButton","import_ImageList","import_ImageListItem","import_ImageListItemBar","import_Input","import_InputAdornment","import_InputBase","import_InputLabel","import_LinearProgress","import_Link","import_List","import_ListItem","import_ListItemAvatar","import_ListItemButton","import_ListItemIcon","import_ListItemSecondaryAction","import_ListItemText","import_ListSubheader","import_Menu","import_MenuItem","import_MenuList","import_MobileStepper","import_Modal","import_NativeSelect","import_NoSsr","import_OutlinedInput","import_Pagination","import_PaginationItem","import_Paper","import_Popover","import_Popper","import_Portal","import_Radio","import_RadioGroup","import_Rating","import_ScopedCssBaseline","import_Select","import_Skeleton","import_Slide","import_Slider","import_Snackbar","import_SnackbarContent","import_SpeedDial","import_SpeedDialAction","import_SpeedDialIcon","import_Stack","import_Step","import_StepButton","import_StepConnector","import_StepContent","import_StepIcon","import_StepLabel","import_Stepper","import_SvgIcon","import_SwipeableDrawer","import_Switch","import_Tab","import_Table","import_TableBody","import_TableCell","import_TableContainer","import_TableFooter","import_TableHead","import_TablePagination","import_TableRow","import_TableSortLabel","import_Tabs","import_TabScrollButton","import_TextField","import_TextareaAutosize","import_ToggleButton","import_ToggleButtonGroup","import_Toolbar","import_Tooltip","import_Typography","import_useMediaQuery","import_usePagination","import_useScrollTrigger","import_Zoom","import_useAutocomplete","import_GlobalStyles","import_composeClasses","import_generateUtilityClass","import_generateUtilityClasses","import_notistack","import_react","import_material","import_react","import_material","import_icons_material","import_refine_core","Sider","render","collapsed","setCollapsed","opened","setOpened","drawerWidth","t","Link","hasDashboard","translate","menuItems","selectedKey","defaultOpenKeys","isExistAuthentication","mutateLogout","Title","open","setOpen","React","previous","previousOpenKeys","key","uniqueKeys","RenderToTitle","handleClick","renderTreeView","tree","item","icon","label","route","name","children","parentName","isOpen","isSelected","isNested","dashboard","logout","items","drawer","prev","import_react","import_refine_core","import_material","Header","user","React","Layout","Sider","Header","Footer","OffLayoutArea","children","SiderToRender","HeaderToRender","React","theme","import_react","import_refine_core","import_material","Title","collapsed","Link","React","React","import_refine_react_hook_form","import_material","import_refine_core","LoginPage","_a","register","handleSubmit","errors","login","isLoading","translate","data","React","import_material","ReadyPage","renderCode","text","theme","import_react","import_refine_core","import_material","import_icons_material","ErrorComponent","errorMessage","setErrorMessage","push","translate","actionTypes","useParams","params","resource","_a","action","resourceName","resourceFromRoute","React","import_react","React","import_refine_react_hook_form","import_material","import_refine_core","layoutStyles","titleStyles","LoginPage","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","_a","onSubmit","useFormProps","methods","register","handleSubmit","errors","login","isLoading","translate","Link","renderProviders","provider","Content","titleStyles","data","MuiLink","layoutStyles","React","import_refine_react_hook_form","import_material","import_refine_core","RegisterPage","loginLink","wrapperProps","contentProps","renderContent","providers","formProps","onSubmit","useFormProps","register","handleSubmit","errors","registerMutate","isLoading","translate","Link","renderProviders","provider","Content","titleStyles","data","MuiLink","layoutStyles","React","import_refine_react_hook_form","import_material","import_refine_core","ForgotPasswordPage","loginLink","wrapperProps","contentProps","renderContent","formProps","onSubmit","useFormProps","register","handleSubmit","errors","mutate","isLoading","translate","Link","Content","titleStyles","data","MuiLink","layoutStyles","React","import_refine_react_hook_form","import_material","import_refine_core","UpdatePasswordPage","wrapperProps","contentProps","renderContent","formProps","_a","_b","onSubmit","useFormProps","register","watch","handleSubmit","errors","update","isLoading","translate","Content","titleStyles","data","value","layoutStyles","AuthPage","props","type","React","RegisterPage","ForgotPasswordPage","UpdatePasswordPage","LoginPage","import_react","import_refine_core","import_material","import_ArrowBack","Create","title","actionButtons","children","saveButtonProps","resourceFromProps","isLoading","cardProps","cardHeaderProps","cardContentProps","cardActionsProps","breadcrumbFromProps","wrapperProps","headerProps","contentProps","headerButtonProps","headerButtons","footerButtonProps","footerButtons","goBackFromProps","_a","_b","goBack","translate","useParams","routeResourceName","routeFromAction","resource","options","breadcrumb","breadcrumbComponent","React","Breadcrumb","defaultFooterButtons","SaveButton","ArrowBackIcon","import_react","import_refine_core","import_material","import_ArrowBack","Edit","title","actionButtons","saveButtonProps","mutationModeProp","recordItemId","children","deleteButtonProps","canDelete","resourceFromProps","isLoading","cardProps","cardHeaderProps","cardContentProps","cardActionsProps","breadcrumbFromProps","dataProviderName","wrapperProps","headerProps","contentProps","headerButtonProps","headerButtons","footerButtonProps","footerButtons","goBackFromProps","_a","_b","translate","goBack","list","resourceWithRoute","mutationModeContext","mutationMode","useParams","routeResourceName","routeFromAction","idFromRoute","resource","isDeleteButtonVisible","options","breadcrumb","breadcrumbComponent","React","Breadcrumb","id","defaultHeaderButtons","ListButton","RefreshButton","defaultFooterButtons","DeleteButton","SaveButton","ArrowBackIcon","import_react","import_refine_core","import_material","List","title","canCreate","children","createButtonProps","resourceFromProps","cardProps","cardHeaderProps","cardContentProps","breadcrumbFromProps","wrapperProps","headerProps","contentProps","headerButtonProps","headerButtons","_a","_b","useParams","routeResourceName","translate","resource","isCreateButtonVisible","options","breadcrumb","breadcrumbComponent","React","Breadcrumb","defaultHeaderButtons","CreateButton","import_react","import_refine_core","import_material","import_ArrowBack","Show","title","canEdit","canDelete","actionButtons","isLoading","children","resourceFromProps","recordItemId","cardProps","cardHeaderProps","cardContentProps","cardActionsProps","breadcrumbFromProps","dataProviderName","wrapperProps","headerProps","contentProps","headerButtonProps","headerButtons","footerButtonProps","footerButtons","goBackFromProps","_a","_b","translate","goBack","list","resourceWithRoute","useParams","routeResourceName","routeFromAction","idFromRoute","resource","isDeleteButtonVisible","isEditButtonVisible","options","breadcrumb","breadcrumbComponent","React","Breadcrumb","id","defaultHeaderButtons","ListButton","EditButton","DeleteButton","RefreshButton","ArrowBackIcon","import_react","import_refine_core","import_refine_ui_types","import_material","import_icons_material","CreateButton","resourceNameOrRouteName","hideText","accessControl","ignoreAccessControlProvider","svgIconProps","children","onClick","rest","_a","_b","accessControlEnabled","hideIfUnauthorized","resource","resourceName","Link","generateCreateUrl","translate","data","disabledTitle","createUrl","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_material","import_icons_material","EditButton","resourceNameOrRouteName","recordItemId","hideText","accessControl","ignoreAccessControlProvider","svgIconProps","children","onClick","rest","_a","_b","accessControlEnabled","hideIfUnauthorized","resourceName","resource","id","translate","generateEditUrl","Link","data","disabledTitle","editUrl","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_material","import_lab","import_icons_material","DeleteButton","resourceNameOrRouteName","recordItemId","onSuccess","mutationModeProp","children","successNotification","errorNotification","hideText","accessControl","ignoreAccessControlProvider","metaData","dataProviderName","confirmTitle","confirmOkText","confirmCancelText","svgIconProps","invalidates","rest","_a","_b","accessControlEnabled","hideIfUnauthorized","resourceName","id","resource","translate","mutationModeContext","mutationMode","mutate","isLoading","variables","data","open","setOpen","React","handleClickOpen","handleClose","handleCloseOnConfirm","value","sx","restProps","import_react","import_refine_core","import_refine_ui_types","import_lab","import_icons_material","RefreshButton","resourceNameOrRouteName","recordItemId","hideText","metaData","dataProviderName","svgIconProps","children","onClick","rest","resourceName","id","translate","refetch","isFetching","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_material","import_icons_material","ShowButton","resourceNameOrRouteName","recordItemId","hideText","accessControl","ignoreAccessControlProvider","svgIconProps","children","onClick","rest","_a","_b","accessControlEnabled","hideIfUnauthorized","resourceName","id","resource","generateShowUrl","Link","translate","data","disabledTitle","showUrl","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_material","import_icons_material","ListButton","resourceNameOrRouteName","hideText","accessControl","ignoreAccessControlProvider","svgIconProps","children","onClick","rest","_a","_b","_c","accessControlEnabled","hideIfUnauthorized","resource","resourceName","generateListUrl","Link","translate","data","disabledTitle","listUrl","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_lab","import_icons_material","ExportButton","hideText","children","loading","svgIconProps","rest","translate","sx","restProps","React","import_react","import_refine_core","import_refine_ui_types","import_lab","import_icons_material","SaveButton","hideText","svgIconProps","children","rest","translate","sx","restProps","React","import_react","import_refine_core","import_refine_ui_types","import_material","import_icons_material","CloneButton","resourceNameOrRouteName","recordItemId","hideText","accessControl","ignoreAccessControlProvider","svgIconProps","children","onClick","rest","_a","_b","accessControlEnabled","hideIfUnauthorized","resourceName","resource","id","generateCloneUrl","Link","translate","data","disabledTitle","cloneUrl","sx","restProps","React","e","import_react","import_refine_core","import_refine_ui_types","import_lab","import_icons_material","ImportButton","inputProps","hideText","loading","svgIconProps","children","rest","translate","sx","restProps","React","import_react","import_material","CircularDeterminate","undoableTimeout","message","progress","setProgress","timeCount","setTimeCount","increaseProgress","timer","prevProgress","React","import_react","import_material","TextField","value","rest","React","import_react","import_material","TagField","value","rest","React","import_react","import_material","EmailField","value","rest","React","import_react","import_material","import_icons_material","BooleanField","value","valueLabelTrue","valueLabelFalse","trueIcon","falseIcon","svgIconProps","rest","React","import_react","import_dayjs","import_localizedFormat","import_material","dayjs","LocalizedFormat","defaultLocale","DateField","value","locales","dateFormat","rest","React","import_react","FileField","title","src","rest","React","UrlField","import_react","import_material","UrlField","children","value","rest","React","import_react","import_material","toLocaleStringSupportsOptions","NumberField","value","locale","options","rest","number","React","import_react","import_react_markdown","import_remark_gfm","MarkdownField","value","React","ReactMarkdown","gfm","import_react","import_refine_core","import_material","import_icons_material","Breadcrumb","breadcrumbProps","showHome","hideIcons","_a","breadcrumbs","RouterLink","hasDashboard","LinkRouter","props","React","label","icon","href","import_refine_core","import_isEqual","import_unionWith","useAutocomplete","props","_a","_b","queryResult","defaultValueQueryResult","onSearch","useSelectCore","unionWith","isEqual","event","value","x","import_react","import_refine_core","import_material","import_differenceWith","import_isEqual","import_warn_once","import_x_data_grid","transformSortModelToCrudSorting","sortModel","field","sort","transformCrudSortingToSortModel","crudSorting","order","transformMuiOperatorToCrudOperator","operatorValue","transformFilterModelToCrudFilters","items","linkOperator","filters","columnField","value","transformCrudOperatorToMuiOperator","operator","columnType","transformCrudFiltersToFilterModel","crudFilters","columnsType","_a","gridFilterItems","isExistOrFilter","filter","useDataGrid","columns","onSearchProp","initialCurrent","initialPageSize","hasPagination","initialSorter","permanentSorter","defaultSetFilterBehavior","initialFilter","permanentFilter","syncWithLocationProp","resourceFromProp","successNotification","errorNotification","queryOptions","liveModeFromProp","onLiveEvent","liveParams","metaData","dataProviderName","columnsTypes","setColumnsType","tableQueryResult","current","setCurrent","pageSize","setPageSize","filters","setFilters","sorter","setSorter","pageCount","createLinkForSyncWithLocation","useTableCore","muiCrudFilters","setMuiCrudFilters","warnOnce","theme","data","isFetched","isLoading","liveMode","handlePageChange","page","handlePageSizeChange","handleSortModelChange","sortModel","crudSorting","transformSortModelToCrudSorting","handleFilterModelChange","filterModel","crudFilters","transformFilterModelToCrudFilters","f","search","value","searchFilters","paginationValues","dataGridPaginationValues","transformCrudSortingToSortModel","differenceWith","isEqual","transformCrudFiltersToFilterModel","state","newColumnsTypes","key","import_react","import_refine_core","useMenu","selectedKey","menuItems","useMenuCore","defaultOpenKeys","React","keys","x","_defaultOpenKeys","key","index","import_material","lightPalette","darkPalette","typography","commonThemeProperties","typography","LightTheme","lightPalette","DarkTheme","darkPalette","import_react","import_notistack","import_material","import_icons_material","notificationProvider","closeSnackbar","enqueueSnackbar","message","type","undoableTimeout","key","cancelMutation","description","action","React","CircularDeterminate","import_material","import_notistack","RefineSnackbarProvider","props"]}