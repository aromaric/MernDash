import { BaseRecord, CrudFilters, HttpError, useTableProps as useTablePropsCore, useTableReturnType as useTableReturnTypeCore, useTableNoPaginationReturnType as useTableNoPaginationReturnTypeCore } from "@pankod/refine-core";
import { DataGridProps } from "@mui/x-data-grid";
declare type DataGridPropsType = Pick<DataGridProps, "filterModel"> & Required<Pick<DataGridProps, "rows" | "loading" | "rowCount" | "sortingMode" | "sortModel" | "onSortModelChange" | "filterMode" | "onFilterModelChange" | "sx" | "disableSelectionOnClick" | "onStateChange">> & Pick<DataGridProps, "hideFooterPagination" | "paginationMode" | "page" | "onPageChange" | "pageSize" | "onPageSizeChange">;
export declare type UseDataGridProps<TData, TError, TSearchVariables = unknown> = useTablePropsCore<TData, TError> & {
    onSearch?: (data: TSearchVariables) => CrudFilters | Promise<CrudFilters>;
} & {
    /**
     * @deprecated columns is deprecated and will be removed in the next major version. # https://github.com/refinedev/refine/pull/2072
     */
    columns?: DataGridProps["columns"];
};
export declare type UseDataGridReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown> = useTableReturnTypeCore<TData, TError> & {
    dataGridProps: DataGridPropsType;
    search: (value: TSearchVariables) => Promise<void>;
};
export declare type UseDataGridNoPaginationReturnType<TData extends BaseRecord = BaseRecord, TSearchVariables = unknown> = useTableNoPaginationReturnTypeCore<TData> & {
    dataGridProps: DataGridPropsType;
    search: (value: TSearchVariables) => Promise<void>;
};
export declare type UseDataGridWithColumnsReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown> = useTableReturnTypeCore<TData, TError> & {
    dataGridProps: DataGridPropsType & Pick<DataGridProps, "columns">;
    search: (value: TSearchVariables) => Promise<void>;
};
export declare type UseDataGridWithColumnsNoPaginationReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown> = useTableNoPaginationReturnTypeCore<TData, TError> & {
    dataGridProps: DataGridPropsType & Pick<DataGridProps, "columns">;
    search: (value: TSearchVariables) => Promise<void>;
};
export declare function useDataGrid<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown>(props?: UseDataGridProps<TData, TError, TSearchVariables> & {
    hasPagination?: true;
    columns?: undefined;
}): UseDataGridReturnType<TData, TError, TSearchVariables>;
export declare function useDataGrid<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown>(props?: UseDataGridProps<TData, TError, TSearchVariables> & {
    hasPagination: false;
    columns?: undefined;
}): UseDataGridNoPaginationReturnType<TData, TSearchVariables>;
export declare function useDataGrid<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown>(props?: UseDataGridProps<TData, TError, TSearchVariables> & {
    hasPagination?: true;
    columns: DataGridProps<TData>["columns"];
}): UseDataGridWithColumnsReturnType<TData, TError, TSearchVariables>;
export declare function useDataGrid<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown>(props?: UseDataGridProps<TData, TError, TSearchVariables> & {
    hasPagination: false;
    columns: DataGridProps<TData>["columns"];
}): UseDataGridWithColumnsNoPaginationReturnType<TData, TError, TSearchVariables>;
export {};
//# sourceMappingURL=index.d.ts.map