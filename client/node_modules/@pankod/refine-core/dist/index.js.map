{"version":3,"sources":["../src/index.tsx","../src/components/pages/error/index.tsx","../src/hooks/auth/usePermissions/index.ts","../src/contexts/auth/index.tsx","../src/hooks/auth/useGetIdentity/index.ts","../src/hooks/auth/useLogout/index.ts","../src/hooks/auth/useLogin/index.ts","../src/hooks/auth/useRegister/index.ts","../src/hooks/auth/useForgotPassword/index.ts","../src/hooks/auth/useUpdatePassword/index.ts","../src/hooks/auth/useAuthenticated/index.ts","../src/hooks/auth/useCheckError/index.ts","../src/hooks/auth/useIsExistAuthentication.ts","../src/hooks/data/useList.ts","../src/definitions/helpers/userFriendlySeconds/index.ts","../src/definitions/helpers/importCSVMapper/index.ts","../src/definitions/helpers/userFriendlyResourceName/index.ts","../src/definitions/table/index.ts","../src/definitions/upload/file2Base64/index.ts","../src/definitions/helpers/handleUseParams/index.tsx","../src/definitions/helpers/queryKeys/index.ts","../src/definitions/helpers/hasPermission/index.ts","../src/definitions/helpers/routeGenerator/index.ts","../src/definitions/helpers/treeView/createTreeView/index.ts","../src/definitions/helpers/humanizeString/index.ts","../src/contexts/refine/index.tsx","../src/components/layoutWrapper/defaultLayout/index.tsx","../src/definitions/helpers/handleRefineOptions/index.ts","../src/definitions/helpers/redirectPage/index.ts","../src/definitions/helpers/sequentialPromises/index.ts","../src/definitions/helpers/pickDataProvider/index.ts","../src/definitions/helpers/handleMultiple/index.ts","../src/definitions/helpers/useInfinitePagination/index.ts","../src/hooks/data/useOne.ts","../src/hooks/data/useMany.ts","../src/hooks/data/useUpdate.ts","../src/contexts/undoableQueue/undoableQueueContext.tsx","../src/hooks/data/useCreate.ts","../src/hooks/data/useDelete.ts","../src/hooks/data/useCreateMany.ts","../src/hooks/data/useUpdateMany.ts","../src/hooks/data/useDeleteMany.ts","../src/hooks/data/useApiUrl.ts","../src/hooks/data/useCustom.ts","../src/hooks/data/useCustomMutation.ts","../src/hooks/data/useDataProvider.tsx","../src/contexts/data/index.tsx","../src/hooks/data/useInfiniteList.ts","../src/hooks/live/useResourceSubscription/index.ts","../src/contexts/live/index.tsx","../src/hooks/live/useLiveMode/index.ts","../src/hooks/live/useSubscription/index.ts","../src/hooks/live/usePublish/index.ts","../src/hooks/resource/useResource/index.ts","../src/contexts/resource/index.tsx","../src/hooks/resource/useResourceWithRoute/index.ts","../src/hooks/notification/useCancelNotification/index.tsx","../src/hooks/notification/useNotification/index.ts","../src/contexts/notification/index.tsx","../src/hooks/notification/useHandleNotification/index.ts","../src/hooks/translate/useSetLocale.ts","../src/contexts/translation/index.tsx","../src/hooks/translate/useTranslate.ts","../src/hooks/translate/useGetLocale.ts","../src/hooks/refine/useMutationMode.ts","../src/hooks/refine/useWarnAboutChange/index.ts","../src/contexts/unsavedWarn/index.tsx","../src/hooks/refine/useSyncWithLocation.ts","../src/hooks/refine/useTitle.tsx","../src/hooks/refine/useRefineContext.ts","../src/hooks/export/index.ts","../src/hooks/form/useForm.ts","../src/hooks/redirection/index.ts","../src/hooks/navigation/index.ts","../src/hooks/show/useShow.ts","../src/hooks/import/index.tsx","../src/hooks/modal/useModal/index.tsx","../src/hooks/router/useRouterContext.ts","../src/contexts/router/index.tsx","../src/hooks/accessControl/useCan/index.ts","../src/contexts/accessControl/index.tsx","../src/hooks/accessControl/useCanWithoutCache.ts","../src/hooks/useSelect/index.ts","../src/hooks/useTable/index.ts","../src/hooks/auditLog/useLog/index.ts","../src/contexts/auditLog/index.tsx","../src/hooks/auditLog/useLogList/index.ts","../src/hooks/invalidate/index.tsx","../src/hooks/breadcrumb/index.ts","../src/hooks/menu/useMenu.tsx","../src/components/pages/login/index.tsx","../src/components/pages/auth/index.tsx","../src/components/pages/auth/components/login/index.tsx","../src/components/pages/auth/components/register/index.tsx","../src/components/pages/auth/components/forgotPassword/index.tsx","../src/components/pages/auth/components/updatePassword/index.tsx","../src/components/pages/ready/index.tsx","../src/components/containers/refine/index.tsx","../src/components/telemetry/index.tsx","../src/hooks/useTelemetryData/index.ts","../src/hooks/deepMemo/index.tsx","../src/hooks/memoized/index.tsx","../src/components/undoableQueue/index.tsx","../src/components/layoutWrapper/index.tsx","../src/components/authenticated/index.tsx","../src/components/routeChangeHandler/index.tsx","../src/components/canAccess/index.tsx"],"sourcesContent":["export * from \"@tanstack/react-query\";\n\nexport * from \"./components\";\nexport * from \"./hooks\";\n\nexport {\n    Action,\n    ActionWithPage,\n    AccessControlProvider,\n    AuditLogProvider,\n    AuthProvider,\n    BaseKey,\n    BaseRecord,\n    CanParams,\n    CanReturnType,\n    ConditionalFilter,\n    CreateManyResponse,\n    CreateResponse,\n    CrudFilter,\n    CrudFilters,\n    CrudOperators,\n    CrudSort,\n    CrudSorting,\n    CustomResponse,\n    DeleteManyResponse,\n    DeleteOneResponse,\n    FormAction,\n    GetListResponse,\n    GetManyResponse,\n    GetOneResponse,\n    HttpError,\n    LayoutProps,\n    LiveEvent,\n    LiveModeProps,\n    LogicalFilter,\n    LogParams,\n    MapDataFn,\n    MetaDataQuery,\n    MutationMode,\n    NotificationProvider,\n    OpenNotificationParams,\n    Option,\n    Pagination,\n    PromptProps,\n    RedirectionTypes,\n    RedirectAction,\n    ResourceErrorRouterParams,\n    ResourceProps,\n    ResourceRouterParams,\n    RouteAction,\n    SortOrder,\n    SuccessErrorNotification,\n    TitleProps,\n    TranslationProvider,\n    UpdateManyResponse,\n    UpdateResponse,\n    I18nProvider,\n    IAccessControlContext,\n    IAuthContext,\n    IDataContextProvider as DataProvider,\n    ILiveContext as LiveProvider,\n    ILog,\n    ILogData,\n    ILoginForm,\n    INotificationContext,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext as ResourceProvider,\n    ITranslationContext,\n    IResourceItem,\n    IRouterProvider,\n    ITreeMenu,\n    IQueryKeys,\n} from \"./interfaces\";\n\n// all auth types\nexport * from \"./interfaces/auth\";\n\nexport {\n    getDefaultFilter,\n    getDefaultSortOrder,\n    parseTableParams,\n    parseTableParamsFromQuery,\n    setInitialFilters,\n    setInitialSorters,\n    stringifyTableParams,\n    unionFilters,\n    unionSorters,\n} from \"./definitions/table\";\nexport {\n    createTreeView,\n    handleUseParams,\n    importCSVMapper,\n    routeGenerator,\n    userFriendlyResourceName,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"./definitions/helpers\";\nexport { file2Base64 } from \"./definitions/upload\";\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useNavigation,\n    useTranslate,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport { ResourceErrorRouterParams, ActionWithPage } from \"../../../interfaces\";\n\n/**\n * When the app is navigated to a non-existent route, refine shows a default error page.\n * A custom error component can be used for this error page.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\n */\nexport const ErrorComponent: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string>();\n    const { push } = useNavigation();\n    const translate = useTranslate();\n    const actionTypes: ActionWithPage[] = [\"edit\", \"create\", \"show\"];\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceErrorRouterParams>();\n    const resource = useResourceWithRoute();\n\n    useEffect(() => {\n        if (params.resource) {\n            const resourceFromRoute = resource(params.resource);\n            if (\n                params.action &&\n                actionTypes.includes(params.action) &&\n                !resourceFromRoute[params.action]\n            ) {\n                setErrorMessage(\n                    translate(\n                        \"pages.error.info\",\n                        {\n                            action: params.action,\n                            resource: params.resource,\n                        },\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\n                    ),\n                );\n            }\n        }\n    }, [params]);\n\n    return (\n        <>\n            <h1>\n                {translate(\n                    \"pages.error.404\",\n                    undefined,\n                    \"Sorry, the page you visited does not exist.\",\n                )}\n            </h1>\n            {errorMessage && <p>{errorMessage}</p>}\n            <button onClick={() => push(\"/\")}>\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\n            </button>\n        </>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\n/**\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const usePermissions = <TData = any>(\n    options?: UseQueryOptions<TData>,\n): UseQueryResult<TData, unknown> => {\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"usePermissions\"],\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getPermissions ?? (() => Promise.resolve(undefined)),\n        {\n            enabled: !!getPermissions,\n            ...options,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useNavigation } from \"@hooks\";\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const AuthContext = React.createContext<IAuthContext>({});\n\nexport const AuthContextProvider: React.FC<\n    IAuthContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, isProvided, ...authOperations }) => {\n    const { replace } = useNavigation();\n    const queryClient = useQueryClient();\n\n    const invalidateAuthStore = () => {\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\n        queryClient.invalidateQueries([\"usePermissions\"]);\n    };\n\n    const loginFunc = async (params: any) => {\n        try {\n            const result = await authOperations.login?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const registerFunc = async (params: any) => {\n        try {\n            const result = await authOperations.register?.(params);\n\n            invalidateAuthStore();\n            return Promise.resolve(result);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const logoutFunc = async (params: any) => {\n        try {\n            const redirectPath = await authOperations.logout?.(params);\n\n            invalidateAuthStore();\n\n            return Promise.resolve(redirectPath);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    const checkAuthFunc = async (params: any) => {\n        try {\n            await authOperations.checkAuth?.(params);\n            return Promise.resolve();\n        } catch (error) {\n            if ((error as { redirectPath?: string })?.redirectPath) {\n                replace((error as { redirectPath: string }).redirectPath);\n            }\n\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                ...authOperations,\n                login: loginFunc,\n                logout: logoutFunc,\n                checkAuth: checkAuthFunc,\n                register: registerFunc,\n                isProvided,\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};\n","import React from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\nexport type UseGetIdentityProps<TData> = {\n    queryOptions?: UseQueryOptions<TData>;\n};\n\n/**\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\n *\n * @typeParam TData - Result data of the query\n *\n */\nexport const useGetIdentity = <TData = any>({\n    queryOptions,\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery<TData>(\n        [\"getUserIdentity\"],\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        getUserIdentity ?? (() => Promise.resolve({})),\n        {\n            enabled: !!getUserIdentity,\n            retry: false,\n            ...queryOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\ntype Variables = {\n    redirectPath?: string | false;\n};\n\nexport type UseLogoutProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            TLogoutData,\n            Error,\n            (TVariables & Variables) | void,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\n *\n */\nexport const useLogout = <TVariables = {}>({\n    mutationOptions,\n}: UseLogoutProps<TVariables> = {}): UseMutationResult<\n    TLogoutData,\n    Error,\n    (TVariables & Variables) | void,\n    unknown\n> => {\n    const { push } = useNavigation();\n    const { logout: logoutFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n    const { open } = useNotification();\n\n    const queryResponse = useMutation<\n        TLogoutData,\n        Error,\n        (TVariables & Variables) | void,\n        unknown\n    >([\"useLogout\"], logoutFromContext, {\n        onSuccess: (data, variables) => {\n            const redirectPath = variables?.redirectPath ?? data;\n\n            if (redirectPath === false) {\n                return;\n            }\n\n            if (redirectPath) {\n                push(redirectPath);\n                return;\n            }\n\n            push(\"/login\");\n        },\n        onError: (error: Error) => {\n            open?.({\n                key: \"useLogout-error\",\n                type: \"error\",\n                message: error?.name || \"Logout Error\",\n                description:\n                    error?.message || \"Something went wrong during logout\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\nimport { AuthContext } from \"@contexts/auth\";\n\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\n\nexport type UseLoginProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TLoginData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useLogin = <TVariables = {}>({\n    mutationOptions,\n}: UseLoginProps<TVariables> = {}): UseMutationResult<\n    TLoginData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { login: loginFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { useLocation } = useRouterContext();\n    const { search } = useLocation();\n    const { close, open } = useNotification();\n\n    const { to } = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\n        [\"useLogin\"],\n        loginFromContext,\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (to) {\n                    return replace(to as string);\n                }\n\n                if (redirectPathFromAuth !== false) {\n                    if (typeof redirectPathFromAuth === \"string\") {\n                        replace(redirectPathFromAuth);\n                    } else {\n                        replace(\"/\");\n                    }\n                }\n                close?.(\"login-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Login Error\",\n                    description: error?.message || \"Invalid credentials\",\n                    key: \"login-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TRegisterData } from \"../../../interfaces\";\n\nexport type UseRegisterProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TRegisterData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useRegister` calls `register` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useRegister} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useRegister = <TVariables = {}>({\n    mutationOptions,\n}: UseRegisterProps<TVariables> = {}): UseMutationResult<\n    TRegisterData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { register: registerFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TRegisterData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useRegister\"], registerFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                } else {\n                    replace(\"/\");\n                }\n            }\n            close?.(\"register-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Register Error\",\n                description: error?.message || \"Error while registering\",\n                key: \"register-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification } from \"@hooks\";\n\nimport { IAuthContext, TForgotPasswordData } from \"../../../interfaces\";\n\nexport type UseForgotPasswordProps<TVariables> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<TForgotPasswordData, Error, TVariables, unknown>,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useForgotPassword` calls `forgotPassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useForgotPassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useForgotPassword = <TVariables = {}>({\n    mutationOptions,\n}: UseForgotPasswordProps<TVariables> = {}): UseMutationResult<\n    TForgotPasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { forgotPassword: forgotPasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n\n    const queryResponse = useMutation<\n        TForgotPasswordData,\n        Error,\n        TVariables,\n        unknown\n    >([\"useForgotPassword\"], forgotPasswordFromContext, {\n        onSuccess: (redirectPathFromAuth) => {\n            if (redirectPathFromAuth !== false) {\n                if (redirectPathFromAuth) {\n                    replace(redirectPathFromAuth);\n                }\n            }\n            close?.(\"forgot-password-error\");\n        },\n        onError: (error: any) => {\n            open?.({\n                message: error?.name || \"Forgot Password Error\",\n                description: error?.message || \"Error while resetting password\",\n                key: \"forgot-password-error\",\n                type: \"error\",\n            });\n        },\n        ...mutationOptions,\n    });\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport qs from \"qs\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { useNavigation, useNotification, useRouterContext } from \"@hooks\";\nimport {\n    IAuthContext,\n    TUpdatePasswordData,\n    UpdatePasswordFormTypes,\n} from \"../../../interfaces\";\n\nexport type UseUpdatePasswordProps<TVariables extends UpdatePasswordFormTypes> =\n    {\n        mutationOptions?: Omit<\n            UseMutationOptions<TUpdatePasswordData, Error, TVariables, unknown>,\n            \"mutationFn\" | \"onError\" | \"onSuccess\"\n        >;\n    };\n\n/**\n * `useUpdatePassword` calls `updatePassword` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useUpdatePassword} for more details.\n *\n * @typeParam TData - Result data of the query\n * @typeParam TVariables - Values for mutation function. default `{}`\n *\n */\nexport const useUpdatePassword = <\n    TVariables extends UpdatePasswordFormTypes = {},\n>({\n    mutationOptions,\n}: UseUpdatePasswordProps<TVariables> = {}): UseMutationResult<\n    TUpdatePasswordData,\n    Error,\n    TVariables,\n    unknown\n> => {\n    const { replace } = useNavigation();\n    const { updatePassword: updatePasswordFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { close, open } = useNotification();\n    const { useLocation } = useRouterContext();\n\n    const { search } = useLocation();\n\n    const queryStrings = qs.parse(search, {\n        ignoreQueryPrefix: true,\n    });\n\n    const queryResponse = useMutation<\n        TUpdatePasswordData,\n        Error,\n        TVariables,\n        unknown\n    >(\n        [\"useUpdatePassword\"],\n        async (variables) => {\n            return updatePasswordFromContext?.({\n                ...queryStrings,\n                ...variables,\n            });\n        },\n        {\n            onSuccess: (redirectPathFromAuth) => {\n                if (redirectPathFromAuth !== false) {\n                    if (redirectPathFromAuth) {\n                        replace(redirectPathFromAuth);\n                    }\n                }\n                close?.(\"update-password-error\");\n            },\n            onError: (error: any) => {\n                open?.({\n                    message: error?.name || \"Update Password Error\",\n                    description:\n                        error?.message || \"Error while updating password\",\n                    key: \"update-password-error\",\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { useQuery, UseQueryResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\n\n/**\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\n *\n */\nexport const useAuthenticated = (\n    params?: any,\n): UseQueryResult<any, unknown> => {\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n\n    const queryResponse = useQuery(\n        [\"useAuthenticated\", params],\n        async () => (await checkAuth?.(params)) ?? {},\n        {\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import React from \"react\";\nimport { useMutation, UseMutationResult } from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../../interfaces\";\nimport { useLogout } from \"@hooks\";\n\n/**\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\n *\n */\nexport const useCheckError = (): UseMutationResult<\n    void,\n    string | undefined,\n    any,\n    unknown\n> => {\n    const { checkError: checkErrorFromContext } =\n        React.useContext<IAuthContext>(AuthContext);\n\n    const { mutate: logout } = useLogout();\n\n    const queryResponse = useMutation(\n        [\"useCheckError\"],\n        checkErrorFromContext,\n        {\n            onError: (redirectPath?: string) => {\n                logout({ redirectPath });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { IAuthContext } from \"../../interfaces\";\n\n/**\n * A hook that the UI uses\n * @internal\n */\nexport const useIsExistAuthentication = (): boolean => {\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\n\n    return isProvided || false;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\nimport {\n    GetListResponse,\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport interface UseListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`UseListConfig`](/docs/api-reference/core/hooks/data/useList/#config-parameters)\n     */\n    config?: UseListConfig;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options,\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseListProps<TData, TError>): QueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            });\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","export const userFriendlySecond = (miliseconds: number): number => {\n    return miliseconds / 1000; //convert to seconds\n};\n","import zip from \"lodash/zip\";\nimport fromPairs from \"lodash/fromPairs\";\nimport { MapDataFn } from \"../../../interfaces\";\n\nexport const importCSVMapper = <TItem = any, TVariables = any>(\n    data: any[][],\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\n): TVariables[] => {\n    const [headers, ...body] = data;\n    return body\n        .map((entry) => fromPairs(zip(headers, entry)))\n        .map((item: any, index, array: any) =>\n            mapData.call(undefined, item, index, array),\n        );\n};\n","import pluralize from \"pluralize\";\nimport { humanizeString } from \"@definitions\";\n\n/**\n * A method that the internal uses\n * @internal\n */\nexport const userFriendlyResourceName = (\n    resource = \"\",\n    type: \"singular\" | \"plural\",\n): string => {\n    const humanizeResource = humanizeString(resource);\n    if (type === \"singular\") {\n        return pluralize.singular(humanizeResource);\n    }\n    return pluralize.plural(humanizeResource);\n};\n","import qs, { IStringifyOptions } from \"qs\";\nimport unionWith from \"lodash/unionWith\";\nimport differenceWith from \"lodash/differenceWith\";\nimport warnOnce from \"warn-once\";\n\nimport {\n    CrudFilters,\n    CrudSorting,\n    CrudFilter,\n    CrudSort,\n    CrudOperators,\n    SortOrder,\n} from \"../../interfaces\";\n\nexport const parseTableParams = (url: string) => {\n    const { current, pageSize, sorter, filters } = qs.parse(\n        url.substring(1), // remove first ? character\n    );\n\n    return {\n        parsedCurrent: current && Number(current),\n        parsedPageSize: pageSize && Number(pageSize),\n        parsedSorter: (sorter as CrudSorting) ?? [],\n        parsedFilters: (filters as CrudFilters) ?? [],\n    };\n};\n\nexport const parseTableParamsFromQuery = (params: any) => {\n    const url = qs.stringify(params);\n    return parseTableParams(`/${url}`);\n};\n\nexport const stringifyTableParams = (params: {\n    pagination?: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n    [key: string]: any;\n}): string => {\n    const options: IStringifyOptions = {\n        skipNulls: true,\n        arrayFormat: \"indices\",\n        encode: false,\n    };\n    const { pagination, sorter, filters, ...rest } = params;\n\n    const queryString = qs.stringify(\n        { ...rest, ...(pagination ? pagination : {}), sorter, filters },\n        options,\n    );\n\n    return queryString;\n};\n\nexport const compareFilters = (\n    left: CrudFilter,\n    right: CrudFilter,\n): boolean => {\n    if (\n        left.operator !== \"and\" &&\n        left.operator !== \"or\" &&\n        right.operator !== \"and\" &&\n        right.operator !== \"or\"\n    ) {\n        return (\n            (\"field\" in left ? left.field : undefined) ==\n                (\"field\" in right ? right.field : undefined) &&\n            left.operator == right.operator\n        );\n    }\n\n    return (\n        (\"key\" in left ? left.key : undefined) ==\n            (\"key\" in right ? right.key : undefined) &&\n        left.operator == right.operator\n    );\n};\n\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\n    left.field == right.field;\n// Keep only one CrudFilter per type according to compareFilters\n// Items in the array that is passed first to unionWith have higher priority\n// CrudFilter items with undefined values are necessary to signify no filter\n// After union, don't keep CrudFilter items with undefined value in the result\n// Items in the arrays with higher priority are put at the end.\nexport const unionFilters = (\n    permanentFilter: CrudFilters,\n    newFilters: CrudFilters,\n    prevFilters: CrudFilters = [],\n): CrudFilters => {\n    const isKeyRequired = newFilters.filter(\n        (f) => (f.operator === \"or\" || f.operator === \"and\") && !f.key,\n    );\n\n    if (isKeyRequired.length > 1) {\n        warnOnce(\n            true,\n            `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \\nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`,\n        );\n    }\n\n    return unionWith(\n        permanentFilter,\n        newFilters,\n        prevFilters,\n        compareFilters,\n    ).filter(\n        (crudFilter) =>\n            crudFilter.value !== undefined &&\n            crudFilter.value !== null &&\n            (crudFilter.operator !== \"or\" ||\n                (crudFilter.operator === \"or\" &&\n                    crudFilter.value.length !== 0)) &&\n            (crudFilter.operator !== \"and\" ||\n                (crudFilter.operator === \"and\" &&\n                    crudFilter.value.length !== 0)),\n    );\n};\n\nexport const unionSorters = (\n    permanentSorter: CrudSorting,\n    newSorters: CrudSorting,\n): CrudSorting =>\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\n        (crudSorter) =>\n            crudSorter.order !== undefined && crudSorter.order !== null,\n    );\n// Prioritize filters in the permanentFilter and put it at the end of result array\nexport const setInitialFilters = (\n    permanentFilter: CrudFilters,\n    defaultFilter: CrudFilters,\n): CrudFilters => [\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\n    ...permanentFilter,\n];\n\nexport const setInitialSorters = (\n    permanentSorter: CrudSorting,\n    defaultSorter: CrudSorting,\n): CrudSorting => [\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\n    ...permanentSorter,\n];\n\nexport const getDefaultSortOrder = (\n    columnName: string,\n    sorter?: CrudSorting,\n): SortOrder | undefined => {\n    if (!sorter) {\n        return undefined;\n    }\n\n    const sortItem = sorter.find((item) => item.field === columnName);\n\n    if (sortItem) {\n        return sortItem.order as SortOrder;\n    }\n\n    return undefined;\n};\n\nexport const getDefaultFilter = (\n    columnName: string,\n    filters?: CrudFilters,\n    operatorType: CrudOperators = \"eq\",\n): CrudFilter[\"value\"] | undefined => {\n    const filter = filters?.find((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            const { operator, field } = filter;\n            return field === columnName && operator === operatorType;\n        }\n        return undefined;\n    });\n\n    if (filter) {\n        return filter.value || [];\n    }\n\n    return undefined;\n};\n","export const file2Base64 = (file: any): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        const resultHandler = () => {\n            if (reader.result) {\n                reader.removeEventListener(\"load\", resultHandler, false);\n\n                resolve(reader.result as string);\n            }\n        };\n\n        reader.addEventListener(\"load\", resultHandler, false);\n\n        reader.readAsDataURL(file.originFileObj as Blob);\n        reader.onerror = (error) => {\n            reader.removeEventListener(\"load\", resultHandler, false);\n            return reject(error);\n        };\n    });\n};\n","export const handleUseParams = (params: any = {}): any => {\n    if (params?.id) {\n        return {\n            ...params,\n            id: decodeURIComponent(params.id),\n        };\n    }\n    return params;\n};\n","import { IQueryKeys } from \"src/interfaces\";\nimport { QueryKey } from \"@tanstack/react-query\";\n\nimport { MetaDataQuery } from \"src/interfaces\";\n\nexport const queryKeys = (\n    resource?: string,\n    dataProviderName?: string,\n    metaData?: MetaDataQuery | undefined,\n): IQueryKeys => {\n    const providerName = dataProviderName || \"default\";\n    const keys: IQueryKeys = {\n        all: [providerName],\n        resourceAll: [providerName, resource || \"\"],\n        list: (config) => [\n            ...keys.resourceAll,\n            \"list\",\n            { ...config, ...metaData } as QueryKey,\n        ],\n        many: (ids) =>\n            [\n                ...keys.resourceAll,\n                \"getMany\",\n                (ids && ids.map(String)) as QueryKey,\n                { ...metaData } as QueryKey,\n            ].filter((item) => item !== undefined),\n        detail: (id) => [\n            ...keys.resourceAll,\n            \"detail\",\n            id?.toString(),\n            { ...metaData } as QueryKey,\n        ],\n        logList: (meta) =>\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\n                (item) => item !== undefined,\n            ),\n    };\n    return keys;\n};\n","export const hasPermission = (\n    permissions: string[] | undefined,\n    action: string | undefined,\n): boolean => {\n    if (!permissions || !action) {\n        return false;\n    }\n    return !!permissions.find((i) => i === action);\n};\n","import { ResourceProps } from \"src/interfaces\";\n\nconst getParentOf = (item: ResourceProps) => {\n    return (resourceItem: ResourceProps) =>\n        item.parentName ? resourceItem.name === item.parentName : false;\n};\n\nexport const routeGenerator = (\n    item: ResourceProps,\n    resourcesFromProps: ResourceProps[],\n): string | undefined => {\n    let route;\n\n    const resourceRoute = item.options?.route ?? item.name;\n\n    if (item.parentName) {\n        const parent = resourcesFromProps.find(getParentOf(item));\n\n        if (parent?.parentName) {\n            const routePrefix = routeGenerator(parent, resourcesFromProps);\n\n            route = `${routePrefix}/${resourceRoute}`;\n        } else if (item.parentName) {\n            const parentPrefix =\n                parent?.options?.route ?? parent?.name ?? item.parentName;\n            route = `${parentPrefix}/${resourceRoute}`;\n        }\n    } else {\n        route = resourceRoute;\n    }\n    return route;\n};\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\n\nexport const createTreeView = (\n    resources: IResourceItem[] | IMenuItem[],\n): ITreeMenu[] | ITreeMenu[] => {\n    const tree = [];\n    const resourcesRouteObject: { [key: string]: any } = {};\n    const resourcesNameObject: { [key: string]: any } = {};\n    let parent: IResourceItem | IMenuItem;\n    let child: ITreeMenu;\n\n    for (let i = 0; i < resources.length; i++) {\n        parent = resources[i];\n\n        const route = parent.route ?? parent.options?.route ?? \"\";\n\n        resourcesRouteObject[route] = parent;\n        resourcesRouteObject[route][\"children\"] = [];\n\n        resourcesNameObject[parent.name] = parent;\n        resourcesNameObject[parent.name][\"children\"] = [];\n    }\n\n    for (const name in resourcesRouteObject) {\n        if (resourcesRouteObject.hasOwnProperty(name)) {\n            child = resourcesRouteObject[name];\n\n            if (child.parentName && resourcesNameObject[child.parentName]) {\n                resourcesNameObject[child.parentName][\"children\"].push(child);\n            } else {\n                tree.push(child);\n            }\n        }\n    }\n\n    return tree;\n};\n","export const humanizeString = (text: string): string => {\n    text = text.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\");\n    text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\");\n\n    text = text\n        .toLowerCase()\n        .replace(/[_-]+/g, \" \")\n        .replace(/\\s{2,}/g, \" \")\n        .trim();\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n\n    return text;\n};\n// https://www.npmjs.com/package/humanize-string\n","import React from \"react\";\n\nimport {\n    IRefineContextOptions,\n    IRefineContext,\n    IRefineContextProvider,\n} from \"./IRefineContext\";\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\n\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\n\nexport const defaultRefineOptions: IRefineContextOptions = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    warnWhenUnsavedChanges: false,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\",\n    },\n};\n\nexport const RefineContext = React.createContext<IRefineContext>({\n    hasDashboard: false,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: false,\n    syncWithLocation: false,\n    undoableTimeout: 5000,\n    Title: undefined,\n    Sider: undefined,\n    Header: undefined,\n    Footer: undefined,\n    Layout: DefaultLayout,\n    OffLayoutArea: undefined,\n    liveMode: \"off\",\n    onLiveEvent: undefined,\n    options: defaultRefineOptions,\n});\n\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\n    hasDashboard,\n    mutationMode,\n    warnWhenUnsavedChanges,\n    syncWithLocation,\n    undoableTimeout,\n    children,\n    DashboardPage,\n    Title,\n    Layout = DefaultLayout,\n    Header,\n    Sider,\n    Footer,\n    OffLayoutArea,\n    LoginPage = DefaultLoginPage,\n    catchAll,\n    liveMode = \"off\",\n    onLiveEvent,\n    options,\n}) => {\n    return (\n        <RefineContext.Provider\n            value={{\n                hasDashboard,\n                mutationMode,\n                warnWhenUnsavedChanges,\n                syncWithLocation,\n                Title,\n                undoableTimeout,\n                Layout,\n                Header,\n                Sider,\n                Footer,\n                OffLayoutArea,\n                DashboardPage,\n                LoginPage,\n                catchAll,\n                liveMode,\n                onLiveEvent,\n                options,\n            }}\n        >\n            {children}\n        </RefineContext.Provider>\n    );\n};\n","import React from \"react\";\n\nimport { LayoutProps } from \"../../../interfaces\";\n\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\n    return <div>{children}</div>;\n};\n","import { QueryClient, QueryClientConfig } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { defaultRefineOptions } from \"@contexts/refine\";\nimport {\n    IRefineContextOptions,\n    IRefineOptions,\n    LiveModeProps,\n    MutationMode,\n} from \"src/interfaces\";\n\ntype HandleRefineOptionsProps = {\n    options?: IRefineOptions;\n    mutationMode?: MutationMode;\n    syncWithLocation?: boolean;\n    warnWhenUnsavedChanges?: boolean;\n    undoableTimeout?: number;\n    liveMode?: LiveModeProps[\"liveMode\"];\n    disableTelemetry?: boolean;\n    reactQueryClientConfig?: QueryClientConfig;\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n};\n\ntype HandleRefineOptionsReturnValues = {\n    optionsWithDefaults: IRefineContextOptions;\n    disableTelemetryWithDefault: boolean;\n    reactQueryWithDefaults: {\n        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;\n        devtoolConfig: false | React.ComponentProps<typeof ReactQueryDevtools>;\n    };\n};\n\nexport const handleRefineOptions = ({\n    options,\n    disableTelemetry,\n    liveMode,\n    mutationMode,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    syncWithLocation,\n    undoableTimeout,\n    warnWhenUnsavedChanges,\n}: HandleRefineOptionsProps = {}): HandleRefineOptionsReturnValues => {\n    const optionsWithDefaults: IRefineContextOptions = {\n        breadcrumb: options?.breadcrumb,\n        mutationMode:\n            options?.mutationMode ??\n            mutationMode ??\n            defaultRefineOptions.mutationMode,\n        undoableTimeout:\n            options?.undoableTimeout ??\n            undoableTimeout ??\n            defaultRefineOptions.undoableTimeout,\n        syncWithLocation:\n            options?.syncWithLocation ??\n            syncWithLocation ??\n            defaultRefineOptions.syncWithLocation,\n        warnWhenUnsavedChanges:\n            options?.warnWhenUnsavedChanges ??\n            warnWhenUnsavedChanges ??\n            defaultRefineOptions.warnWhenUnsavedChanges,\n        liveMode:\n            options?.liveMode ?? liveMode ?? defaultRefineOptions.liveMode,\n        redirect: {\n            afterCreate:\n                options?.redirect?.afterCreate ??\n                defaultRefineOptions.redirect.afterCreate,\n            afterClone:\n                options?.redirect?.afterClone ??\n                defaultRefineOptions.redirect.afterClone,\n            afterEdit:\n                options?.redirect?.afterEdit ??\n                defaultRefineOptions.redirect.afterEdit,\n        },\n    };\n\n    const disableTelemetryWithDefault =\n        options?.disableTelemetry ?? disableTelemetry ?? false;\n\n    const reactQueryWithDefaults = {\n        clientConfig:\n            options?.reactQuery?.clientConfig ?? reactQueryClientConfig ?? {},\n        devtoolConfig:\n            options?.reactQuery?.devtoolConfig ?? reactQueryDevtoolConfig ?? {},\n    };\n\n    return {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    };\n};\n","import {\n    FormAction,\n    IRefineContextOptions,\n    RedirectAction,\n} from \"src/interfaces\";\n\ntype RedirectPageProps = {\n    redirectFromProps?: RedirectAction;\n    action: FormAction;\n    redirectOptions: IRefineContextOptions[\"redirect\"];\n};\n\nexport const redirectPage = ({\n    redirectFromProps,\n    action,\n    redirectOptions,\n}: RedirectPageProps): RedirectAction => {\n    if (redirectFromProps || redirectFromProps === false) {\n        return redirectFromProps;\n    }\n\n    switch (action) {\n        case \"clone\":\n            return redirectOptions.afterClone;\n        case \"create\":\n            return redirectOptions.afterCreate;\n        case \"edit\":\n            return redirectOptions.afterEdit;\n    }\n};\n","type EachResolve<TResolve, Response> = (\n    result: TResolve,\n    index: number,\n) => Response;\ntype EachReject<TReject, Response> = (\n    error: TReject,\n    index: number,\n) => Response;\n\nexport const sequentialPromises = async <\n    TResolve = unknown,\n    TReject = unknown,\n    TResolveResponse = unknown,\n    TRejectResponse = unknown,\n>(\n    promises: (() => Promise<TResolve>)[],\n    onEachResolve: EachResolve<TResolve, TResolveResponse>,\n    onEachReject: EachReject<TReject, TRejectResponse>,\n): Promise<(TResolveResponse | TRejectResponse)[]> => {\n    const results = [];\n    // @ts-expect-error Remove this when we enable `downLevelIterations`\n    for (const [index, promise] of promises.entries()) {\n        try {\n            const result = await promise();\n\n            results.push(onEachResolve(result, index));\n        } catch (error) {\n            results.push(onEachReject(error as TReject, index));\n        }\n    }\n    return results;\n};\n","import { IResourceItem } from \"@contexts/resource\";\n\nexport const pickDataProvider = (\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) => {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    if (resource?.options?.dataProviderName) {\n        return resource.options.dataProviderName;\n    }\n\n    return \"default\";\n};\n","export const handleMultiple = async <TData = unknown>(\n    promises: Promise<{ data: TData }>[],\n): Promise<{ data: TData[] }> => {\n    return {\n        data: (await Promise.all(promises)).map((res) => res.data),\n    };\n};\n","import { GetListResponse } from \"../../../interfaces\";\n\nexport const getNextPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.next) {\n        return cursor.next;\n    }\n\n    const current = pagination?.current || 1;\n\n    const pageSize = pagination?.pageSize || 10;\n    const totalPages = Math.ceil((lastPage.total || 0) / pageSize);\n\n    return current < totalPages ? Number(current) + 1 : undefined;\n};\n\nexport const getPreviousPageParam = (lastPage: GetListResponse) => {\n    const { pagination, cursor } = lastPage;\n\n    // cursor pagination\n    if (cursor?.prev) {\n        return cursor.prev;\n    }\n\n    const current = pagination?.current || 1;\n\n    return current === 1 ? undefined : current - 1;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    GetOneResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useTranslate,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\n\nexport type UseOneProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id of the item in the resource\n     * @type [`BaseKey`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    id: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `\"default\"``\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\n *\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useOne = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    id,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        channel: `resources/${resource}`,\n        params: {\n            ids: id ? [id] : [],\n            id: id,\n            metaData,\n            subscriptionType: \"useOne\",\n            ...liveParams,\n        },\n        enabled: queryOptions?.enabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\n        queryKey.detail(id),\n        ({ queryKey, pageParam, signal }) =>\n            getOne<TData>({\n                resource,\n                id,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }),\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, metaData }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { id, metaData }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-getOne-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    BaseRecord,\n    BaseKey,\n    GetManyResponse,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    useResourceSubscription,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\nexport type UseManyProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * ids of the item in the resource\n     * @type [`BaseKey[]`](/docs/api-reference/core/interfaceReferences/#basekey)\n     */\n    ids: BaseKey[];\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\n *\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    ids,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseManyProps<TData, TError>): QueryObserverResult<\n    GetManyResponse<TData>\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n\n    const { getMany, getOne } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            ids: ids ?? [],\n            metaData,\n            subscriptionType: \"useMany\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\n        queryKey.many(ids),\n        ({ queryKey, pageParam, signal }) => {\n            if (getMany) {\n                return getMany({\n                    resource,\n                    ids,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                });\n            } else {\n                return handleMultiple(\n                    ids.map((id) =>\n                        getOne<TData>({\n                            resource,\n                            id,\n                            metaData: {\n                                ...metaData,\n                                queryContext: {\n                                    queryKey,\n                                    pageParam,\n                                    signal,\n                                },\n                            },\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, ids, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids[0]}-${resource}-getMany-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateResponse,\n    MutationMode,\n    PrevContext as UpdateContext,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport pluralize from \"pluralize\";\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type UpdateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * id for mutation function\n     */\n    id: BaseKey;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Duration to wait before executing the mutation when `mutationMode = \"undoable\"`\n     */\n    undoableTimeout?: number;\n    /**\n     * Callback that runs when undo button is clicked on `mutationMode = \"undoable\"`\n     */\n    onCancel?: (cancelMutation: () => void) => void;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     * Metadata query for `dataProvider`,\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default \"default\"\n     */\n    dataProviderName?: string;\n    /**\n     *  You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseUpdateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateResponse<TData>,\n    TError,\n    UpdateParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateResponse<TData>,\n            TError,\n            UpdateParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\n *\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateProps<TData, TError, TVariables> = {}): UseUpdateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const publish = usePublish();\n    const { log } = useLog();\n    const { notificationDispatch } = useCancelNotification();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateResponse<TData>,\n        TError,\n        UpdateParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            id,\n            values,\n            resource,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).update<TData, TVariables>({\n                    resource,\n                    id,\n                    variables: values,\n                    metaData,\n                });\n            }\n            const updatePromise = new Promise<UpdateResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                resource,\n                id,\n                mutationMode,\n                values,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    return {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (record.id?.toString() === id?.toString()) {\n                                    record = {\n                                        id,\n                                        ...values,\n                                    } as unknown as TData;\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.detail(id),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            return {\n                                ...previous,\n                                data: {\n                                    ...previous.data,\n                                    ...values,\n                                },\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\", \"detail\"],\n                },\n            ) => {\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                    id,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    values,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { id, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: data.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                let previousData: any;\n                if (context) {\n                    const queryData = queryClient.getQueryData<\n                        UpdateResponse<TData>\n                    >(context.queryKey.detail(id));\n\n                    previousData = Object.keys(values).reduce<any>(\n                        (acc, item) => {\n                            acc[item] = queryData?.data?.[item];\n                            return acc;\n                        },\n                        {},\n                    );\n                }\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"update\",\n                    resource,\n                    data: values,\n                    previousData,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { id, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: translate(\n                                    `${resource}.${resource}`,\n                                    resourceSingular,\n                                ),\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import React, { ReactNode, useReducer } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { UndoableQueue } from \"@components\";\n\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\nimport { ActionTypes } from \"./actionTypes\";\n\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\n    notifications: [],\n    notificationDispatch: () => false,\n});\n\nconst initialState: IUndoableQueue[] = [];\n\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\n    switch (action.type) {\n        case ActionTypes.ADD:\n            const newState = state.filter(\n                (notificationItem: IUndoableQueue) => {\n                    return !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    );\n                },\n            );\n\n            return [\n                ...newState,\n                {\n                    ...action.payload,\n                    isRunning: true,\n                },\n            ];\n        case ActionTypes.REMOVE:\n            return state.filter(\n                (notificationItem: IUndoableQueue) =>\n                    !(\n                        isEqual(notificationItem.id, action.payload.id) &&\n                        notificationItem.resource == action.payload.resource\n                    ),\n            );\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\n            return state.map((notificationItem: IUndoableQueue) => {\n                if (\n                    isEqual(notificationItem.id, action.payload.id) &&\n                    notificationItem.resource == action.payload.resource\n                ) {\n                    return {\n                        ...notificationItem,\n                        seconds: action.payload.seconds - 1000,\n                    };\n                }\n                return notificationItem;\n            });\n        default:\n            return state;\n    }\n};\n\nexport const UndoableQueueContextProvider: React.FC<{\n    children: ReactNode;\n}> = ({ children }) => {\n    const [notifications, notificationDispatch] = useReducer(\n        undoableQueueReducer,\n        initialState,\n    );\n\n    const notificationData = { notifications, notificationDispatch };\n\n    return (\n        <UndoableQueueContext.Provider value={notificationData}>\n            {children}\n            {typeof window !== \"undefined\" &&\n                notifications.map((notification) => (\n                    <UndoableQueue\n                        key={`${notification.id}-${notification.resource}-queue`}\n                        notification={notification}\n                    />\n                ))}\n        </UndoableQueueContext.Provider>\n    );\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\nimport { pickDataProvider } from \"@definitions/helpers\";\n\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\n\ntype useCreateParams<TVariables> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Values for mutation function\n     */\n    values: TVariables;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCreateParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCreateParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCreate = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateProps<TData, TError, TVariables> = {}): UseCreateReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCreateParams<TVariables>,\n        unknown\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateParams<TVariables>) => {\n            return dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            ).create<TData, TVariables>({\n                resource,\n                variables: values,\n                metaData,\n            });\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    resource,\n                    successNotification: successNotificationFromProp,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                    metaData,\n                },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, values, resource)\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully created ${resourceSingular}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids: data?.data?.id ? [data.data.id] : undefined,\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"create\",\n                    resource,\n                    data: values,\n                    meta: {\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id: data?.data?.id ?? undefined,\n                        ...rest,\n                    },\n                });\n            },\n            onError: (\n                err: TError,\n                {\n                    resource,\n                    errorNotification: errorNotificationFromProp,\n                    values,\n                },\n            ) => {\n                checkError(err);\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, values, resource)\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `create-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useMutationMode,\n    useCancelNotification,\n    useTranslate,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useLog,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    DeleteOneResponse,\n    MutationMode,\n    PrevContext as DeleteContext,\n    BaseRecord,\n    BaseKey,\n    HttpError,\n    GetListResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    PreviousQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport { queryKeys, pickDataProvider } from \"@definitions/helpers\";\n\nexport type DeleteParams<TVariables> = {\n    id: BaseKey;\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteOneResponse<TData>,\n    TError,\n    DeleteParams<TVariables>,\n    DeleteContext<TData>\n>;\n\nexport type UseDeleteProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteOneResponse<TData>,\n            TError,\n            DeleteParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\n *\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDelete = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteProps<TData, TError, TVariables> = {}): UseDeleteReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const { log } = useLog();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        DeleteOneResponse<TData>,\n        TError,\n        DeleteParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            id,\n            mutationMode,\n            undoableTimeout,\n            resource,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return dataProvider(\n                    pickDataProvider(resource, dataProviderName, resources),\n                ).deleteOne<TData, TVariables>({\n                    resource,\n                    id,\n                    metaData,\n                    variables: values,\n                });\n            }\n\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        dataProvider(\n                            pickDataProvider(\n                                resource,\n                                dataProviderName,\n                                resources,\n                            ),\n                        )\n                            .deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            })\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return deletePromise;\n        },\n        {\n            onMutate: async ({\n                id,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) =>\n                                    record.id?.toString() !== id.toString(),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    return (\n                                        record.id?.toString() !== id?.toString()\n                                    );\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (\n                _data,\n                _error,\n                {\n                    id,\n                    resource,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                {\n                    id,\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    metaData,\n                },\n                context,\n            ) => {\n                const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, id, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${id}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resourceSingular,\n                            ),\n                        },\n                        `Successfully deleted a ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: {\n                        ids: id ? [id] : [],\n                    },\n                    date: new Date(),\n                });\n\n                const { fields, operation, variables, ...rest } =\n                    metaData || {};\n\n                log?.mutate({\n                    action: \"delete\",\n                    resource,\n                    meta: {\n                        id,\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        ...rest,\n                    },\n                });\n\n                // Remove the queries from the cache:\n                queryClient.removeQueries(context?.queryKey.detail(id));\n            },\n            onError: (\n                err: TError,\n                { id, resource, errorNotification },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, id, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${id}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    BaseRecord,\n    CreateManyResponse,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { handleMultiple, pickDataProvider } from \"@definitions\";\n\ntype useCreateManyParams<TVariables> = {\n    resource: string;\n    values: TVariables[];\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\nexport type UseCreateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateManyResponse<TData>,\n    TError,\n    useCreateManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseCreateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateManyResponse<TData>,\n            TError,\n            useCreateManyParams<TVariables>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\n *\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useCreateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCreateManyProps<TData, TError, TVariables> = {}): UseCreateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const dataProvider = useDataProvider();\n\n    const { resources } = useResource();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        CreateManyResponse<TData>,\n        TError,\n        useCreateManyParams<TVariables>\n    >(\n        ({\n            resource,\n            values,\n            metaData,\n            dataProviderName,\n        }: useCreateManyParams<TVariables>) => {\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            if (selectedDataProvider.createMany) {\n                return selectedDataProvider.createMany<TData, TVariables>({\n                    resource,\n                    variables: values,\n                    metaData,\n                });\n            } else {\n                return handleMultiple(\n                    values.map((val) =>\n                        selectedDataProvider.create<TData, TVariables>({\n                            resource,\n                            variables: val,\n                            metaData,\n                        }),\n                    ),\n                );\n            }\n        },\n        {\n            onSuccess: (\n                response,\n                {\n                    resource,\n                    successNotification,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                    values,\n                },\n            ) => {\n                const resourcePlural = pluralize.plural(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(response, values, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    message: translate(\n                        \"notifications.createSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully created ${resourcePlural}`,\n                    ),\n                    description: translate(\"notifications.success\", \"Success\"),\n                    type: \"success\",\n                });\n\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                const ids = response?.data\n                    .filter((item) => item?.id !== undefined)\n                    .map((item) => item.id!);\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"created\",\n                    payload: {\n                        ids,\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (err: TError, { resource, errorNotification, values }) => {\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, values, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `createMany-${resource}-notification`,\n                    description: err.message,\n                    message: translate(\n                        \"notifications.createError\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                            statusCode: err.statusCode,\n                        },\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\n                    ),\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    useResource,\n    useCancelNotification,\n    useCheckError,\n    useMutationMode,\n    useTranslate,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport {\n    BaseRecord,\n    BaseKey,\n    UpdateManyResponse,\n    HttpError,\n    MutationMode,\n    QueryResponse,\n    PrevContext as UpdateContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    GetListResponse,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    handleMultiple,\n} from \"@definitions/helpers\";\n\ntype UpdateManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n} & SuccessErrorNotification;\n\ntype UseUpdateManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    UpdateManyResponse<TData>,\n    TError,\n    UpdateManyParams<TVariables>,\n    UpdateContext<TData>\n>;\n\nexport type UseUpdateManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            UpdateManyResponse<TData>,\n            TError,\n            UpdateManyParams<TVariables>,\n            UpdateContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\n *\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useUpdateMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseUpdateManyProps<TData, TError, TVariables> = {}): UseUpdateManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const { mutate: checkError } = useCheckError();\n    const { notificationDispatch } = useCancelNotification();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const mutation = useMutation<\n        UpdateManyResponse<TData>,\n        TError,\n        UpdateManyParams<TVariables>,\n        UpdateContext<TData>\n    >(\n        ({\n            ids,\n            values,\n            resource,\n            onCancel,\n            mutationMode,\n            undoableTimeout,\n            metaData,\n            dataProviderName,\n        }: UpdateManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.updateMany) {\n                    return selectedDataProvider.updateMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        variables: values,\n                        metaData,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.update<TData, TVariables>({\n                                resource,\n                                id,\n                                variables: values,\n                                metaData,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n\n        {\n            onMutate: async ({\n                resource,\n                ids,\n                values,\n                mutationMode,\n                dataProviderName,\n                metaData,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                    metaData,\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries = queryClient.getQueriesData<\n                    QueryResponse<TData>\n                >(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n\n                                return record;\n                            });\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.map((record: TData) => {\n                                if (\n                                    record.id !== undefined &&\n                                    ids\n                                        .filter((id) => id !== undefined)\n                                        .map(String)\n                                        .includes(record.id.toString())\n                                ) {\n                                    return {\n                                        ...record,\n                                        ...values,\n                                    };\n                                }\n                                return record;\n                            });\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: GetListResponse<TData> | null) => {\n                                if (!previous) {\n                                    return null;\n                                }\n\n                                const data = {\n                                    ...previous.data,\n                                    ...values,\n                                };\n                                return {\n                                    ...previous,\n                                    data,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    invalidates: [\"list\", \"many\"],\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                });\n\n                ids.forEach((id) =>\n                    invalidateStore({\n                        resource,\n                        invalidates: [\"detail\"],\n                        dataProviderName: pickDataProvider(\n                            resource,\n                            dataProviderName,\n                            resources,\n                        ),\n                        id,\n                    }),\n                );\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                data,\n                { ids, resource, successNotification, values },\n            ) => {\n                const resourceSingular = pluralize.singular(resource);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(data, { ids, values }, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\n                        \"notifications.success\",\n                        \"Successful\",\n                    ),\n                    message: translate(\n                        \"notifications.editSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully updated ${resourceSingular}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"updated\",\n                    payload: {\n                        ids: ids.map(String),\n                    },\n                    date: new Date(),\n                });\n            },\n            onError: (\n                err: TError,\n                { ids, resource, errorNotification, values },\n                context,\n            ) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError?.(err);\n\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ids, values }, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-updateMany-error-notification`,\n                        message: translate(\n                            \"notifications.editError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import {\n    useQueryClient,\n    useMutation,\n    UseMutationResult,\n    UseMutationOptions,\n} from \"@tanstack/react-query\";\nimport pluralize from \"pluralize\";\n\nimport {\n    DeleteManyResponse,\n    HttpError,\n    BaseRecord,\n    BaseKey,\n    MutationMode,\n    PreviousQuery,\n    GetListResponse,\n    PrevContext as DeleteContext,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    IQueryKeys,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useTranslate,\n    useMutationMode,\n    useCancelNotification,\n    useCheckError,\n    usePublish,\n    useHandleNotification,\n    useDataProvider,\n    useInvalidate,\n} from \"@hooks\";\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { queryKeys, pickDataProvider, handleMultiple } from \"@definitions\";\n\nexport type DeleteManyParams<TVariables> = {\n    ids: BaseKey[];\n    resource: string;\n    mutationMode?: MutationMode;\n    undoableTimeout?: number;\n    onCancel?: (cancelMutation: () => void) => void;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    invalidates?: Array<keyof IQueryKeys>;\n    values?: TVariables;\n} & SuccessErrorNotification;\n\nexport type UseDeleteManyReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    DeleteManyResponse<TData>,\n    TError,\n    DeleteManyParams<TVariables>,\n    unknown\n>;\n\nexport type UseDeleteManyProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            DeleteManyResponse<TData>,\n            TError,\n            DeleteManyParams<TVariables>,\n            DeleteContext<TData>\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\" | \"onSettled\" | \"onMutate\"\n    >;\n};\n\n/**\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\n *\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n */\nexport const useDeleteMany = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseDeleteManyProps<TData, TError, TVariables> = {}): UseDeleteManyReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { mutate: checkError } = useCheckError();\n\n    const {\n        mutationMode: mutationModeContext,\n        undoableTimeout: undoableTimeoutContext,\n    } = useMutationMode();\n    const dataProvider = useDataProvider();\n\n    const { notificationDispatch } = useCancelNotification();\n    const translate = useTranslate();\n    const publish = usePublish();\n    const handleNotification = useHandleNotification();\n    const invalidateStore = useInvalidate();\n\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const mutation = useMutation<\n        DeleteManyResponse<TData>,\n        TError,\n        DeleteManyParams<TVariables>,\n        DeleteContext<TData>\n    >(\n        ({\n            resource,\n            ids,\n            mutationMode,\n            undoableTimeout,\n            onCancel,\n            metaData,\n            dataProviderName,\n            values,\n        }: DeleteManyParams<TVariables>) => {\n            const mutationModePropOrContext =\n                mutationMode ?? mutationModeContext;\n\n            const undoableTimeoutPropOrContext =\n                undoableTimeout ?? undoableTimeoutContext;\n\n            const selectedDataProvider = dataProvider(\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            const mutationFn = () => {\n                if (selectedDataProvider.deleteMany) {\n                    return selectedDataProvider.deleteMany<TData, TVariables>({\n                        resource,\n                        ids,\n                        metaData,\n                        variables: values,\n                    });\n                } else {\n                    return handleMultiple(\n                        ids.map((id) =>\n                            selectedDataProvider.deleteOne<TData, TVariables>({\n                                resource,\n                                id,\n                                metaData,\n                                variables: values,\n                            }),\n                        ),\n                    );\n                }\n            };\n\n            if (!(mutationModePropOrContext === \"undoable\")) {\n                return mutationFn();\n            }\n\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\n                (resolve, reject) => {\n                    const doMutation = () => {\n                        mutationFn()\n                            .then((result) => resolve(result))\n                            .catch((err) => reject(err));\n                    };\n\n                    const cancelMutation = () => {\n                        reject({ message: \"mutationCancelled\" });\n                    };\n\n                    if (onCancel) {\n                        onCancel(cancelMutation);\n                    }\n\n                    notificationDispatch({\n                        type: ActionTypes.ADD,\n                        payload: {\n                            id: ids,\n                            resource: resource,\n                            cancelMutation: cancelMutation,\n                            doMutation: doMutation,\n                            seconds: undoableTimeoutPropOrContext,\n                            isSilent: !!onCancel,\n                        },\n                    });\n                },\n            );\n            return updatePromise;\n        },\n        {\n            onMutate: async ({\n                ids,\n                resource,\n                mutationMode,\n                dataProviderName,\n            }) => {\n                const queryKey = queryKeys(\n                    resource,\n                    pickDataProvider(resource, dataProviderName, resources),\n                );\n\n                const mutationModePropOrContext =\n                    mutationMode ?? mutationModeContext;\n\n                await queryClient.cancelQueries(\n                    queryKey.resourceAll,\n                    undefined,\n                    {\n                        silent: true,\n                    },\n                );\n\n                const previousQueries: PreviousQuery<TData>[] =\n                    queryClient.getQueriesData(queryKey.resourceAll);\n\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\n                    // Set the previous queries to the new ones:\n                    queryClient.setQueriesData(\n                        queryKey.list(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (item) =>\n                                    item.id &&\n                                    !ids\n                                        .map(String)\n                                        .includes(item.id.toString()),\n                            );\n\n                            return {\n                                data,\n                                total: previous.total - 1,\n                            };\n                        },\n                    );\n\n                    queryClient.setQueriesData(\n                        queryKey.many(),\n                        (previous?: GetListResponse<TData> | null) => {\n                            if (!previous) {\n                                return null;\n                            }\n\n                            const data = previous.data.filter(\n                                (record: TData) => {\n                                    if (record.id) {\n                                        return !ids\n                                            .map(String)\n                                            .includes(record.id.toString());\n                                    }\n                                    return false;\n                                },\n                            );\n\n                            return {\n                                ...previous,\n                                data,\n                            };\n                        },\n                    );\n\n                    for (const id of ids) {\n                        queryClient.setQueriesData(\n                            queryKey.detail(id),\n                            (previous?: any | null) => {\n                                if (!previous || previous.data.id == id) {\n                                    return null;\n                                }\n                                return {\n                                    ...previous,\n                                };\n                            },\n                        );\n                    }\n                }\n\n                return {\n                    previousQueries,\n                    queryKey,\n                };\n            },\n            // Always refetch after error or success:\n            onSettled: (\n                _data,\n                _error,\n                {\n                    resource,\n                    ids,\n                    dataProviderName,\n                    invalidates = [\"list\", \"many\"],\n                },\n            ) => {\n                // invalidate the cache for the list and many queries:\n                invalidateStore({\n                    resource,\n                    dataProviderName: pickDataProvider(\n                        resource,\n                        dataProviderName,\n                        resources,\n                    ),\n                    invalidates,\n                });\n\n                notificationDispatch({\n                    type: ActionTypes.REMOVE,\n                    payload: { id: ids, resource },\n                });\n            },\n            onSuccess: (\n                _data,\n                { ids, resource, successNotification },\n                context,\n            ) => {\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(_data, ids, resource)\n                        : successNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${ids}-${resource}-notification`,\n                    description: translate(\"notifications.success\", \"Success\"),\n                    message: translate(\n                        \"notifications.deleteSuccess\",\n                        {\n                            resource: translate(\n                                `${resource}.${resource}`,\n                                resource,\n                            ),\n                        },\n                        `Successfully deleted ${resource}`,\n                    ),\n                    type: \"success\",\n                });\n\n                publish?.({\n                    channel: `resources/${resource}`,\n                    type: \"deleted\",\n                    payload: { ids },\n                    date: new Date(),\n                });\n\n                // Remove the queries from the cache:\n                ids.forEach((id) =>\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\n                );\n            },\n            onError: (err, { ids, resource, errorNotification }, context) => {\n                // set back the queries to the context:\n                if (context) {\n                    for (const query of context.previousQueries) {\n                        queryClient.setQueryData(query[0], query[1]);\n                    }\n                }\n\n                if (err.message !== \"mutationCancelled\") {\n                    checkError(err);\n                    const resourceSingular = pluralize.singular(resource);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, ids, resource)\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${ids}-${resource}-notification`,\n                        message: translate(\n                            \"notifications.deleteError\",\n                            {\n                                resource: resourceSingular,\n                                statusCode: err.statusCode,\n                            },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                }\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useDataProvider } from \"@hooks\";\n\nexport const useApiUrl = (dataProviderName?: string): string => {\n    const dataProvider = useDataProvider();\n\n    const { getApiUrl } = dataProvider(dataProviderName);\n\n    return getApiUrl();\n};\n","import {\n    QueryObserverResult,\n    useQuery,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport {\n    CustomResponse,\n    CrudSorting,\n    CrudFilters,\n    BaseRecord,\n    HttpError,\n    MetaDataQuery,\n    SuccessErrorNotification,\n} from \"../../interfaces\";\nimport {\n    useTranslate,\n    useCheckError,\n    useHandleNotification,\n    useDataProvider,\n} from \"@hooks\";\n\ninterface UseCustomConfig<TQuery, TPayload> {\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n    query?: TQuery;\n    payload?: TPayload;\n    headers?: {};\n}\n\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\n    /**\n     * request's URL\n     */\n    url: string;\n    /**\n     * request's method (`GET`, `POST`, etc.)\n     */\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\n    /**\n     * The config of your request. You can send headers, payload, query, filters and sort using this field\n     */\n    config?: UseCustomConfig<TQuery, TPayload>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\"\n     */\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\n    /**\n     * Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification;\n\n/**\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n * @typeParam TQuery - Values for query params\n * @typeParam TPayload - Values for params\n *\n */\nexport const useCustom = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TQuery = unknown,\n    TPayload = unknown,\n>({\n    url,\n    method,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    dataProviderName,\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\n    CustomResponse<TData>,\n    TError\n> => {\n    const dataProvider = useDataProvider();\n\n    const { custom } = dataProvider(dataProviderName);\n    const { mutate: checkError } = useCheckError();\n    const translate = useTranslate();\n    const handleNotification = useHandleNotification();\n\n    if (custom) {\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\n            [\n                dataProviderName,\n                \"custom\",\n                method,\n                url,\n                { ...config, ...metaData },\n            ],\n            ({ queryKey, pageParam, signal }) =>\n                custom<TData>({\n                    url,\n                    method,\n                    ...config,\n                    metaData: {\n                        ...metaData,\n                        queryContext: {\n                            queryKey,\n                            pageParam,\n                            signal,\n                        },\n                    },\n                }),\n            {\n                ...queryOptions,\n                onSuccess: (data) => {\n                    queryOptions?.onSuccess?.(data);\n\n                    const notificationConfig =\n                        typeof successNotification === \"function\"\n                            ? successNotification(data, {\n                                  ...config,\n                                  ...metaData,\n                              })\n                            : successNotification;\n\n                    handleNotification(notificationConfig);\n                },\n                onError: (err: TError) => {\n                    checkError(err);\n                    queryOptions?.onError?.(err);\n\n                    const notificationConfig =\n                        typeof errorNotification === \"function\"\n                            ? errorNotification(err, { ...config, ...metaData })\n                            : errorNotification;\n\n                    handleNotification(notificationConfig, {\n                        key: `${method}-notification`,\n                        message: translate(\n                            \"notifications.error\",\n                            { statusCode: err.statusCode },\n                            `Error (status code: ${err.statusCode})`,\n                        ),\n                        description: err.message,\n                        type: \"error\",\n                    });\n                },\n            },\n        );\n        return queryResponse;\n    } else {\n        throw Error(\"Not implemented custom on data provider.\");\n    }\n};\n","import {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n} from \"@tanstack/react-query\";\n\nimport {\n    useCheckError,\n    useDataProvider,\n    useHandleNotification,\n    useTranslate,\n} from \"@hooks\";\nimport {\n    CreateResponse,\n    BaseRecord,\n    HttpError,\n    SuccessErrorNotification,\n    MetaDataQuery,\n} from \"../../interfaces\";\n\ninterface UseCustomMutationConfig {\n    headers?: {};\n}\n\ntype useCustomMutationParams<TVariables> = {\n    url: string;\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\n    values: TVariables;\n    metaData?: MetaDataQuery;\n    dataProviderName?: string;\n    config?: UseCustomMutationConfig;\n} & SuccessErrorNotification;\n\nexport type UseCustomMutationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = UseMutationResult<\n    CreateResponse<TData>,\n    TError,\n    useCustomMutationParams<TVariables>,\n    unknown\n>;\n\nexport type UseCustomMutationProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    mutationOptions?: Omit<\n        UseMutationOptions<\n            CreateResponse<TData>,\n            TError,\n            useCustomMutationParams<TVariables>,\n            unknown\n        >,\n        \"mutationFn\" | \"onError\" | \"onSuccess\"\n    >;\n};\n\n/**\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\n *\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\n\nexport const useCustomMutation = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    mutationOptions,\n}: UseCustomMutationProps<\n    TData,\n    TError,\n    TVariables\n> = {}): UseCustomMutationReturnType<TData, TError, TVariables> => {\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n    const dataProvider = useDataProvider();\n    const translate = useTranslate();\n\n    const mutation = useMutation<\n        CreateResponse<TData>,\n        TError,\n        useCustomMutationParams<TVariables>,\n        unknown\n    >(\n        ({\n            url,\n            method,\n            values,\n            metaData,\n            dataProviderName,\n            config,\n        }: useCustomMutationParams<TVariables>) => {\n            const { custom } = dataProvider(dataProviderName);\n\n            if (custom) {\n                return custom<TData>({\n                    url,\n                    method,\n                    payload: values,\n                    metaData,\n                    headers: { ...config?.headers },\n                });\n            }\n\n            throw Error(\"Not implemented custom on data provider.\");\n        },\n        {\n            onSuccess: (\n                data,\n                {\n                    successNotification: successNotificationFromProp,\n                    config,\n                    metaData,\n                },\n            ) => {\n                const notificationConfig =\n                    typeof successNotificationFromProp === \"function\"\n                        ? successNotificationFromProp(data, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : successNotificationFromProp;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (\n                err: TError,\n                {\n                    errorNotification: errorNotificationFromProp,\n                    method,\n                    config,\n                    metaData,\n                },\n            ) => {\n                checkError(err);\n\n                const notificationConfig =\n                    typeof errorNotificationFromProp === \"function\"\n                        ? errorNotificationFromProp(err, {\n                              ...config,\n                              ...metaData,\n                          })\n                        : errorNotificationFromProp;\n\n                handleNotification(notificationConfig, {\n                    key: `${method}-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n            ...mutationOptions,\n        },\n    );\n\n    return mutation;\n};\n","import { useCallback, useContext } from \"react\";\n\nimport { DataContext } from \"@contexts/data\";\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const useDataProvider = (): ((\n    /**\n     * The name of the `data provider` you want to access\n     */\n    dataProviderName?: string,\n) => IDataContextProvider) => {\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\n\n    const handleDataProvider = useCallback(\n        (dataProviderName?: string) => {\n            if (dataProviderName) {\n                const dataProvider = context[dataProviderName];\n                if (!dataProvider) {\n                    throw new Error(\n                        `\"${dataProviderName}\" Data provider not found`,\n                    );\n                }\n                return context[dataProviderName];\n            }\n            if (context.default) {\n                return context.default;\n            } else\n                throw new Error(\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\n                );\n        },\n        [context],\n    );\n\n    return handleDataProvider;\n};\n","import React from \"react\";\nimport { ReactNode } from \"react\";\n\nimport {\n    IDataContextProvider,\n    IDataMultipleContextProvider,\n} from \"../../interfaces\";\n\nexport const defaultDataProvider = () => {\n    return {\n        default: {\n            create: () => Promise.resolve({ data: { id: 1 } }),\n            createMany: () => Promise.resolve({ data: [] }),\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\n            deleteMany: () => Promise.resolve({ data: [] }),\n            getList: () => Promise.resolve({ data: [], total: 0 }),\n            getMany: () => Promise.resolve({ data: [] }),\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\n            update: () => Promise.resolve({ data: { id: 1 } }),\n            updateMany: () => Promise.resolve({ data: [] }),\n            custom: () => Promise.resolve({ data: {} }),\n            getApiUrl: () => \"\",\n        },\n    };\n};\n\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\n    defaultDataProvider() as IDataMultipleContextProvider,\n);\n\nexport const DataContextProvider: React.FC<\n    | IDataMultipleContextProvider\n    | (IDataContextProvider & {\n          children: ReactNode;\n      })\n> = ({ children, ...rest }) => {\n    let dataProviders;\n    if (!rest.getList || !rest.getOne) {\n        dataProviders = rest as IDataMultipleContextProvider;\n    } else {\n        dataProviders = {\n            default: rest,\n        } as IDataMultipleContextProvider;\n    }\n    return (\n        <DataContext.Provider value={dataProviders}>\n            {children}\n        </DataContext.Provider>\n    );\n};\n","import {\n    useInfiniteQuery,\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverResult,\n} from \"@tanstack/react-query\";\nimport {\n    CrudFilters,\n    Pagination,\n    BaseRecord,\n    HttpError,\n    CrudSorting,\n    MetaDataQuery,\n    SuccessErrorNotification,\n    LiveModeProps,\n    GetListResponse,\n} from \"../../interfaces\";\nimport {\n    useResource,\n    useCheckError,\n    useHandleNotification,\n    useResourceSubscription,\n    useTranslate,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    queryKeys,\n    pickDataProvider,\n    getNextPageParam,\n    getPreviousPageParam,\n} from \"@definitions/helpers\";\n\nexport interface UseInfiniteListConfig {\n    pagination?: Pagination;\n    hasPagination?: boolean;\n    sort?: CrudSorting;\n    filters?: CrudFilters;\n}\n\nexport type UseInfiniteListProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Configuration for pagination, sorting and filtering\n     * @type [`useInfiniteListConfig`](/docs/api-reference/core/hooks/data/useInfiniteList/#config-parameters)\n     */\n    config?: UseInfiniteListConfig;\n    /**\n     * react-query's [useInfiniteQuery](https://tanstack.com/query/v4/docs/react/reference/useInfiniteQuery) options,\n     */\n    queryOptions?: UseInfiniteQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\n/**\n * `useInfiniteList` is a modified version of `react-query`'s {@link https://tanstack.com/query/latest/docs/react/guides/infinite-queries `useInfiniteQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\n *\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\n *\n * @see {@link https://refine.dev/docs/core/hooks/data/useInfiniteList} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\n *\n */\nexport const useInfiniteList = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource,\n    config,\n    queryOptions,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    dataProviderName,\n}: UseInfiniteListProps<TData, TError>): InfiniteQueryObserverResult<\n    GetListResponse<TData>,\n    TError\n> => {\n    const { resources } = useResource();\n    const dataProvider = useDataProvider();\n    const queryKey = queryKeys(\n        resource,\n        pickDataProvider(resource, dataProviderName, resources),\n        metaData,\n    );\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const translate = useTranslate();\n    const { mutate: checkError } = useCheckError();\n    const handleNotification = useHandleNotification();\n\n    const isEnabled =\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\n\n    useResourceSubscription({\n        resource,\n        types: [\"*\"],\n        params: {\n            metaData,\n            pagination: config?.pagination,\n            hasPagination: config?.hasPagination,\n            sort: config?.sort,\n            filters: config?.filters,\n            subscriptionType: \"useList\",\n            ...liveParams,\n        },\n        channel: `resources/${resource}`,\n        enabled: isEnabled,\n        liveMode,\n        onLiveEvent,\n    });\n\n    const queryResponse = useInfiniteQuery<GetListResponse<TData>, TError>(\n        queryKey.list(config),\n        ({ queryKey, pageParam, signal }) => {\n            const { hasPagination, ...restConfig } = config || {};\n            const pagination = {\n                ...config?.pagination,\n                current: pageParam,\n            };\n\n            return getList<TData>({\n                resource,\n                ...restConfig,\n                pagination,\n                hasPagination,\n                metaData: {\n                    ...metaData,\n                    queryContext: {\n                        queryKey,\n                        pageParam,\n                        signal,\n                    },\n                },\n            }).then(({ data, total, ...rest }) => {\n                return {\n                    data,\n                    total,\n                    pagination,\n                    ...rest,\n                };\n            });\n        },\n        {\n            getNextPageParam: (lastPage) => getNextPageParam(lastPage),\n            getPreviousPageParam: (lastPage) => getPreviousPageParam(lastPage),\n            ...queryOptions,\n            onSuccess: (data) => {\n                queryOptions?.onSuccess?.(data);\n\n                const notificationConfig =\n                    typeof successNotification === \"function\"\n                        ? successNotification(\n                              data,\n                              { metaData, config },\n                              resource,\n                          )\n                        : successNotification;\n\n                handleNotification(notificationConfig);\n            },\n            onError: (err: TError) => {\n                checkError(err);\n                queryOptions?.onError?.(err);\n\n                const notificationConfig =\n                    typeof errorNotification === \"function\"\n                        ? errorNotification(err, { metaData, config }, resource)\n                        : errorNotification;\n\n                handleNotification(notificationConfig, {\n                    key: `${resource}-useInfiniteList-notification`,\n                    message: translate(\n                        \"notifications.error\",\n                        { statusCode: err.statusCode },\n                        `Error (status code: ${err.statusCode})`,\n                    ),\n                    description: err.message,\n                    type: \"error\",\n                });\n            },\n        },\n    );\n\n    return queryResponse;\n};\n","import { useContext, useEffect } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    IRefineContext,\n    LiveEvent,\n    LiveModeProps,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { queryKeys } from \"@definitions\";\n\nexport type UseResourceSubscriptionProps = {\n    channel: string;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\n        [key: string]: any;\n    };\n    types: LiveEvent[\"type\"][];\n    resource: string;\n    enabled?: boolean;\n} & LiveModeProps;\n\nexport type PublishType = {\n    (event: LiveEvent): void;\n};\n\nexport const useResourceSubscription = ({\n    resource,\n    params,\n    channel,\n    types,\n    enabled = true,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n}: UseResourceSubscriptionProps): void => {\n    const queryClient = useQueryClient();\n    const queryKey = queryKeys(resource);\n\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n    const {\n        liveMode: liveModeFromContext,\n        onLiveEvent: onLiveEventContextCallback,\n    } = useContext<IRefineContext>(RefineContext);\n\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (liveMode && liveMode !== \"off\" && enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params: {\n                    resource,\n                    ...params,\n                },\n                types,\n                callback: (event) => {\n                    if (liveMode === \"auto\") {\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                    }\n\n                    onLiveEvent?.(event);\n                    onLiveEventContextCallback?.(event);\n                },\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import React from \"react\";\n\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\n\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\n\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\n    liveProvider,\n    children,\n}) => {\n    return (\n        <LiveContext.Provider value={liveProvider}>\n            {children}\n        </LiveContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useLiveMode = (\n    liveMode: LiveModeProps[\"liveMode\"],\n): LiveModeProps[\"liveMode\"] => {\n    const { liveMode: liveModeFromContext } =\n        useContext<IRefineContext>(RefineContext);\n\n    return liveMode ?? liveModeFromContext;\n};\n","import { useContext, useEffect } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport {\n    BaseKey,\n    CrudFilters,\n    CrudSorting,\n    ILiveContext,\n    LiveEvent,\n    MetaDataQuery,\n    Pagination,\n} from \"../../../interfaces\";\n\nexport type UseSubscriptionProps = {\n    /**\n     * Channel name to subscribe.\n     */\n    channel: string;\n    /**\n     * Callback that is run when new events from subscription arrive.\n     */\n    onLiveEvent: (event: LiveEvent) => void;\n    /**\n     * Type of events to subscribe. `\"*\"` means all events.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    types?: LiveEvent[\"type\"][];\n    /**\n     * Determines subscription should subscribe or not.\n     * @type Array<\"deleted\" | \"updated\" | \"created\" | \"*\" | string>\n     */\n    enabled?: boolean;\n    params?: {\n        ids?: BaseKey[];\n        id?: BaseKey;\n        metaData?: MetaDataQuery;\n        pagination?: Pagination;\n        hasPagination?: boolean;\n        sort?: CrudSorting;\n        filters?: CrudFilters;\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\n        resource?: string;\n        [key: string]: any;\n    };\n};\n\nexport const useSubscription = ({\n    params,\n    channel,\n    types = [\"*\"],\n    enabled = true,\n    onLiveEvent,\n}: UseSubscriptionProps): void => {\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (enabled) {\n            subscription = liveDataContext?.subscribe({\n                channel,\n                params,\n                types,\n                callback: onLiveEvent,\n            });\n        }\n\n        return () => {\n            if (subscription) {\n                liveDataContext?.unsubscribe(subscription);\n            }\n        };\n    }, [enabled]);\n};\n","import { useContext } from \"react\";\n\nimport { LiveContext } from \"@contexts/live\";\nimport { ILiveContext } from \"../../../interfaces\";\n\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\n    const liveContext = useContext<ILiveContext>(LiveContext);\n\n    return liveContext?.publish;\n};\n","import { useContext } from \"react\";\n\nimport { ResourceContext } from \"@contexts/resource\";\nimport {\n    BaseKey,\n    IResourceItem,\n    ResourceRouterParams,\n    RouteAction,\n} from \"../../../interfaces\";\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\n\nexport type UseResourcePropsType = {\n    /**\n     * Determines which resource to use for redirection\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    resourceName?: string;\n    /**\n     * Determines which resource to use for redirection\n     * @default Resource name that it reads from route\n     */\n    resourceNameOrRouteName?: string;\n    /**\n     * Adds id to the end of the URL\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618\n     */\n    recordItemId?: BaseKey;\n};\n\ntype UseResourceReturnType = {\n    resources: IResourceItem[];\n    resource: IResourceItem;\n    resourceName: string;\n    id?: BaseKey;\n    action: RouteAction;\n};\n\n/**\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\n *\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\n */\nexport const useResource = ({\n    resourceName: propResourceName,\n    resourceNameOrRouteName,\n    recordItemId,\n}: UseResourcePropsType = {}): UseResourceReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const { useParams } = useRouterContext();\n\n    const params = useParams<ResourceRouterParams>();\n\n    const resource = resourceWithRoute(\n        resourceNameOrRouteName ?? params.resource,\n    );\n\n    const resourceName = propResourceName ?? resource.name;\n\n    const id = recordItemId ?? params.id;\n\n    return { resources, resource, resourceName, id, action: params.action };\n};\n","import React, { ReactNode } from \"react\";\n\nimport { IResourceContext } from \"./IResourceContext\";\n\nexport {\n    IResourceItem,\n    IResourceComponents,\n    IResourceComponentsProps,\n    IResourceContext,\n} from \"./IResourceContext\";\n\nexport const ResourceContext = React.createContext<IResourceContext>({\n    resources: [],\n});\n\nexport const ResourceContextProvider: React.FC<\n    IResourceContext & { children: ReactNode }\n> = ({ resources, children }) => {\n    return (\n        <ResourceContext.Provider value={{ resources }}>\n            {children}\n        </ResourceContext.Provider>\n    );\n};\n","import { useContext, useCallback } from \"react\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { IResourceItem } from \"../../../interfaces\";\n\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\n\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\n    const { resources } = useContext(ResourceContext);\n\n    const resourceWithRoute = useCallback(\n        (route: string) => {\n            const resource = resources.find((p) => p.route === route);\n\n            if (!resource) {\n                const resourceWithName = resources.find(\n                    (p) => p.name === route,\n                );\n                return (\n                    resourceWithName ??\n                    ({ name: route, route: route } as IResourceItem)\n                );\n            }\n            return resource;\n        },\n        [resources],\n    );\n\n    return resourceWithRoute;\n};\n","import { useContext } from \"react\";\n\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\n\nexport type UseCancelNotificationType = () => {\n    notifications: IUndoableQueue[];\n    notificationDispatch: React.Dispatch<any>;\n};\n\nexport const useCancelNotification: UseCancelNotificationType = () => {\n    const { notifications, notificationDispatch } =\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\n\n    return { notifications, notificationDispatch };\n};\n","import { useContext } from \"react\";\n\nimport { NotificationContext } from \"@contexts/notification\";\nimport { INotificationContext } from \"../../../interfaces\";\n\nexport const useNotification = (): INotificationContext => {\n    const { open, close } = useContext(NotificationContext);\n\n    return { open, close };\n};\n","import React, { createContext } from \"react\";\n\nimport { INotificationContext } from \"./INotificationContext\";\n\n/** @deprecated default value for notification context has no use and is an empty object.  */\nexport const defaultNotificationProvider: INotificationContext = {};\n\nexport const NotificationContext = createContext<INotificationContext>({});\n\nexport const NotificationContextProvider: React.FC<\n    INotificationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ open, close, children }) => {\n    return (\n        <NotificationContext.Provider value={{ open, close }}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n","import { useCallback } from \"react\";\n\nimport { OpenNotificationParams } from \"../../../interfaces\";\nimport { useNotification } from \"@hooks\";\n\nexport const useHandleNotification = (): typeof handleNotification => {\n    const { open } = useNotification();\n\n    const handleNotification = useCallback(\n        (\n            notification: OpenNotificationParams | false | undefined,\n            fallbackNotification?: OpenNotificationParams,\n        ) => {\n            if (notification !== false) {\n                if (notification) {\n                    open?.(notification);\n                } else if (fallbackNotification) {\n                    open?.(fallbackNotification);\n                }\n            }\n        },\n        [],\n    );\n\n    return handleNotification;\n};\n","import { useCallback, useContext } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\n * It returns the changeLocale method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\n */\nexport const useSetLocale = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\n};\n","import React from \"react\";\n\nimport { ITranslationContext } from \"../../interfaces\";\n\n/** @deprecated default value for translation context has no use and is an empty object.  */\nexport const defaultProvider: ITranslationContext = {};\n\nexport const TranslationContext = React.createContext<ITranslationContext>({});\n\nexport const TranslationContextProvider: React.FC<\n    ITranslationContext & {\n        children?: React.ReactNode;\n    }\n> = ({ children, i18nProvider }) => {\n    return (\n        <TranslationContext.Provider\n            value={{\n                i18nProvider: i18nProvider,\n            }}\n        >\n            {children}\n        </TranslationContext.Provider>\n    );\n};\n","import { useContext, useMemo } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\n/**\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\n * It returns the translate method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\n */\nexport const useTranslate = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const fn = useMemo(() => {\n        function translate(\n            key: string,\n            options?: any,\n            defaultMessage?: string,\n        ): string;\n        function translate(key: string, defaultMessage?: string): string;\n\n        function translate(\n            key: string,\n            options?: string | any,\n            defaultMessage?: string,\n        ) {\n            return (\n                i18nProvider?.translate(key, options, defaultMessage) ??\n                defaultMessage ??\n                (typeof options === \"string\" &&\n                typeof defaultMessage === \"undefined\"\n                    ? options\n                    : key)\n            );\n        }\n\n        return translate;\n    }, [i18nProvider]);\n\n    return fn;\n};\n","import { useContext, useCallback } from \"react\";\nimport { TranslationContext } from \"@contexts/translation\";\n\nexport type UseGetLocaleType = () => () => string | undefined;\n\n/**\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\n * It returns the `getLocale` method from `i18nProvider` under the hood.\n *\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\n */\nexport const useGetLocale: UseGetLocaleType = () => {\n    const { i18nProvider } = useContext(TranslationContext);\n\n    return useCallback(() => i18nProvider?.getLocale(), []);\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseMutationModeType = () => {\n    mutationMode: IRefineContextOptions[\"mutationMode\"];\n    undoableTimeout: IRefineContextOptions[\"undoableTimeout\"];\n};\n\n/**\n * Mutation mode determines which mode the mutation runs with.\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\n * Each mode corresponds to a different type of user experience.\n *\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\n */\nexport const useMutationMode: UseMutationModeType = () => {\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\n\n    return { mutationMode, undoableTimeout };\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\nimport {\n    IRefineContextOptions,\n    IUnsavedWarnContext,\n} from \"../../../interfaces\";\n\ntype UseWarnAboutChangeType = () => {\n    warnWhenUnsavedChanges: IRefineContextOptions[\"warnWhenUnsavedChanges\"];\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\n};\n\n/**\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\n */\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\n\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\n\n    return {\n        warnWhenUnsavedChanges,\n        warnWhen: Boolean(warnWhen),\n        setWarnWhen: setWarnWhen ?? (() => undefined),\n    };\n};\n","import React, { ReactNode, useState } from \"react\";\n\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\n\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\n\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\n    children,\n}) => {\n    const [warnWhen, setWarnWhen] = useState(false);\n\n    return (\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\n            {children}\n        </UnsavedWarnContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\nimport { IRefineContextOptions } from \"../../interfaces\";\n\ntype UseSyncWithLocationType = () => {\n    syncWithLocation: IRefineContextOptions[\"syncWithLocation\"];\n};\n\n/**\n * List query parameter values can be edited manually by typing directly in the URL.\n * To activate this feature `syncWithLocation` needs to be set to `true`.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\n */\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\n    const { syncWithLocation } = useContext(RefineContext);\n\n    return { syncWithLocation };\n};\n","import { useContext } from \"react\";\nimport { RefineContext } from \"@contexts/refine\";\nimport { TitleProps } from \"../../interfaces\";\n\n/**\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\n * In this way, it becomes easier for us to access this component in various parts of the application.\n *\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\n */\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\n    const { Title } = useContext(RefineContext);\n\n    return Title;\n};\n","import { useContext } from \"react\";\n\nimport { RefineContext } from \"@contexts/refine\";\n\nexport const useRefineContext = () => {\n    const {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    } = useContext(RefineContext);\n\n    return {\n        Footer,\n        Header,\n        Layout,\n        OffLayoutArea,\n        Sider,\n        Title,\n        hasDashboard,\n        mutationMode,\n        syncWithLocation,\n        undoableTimeout,\n        warnWhenUnsavedChanges,\n        DashboardPage,\n        LoginPage,\n        catchAll,\n        options,\n    };\n};\n","import { useState } from \"react\";\nimport {\n    useResource,\n    useResourceWithRoute,\n    useRouterContext,\n    useDataProvider,\n} from \"@hooks\";\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    MapDataFn,\n    CrudSorting,\n    CrudFilters,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { userFriendlyResourceName, pickDataProvider } from \"@definitions\";\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\n\ntype UseExportOptionsType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents\n     */\n    mapData?: MapDataFn<TData, TVariables>;\n    /**\n     *  Sorts records\n     */\n    sorter?: CrudSorting;\n    /**\n     *  Filters records\n     */\n    filters?: CrudFilters;\n    maxItemCount?: number;\n    /**\n     *  Requests to fetch data are made as batches by page size. By default, it is 20. Used for `getList` method of `DataProvider`\n     */\n    pageSize?: number;\n    /**\n     *  Used for exporting options\n     *  @type [Options](https://github.com/alexcaza/export-to-csv)\n     */\n    exportOptions?: Options;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     *  Callback to handle error events of this hook\n     */\n    onError?: (error: any) => void;\n};\n\ntype UseExportReturnType = {\n    isLoading: boolean;\n    triggerExport: () => Promise<void>;\n};\n\n/**\n * `useExport` hook allows you to make your resources exportable.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TVariables - Values for params.\n *\n */\nexport const useExport = <\n    TData extends BaseRecord = BaseRecord,\n    TVariables = any,\n>({\n    resourceName,\n    sorter,\n    filters,\n    maxItemCount,\n    pageSize = 20,\n    mapData = (item) => item as any,\n    exportOptions,\n    metaData,\n    dataProviderName,\n    onError,\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const { resources } = useResource();\n\n    const resourceWithRoute = useResourceWithRoute();\n    const dataProvider = useDataProvider();\n\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    let { name: resource } = resourceWithRoute(routeResourceName);\n\n    if (resourceName) {\n        resource = resourceName;\n    }\n\n    const filename = `${userFriendlyResourceName(\n        resource,\n        \"plural\",\n    )}-${new Date().toLocaleString()}`;\n\n    const { getList } = dataProvider(\n        pickDataProvider(resource, dataProviderName, resources),\n    );\n\n    const triggerExport = async () => {\n        setIsLoading(true);\n\n        let rawData: BaseRecord[] = [];\n\n        let current = 1;\n        let preparingData = true;\n        while (preparingData) {\n            try {\n                const { data, total } = await getList<TData>({\n                    resource,\n                    filters,\n                    sort: sorter,\n                    pagination: {\n                        current,\n                        pageSize,\n                    },\n                    metaData,\n                });\n\n                current++;\n\n                rawData.push(...data);\n\n                if (maxItemCount && rawData.length >= maxItemCount) {\n                    rawData = rawData.slice(0, maxItemCount);\n                    preparingData = false;\n                }\n\n                if (total === rawData.length) {\n                    preparingData = false;\n                }\n            } catch (error) {\n                setIsLoading(false);\n                preparingData = false;\n\n                onError?.(error);\n\n                return;\n            }\n        }\n\n        const csvExporter = new ExportToCsv({\n            filename,\n            useKeysAsHeaders: true,\n            ...exportOptions,\n        });\n\n        csvExporter.generateCsv(rawData.map(mapData as any));\n\n        setIsLoading(false);\n    };\n\n    return {\n        isLoading,\n        triggerExport,\n    };\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport {\n    useResourceWithRoute,\n    useRouterContext,\n    useWarnAboutChange,\n    useCreate,\n    useUpdate,\n    useRedirectionAfterSubmission,\n    useMutationMode,\n    useOne,\n    useRefineContext,\n} from \"@hooks\";\n\nimport {\n    BaseRecord,\n    CreateResponse,\n    GetOneResponse,\n    HttpError,\n    LiveModeProps,\n    ResourceRouterParams,\n    RedirectAction,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    UpdateResponse,\n    MutationMode,\n    BaseKey,\n    IQueryKeys,\n    FormAction,\n} from \"../../interfaces\";\nimport {\n    UpdateParams,\n    UseUpdateProps,\n    UseUpdateReturnType,\n} from \"../data/useUpdate\";\nimport { UseCreateProps, UseCreateReturnType } from \"../data/useCreate\";\nimport { redirectPage } from \"@definitions/helpers\";\n\nexport type ActionParams = {\n    /**\n     * Type of the form mode\n     * @default Action that it reads from route otherwise \"create\" is used\n     */\n    action?: FormAction;\n};\n\ntype ActionFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Record id for fetching\n     * @default Id that it reads from the URL\n     */\n    id?: BaseKey;\n    /**\n     * Page to redirect after a succesfull mutation\n     * @type `\"show\" | \"edit\" | \"list\" | \"create\" | false`\n     * @default `\"list\"`\n     */\n    redirect?: RedirectAction;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * [Determines when mutations are executed](/advanced-tutorials/mutation-mode.md)\n     * @default `\"pessimistic\"*`\n     */\n    mutationMode?: MutationMode;\n    /**\n     * Called when a mutation is successful\n     */\n    onMutationSuccess?: (\n        data: CreateResponse<TData> | UpdateResponse<TData>,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Called when a mutation encounters an error\n     */\n    onMutationError?: (\n        error: TError,\n        variables: TVariables,\n        context: any,\n    ) => void;\n    /**\n     * Duration to wait before executing mutations when `mutationMode = \"undoable\"`\n     * @default `5000*`\n     */\n    undoableTimeout?: number;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n    /**\n     * You can use it to manage the invalidations that will occur at the end of the mutation.\n     * @type  `all`, `resourceAll`, `list`, `many`, `detail`, `false`\n     * @default `[\"list\", \"many\", \"detail\"]`\n     */\n    invalidates?: Array<keyof IQueryKeys>;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options of useOne hook used while in edit mode.\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useCreate hook used while submitting in create and clone modes.\n     */\n    createMutationOptions?: UseCreateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n    /**\n     * react-query's [useMutation](https://tanstack.com/query/v4/docs/reference/useMutation) options of useUpdate hook used while submitting in edit mode.\n     */\n    updateMutationOptions?: UseUpdateProps<\n        TData,\n        TError,\n        TVariables\n    >[\"mutationOptions\"];\n} & SuccessErrorNotification &\n    ActionParams &\n    LiveModeProps;\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = ActionFormProps<TData, TError, TVariables> & ActionParams & LiveModeProps;\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n> = {\n    id?: BaseKey;\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\n\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\n    mutationResult:\n        | UseUpdateReturnType<TData, TError, TVariables>\n        | UseCreateReturnType<TData, TError, TVariables>;\n    formLoading: boolean;\n    onFinish: (\n        values: TVariables,\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\n    redirect: (\n        redirect: RedirectAction,\n        idFromFunction?: BaseKey | undefined,\n    ) => void;\n};\n\n/**\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\n *\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for params. default `{}`\n *\n *\n */\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = {},\n>({\n    resource: resourceFromProps,\n    action: actionFromProps,\n    id: idFromProps,\n    onMutationSuccess,\n    onMutationError,\n    redirect: redirectFromProps,\n    successNotification,\n    errorNotification,\n    metaData,\n    mutationMode: mutationModeProp,\n    liveMode,\n    onLiveEvent,\n    liveParams,\n    undoableTimeout,\n    dataProviderName,\n    invalidates,\n    queryOptions,\n    createMutationOptions,\n    updateMutationOptions,\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables\n> => {\n    const { options } = useRefineContext();\n    const { useParams } = useRouterContext();\n    const {\n        resource: resourceFromRoute,\n        action: actionFromRoute,\n        id: idFromParams,\n    } = useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProps || resourceFromProps === resourceFromRoute\n            ? idFromProps ?? idFromParams\n            : idFromProps;\n\n    // id state is needed to determine selected record in a context for example useModal\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== id) {\n            setId(idFromProps);\n        }\n    }, [idFromProps]);\n\n    const resourceName = resourceFromProps ?? resourceFromRoute;\n    const action =\n        actionFromProps ??\n        (actionFromRoute === \"show\" ? \"create\" : actionFromRoute) ??\n        \"create\";\n\n    const resourceWithRoute = useResourceWithRoute();\n    const resource = resourceWithRoute(resourceName);\n\n    const { mutationMode: mutationModeContext } = useMutationMode();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n\n    const isCreate = action === \"create\";\n    const isEdit = action === \"edit\";\n    const isClone = action === \"clone\";\n\n    const redirect = redirectPage({\n        redirectFromProps,\n        action,\n        redirectOptions: options.redirect,\n    });\n\n    const enableQuery = id !== undefined && (isEdit || isClone);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: id ?? \"\",\n        queryOptions: {\n            enabled: enableQuery,\n            ...queryOptions,\n        },\n        liveMode,\n        onLiveEvent,\n        liveParams,\n        metaData,\n        dataProviderName,\n    });\n\n    const { isFetching: isFetchingQuery } = queryResult;\n\n    const mutationResultCreate = useCreate<TData, TError, TVariables>({\n        mutationOptions: createMutationOptions,\n    });\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\n        mutationResultCreate;\n\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>({\n        mutationOptions: updateMutationOptions,\n    });\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\n        mutationResultUpdate;\n\n    const { setWarnWhen } = useWarnAboutChange();\n\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\n\n    const onFinishCreate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const onSuccess = (id?: BaseKey) => {\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return mutateCreate(\n                {\n                    values,\n                    resource: resource.name,\n                    successNotification,\n                    errorNotification,\n                    metaData,\n                    dataProviderName,\n                    invalidates,\n                },\n                {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        const responseId = data?.data?.id;\n\n                        onSuccess(responseId);\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                },\n            );\n        });\n    };\n\n    const onFinishUpdate = async (values: TVariables) => {\n        setWarnWhen(false);\n\n        const variables: UpdateParams<TVariables> = {\n            id: id ?? \"\",\n            values,\n            resource: resource.name,\n            mutationMode,\n            undoableTimeout,\n            successNotification,\n            errorNotification,\n            metaData,\n            dataProviderName,\n            invalidates,\n        };\n\n        const onSuccess = () => {\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\n            setId(defaultId);\n            handleSubmitWithRedirect({\n                redirect,\n                resource,\n                id,\n            });\n        };\n\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\n        if (mutationMode !== \"pessimistic\") {\n            setTimeout(() => {\n                onSuccess();\n            });\n        }\n\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\n            if (mutationMode !== \"pessimistic\") {\n                resolve();\n            }\n            return setTimeout(() => {\n                mutateUpdate(variables, {\n                    onSuccess: (data, _, context) => {\n                        if (onMutationSuccess) {\n                            onMutationSuccess(data, values, context);\n                        }\n\n                        if (mutationMode === \"pessimistic\") {\n                            onSuccess();\n                        }\n\n                        resolve(data);\n                    },\n                    onError: (error: TError, _, context) => {\n                        if (onMutationError) {\n                            return onMutationError(error, values, context);\n                        }\n                        reject();\n                    },\n                });\n            });\n        });\n    };\n\n    const createResult = {\n        formLoading: isFetchingQuery || isLoadingCreate,\n        mutationResult: mutationResultCreate,\n        onFinish: onFinishCreate,\n    };\n\n    const editResult = {\n        formLoading: isFetchingQuery || isLoadingUpdate,\n        mutationResult: mutationResultUpdate,\n        onFinish: onFinishUpdate,\n    };\n\n    const result = isCreate || isClone ? createResult : editResult;\n\n    return {\n        ...result,\n        queryResult,\n        id,\n        setId,\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\n            handleSubmitWithRedirect({\n                redirect:\n                    redirect !== undefined\n                        ? redirect\n                        : isEdit\n                        ? \"list\"\n                        : \"edit\",\n                resource,\n                id: idFromFunction ?? id,\n            });\n        },\n    };\n};\n","import { useCallback } from \"react\";\n\nimport { BaseKey, IResourceItem, RedirectAction } from \"../../interfaces\";\nimport { useNavigation } from \"@hooks\";\n\nexport type UseRedirectionAfterSubmissionType = () => (options: {\n    redirect: RedirectAction;\n    resource: IResourceItem;\n    id?: BaseKey;\n}) => void;\n\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\n    () => {\n        const { show, edit, list, create } = useNavigation();\n\n        const handleSubmitWithRedirect = useCallback(\n            ({\n                redirect,\n                resource,\n                id,\n            }: {\n                redirect: RedirectAction;\n                resource: IResourceItem;\n                id?: BaseKey;\n            }) => {\n                if (redirect && resource.route) {\n                    if (resource.canShow && redirect === \"show\" && id) {\n                        return show(resource.route, id);\n                    }\n\n                    if (resource.canEdit && redirect === \"edit\" && id) {\n                        return edit(resource.route, id);\n                    }\n\n                    if (resource.canCreate && redirect === \"create\") {\n                        return create(resource.route);\n                    }\n\n                    return list(resource.route, \"push\");\n                } else {\n                    return;\n                }\n            },\n            [],\n        );\n\n        return handleSubmitWithRedirect;\n    };\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\nimport { BaseKey } from \"../../interfaces\";\n\nexport type HistoryType = \"push\" | \"replace\";\n\n/**\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\n * It allows you to manage your routing operations in refine.\n * Using this hook, you can manage all the routing operations of your application very easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\n */\nexport const useNavigation = () => {\n    const { useHistory } = useRouterContext();\n    const history = useHistory();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\n        type === \"push\" ? history.push(url) : history.replace(url);\n    };\n\n    const createUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}/create`;\n    };\n\n    const editUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n\n        return `/${resourceName.route}/edit/${encodedId}`;\n    };\n\n    const cloneUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/clone/${encodedId}`;\n    };\n\n    const showUrl = (resource: string, id: BaseKey) => {\n        const resourceName = resourceWithRoute(resource);\n        const encodedId = encodeURIComponent(id);\n        return `/${resourceName.route}/show/${encodedId}`;\n    };\n\n    const listUrl = (resource: string) => {\n        const resourceName = resourceWithRoute(resource);\n        return `/${resourceName.route}`;\n    };\n\n    const create = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(createUrl(resource), type);\n    };\n\n    const edit = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(editUrl(resource, id), type);\n    };\n\n    const clone = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(cloneUrl(resource, id), type);\n    };\n\n    const show = (\n        resource: string,\n        id: BaseKey,\n        type: HistoryType = \"push\",\n    ) => {\n        handleUrl(showUrl(resource, id), type);\n    };\n\n    const list = (resource: string, type: HistoryType = \"push\") => {\n        handleUrl(listUrl(resource), type);\n    };\n\n    const push = (path: string, ...rest: unknown[]) => {\n        history.push(path, ...rest);\n    };\n\n    const replace = (path: string, ...rest: unknown[]) => {\n        history.replace(path, ...rest);\n    };\n\n    const goBack = () => {\n        history.goBack();\n    };\n\n    return {\n        create,\n        createUrl,\n        edit,\n        editUrl,\n        clone,\n        cloneUrl,\n        show,\n        showUrl,\n        list,\n        listUrl,\n        push,\n        replace,\n        goBack,\n    };\n};\n","import React, { useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\n\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    GetOneResponse,\n    SuccessErrorNotification,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    HttpError,\n} from \"../../interfaces\";\n\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\n    showId?: BaseKey;\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\n};\n\nexport type useShowProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    /**\n     * Resource name for API data interactions\n     * @default Reads `:resource` from the URL\n     */\n    resource?: string;\n    /**\n     * Data item ID for API data interactions\n     * @default Reads `:id` from the URL\n     */\n    id?: BaseKey;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\n    /**\n     * Additional meta data to pass to the data provider's `getOne`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * Target data provider name for API call to be made\n     * @default `\"default\"`\n     */\n    dataProviderName?: string;\n} & LiveModeProps &\n    SuccessErrorNotification;\n\n/**\n * `useShow` hook allows you to fetch the desired record.\n * It uses `getOne` method as query function from the dataProvider that is\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\n *\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\n */\nexport const useShow = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    resource: resourceFromProp,\n    id,\n    successNotification,\n    errorNotification,\n    metaData,\n    liveMode,\n    onLiveEvent,\n    dataProviderName,\n    queryOptions,\n}: useShowProps<TData, TError> = {}): useShowReturnType<TData> => {\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName, id: idFromRoute } =\n        useParams<ResourceRouterParams>();\n\n    const defaultId =\n        !resourceFromProp || resourceFromProp === routeResourceName\n            ? id ?? idFromRoute\n            : id;\n\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\n\n    React.useEffect(() => {\n        if (defaultId !== showId) {\n            setShowId(defaultId);\n        }\n    }, [defaultId]);\n\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const queryResult = useOne<TData>({\n        resource: resource.name,\n        id: showId ?? \"\",\n        queryOptions: {\n            enabled: showId !== undefined,\n            ...queryOptions,\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    return {\n        queryResult,\n        showId,\n        setShowId,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { parse, ParseConfig } from \"papaparse\";\nimport chunk from \"lodash/chunk\";\n\nimport {\n    useCreate,\n    useCreateMany,\n    useResourceWithRoute,\n    useRouterContext,\n} from \"@hooks\";\nimport {\n    MapDataFn,\n    BaseRecord,\n    HttpError,\n    ResourceRouterParams,\n    MetaDataQuery,\n} from \"../../interfaces\";\nimport { importCSVMapper, sequentialPromises } from \"@definitions\";\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\n\nexport type ImportSuccessResult<TVariables, TData> = {\n    request: TVariables[];\n    type: \"success\";\n    response: TData[];\n};\n\nexport type ImportErrorResult<TVariables> = {\n    request: TVariables[];\n    type: \"error\";\n    response: HttpError[];\n};\n\nexport type OnFinishParams<TVariables, TData> = {\n    succeeded: ImportSuccessResult<TVariables, TData>[];\n    errored: ImportErrorResult<TVariables>[];\n};\n\nexport type OnProgressParams = {\n    totalAmount: number;\n    processedAmount: number;\n};\n\nexport type ImportOptions<\n    TItem,\n    TVariables = any,\n    TData extends BaseRecord = BaseRecord,\n> = {\n    /**\n     * Resource name for API data interactions.\n     * @default Resource name that it reads from route\n     */\n    resourceName?: string;\n    /**\n     * A mapping function that runs for every record. Mapped data will be included in the file contents.\n     */\n    mapData?: MapDataFn<TItem, TVariables>;\n    /**\n     * Custom Papa Parse options.\n     * @type [`ParseConfig`](https://www.papaparse.com/docs)\n     */\n    paparseOptions?: ParseConfig;\n    /**\n     * Requests batch size. If it is 1, all records are sent one by one. By default, it is [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to send all records in one batch. If it is more than 1, `createMany` should be implemented on DataProvider.\n     */\n    batchSize?: number;\n    /**\n     * Called with errors and successful responses when all requests are sent.\n     */\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\n    /**\n     *  Metadata query for `dataProvider`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     *  A callback function that returns a current state of uploading process.\n     *\n     *  Ex: `percentage = onProgressParams.processedAmount / onProgressParams.totalAmount * 100`\n     */\n    onProgress?: (onProgressParams: OnProgressParams) => void;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n};\n\nexport type CreatedValuesType<TVariables, TData> =\n    | ImportSuccessResult<TVariables, TData>\n    | ImportErrorResult<TVariables>;\n\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\n    file: Partial<File>;\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\n\nexport type UseImportInputPropsType = {\n    type: \"file\";\n    accept: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type UseImportReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TVariables = {},\n    TError extends HttpError = HttpError,\n> = {\n    inputProps: UseImportInputPropsType;\n    mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n    isLoading: boolean;\n    handleChange: HandleChangeType<TVariables, TData>;\n};\n\n/**\n * `useImport` hook allows you to handle your csv import logic easily.\n *\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\n *\n * @typeParam TItem - Interface of parsed csv data\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\n * @typeParam TVariables - Values for mutation function\n *\n */\nexport const useImport = <\n    TItem = any,\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables = any,\n>({\n    resourceName,\n    mapData = (item) => item as unknown as TVariables,\n    paparseOptions,\n    batchSize = Number.MAX_SAFE_INTEGER,\n    onFinish,\n    metaData,\n    onProgress,\n    dataProviderName,\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\n    TData,\n    TVariables,\n    TError\n> => {\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\n    const [totalAmount, setTotalAmount] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const resourceWithRoute = useResourceWithRoute();\n    const { useParams } = useRouterContext();\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n    const { name: resource } = resourceWithRoute(\n        resourceName ?? routeResourceName,\n    );\n\n    const createMany = useCreateMany<TData, TError, TVariables>();\n    const create = useCreate<TData, TError, TVariables>();\n\n    let mutationResult:\n        | UseCreateReturnType<TData, TError, TVariables>\n        | UseCreateManyReturnType<TData, TError, TVariables>;\n\n    if (batchSize === 1) {\n        mutationResult = create;\n    } else {\n        mutationResult = createMany;\n    }\n\n    const handleCleanup = () => {\n        setTotalAmount(0);\n        setProcessedAmount(0);\n        setIsLoading(false);\n    };\n\n    const handleFinish = (\n        createdValues: CreatedValuesType<TVariables, TData>[],\n    ) => {\n        const result = {\n            succeeded: createdValues.filter(\n                (item) => item.type === \"success\",\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\n            errored: createdValues.filter(\n                (item) => item.type === \"error\",\n            ) as unknown as ImportErrorResult<TVariables>[],\n        };\n\n        onFinish?.(result);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onProgress?.({ totalAmount, processedAmount });\n    }, [totalAmount, processedAmount]);\n\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\n        handleCleanup();\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\n            (resolve) => {\n                setIsLoading(true);\n                parse(file as any, {\n                    complete: async ({ data }: { data: unknown[][] }) => {\n                        const values = importCSVMapper(data, mapData);\n\n                        setTotalAmount(values.length);\n\n                        if (batchSize === 1) {\n                            // Create Processor Functions\n                            const valueFns = values.map((value) => {\n                                const fn = async () => {\n                                    const response = await create.mutateAsync({\n                                        resource,\n                                        values: value,\n                                        successNotification: false,\n                                        errorNotification: false,\n                                        dataProviderName,\n                                        metaData,\n                                    });\n\n                                    return { response, value };\n                                };\n                                return fn;\n                            });\n                            // Sequentially run processor functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                valueFns,\n                                ({ response, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return currentAmount + 1;\n                                    });\n\n                                    return {\n                                        response: [response.data],\n                                        type: \"success\",\n                                        request: [value],\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: [values[index]],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // Resolve with created values\n                            resolve(createdValues);\n                        } else {\n                            // Create Chunks\n                            const chunks = chunk(values, batchSize);\n                            // Create Chunk Processor Functions\n                            const chunkedFns = chunks.map((chunkedValues) => {\n                                const fn = async () => {\n                                    const response =\n                                        await createMany.mutateAsync({\n                                            resource,\n                                            values: chunkedValues,\n                                            successNotification: false,\n                                            errorNotification: false,\n                                            dataProviderName,\n                                            metaData,\n                                        });\n\n                                    return {\n                                        response,\n                                        value: chunkedValues,\n                                        currentBatchLength:\n                                            chunkedValues.length,\n                                    };\n                                };\n\n                                return fn;\n                            });\n                            // Sequentially run chunked functions and process resolves/rejects\n                            const createdValues = await sequentialPromises(\n                                chunkedFns,\n                                ({ response, currentBatchLength, value }) => {\n                                    setProcessedAmount((currentAmount) => {\n                                        return (\n                                            currentAmount + currentBatchLength\n                                        );\n                                    });\n\n                                    return {\n                                        response: response.data,\n                                        type: \"success\",\n                                        request: value,\n                                    } as ImportSuccessResult<TVariables, TData>;\n                                },\n                                (error: HttpError, index) => {\n                                    return {\n                                        response: [error],\n                                        type: \"error\",\n                                        request: chunks[index],\n                                    } as ImportErrorResult<TVariables>;\n                                },\n                            );\n                            // resolve with all created values\n                            resolve(createdValues);\n                        }\n                    },\n\n                    ...paparseOptions,\n                });\n            },\n        ).then((createdValues) => {\n            handleFinish(createdValues);\n            return createdValues;\n        });\n    };\n\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.files && event.target.files.length > 0) {\n                    handleChange({ file: event.target.files[0] });\n                }\n            },\n        },\n        mutationResult,\n        isLoading,\n        handleChange,\n    };\n};\n","import { useCallback, useState } from \"react\";\n\nexport type useModalReturnType = {\n    visible: boolean;\n    show: () => void;\n    close: () => void;\n};\n\nexport type useModalProps = {\n    /**\n     * Initial state of the modal\n     */\n    defaultVisible?: boolean;\n};\n\nexport const useModal = ({\n    defaultVisible = false,\n}: useModalProps = {}): useModalReturnType => {\n    const [visible, setVisible] = useState(defaultVisible);\n\n    const show = useCallback(() => setVisible(true), [visible]);\n    const close = useCallback(() => setVisible(false), [visible]);\n\n    return {\n        visible,\n        show,\n        close,\n    };\n};\n","import { useContext } from \"react\";\nimport { RouterContext } from \"@contexts/router\";\n\nexport const useRouterContext = () => {\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\n        useContext(RouterContext);\n\n    return {\n        useHistory,\n        useLocation,\n        useParams,\n        Prompt,\n        Link,\n        routes,\n    };\n};\n","import React from \"react\";\n\nimport { IRouterContext } from \"../../interfaces\";\n\nexport const defaultProvider: IRouterContext = {\n    useHistory: () => false,\n    useLocation: () => false,\n    useParams: () => ({} as any),\n    Prompt: () => null,\n    Link: () => null,\n};\n\nexport const RouterContext =\n    React.createContext<IRouterContext>(defaultProvider);\n\nexport const RouterContextProvider: React.FC<\n    IRouterContext & {\n        children?: React.ReactNode;\n    }\n> = ({\n    children,\n    useHistory,\n    useLocation,\n    useParams,\n    Prompt,\n    Link,\n    routes,\n}) => {\n    return (\n        <RouterContext.Provider\n            value={{\n                useHistory,\n                useLocation,\n                useParams,\n                Prompt,\n                Link,\n                routes,\n            }}\n        >\n            {children}\n        </RouterContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\n\nexport type UseCanProps = CanParams & {\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<CanReturnType>;\n};\n\n/**\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\n *\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\n *\n */\nexport const useCan = ({\n    action,\n    resource,\n    params,\n    queryOptions,\n}: UseCanProps): UseQueryResult<CanReturnType> => {\n    const { can } = useContext(AccessControlContext);\n\n    /**\n     * Since `react-query` stringifies the query keys, it will throw an error for a circular dependency if we include `React.ReactNode` elements inside the keys.\n     * The feature in #2220(https://github.com/refinedev/refine/issues/2220) includes such change and to fix this, we need to remove `icon` property in the `resource`\n     */\n    const { resource: _resource, ...paramsRest } = params ?? {};\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n        icon: _icon,\n        list: _list,\n        edit: _edit,\n        create: _create,\n        show: _show,\n        children: _children,\n        ...restResource\n    } = _resource ?? {};\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const queryResponse = useQuery<CanReturnType>(\n        [\n            \"useCan\",\n            {\n                action,\n                resource,\n                params: { ...paramsRest, resource: restResource },\n                enabled: queryOptions?.enabled,\n            },\n        ],\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\n        () =>\n            can?.({ action, resource, params }) ??\n            Promise.resolve({ can: true }),\n        {\n            enabled: typeof can !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return typeof can === \"undefined\"\n        ? ({ data: { can: true } } as typeof queryResponse)\n        : queryResponse;\n};\n","import React from \"react\";\n\nimport { IAccessControlContext } from \"./IAccessControlContext\";\n\n/** @deprecated default value for access control context has no use and is an empty object. */\nexport const defaultAccessControlContext: IAccessControlContext = {};\n\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\n    {},\n);\n\nexport const AccessControlContextProvider: React.FC<\n    IAccessControlContext & {\n        children?: React.ReactNode;\n    }\n> = ({ can, children }) => {\n    return (\n        <AccessControlContext.Provider value={{ can }}>\n            {children}\n        </AccessControlContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\n\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { IAccessControlContext } from \"../../interfaces\";\n\nexport const useCanWithoutCache = (): IAccessControlContext => {\n    const { can } = useContext(AccessControlContext);\n\n    return { can };\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport uniqBy from \"lodash/uniqBy\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\n\nimport { useList, useMany } from \"@hooks\";\nimport {\n    CrudSorting,\n    Option,\n    BaseRecord,\n    GetManyResponse,\n    GetListResponse,\n    CrudFilters,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n    BaseKey,\n    Pagination,\n} from \"../../interfaces\";\n\nexport type UseSelectProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     */\n    resource: string;\n    /**\n     * Set the option's value\n     * @default `\"title\"`\n     */\n    optionLabel?: string;\n    /**\n     * Set the option's label value\n     * @default `\"id\"`\n     */\n    optionValue?: string;\n    /**\n     * Allow us to sort the options\n     */\n    sort?: CrudSorting;\n    /**\n     * Resource name for API data interactions\n     */\n    filters?: CrudFilters;\n    /**\n     * Adds extra `options`\n     */\n    defaultValue?: BaseKey | BaseKey[];\n    /**\n     * The number of milliseconds to delay\n     * @default `300`\n     */\n    debounce?: number;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type {  current?: number; pageSize?: number;}\n     * @default `undefined`\n     */\n    pagination?: Pagination;\n    /**\n     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)\n     * @type boolean\n     * @default `undefined`\n     */\n    hasPagination?: boolean;\n    /**\n     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options\n     */\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\n    /**\n     * If defined, this callback allows us to override all filters for every search request.\n     * @default `undefined`\n     */\n    onSearch?: (value: string) => CrudFilters;\n    /**\n     * Metadata query for `dataProvider`\n     * @default `{}`\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     * @default `default`\n     */\n    dataProviderName?: string;\n    /**\n     * Amount of records to fetch in select box list.\n     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead\n     * @default `undefined`\n     */\n    fetchSize?: number;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\n    onSearch: (value: string) => void;\n    options: Option[];\n};\n\nexport const useSelect = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props: UseSelectProps<TData, TError>,\n): UseSelectReturnType<TData> => {\n    const [search, setSearch] = useState<CrudFilters>([]);\n    const [options, setOptions] = useState<Option[]>([]);\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\n\n    const {\n        resource,\n        sort,\n        filters = [],\n        optionLabel = \"title\",\n        optionValue = \"id\",\n        debounce: debounceValue = 300,\n        successNotification,\n        errorNotification,\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\n        queryOptions,\n        fetchSize,\n        pagination,\n        hasPagination,\n        liveMode,\n        defaultValue = [],\n        onLiveEvent,\n        onSearch: onSearchFromProp,\n        liveParams,\n        metaData,\n        dataProviderName,\n    } = props;\n\n    const defaultValues = Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue];\n\n    const defaultValueQueryOnSuccess = useCallback(\n        (data: GetManyResponse<TData>) => {\n            setSelectedOptions(\n                data.data.map((item) => ({\n                    label: get(item, optionLabel),\n                    value: get(item, optionValue),\n                })),\n            );\n        },\n        [optionLabel, optionValue],\n    );\n\n    const defaultValueQueryOptions =\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\n\n    const defaultValueQueryResult = useMany<TData, TError>({\n        resource,\n        ids: defaultValues,\n        queryOptions: {\n            ...defaultValueQueryOptions,\n            enabled:\n                defaultValues.length > 0 &&\n                (defaultValueQueryOptionsFromProps?.enabled ?? true),\n            onSuccess: (data) => {\n                defaultValueQueryOnSuccess(data);\n                defaultValueQueryOptions?.onSuccess?.(data);\n            },\n        },\n        metaData,\n        liveMode: \"off\",\n        dataProviderName,\n    });\n\n    const defaultQueryOnSuccess = useCallback(\n        (data: GetListResponse<TData>) => {\n            {\n                setOptions(\n                    data.data.map((item) => ({\n                        label: get(item, optionLabel),\n                        value: get(item, optionValue),\n                    })),\n                );\n            }\n        },\n        [optionLabel, optionValue],\n    );\n\n    const queryResult = useList<TData, TError>({\n        resource,\n        config: {\n            sort,\n            filters: filters.concat(search),\n            pagination: {\n                current: pagination?.current,\n                pageSize: pagination?.pageSize ?? fetchSize,\n            },\n            hasPagination,\n        },\n        queryOptions: {\n            ...queryOptions,\n            onSuccess: (data) => {\n                defaultQueryOnSuccess(data);\n                queryOptions?.onSuccess?.(data);\n            },\n        },\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const onSearch = (value: string) => {\n        if (onSearchFromProp) {\n            setSearch(onSearchFromProp(value));\n            return;\n        }\n\n        if (!value) {\n            setSearch([]);\n            return;\n        } else {\n            setSearch([\n                {\n                    field: optionLabel,\n                    operator: \"contains\",\n                    value,\n                },\n            ]);\n        }\n    };\n\n    return {\n        queryResult,\n        defaultValueQueryResult,\n        options: useMemo(\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\n            [options, selectedOptions],\n        ),\n        onSearch: debounce(onSearch, debounceValue),\n    };\n};\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport { QueryObserverResult, UseQueryOptions } from \"@tanstack/react-query\";\nimport qs from \"qs\";\nimport differenceWith from \"lodash/differenceWith\";\nimport isEqual from \"lodash/isEqual\";\n\nimport {\n    useRouterContext,\n    useSyncWithLocation,\n    useNavigation,\n    useResourceWithRoute,\n    useList,\n    useLiveMode,\n} from \"@hooks\";\nimport {\n    stringifyTableParams,\n    parseTableParams,\n    unionFilters,\n    setInitialFilters,\n    setInitialSorters,\n    unionSorters,\n} from \"@definitions/table\";\n\nimport {\n    ResourceRouterParams,\n    BaseRecord,\n    CrudFilters,\n    CrudSorting,\n    GetListResponse,\n    SuccessErrorNotification,\n    HttpError,\n    MetaDataQuery,\n    LiveModeProps,\n} from \"../../interfaces\";\n\ntype SetFilterBehavior = \"merge\" | \"replace\";\n\nexport type useTableProps<TData, TError> = {\n    /**\n     * Resource name for API data interactions\n     * @default Resource name that it reads from route\n     */\n    resource?: string;\n    /**\n     * Initial page index\n     * @default 1\n     */\n    initialCurrent?: number;\n    /**\n     * Initial number of items per page\n     * @default 10\n     */\n    initialPageSize?: number;\n    /**\n     * Initial sorter state\n     */\n    initialSorter?: CrudSorting;\n    /**\n     * Default and unchangeable sorter state\n     *  @default `[]`\n     */\n    permanentSorter?: CrudSorting;\n    /**\n     * Initial filter state\n     */\n    initialFilter?: CrudFilters;\n    /**\n     * WDefault and unchangeable filter state\n     * @default `[]`\n     */\n    permanentFilter?: CrudFilters;\n    /**\n     *Default behavior of the `setFilters` function\n     * @default `\"merge\"`\n     */\n    defaultSetFilterBehavior?: SetFilterBehavior;\n    /**\n     * Whether to use server side pagination or not.\n     * @default `true`\n     */\n    hasPagination?: boolean;\n    /**\n     * Sortings, filters, page index and records shown per page are tracked by browser history\n     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`\n     */\n    syncWithLocation?: boolean;\n    /**\n     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options\n     */\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\n    /**\n     * Metadata query for dataProvider\n     */\n    metaData?: MetaDataQuery;\n    /**\n     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.\n     */\n    dataProviderName?: string;\n} & SuccessErrorNotification &\n    LiveModeProps;\n\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype SyncWithLocationParams = {\n    pagination: { current?: number; pageSize?: number };\n    sorter: CrudSorting;\n    filters: CrudFilters;\n};\n\nexport type useTablePaginationKeys =\n    | \"current\"\n    | \"setCurrent\"\n    | \"pageSize\"\n    | \"setPageSize\"\n    | \"pageCount\";\n\nexport type useTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;\n    sorter: CrudSorting;\n    setSorter: (sorter: CrudSorting) => void;\n    filters: CrudFilters;\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\n    current: number;\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\n    pageSize: number;\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\n    pageCount: number;\n};\n\nexport type useTableNoPaginationReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = Omit<useTableReturnType<TData, TError>, useTablePaginationKeys> &\n    Record<useTablePaginationKeys, undefined>;\n\n/**\n * By using useTable, you are able to get properties that are compatible with\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\n * All features such as sorting, filtering and pagination comes as out of box.\n *\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\n */\n\nconst defaultPermanentFilter: CrudFilters = [];\nconst defaultPermanentSorter: CrudSorting = [];\n\n// overload with pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination?: true;\n    },\n): useTableReturnType<TData, TError>;\n// overload without pagination\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>(\n    props?: useTableProps<TData, TError> & {\n        hasPagination: false;\n    },\n): useTableNoPaginationReturnType<TData, TError>;\n// implementation\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    initialCurrent = 1,\n    initialPageSize = 10,\n    hasPagination = true,\n    initialSorter,\n    permanentSorter = defaultPermanentSorter,\n    defaultSetFilterBehavior = \"merge\",\n    initialFilter,\n    permanentFilter = defaultPermanentFilter,\n    syncWithLocation: syncWithLocationProp,\n    resource: resourceFromProp,\n    successNotification,\n    errorNotification,\n    queryOptions,\n    liveMode: liveModeFromProp,\n    onLiveEvent,\n    liveParams,\n    metaData,\n    dataProviderName,\n}: useTableProps<TData, TError> = {}):\n    | useTableReturnType<TData, TError>\n    | useTableNoPaginationReturnType<TData, TError> {\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\n\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\n\n    const { useLocation, useParams } = useRouterContext();\n    const { search, pathname } = useLocation();\n    const liveMode = useLiveMode(liveModeFromProp);\n\n    // We want to always parse the query string even when syncWithLocation is\n    // deactivated, for hotlinking to work properly\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\n        parseTableParams(search);\n\n    const defaultCurrent = parsedCurrent || initialCurrent;\n    const defaultPageSize = parsedPageSize || initialPageSize;\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\n\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\n\n    const { replace } = useNavigation();\n    const resourceWithRoute = useResourceWithRoute();\n\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\n\n    const [sorter, setSorter] = useState<CrudSorting>(\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\n    );\n    const [filters, setFilters] = useState<CrudFilters>(\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\n    );\n    const [current, setCurrent] = useState<number>(defaultCurrent);\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n\n    const createLinkForSyncWithLocation = ({\n        pagination: { current, pageSize },\n        sorter,\n        filters,\n    }: SyncWithLocationParams) => {\n        const currentQueryParams = qs.parse(search?.substring(1)); // remove first ? character\n\n        const stringifyParams = stringifyTableParams({\n            pagination: {\n                pageSize,\n                current,\n            },\n            sorter,\n            filters,\n            ...currentQueryParams,\n        });\n        return `${pathname}?${stringifyParams}`;\n    };\n\n    useEffect(() => {\n        if (search === \"\") {\n            setCurrent(defaultCurrent);\n            setPageSize(defaultPageSize);\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\n        }\n    }, [search]);\n\n    const currentQueryParams = (): object => {\n        // We get QueryString parameters that are uncontrolled by refine.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { sorter, filters, pageSize, current, ...rest } = qs.parse(\n            search,\n            {\n                ignoreQueryPrefix: true,\n            },\n        );\n\n        return rest;\n    };\n\n    useEffect(() => {\n        if (syncWithLocation) {\n            const queryParams = currentQueryParams();\n            const stringifyParams = stringifyTableParams({\n                ...(hasPagination\n                    ? {\n                          pagination: {\n                              pageSize,\n                              current,\n                          },\n                      }\n                    : {}),\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\n                filters: differenceWith(filters, permanentFilter, isEqual),\n                ...queryParams,\n            });\n\n            // Careful! This triggers render\n            return replace(`${pathname}?${stringifyParams}`, undefined, {\n                shallow: true,\n            });\n        }\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\n\n    const queryResult = useList<TData, TError>({\n        resource: resource.name,\n        config: {\n            hasPagination,\n            pagination: { current, pageSize },\n            filters: unionFilters(permanentFilter, filters),\n            sort: unionSorters(permanentSorter, sorter),\n        },\n        queryOptions,\n        successNotification,\n        errorNotification,\n        metaData,\n        liveMode,\n        liveParams,\n        onLiveEvent,\n        dataProviderName,\n    });\n\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\n        setFilters((prevFilters) =>\n            unionFilters(permanentFilter, newFilters, prevFilters),\n        );\n    };\n\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\n        setFilters(unionFilters(permanentFilter, newFilters));\n    };\n\n    const setFiltersWithSetter = (\n        setter: (prevFilters: CrudFilters) => CrudFilters,\n    ) => {\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\n    };\n\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\n        setterOrFilters,\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\n    ) => {\n        if (typeof setterOrFilters === \"function\") {\n            setFiltersWithSetter(setterOrFilters);\n        } else {\n            if (behavior === \"replace\") {\n                setFiltersAsReplace(setterOrFilters);\n            } else {\n                setFiltersAsMerge(setterOrFilters);\n            }\n        }\n    };\n\n    const setSortWithUnion = (newSorter: CrudSorting) => {\n        setSorter(() => unionSorters(permanentSorter, newSorter));\n    };\n\n    const paginationValues = useMemo(() => {\n        if (hasPagination) {\n            return {\n                current,\n                setCurrent,\n                pageSize,\n                setPageSize,\n                pageCount: pageSize\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\n                    : 1,\n            };\n        }\n\n        return {\n            current: undefined,\n            setCurrent: undefined,\n            pageSize: undefined,\n            setPageSize: undefined,\n            pageCount: undefined,\n        };\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\n\n    return {\n        tableQueryResult: queryResult,\n        sorter,\n        setSorter: setSortWithUnion,\n        filters,\n        setFilters: setFiltersFn,\n        ...paginationValues,\n        createLinkForSyncWithLocation,\n    };\n}\n","import { useContext } from \"react\";\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { ResourceContext } from \"@contexts/resource\";\nimport { useGetIdentity } from \"@hooks/auth\";\nimport { BaseKey, LogParams } from \"../../../interfaces\";\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\n\ntype LogRenameData =\n    | {\n          resource?: string;\n      }\n    | undefined;\n\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\n    log: UseMutationResult<TLogData, Error, LogParams>;\n    rename: UseMutationResult<\n        TLogRenameData,\n        Error,\n        {\n            id: BaseKey;\n            name: string;\n        }\n    >;\n};\n\nexport type UseLogMutationProps<\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n> = {\n    logMutationOptions?: Omit<\n        UseMutationOptions<TLogData, Error, LogParams, unknown>,\n        \"mutationFn\"\n    >;\n    renameMutationOptions?: Omit<\n        UseMutationOptions<\n            TLogRenameData,\n            Error,\n            { id: BaseKey; name: string },\n            unknown\n        >,\n        \"mutationFn\" | \"onSuccess\"\n    >;\n};\n\n/**\n * useLog is used to `create` a new and `rename` the existing audit log.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\n */\n\nexport const useLog = <\n    TLogData,\n    TLogRenameData extends LogRenameData = LogRenameData,\n>({\n    logMutationOptions,\n    renameMutationOptions,\n}: UseLogMutationProps<TLogData, TLogRenameData> = {}): UseLogReturnType<\n    TLogData,\n    TLogRenameData\n> => {\n    const queryClient = useQueryClient();\n    const auditLogContext = useContext(AuditLogContext);\n\n    const { resources } = useContext(ResourceContext);\n    const {\n        data: identityData,\n        refetch,\n        isLoading,\n    } = useGetIdentity({\n        queryOptions: {\n            enabled: !!auditLogContext,\n        },\n    });\n\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\n        async (params) => {\n            const resource = resources.find((p) => p.name === params.resource);\n            const logPermissions = resource?.options?.auditLog?.permissions;\n\n            if (logPermissions) {\n                if (!hasPermission(logPermissions, params.action)) {\n                    return;\n                }\n            }\n\n            let authorData;\n            if (isLoading) {\n                authorData = await refetch();\n            }\n\n            return await auditLogContext.create?.({\n                ...params,\n                author: identityData ?? authorData?.data,\n            });\n        },\n        logMutationOptions,\n    );\n\n    const rename = useMutation<\n        TLogRenameData,\n        Error,\n        { id: BaseKey; name: string },\n        unknown\n    >(\n        async (params) => {\n            return await auditLogContext.update?.(params);\n        },\n        {\n            onSuccess: (data) => {\n                if (data?.resource) {\n                    const queryKey = queryKeys(data?.resource);\n                    queryClient.invalidateQueries(queryKey.logList());\n                }\n            },\n            ...renameMutationOptions,\n        },\n    );\n\n    return { log, rename };\n};\n","import React from \"react\";\n\nimport { IAuditLogContext } from \"./IAuditLogContext\";\n\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\n\nexport const AuditLogContextProvider: React.FC<\n    IAuditLogContext & {\n        children: React.ReactNode;\n    }\n> = ({ create, get, update, children }) => {\n    return (\n        <AuditLogContext.Provider value={{ create, get, update }}>\n            {children}\n        </AuditLogContext.Provider>\n    );\n};\n","import { useContext } from \"react\";\nimport {\n    useQuery,\n    UseQueryResult,\n    UseQueryOptions,\n} from \"@tanstack/react-query\";\n\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { queryKeys } from \"@definitions/helpers\";\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\n\nexport type UseLogProps<TData, TError> = {\n    resource: string;\n    action?: string;\n    meta?: Record<number | string, any>;\n    author?: Record<number | string, any>;\n    queryOptions?: UseQueryOptions<TData, TError>;\n    metaData?: MetaDataQuery;\n};\n\n/**\n * useLogList is used to get and filter audit logs.\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\n */\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\n    resource,\n    action,\n    meta,\n    author,\n    metaData,\n    queryOptions,\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\n    const { get } = useContext(AuditLogContext);\n\n    const queryKey = queryKeys(resource, undefined, metaData);\n\n    const queryResponse = useQuery<TData, TError>(\n        queryKey.logList(meta),\n        () =>\n            get?.({\n                resource,\n                action,\n                author,\n                meta,\n                metaData,\n            }) ?? Promise.resolve([]),\n        {\n            enabled: typeof get !== \"undefined\",\n            ...queryOptions,\n            retry: false,\n        },\n    );\n\n    return queryResponse;\n};\n","import { useCallback } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nimport { useResource } from \"@hooks/resource\";\nimport { queryKeys, pickDataProvider } from \"@definitions\";\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\n\nexport type UseInvalidateProp = {\n    resource?: string;\n    id?: BaseKey;\n    dataProviderName?: string;\n    invalidates: Array<keyof IQueryKeys> | false;\n};\n\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\n    const { resources } = useResource();\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        ({\n            resource,\n            dataProviderName,\n            invalidates,\n            id,\n        }: UseInvalidateProp) => {\n            if (invalidates === false) {\n                return;\n            }\n            const queryKey = queryKeys(\n                resource,\n                pickDataProvider(resource, dataProviderName, resources),\n            );\n\n            invalidates.forEach((key) => {\n                switch (key) {\n                    case \"all\":\n                        queryClient.invalidateQueries(queryKey.all);\n                        break;\n                    case \"list\":\n                        queryClient.invalidateQueries(queryKey.list());\n                        break;\n                    case \"many\":\n                        queryClient.invalidateQueries(queryKey.many());\n                        break;\n                    case \"resourceAll\":\n                        queryClient.invalidateQueries(queryKey.resourceAll);\n                        break;\n                    case \"detail\":\n                        queryClient.invalidateQueries(\n                            queryKey.detail(id || \"\"),\n                        );\n                        break;\n                    default:\n                        break;\n                }\n            });\n        },\n        [],\n    );\n\n    return invalidate;\n};\n","import React, { useContext } from \"react\";\nimport warnOnce from \"warn-once\";\n\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { humanizeString } from \"@definitions\";\n\nimport { ResourceRouterParams } from \"../../interfaces\";\n\nexport type BreadcrumbsType = {\n    label: string;\n    href?: string;\n    icon?: React.ReactNode;\n};\n\ntype UseBreadcrumbReturnType = {\n    breadcrumbs: BreadcrumbsType[];\n};\n\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\n    const { useParams } = useRouterContext();\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const translate = useTranslate();\n\n    const { resources, resource } = useResource();\n\n    const { action } = useParams<ResourceRouterParams>();\n\n    const breadcrumbs: BreadcrumbsType[] = [];\n\n    if (!resource?.name) {\n        return { breadcrumbs };\n    }\n\n    const addBreadcrumb = (parentName: string) => {\n        const parentResource = resources.find(\n            (resource) => resource.name === parentName,\n        );\n\n        if (parentResource) {\n            if (parentResource.parentName) {\n                addBreadcrumb(parentResource.parentName);\n            }\n            breadcrumbs.push({\n                label:\n                    parentResource.label ??\n                    translate(\n                        `${parentResource.name}.${parentResource.name}`,\n                        humanizeString(parentResource.name),\n                    ),\n\n                href: !!parentResource.list\n                    ? `/${parentResource.route}`\n                    : undefined,\n                icon: parentResource.icon,\n            });\n        }\n    };\n\n    if (resource.parentName) {\n        addBreadcrumb(resource.parentName);\n    }\n\n    breadcrumbs.push({\n        label:\n            resource.label ??\n            translate(\n                `${resource.name}.${resource.name}`,\n                humanizeString(resource.name),\n            ),\n        href: !!resource.list ? `/${resource.route}` : undefined,\n        icon: resource.icon,\n    });\n\n    if (action) {\n        const key = `actions.${action}`;\n        const actionLabel = translate(key);\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\n            warnOnce(\n                true,\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\n            );\n            breadcrumbs.push({\n                label: translate(`buttons.${action}`, humanizeString(action)),\n            });\n        } else {\n            breadcrumbs.push({\n                label: translate(key, humanizeString(action)),\n            });\n        }\n    }\n\n    return {\n        breadcrumbs,\n    };\n};\n","import React from \"react\";\nimport {\n    useRefineContext,\n    useTranslate,\n    useResource,\n    useRouterContext,\n} from \"..\";\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\n\ntype useMenuReturnType = {\n    defaultOpenKeys: string[];\n    selectedKey: string;\n    menuItems: ITreeMenu[];\n};\n\n/**\n * `useMenu` is used to get menu items of the default sidebar.\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\n *\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\n */\nexport const useMenu: () => useMenuReturnType = () => {\n    const { resources } = useResource();\n    const translate = useTranslate();\n\n    const { useLocation, useParams } = useRouterContext();\n    const location = useLocation();\n    const params = useParams<{ resource: string }>();\n\n    const { hasDashboard } = useRefineContext();\n\n    const selectedKey = React.useMemo(() => {\n        let selectedResource = resources.find(\n            (el) => location?.pathname === `/${el.route}`,\n        );\n\n        if (!selectedResource) {\n            selectedResource = resources.find(\n                (el) => params?.resource === (el.route as string),\n            );\n        }\n\n        let _selectedKey: string;\n        if (selectedResource?.route) {\n            _selectedKey = `/${selectedResource?.route}`;\n        } else if (location.pathname === \"/\") {\n            _selectedKey = \"/\";\n        } else {\n            _selectedKey = location?.pathname;\n        }\n        return _selectedKey;\n    }, [resources, location, params]);\n\n    const treeMenuItems: IMenuItem[] = React.useMemo(\n        () =>\n            resources.map((resource) => {\n                const route = `/${resource.route}`;\n\n                return {\n                    ...resource,\n                    icon: resource.icon,\n                    route: route,\n                    key: resource.key ?? route,\n                    label:\n                        resource.label ??\n                        translate(\n                            `${resource.name}.${resource.name}`,\n                            userFriendlyResourceName(resource.name, \"plural\"),\n                        ),\n                };\n            }),\n        [resources, hasDashboard, translate],\n    );\n    const menuItems: ITreeMenu[] = React.useMemo(\n        () => createTreeView(treeMenuItems),\n        [treeMenuItems],\n    );\n\n    const crawlNestedKeys = React.useCallback(\n        (\n            currentKey: string,\n            currentResources: typeof resources,\n            isParent = false,\n        ): string[] => {\n            const currentElement = currentResources.find((el) =>\n                isParent ? el.name === currentKey : el.route === currentKey,\n            );\n\n            if (currentElement) {\n                const keysArray: string[] = [];\n\n                if (isParent && currentElement.route) {\n                    keysArray.unshift(...[currentElement.route]);\n                }\n\n                if (currentElement.parentName) {\n                    keysArray.unshift(\n                        ...crawlNestedKeys(\n                            currentElement.parentName,\n                            currentResources,\n                            true,\n                        ),\n                    );\n                }\n                return keysArray;\n            }\n\n            return [];\n        },\n        [],\n    );\n\n    const defaultOpenKeys = React.useMemo(\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\n        [selectedKey, treeMenuItems],\n    );\n\n    const values = React.useMemo(() => {\n        const filterMenuItemsByListViewAndHideOption = (\n            menus: ITreeMenu[],\n        ): ITreeMenu[] => {\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\n                if (obj.children.length > 0 && obj.options?.hide !== true)\n                    return [\n                        ...menuItem,\n                        {\n                            ...obj,\n                            children: filterMenuItemsByListViewAndHideOption(\n                                obj.children,\n                            ),\n                        },\n                    ];\n                else if (\n                    typeof obj.list !== \"undefined\" &&\n                    obj.options?.hide !== true\n                )\n                    return [...menuItem, obj];\n\n                return menuItem;\n            }, []);\n        };\n\n        return {\n            defaultOpenKeys,\n            selectedKey,\n            menuItems: filterMenuItemsByListViewAndHideOption(menuItems),\n        };\n    }, [defaultOpenKeys, selectedKey, menuItems]);\n\n    return values;\n};\n","import React, { useState } from \"react\";\n\nimport { useLogin, useTranslate } from \"@hooks\";\nexport interface ILoginForm {\n    username: string;\n    password: string;\n}\n\n/**\n * @deprecated LoginPage is deprecated. Use AuthPage instead. @see {@link https://refine.dev/docs/core/components/auth-page} for more details.\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\n */\nexport const LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<ILoginForm>();\n\n    return (\n        <>\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ username, password });\n                }}\n            >\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.username\",\n                                    undefined,\n                                    \"username\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    size={20}\n                                    autoCorrect=\"off\"\n                                    spellCheck={false}\n                                    autoCapitalize=\"off\"\n                                    autoFocus\n                                    required\n                                    value={username}\n                                    onChange={(e) =>\n                                        setUsername(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {translate(\n                                    \"pages.login.password\",\n                                    undefined,\n                                    \"password\",\n                                )}\n                                :\n                            </td>\n                            <td>\n                                <input\n                                    type=\"password\"\n                                    required\n                                    size={20}\n                                    value={password}\n                                    onChange={(e) =>\n                                        setPassword(e.target.value)\n                                    }\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                <input type=\"submit\" value=\"login\" />\n            </form>\n        </>\n    );\n};\n","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    FormHTMLAttributes,\n} from \"react\";\n\nimport {\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    UpdatePasswordPage,\n} from \"./components\";\n\nimport { AuthPageProps } from \"../../../interfaces\";\n\nexport type DivPropsType = DetailedHTMLProps<\n    HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n>;\nexport type FormPropsType = DetailedHTMLProps<\n    FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n>;\n\nexport type AuthProps = AuthPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\n/**\n * **refine** has a default auth page form which is served on `/login` route when the `authProvider` configuration is provided.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#authpage} for more details.\n */\nexport const AuthPage: React.FC<AuthProps> = (props) => {\n    const { type } = props;\n    const renderView = () => {\n        switch (type) {\n            case \"register\":\n                return <RegisterPage {...props} />;\n            case \"forgotPassword\":\n                return <ForgotPasswordPage {...props} />;\n            case \"updatePassword\":\n                return <UpdatePasswordPage {...props} />;\n            default:\n                return <LoginPage {...props} />;\n        }\n    };\n\n    return <>{renderView()}</>;\n};\n","import React, { useState } from \"react\";\nimport { LoginPageProps, LoginFormTypes } from \"../../../../../interfaces\";\n\nimport { useRouterContext, useLogin } from \"@hooks\";\nimport { useTranslate } from \"@hooks/translate\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype LoginProps = LoginPageProps<DivPropsType, DivPropsType, FormPropsType>;\n\nexport const LoginPage: React.FC<LoginProps> = ({\n    providers,\n    registerLink,\n    forgotPasswordLink,\n    rememberMe,\n    contentProps,\n    wrapperProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [remember, setRemember] = useState(false);\n\n    const translate = useTranslate();\n\n    const { mutate: login } = useLogin<LoginFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            login({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.login.title\", \"Sign in to your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    login({ email, password, remember });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.login.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"text\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\"pages.login.fields.password\", \"Password\")}\n                    </label>\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    {rememberMe ?? (\n                        <>\n                            <label>\n                                {translate(\n                                    \"pages.login.buttons.rememberMe\",\n                                    \"Remember me\",\n                                )}\n                                <input\n                                    name=\"remember\"\n                                    type=\"checkbox\"\n                                    size={20}\n                                    checked={remember}\n                                    value={remember.toString()}\n                                    onChange={() => {\n                                        setRemember(!remember);\n                                    }}\n                                />\n                            </label>\n                        </>\n                    )}\n                    <br />\n                    {forgotPasswordLink ??\n                        renderLink(\n                            \"/forgot-password\",\n                            translate(\n                                \"pages.login.buttons.forgotPassword\",\n                                \"Forgot password?\",\n                            ),\n                        )}\n                    <input\n                        type=\"submit\"\n                        value={translate(\"pages.login.signin\", \"Sign in\")}\n                    />\n                    {registerLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.login.buttons.noAccount\",\n                                \"Don’t have an account?\",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/register\",\n                                translate(\"pages.login.register\", \"Sign up\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { RegisterPageProps } from \"../../../../../interfaces\";\n\nimport { useTranslate, useRouterContext, useRegister } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype RegisterProps = RegisterPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const RegisterPage: React.FC<RegisterProps> = ({\n    providers,\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const translate = useTranslate();\n\n    const { mutate: register, isLoading } = useRegister();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const renderProviders = () => {\n        if (providers) {\n            return providers.map((provider) => (\n                <div\n                    key={provider.name}\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        marginBottom: \"1rem\",\n                    }}\n                >\n                    <button\n                        onClick={() =>\n                            register({\n                                providerName: provider.name,\n                            })\n                        }\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                        }}\n                    >\n                        {provider?.icon}\n                        {provider.label ?? <label>{provider.label}</label>}\n                    </button>\n                </div>\n            ));\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.register.title\", \"Sign up for your account\")}\n            </h1>\n            {renderProviders()}\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    register({ email, password });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\"pages.register.fields.email\", \"Email\")}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"email\"\n                        size={20}\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.register.fields.password\",\n                            \"Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        value={translate(\n                            \"pages.register.buttons.submit\",\n                            \"Sign up\",\n                        )}\n                        disabled={isLoading}\n                    />\n                    {loginLink ?? (\n                        <>\n                            <span>\n                                {translate(\n                                    \"pages.login.buttons.haveAccount\",\n                                    \"Have an account?\",\n                                )}{\" \"}\n                                {renderLink(\n                                    \"login\",\n                                    translate(\"pages.login.signin\", \"Sign in\"),\n                                )}\n                            </span>\n                        </>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\n\nimport { useTranslate, useRouterContext, useForgotPassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\nimport {\n    ForgotPasswordFormTypes,\n    ForgotPasswordPageProps,\n} from \"../../../../../interfaces\";\n\ntype ForgotPasswordProps = ForgotPasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const ForgotPasswordPage: React.FC<ForgotPasswordProps> = ({\n    loginLink,\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n    const { Link } = useRouterContext();\n\n    const [email, setEmail] = useState(\"\");\n\n    const { mutate: forgotPassword, isLoading } =\n        useForgotPassword<ForgotPasswordFormTypes>();\n\n    const renderLink = (link: React.ReactNode, text?: string) => {\n        if (link) {\n            if (typeof link === \"string\") {\n                return <Link to={link}>{text}</Link>;\n            }\n            return link;\n        }\n        return null;\n    };\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\n                    \"pages.forgotPassword.title\",\n                    \"Forgot your password?\",\n                )}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    forgotPassword({ email });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.forgotPassword.fields.email\",\n                            \"Email\",\n                        )}\n                    </label>\n                    <input\n                        name=\"email\"\n                        type=\"mail\"\n                        autoCorrect=\"off\"\n                        spellCheck={false}\n                        autoCapitalize=\"off\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.forgotPassword.buttons.submit\",\n                            \"Send reset instructions\",\n                        )}\n                    />\n                    <br />\n                    {loginLink ?? (\n                        <span>\n                            {translate(\n                                \"pages.register.buttons.haveAccount\",\n                                \"Have an account? \",\n                            )}{\" \"}\n                            {renderLink(\n                                \"/login\",\n                                translate(\"pages.login.signin\", \"Sign in\"),\n                            )}\n                        </span>\n                    )}\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    UpdatePasswordFormTypes,\n    UpdatePasswordPageProps,\n} from \"../../../../../interfaces\";\n\nimport { useTranslate, useUpdatePassword } from \"@hooks\";\n\nimport { DivPropsType, FormPropsType } from \"../..\";\n\ntype UpdatePasswordProps = UpdatePasswordPageProps<\n    DivPropsType,\n    DivPropsType,\n    FormPropsType\n>;\n\nexport const UpdatePasswordPage: React.FC<UpdatePasswordProps> = ({\n    wrapperProps,\n    contentProps,\n    renderContent,\n    formProps,\n}) => {\n    const translate = useTranslate();\n\n    const { mutate: updatePassword, isLoading } =\n        useUpdatePassword<UpdatePasswordFormTypes>();\n\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const content = (\n        <div {...contentProps}>\n            <h1 style={{ textAlign: \"center\" }}>\n                {translate(\"pages.updatePassword.title\", \"Update Password\")}\n            </h1>\n            <hr />\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    updatePassword({\n                        password: newPassword,\n                        confirmPassword,\n                    });\n                }}\n                {...formProps}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        padding: 25,\n                    }}\n                >\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.password\",\n                            \"New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                    />\n                    <label>\n                        {translate(\n                            \"pages.updatePassword.fields.confirmPassword\",\n                            \"Confirm New Password\",\n                        )}\n                    </label>\n                    <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        required\n                        size={20}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={isLoading}\n                        value={translate(\n                            \"pages.updatePassword.buttons.submit\",\n                            \"Update\",\n                        )}\n                    />\n                </div>\n            </form>\n        </div>\n    );\n\n    return (\n        <div {...wrapperProps}>\n            {renderContent ? renderContent(content) : content}\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\n */\nexport const ReadyPage: React.FC = () => {\n    return (\n        <>\n            <h1>Welcome on board</h1>\n            <p>Your configuration is completed.</p>\n            <p>\n                Now you can get started by adding your resources to the{\" \"}\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\n            </p>\n            <div style={{ display: \"flex\", gap: 8 }}>\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\n                    <button>Documentation</button>\n                </a>\n                <a\n                    href=\"https://refine.dev/examples\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Examples</button>\n                </a>\n                <a\n                    href=\"https://discord.gg/refine\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                >\n                    <button>Community</button>\n                </a>\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport {\n    QueryClientProvider,\n    QueryClient,\n    QueryCache,\n    MutationCache,\n    DefaultOptions,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\n\nimport { AuthContextProvider } from \"@contexts/auth\";\nimport { DataContextProvider } from \"@contexts/data\";\nimport { LiveContextProvider } from \"@contexts/live\";\nimport { TranslationContextProvider } from \"@contexts/translation\";\nimport { ResourceContextProvider, IResourceItem } from \"@contexts/resource\";\nimport { RefineContextProvider } from \"@contexts/refine\";\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\nimport { RouterContextProvider } from \"@contexts/router\";\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\nimport { NotificationContextProvider } from \"@contexts/notification\";\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\nimport { handleRefineOptions, routeGenerator } from \"@definitions\";\nimport { Telemetry } from \"@components/telemetry\";\nimport { useDeepMemo } from \"@hooks/deepMemo\";\n\nimport {\n    MutationMode,\n    IDataContextProvider,\n    I18nProvider,\n    LayoutProps,\n    TitleProps,\n    IRouterProvider,\n    ResourceProps,\n    ILiveContext,\n    LiveModeProps,\n    IDataMultipleContextProvider,\n    AuthProvider,\n    NotificationProvider,\n    AccessControlProvider,\n    AuditLogProvider,\n    DashboardPageProps,\n    IRefineOptions,\n    INotificationContext,\n} from \"../../../interfaces\";\n\ninterface QueryClientConfig {\n    queryCache?: QueryCache;\n    mutationCache?: MutationCache;\n    defaultOptions?: DefaultOptions;\n}\nexport interface RefineProps {\n    children?: React.ReactNode;\n    /**\n     * `resources` is the main building block of a refine app. A resource represents an entity in an endpoint in the API.\n     * @type [`ResourceProps[]`](/docs/api-reference/core/components/refine-config/#resources)\n     */\n    resources?: ResourceProps[];\n    /**\n     * **refine** needs some router functions to create resource pages, handle navigation, etc. This provider allows you to use the router library you want\n     * @type [`IRouterProvider`](/docs/api-reference/core/providers/router-provider/)\n     */\n    routerProvider: IRouterProvider;\n    /**\n     * A `dataProvider` is the place where a refine app communicates with an API. Data providers also act as adapters for refine, making it possible for it to consume different API's and data services.\n     * @type [`IDataContextProvider` | `IDataMultipleContextProvider`](/docs/api-reference/core/providers/data-provider/)\n     */\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\n    /**\n     * `authProvider` handles authentication logic like login, logout flow and checking user credentials. It is an object with methods that refine uses when necessary.\n     * @type [`AuthProvider`](/docs/api-reference/core/providers/auth-provider/)\n     */\n    authProvider?: AuthProvider;\n    /**\n     * **refine** lets you add Realtime support to your app via `liveProvider`. It can be used to update and show data in Realtime throughout your app.\n     * @type [`ILiveContext`](/docs/api-reference/core/providers/live-provider/)\n     */\n    liveProvider?: ILiveContext;\n    /**\n     * `notificationProvider` handles notification logics. It is an object with methods that refine uses when necessary.\n     * @type [`NotificationProvider` | `(() => NotificationProvider)`](/docs/api-reference/core/providers/notification-provider/)\n     */\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\n    /**\n     * `accessControlProvider` is the entry point for implementing access control for refine apps.\n     * @type [`AccessControlProvider`](/docs/api-reference/core/providers/accessControl-provider/)\n     */\n    accessControlProvider?: AccessControlProvider;\n    /**\n     * **refine** allows you to track changes in your data and keep track of who made the changes.\n     * @type [`AuditLogProvider`](/docs/api-reference/core/providers/audit-log-provider#overview)\n     */\n    auditLogProvider?: AuditLogProvider;\n    /**\n     * `i18nProvider` property lets you add i18n support to your app. Making you able to use any i18n framework.\n     * @type [`i18nProvider`](/docs/api-reference/core/providers/i18n-provider/)\n     */\n    i18nProvider?: I18nProvider;\n    /**\n     * A custom error component.\n     * @type [`ReactNode`](/docs/api-reference/core/components/refine-config/#catchall)\n     */\n    catchAll?: React.ReactNode;\n    /**\n     * Custom login component can be passed to the `LoginPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#loginpage)\n     */\n    LoginPage?: React.FC;\n    /**\n     * A custom dashboard page can be passed to the `DashboardPage` prop which is accessible on root route.\n     * @type [`React.FC<DashboardPageProps>`](/docs/api-reference/core/components/refine-config/#dashboardpage)\n     */\n    DashboardPage?: React.FC<DashboardPageProps>;\n    /**\n     * Custom ready page component can be set by passing to `ReadyPage` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#readypage)\n     */\n    ReadyPage?: React.FC;\n    /**\n     * Default layout can be customized by passing the `Layout` property.\n     * @type [`React.FC<LayoutProps>`](/docs/api-reference/core/components/refine-config/#layout)\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * The default sidebar can be customized by using refine hooks and passing custom components to `Sider` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#sider)\n     */\n    Sider?: React.FC;\n    /**\n     * The default app header can be customized by passing the `Header` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#header)\n     */\n    Header?: React.FC;\n    /**\n     *The default app footer can be customized by passing the `Footer` property.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#footer)\n     */\n    Footer?: React.FC;\n    /**\n     * The component wanted to be placed out of app layout structure can be set by passing to `OffLayoutArea` prop.\n     * @type [`React.FC`](/docs/api-reference/core/components/refine-config/#offlayoutarea)\n     */\n    OffLayoutArea?: React.FC;\n    /**\n     * TThe app title can be set by passing the `Title` property.\n     * @type [`React.FC<TitleProps>`](/docs/api-reference/core/components/refine-config/#title)\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * Callback to handle all live events.\n     * @type [`(event: LiveEvent) => void`](/docs/api-reference/core/providers/live-provider/#onliveevent)\n     */\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\n    /**\n     * `options` is used to configure the app.\n     * @type [`IRefineOptions`](/docs/api-reference/core/components/refine-config/#options-1)\n     * */\n    options?: IRefineOptions;\n    /**\n     * **refine** implements a simple and transparent telemetry module for collecting usage statistics defined in a very limited scope. This telemetry module is used to improve the refine experience.\n     * @deprecated  `disableTelemetry`  property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n     * @type [`boolean`](/docs/api-reference/core/components/refine-config/#disabletelemetry)\n     */\n    disableTelemetry?: boolean;\n    /** \n     *  Config for React Query client that refine uses.\n        @deprecated `reactQueryClientConfig` property is deprecated. Use `clientConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ reactQuery: { clientConfig: { queryCache: new QueryCache() } } }}`\n        @see https://refine.dev/docs/core/components/refine-config/#clientconfig\n          @type [`QueryClientConfig` | `false`](/docs/api-reference/core/components/refine-config/#reactquery)\n     */\n    reactQueryClientConfig?: QueryClientConfig;\n    /** \n           *  Config for customize React Query Devtools.\n              @deprecated `reactQueryDevtoolConfig` property is deprecated. Use `devtoolConfig` in `reactQuery` in [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ reactQuery: { devtoolConfig: false } }}`\n              @see https://refine.dev/docs/core/components/refine-config/#devtoolConfig\n              @type [`ReactQueryDevtools` | `false`](/docs/api-reference/core/components/refine-config/#devtoolconfig)\n           */\n    reactQueryDevtoolConfig?:\n        | React.ComponentProps<typeof ReactQueryDevtools>\n        | false;\n\n    /** \n           *  Whether to update data automatically (auto) or not (manual) if a related live event is received. The off value is used to avoid creating a subscription.\n              @deprecated `liveMode` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n              @example  `options={{ liveMode: \"auto\" }}`\n              @see https://refine.dev/docs/core/components/refine-config/#livemode\n              @type [`LiveModeProps[\"liveMode\"]`](/docs/api-reference/core/components/refine-config/#livemode)\n           */\n    liveMode?: LiveModeProps[\"liveMode\"];\n    /** \n        @deprecated `disableTelemetry` property is deprecated. Use it from within [`options`](/docs/api-reference/core/components/refine-config/#options) instead.\n        @example  `options={{ disableTelemetry: true }}`\n     */\n    /**\n     * `mutationMode` determines which mode the mutations run with. (e.g. useUpdate, useDelete).\n     * @deprecated `mutationMode` property is deprecated at this level. Use it from within `options` instead.\n     * @type [`MutationMode`](/docs/api-reference/core/components/refine-config/#mutationmode)\n     * @default \"pessimistic\"\n     */\n    mutationMode?: MutationMode;\n    /** \n       * List query parameter values can be edited manually by typing directly in the URL. To activate this feature syncWithLocation needs to be set to true.\n          @deprecated `syncWithLocation` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ syncWithLocation: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#syncwithlocation\n       *  @type [`boolean`](/docs/api-reference/core/components/refine-config/#syncwithlocation)\n       */\n    syncWithLocation?: boolean;\n    /** \n       *  When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n          @deprecated `warnwhenunsavedchanges` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ warnwhenunsavedchanges: true }}`\n          @see https://refine.dev/docs/core/components/refine-config/#warnwhenunsavedchanges\n      *   @type [`boolean`](/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges)\n       */\n    warnWhenUnsavedChanges?: boolean;\n    /** \n       *  The duration of the timeout period in undoable mode, shown in milliseconds. Mutations can be cancelled during this period.\n          @deprecated `undoableTimeout` property is deprecated at this level. Use it from within `options` instead.\n          @example  `options={{ undoableTimeout: 5000 }}`\n          @see https://refine.dev/docs/core/components/refine-config/#undoabletimeout\n      *   @type [`number`](/docs/api-reference/core/components/refine-config/#undoabletimeout)\n       */\n    undoableTimeout?: number;\n}\n\n/**\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\n * It is where the highest level of configuration of the app occurs.\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\n *\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\n */\nexport const Refine: React.FC<RefineProps> = ({\n    authProvider,\n    dataProvider,\n    routerProvider,\n    notificationProvider,\n    accessControlProvider,\n    auditLogProvider,\n    resources: resourcesFromProps,\n    DashboardPage,\n    ReadyPage,\n    LoginPage,\n    catchAll,\n    children,\n    liveProvider,\n    i18nProvider,\n    mutationMode,\n    syncWithLocation,\n    warnWhenUnsavedChanges,\n    undoableTimeout,\n    Title,\n    Layout,\n    Sider,\n    Header,\n    Footer,\n    OffLayoutArea,\n    reactQueryClientConfig,\n    reactQueryDevtoolConfig,\n    liveMode,\n    onLiveEvent,\n    disableTelemetry,\n    options,\n}) => {\n    const {\n        optionsWithDefaults,\n        disableTelemetryWithDefault,\n        reactQueryWithDefaults,\n    } = handleRefineOptions({\n        options,\n        disableTelemetry,\n        liveMode,\n        mutationMode,\n        reactQueryClientConfig,\n        reactQueryDevtoolConfig,\n        syncWithLocation,\n        warnWhenUnsavedChanges,\n        undoableTimeout,\n    });\n\n    const queryClient = useDeepMemo(() => {\n        if (reactQueryWithDefaults.clientConfig instanceof QueryClient) {\n            return reactQueryWithDefaults.clientConfig;\n        }\n\n        return new QueryClient({\n            ...reactQueryWithDefaults.clientConfig,\n            defaultOptions: {\n                ...reactQueryWithDefaults.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: false,\n                    keepPreviousData: true,\n                    ...reactQueryWithDefaults.clientConfig.defaultOptions\n                        ?.queries,\n                },\n            },\n        });\n    }, [reactQueryWithDefaults.clientConfig]);\n\n    const useNotificationProviderValues = React.useMemo(() => {\n        return typeof notificationProvider === \"function\"\n            ? notificationProvider\n            : () => notificationProvider ?? ({} as INotificationContext);\n    }, [notificationProvider]);\n\n    const notificationProviderContextValues = useNotificationProviderValues();\n\n    const resources: IResourceItem[] = useDeepMemo(() => {\n        const _resources: IResourceItem[] = [];\n\n        resourcesFromProps?.forEach((resource) => {\n            _resources.push({\n                key: resource.key,\n                name: resource.name,\n                label: resource.options?.label,\n                icon: resource.icon,\n                route: routeGenerator(resource, resourcesFromProps),\n                canCreate: !!resource.create,\n                canEdit: !!resource.edit,\n                canShow: !!resource.show,\n                canDelete: resource.canDelete,\n                create: resource.create,\n                show: resource.show,\n                list: resource.list,\n                edit: resource.edit,\n                options: resource.options,\n                parentName: resource.parentName,\n            });\n        });\n\n        return _resources;\n    }, [resourcesFromProps]);\n\n    if (resources.length === 0) {\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\n    }\n\n    const { RouterComponent = React.Fragment } = routerProvider;\n\n    return (\n        <QueryClientProvider client={queryClient}>\n            <NotificationContextProvider {...notificationProviderContextValues}>\n                <AuthContextProvider\n                    {...(authProvider ?? {})}\n                    isProvided={Boolean(authProvider)}\n                >\n                    <DataContextProvider {...dataProvider}>\n                        <LiveContextProvider liveProvider={liveProvider}>\n                            <RouterContextProvider {...routerProvider}>\n                                <ResourceContextProvider resources={resources}>\n                                    <TranslationContextProvider\n                                        i18nProvider={i18nProvider}\n                                    >\n                                        <AccessControlContextProvider\n                                            {...(accessControlProvider ?? {})}\n                                        >\n                                            <AuditLogContextProvider\n                                                {...(auditLogProvider ?? {})}\n                                            >\n                                                <UndoableQueueContextProvider>\n                                                    <RefineContextProvider\n                                                        mutationMode={\n                                                            optionsWithDefaults.mutationMode\n                                                        }\n                                                        warnWhenUnsavedChanges={\n                                                            optionsWithDefaults.warnWhenUnsavedChanges\n                                                        }\n                                                        syncWithLocation={\n                                                            optionsWithDefaults.syncWithLocation\n                                                        }\n                                                        Title={Title}\n                                                        undoableTimeout={\n                                                            optionsWithDefaults.undoableTimeout\n                                                        }\n                                                        catchAll={catchAll}\n                                                        DashboardPage={\n                                                            DashboardPage\n                                                        }\n                                                        LoginPage={LoginPage}\n                                                        Layout={Layout}\n                                                        Sider={Sider}\n                                                        Footer={Footer}\n                                                        Header={Header}\n                                                        OffLayoutArea={\n                                                            OffLayoutArea\n                                                        }\n                                                        hasDashboard={\n                                                            !!DashboardPage\n                                                        }\n                                                        liveMode={\n                                                            optionsWithDefaults.liveMode\n                                                        }\n                                                        onLiveEvent={\n                                                            onLiveEvent\n                                                        }\n                                                        options={\n                                                            optionsWithDefaults\n                                                        }\n                                                    >\n                                                        <UnsavedWarnContextProvider>\n                                                            <RouterComponent>\n                                                                {children}\n                                                                {!disableTelemetryWithDefault && (\n                                                                    <Telemetry />\n                                                                )}\n                                                                <RouteChangeHandler />\n                                                            </RouterComponent>\n                                                        </UnsavedWarnContextProvider>\n                                                    </RefineContextProvider>\n                                                </UndoableQueueContextProvider>\n                                            </AuditLogContextProvider>\n                                        </AccessControlContextProvider>\n                                    </TranslationContextProvider>\n                                </ResourceContextProvider>\n                            </RouterContextProvider>\n                        </LiveContextProvider>\n                    </DataContextProvider>\n                </AuthContextProvider>\n            </NotificationContextProvider>\n            {reactQueryWithDefaults.devtoolConfig === false ? null : (\n                <ReactQueryDevtools\n                    initialIsOpen={false}\n                    position=\"bottom-right\"\n                    {...reactQueryWithDefaults.devtoolConfig}\n                />\n            )}\n        </QueryClientProvider>\n    );\n};\n","import { useEffect } from \"react\";\n\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\nconst encode = (payload: ITelemetryData): string => {\n    const stringifyedPayload = JSON.stringify(payload || {});\n\n    if (typeof btoa !== \"undefined\") {\n        return btoa(stringifyedPayload);\n    }\n\n    return Buffer.from(stringifyedPayload).toString(\"base64\");\n};\n\nexport const Telemetry: React.FC<{}> = () => {\n    const payload = useTelemetryData();\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" && !Image) {\n            return;\n        }\n\n        const img = new Image();\n        img.src = `https://telemetry.refine.dev/telemetry?payload=${encode(\n            payload,\n        )}`;\n    }, []);\n\n    return null;\n};\n","import { useContext } from \"react\";\n\nimport { AuthContext } from \"@contexts/auth\";\nimport { AuditLogContext } from \"@contexts/auditLog\";\nimport { LiveContext } from \"@contexts/live\";\nimport { RouterContext } from \"@contexts/router\";\nimport { DataContext } from \"@contexts/data\";\nimport { TranslationContext } from \"@contexts/translation\";\nimport { NotificationContext } from \"@contexts/notification\";\nimport { AccessControlContext } from \"@contexts/accessControl\";\nimport { useResource } from \"@hooks/resource\";\n\nimport { ITelemetryData } from \"../../interfaces/telementry\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_VERSION = \"3.99.4\";\n\nexport const useTelemetryData = (): ITelemetryData => {\n    const authContext = useContext(AuthContext);\n    const auditLogContext = useContext(AuditLogContext);\n    const liveContext = useContext(LiveContext);\n    const routerContext = useContext(RouterContext);\n    const dataContext = useContext(DataContext);\n    const { i18nProvider } = useContext(TranslationContext);\n    const notificationContext = useContext(NotificationContext);\n    const accessControlContext = useContext(AccessControlContext);\n    const { resources } = useResource();\n\n    const auth = authContext.isProvided;\n\n    const auditLog =\n        !!auditLogContext.create ||\n        !!auditLogContext.get ||\n        !!auditLogContext.update;\n\n    const live =\n        !!liveContext?.publish ||\n        !!liveContext?.subscribe ||\n        !!liveContext?.unsubscribe;\n\n    const router =\n        !!routerContext.useHistory ||\n        !!routerContext.Link ||\n        !!routerContext.Prompt ||\n        !!routerContext.useLocation ||\n        !!routerContext.useParams;\n\n    const data = !!dataContext;\n\n    const i18n =\n        !!i18nProvider?.changeLocale ||\n        !!i18nProvider?.getLocale ||\n        !!i18nProvider?.translate;\n\n    const notification =\n        !!notificationContext.close || !!notificationContext.open;\n\n    const accessControl = !!accessControlContext.can;\n\n    return {\n        providers: {\n            auth,\n            auditLog,\n            live,\n            router,\n            data,\n            i18n,\n            notification,\n            accessControl,\n        },\n        version: REFINE_VERSION,\n        resourceCount: resources.length,\n    };\n};\n","import React, { useMemo } from \"react\";\nimport { useMemoized } from \"@hooks/memoized\";\n\n/**\n * Hook that memoizes the given dependency array and checks the consecutive calls with deep equality and returns the same value as the first call if dependencies are not changed.\n * @internal\n */\nexport const useDeepMemo = <T,>(\n    fn: () => T,\n    dependencies: React.DependencyList,\n): T => {\n    const memoizedDependencies = useMemoized(dependencies);\n\n    const value = useMemo(fn, memoizedDependencies);\n\n    return value;\n};\n","import { useRef } from \"react\";\nimport isEqual from \"lodash/isEqual\";\n\n/**\n * Hook that memoizes the given value with deep equality.\n * @internal\n */\nexport const useMemoized = <T = unknown,>(value: T): T => {\n    const ref = useRef(value);\n\n    if (!isEqual(ref.current, value)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { ActionTypes } from \"@contexts/undoableQueue\";\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\nimport { IUndoableQueue } from \"../../interfaces\";\n\nimport { userFriendlySecond } from \"@definitions/helpers\";\n\nexport const UndoableQueue: React.FC<{\n    notification: IUndoableQueue;\n}> = ({ notification }) => {\n    const translate = useTranslate();\n\n    const { notificationDispatch } = useCancelNotification();\n    const { open } = useNotification();\n\n    const [timeoutId, setTimeoutId] = useState<number | undefined>();\n\n    const cancelNotification = () => {\n        if (notification.isRunning === true) {\n            if (notification.seconds === 0) {\n                notification.doMutation();\n            }\n            if (!notification.isSilent) {\n                open?.({\n                    key: `${notification.id}-${notification.resource}-notification`,\n                    type: \"progress\",\n                    message: translate(\n                        \"notifications.undoable\",\n                        {\n                            seconds: userFriendlySecond(notification.seconds),\n                        },\n                        `You have ${userFriendlySecond(\n                            notification.seconds,\n                        )} seconds to undo`,\n                    ),\n                    cancelMutation: notification.cancelMutation,\n                    undoableTimeout: userFriendlySecond(notification.seconds),\n                });\n            }\n\n            if (notification.seconds > 0) {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n\n                const newTimeoutId = setTimeout(() => {\n                    notificationDispatch({\n                        type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\n                        payload: {\n                            id: notification.id,\n                            seconds: notification.seconds,\n                            resource: notification.resource,\n                        },\n                    });\n                }, 1000) as unknown as number;\n\n                setTimeoutId(newTimeoutId);\n            }\n        }\n    };\n\n    useEffect(() => {\n        cancelNotification();\n    }, [notification]);\n\n    return null;\n};\n","import React, { useEffect } from \"react\";\n\nimport {\n    useRefineContext,\n    useRouterContext,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@hooks\";\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\n\nexport interface LayoutWrapperProps {\n    /**\n     * Outer component that renders other components\n     * @default *\n     */\n    Layout?: React.FC<LayoutProps>;\n    /**\n     * [Custom sider to use](/api-reference/core/components/refine-config.md#sider)\n     * @default *\n     */\n    Sider?: React.FC;\n    /**\n     * [Custom header to use](/api-reference/core/components/refine-config.md#header)\n     * @default *\n     */\n    Header?: React.FC;\n    /**\n     * [Custom title to use](/api-reference/core/components/refine-config.md#title)\n     * @default *\n     */\n    Title?: React.FC<TitleProps>;\n    /**\n     * [Custom footer to use](/api-reference/core/components/refine-config.md#footer)\n     * @default *\n     */\n    Footer?: React.FC;\n    /**\n     * [Custom off layout area to use](/api-reference/core/components/refine-config.md#offlayoutarea)\n     * @default *\n     */\n    OffLayoutArea?: React.FC;\n    children: React.ReactNode;\n}\n\n/**\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\n * It is the default layout used in resource pages.\n * It can be used in custom pages to use global layout.\n *\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\n */\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\n    children,\n    Layout: LayoutFromProps,\n    Sider: SiderFromProps,\n    Header: HeaderFromProps,\n    Title: TitleFromProps,\n    Footer: FooterFromProps,\n    OffLayoutArea: OffLayoutAreaFromProps,\n}) => {\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\n        useRefineContext();\n\n    const LayoutToRender = LayoutFromProps ?? Layout;\n\n    return (\n        <LayoutToRender\n            Sider={SiderFromProps ?? Sider}\n            Header={HeaderFromProps ?? Header}\n            Footer={FooterFromProps ?? Footer}\n            Title={TitleFromProps ?? Title}\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\n        >\n            {children}\n            <UnsavedPrompt />\n        </LayoutToRender>\n    );\n};\n\nconst UnsavedPrompt: React.FC = () => {\n    const { Prompt } = useRouterContext();\n\n    const translate = useTranslate();\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n\n    const warnWhenListener = (e: {\n        preventDefault: () => void;\n        returnValue: string;\n    }) => {\n        e.preventDefault();\n\n        e.returnValue = translate(\n            \"warnWhenUnsavedChanges\",\n            \"Are you sure you want to leave? You have unsaved changes.\",\n        );\n\n        return e.returnValue;\n    };\n\n    useEffect(() => {\n        if (warnWhen) {\n            window.addEventListener(\"beforeunload\", warnWhenListener);\n        }\n\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\n    }, [warnWhen]);\n\n    return (\n        <Prompt\n            when={warnWhen}\n            message={translate(\n                \"warnWhenUnsavedChanges\",\n                \"Are you sure you want to leave? You have unsaved changes.\",\n            )}\n            setWarnWhen={setWarnWhen}\n        />\n    );\n};\n","import React from \"react\";\n\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\n\nexport type AuthenticatedProps = {\n    /**\n     * Content to show if user is not logged in. If undefined, routes to `/`\n     */\n    fallback?: React.ReactNode;\n    /**\n     * Content to show while checking whether user is logged in\n     */\n    loading?: React.ReactNode;\n    children: React.ReactNode;\n};\n\n/**\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\n *\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\n */\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\n    children,\n    fallback,\n    loading,\n}) => {\n    const { isSuccess, isLoading, isError } = useAuthenticated();\n\n    const { replace } = useNavigation();\n    const { useLocation } = useRouterContext();\n    const { pathname, search } = useLocation();\n\n    if (isLoading) {\n        return <>{loading}</> || null;\n    }\n    if (isError) {\n        if (!fallback) {\n            const toURL = `${pathname}${search}`;\n            if (!pathname.includes(\"/login\")) {\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\n            }\n            return null;\n        }\n\n        return <>{fallback}</>;\n    }\n\n    if (isSuccess) {\n        return <>{children}</>;\n    }\n\n    return null;\n};\n","import { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"@contexts/auth\";\nimport { useRouterContext } from \"@hooks\";\n\nimport { IAuthContext } from \"../../interfaces\";\n\nexport const RouteChangeHandler: React.FC = () => {\n    const { useLocation } = useRouterContext();\n\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\n    const location = useLocation();\n\n    useEffect(() => {\n        checkAuth?.().catch(() => false);\n    }, [location?.pathname]);\n\n    return null;\n};\n","import React from \"react\";\n\nimport { useCan } from \"@hooks\";\nimport { CanParams } from \"../../interfaces\";\n\nexport type CanAccessProps = CanParams & {\n    /**\n     * Content to show if access control returns `false`\n     */\n    fallback?: React.ReactNode;\n    children: React.ReactNode;\n};\n\nexport const CanAccess: React.FC<CanAccessProps> = ({\n    resource,\n    action,\n    params,\n    fallback,\n    children,\n    ...rest\n}) => {\n    const { data } = useCan({\n        resource,\n        action,\n        params,\n    });\n\n    if (data?.can) {\n        if (React.isValidElement(children)) {\n            const Children = React.cloneElement(children, rest);\n            return Children;\n        }\n\n        return <>{children}</>;\n    }\n\n    if (data?.can === false) {\n        return <>{fallback ?? null}</>;\n    }\n\n    return null;\n};\n"],"mappings":"knBAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,cAAAE,GAAA,kBAAAC,GAAA,cAAAC,GAAA,mBAAAC,GAAA,kBAAAC,GAAA,cAAAC,GAAA,cAAAC,GAAA,WAAAC,GAAA,uBAAAC,GAAA,kBAAAC,GAAA,mBAAAC,GAAA,gBAAAC,GAAA,qBAAAC,GAAA,wBAAAC,GAAA,qBAAAC,GAAA,yBAAAC,GAAA,oBAAAC,GAAA,oBAAAC,GAAA,qBAAAC,GAAA,8BAAAC,GAAA,mBAAAC,GAAA,sBAAAC,GAAA,sBAAAC,GAAA,yBAAAC,GAAA,iBAAAC,GAAA,iBAAAC,GAAA,cAAAC,GAAA,qBAAAC,GAAA,kBAAAC,GAAA,WAAAC,GAAA,uBAAAC,GAAA,0BAAAC,GAAA,kBAAAC,EAAA,cAAAC,GAAA,kBAAAC,GAAA,cAAAC,GAAA,sBAAAC,GAAA,oBAAAC,EAAA,cAAAC,GAAA,kBAAAC,GAAA,cAAAC,GAAA,sBAAAC,GAAA,YAAAC,GAAA,mBAAAC,GAAA,iBAAAC,GAAA,0BAAAC,EAAA,cAAAC,GAAA,oBAAAC,GAAA,kBAAAC,GAAA,6BAAAC,GAAA,YAAAC,GAAA,gBAAAC,GAAA,WAAAC,GAAA,eAAAC,GAAA,aAAAC,GAAA,cAAAC,GAAA,YAAAC,GAAA,YAAAC,GAAA,aAAAC,GAAA,oBAAAC,GAAA,kBAAAC,EAAA,oBAAAC,GAAA,WAAAC,GAAA,mBAAAC,GAAA,eAAAC,GAAA,kCAAAC,GAAA,qBAAAC,GAAA,gBAAAC,GAAA,gBAAAC,EAAA,4BAAAC,GAAA,yBAAAC,GAAA,qBAAAC,EAAA,cAAAC,GAAA,iBAAAC,GAAA,YAAAC,GAAA,oBAAAC,GAAA,wBAAAC,GAAA,aAAAC,GAAA,aAAAC,GAAA,iBAAAC,EAAA,cAAAC,GAAA,kBAAAC,GAAA,sBAAAC,GAAA,uBAAAC,GAAA,6BAAAC,KAAA,eAAAC,GAAAvF,IAAAwF,GAAAC,GAAc,iCAAd,gBCAA,IAAAC,GAA2C,oBCA3C,IAAAC,GAA2B,iBCA3B,IAAAC,GAAkB,oBAClBC,GAA+B,iCAKxB,IAAMC,EAAc,GAAAC,QAAM,cAA4B,CAAC,CAAC,EAElDC,GAIT,CAAC,CAAE,SAAAC,EAAU,WAAAC,KAAeC,CAAe,IAAM,CACjD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5BC,KAAc,mBAAe,EAE7BC,EAAsB,IAAM,CAC9BD,EAAY,kBAAkB,CAAC,kBAAkB,CAAC,EAClDA,EAAY,kBAAkB,CAAC,iBAAiB,CAAC,EACjDA,EAAY,kBAAkB,CAAC,gBAAgB,CAAC,CACpD,EAEME,EAAY,MAAOC,GAAgB,CAtB7C,IAAAC,EAuBQ,GAAI,CACA,IAAMC,EAAS,OAAMD,EAAAP,EAAe,QAAf,YAAAO,EAAA,KAAAP,EAAuBM,IAE5C,OAAAF,EAAoB,EACb,QAAQ,QAAQI,CAAM,CACjC,OAASC,EAAP,CACE,OAAO,QAAQ,OAAOA,CAAK,CAC/B,CACJ,EAEMC,EAAe,MAAOJ,GAAgB,CAjChD,IAAAC,EAkCQ,GAAI,CACA,IAAMC,EAAS,OAAMD,EAAAP,EAAe,WAAf,YAAAO,EAAA,KAAAP,EAA0BM,IAE/C,OAAAF,EAAoB,EACb,QAAQ,QAAQI,CAAM,CACjC,OAASC,EAAP,CACE,OAAO,QAAQ,OAAOA,CAAK,CAC/B,CACJ,EAEME,EAAa,MAAOL,GAAgB,CA5C9C,IAAAC,EA6CQ,GAAI,CACA,IAAMK,EAAe,OAAML,EAAAP,EAAe,SAAf,YAAAO,EAAA,KAAAP,EAAwBM,IAEnD,OAAAF,EAAoB,EAEb,QAAQ,QAAQQ,CAAY,CACvC,OAASH,EAAP,CACE,OAAO,QAAQ,OAAOA,CAAK,CAC/B,CACJ,EAEMI,EAAgB,MAAOP,GAAgB,CAxDjD,IAAAC,EAyDQ,GAAI,CACA,cAAMA,EAAAP,EAAe,YAAf,YAAAO,EAAA,KAAAP,EAA2BM,IAC1B,QAAQ,QAAQ,CAC3B,OAASG,EAAP,CACE,OAAKA,GAAA,MAAAA,EAAqC,cACtCR,EAASQ,EAAmC,YAAY,EAGrD,QAAQ,OAAOA,CAAK,CAC/B,CACJ,EAEA,OACI,GAAAb,QAAA,cAACD,EAAY,SAAZ,CACG,MAAO,CACH,GAAGK,EACH,MAAOK,EACP,OAAQM,EACR,UAAWE,EACX,SAAUH,EACV,WAAAX,CACJ,GAECD,CACL,CAER,ED/EA,IAAAgB,GAIO,iCAUMC,GACTC,GACiC,CACjC,GAAM,CAAE,eAAAC,CAAe,KAAI,eAAyBC,CAAW,EAY/D,SAVsB,aAClB,CAAC,gBAAgB,EAEjBD,GAAA,KAAAA,EAAmB,IAAM,QAAQ,QAAQ,MAAS,EAClD,CACI,QAAS,CAAC,CAACA,EACX,GAAGD,CACP,CACJ,CAGJ,EElCA,IAAAG,GAAkB,oBAClBC,GAIO,iCAiBA,IAAMC,GAAiB,CAAc,CACxC,aAAAC,CACJ,EAAgC,CAAC,IAAsC,CACnE,GAAM,CAAE,gBAAAC,CAAgB,EAAI,GAAAC,QAAM,WAAyBC,CAAW,EAatE,SAXsB,aAClB,CAAC,iBAAiB,EAElBF,GAAA,KAAAA,EAAoB,IAAM,QAAQ,QAAQ,CAAC,CAAC,EAC5C,CACI,QAAS,CAAC,CAACA,EACX,MAAO,GACP,GAAGD,CACP,CACJ,CAGJ,ECvCA,IAAAI,GAAkB,oBAClBC,GAIO,iCA4BA,IAAMC,GAAY,CAAkB,CACvC,gBAAAC,CACJ,EAAgC,CAAC,IAK5B,CACD,GAAM,CAAE,KAAAC,CAAK,EAAIC,EAAc,EACzB,CAAE,OAAQC,CAAkB,EAC9B,GAAAC,QAAM,WAAyBC,CAAW,EACxC,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EAkCjC,SAhCsB,gBAKpB,CAAC,WAAW,EAAGJ,EAAmB,CAChC,UAAW,CAACK,EAAMC,IAAc,CApDxC,IAAAC,EAqDY,IAAMC,GAAeD,EAAAD,GAAA,YAAAA,EAAW,eAAX,KAAAC,EAA2BF,EAEhD,GAAIG,IAAiB,GAIrB,IAAIA,EAAc,CACdV,EAAKU,CAAY,EACjB,MACJ,CAEAV,EAAK,QAAQ,EACjB,EACA,QAAUW,GAAiB,CACvBN,GAAA,MAAAA,EAAO,CACH,IAAK,kBACL,KAAM,QACN,SAASM,GAAA,YAAAA,EAAO,OAAQ,eACxB,aACIA,GAAA,YAAAA,EAAO,UAAW,oCAC1B,EACJ,EACA,GAAGZ,CACP,CAAC,CAGL,EC/EA,IAAAa,GAAkB,oBAClBC,GAIO,iCACPC,GAAe,iBAuBR,IAAMC,GAAW,CAAkB,CACtC,gBAAAC,CACJ,EAA+B,CAAC,IAK3B,CACD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,MAAOC,CAAiB,EAC5B,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EACnC,CAAE,OAAAC,CAAO,EAAIF,EAAY,EACzB,CAAE,MAAAG,EAAO,KAAAC,CAAK,EAAIC,GAAgB,EAElC,CAAE,GAAAC,CAAG,EAAI,GAAAC,QAAG,MAAML,EAAQ,CAC5B,kBAAmB,EACvB,CAAC,EAgCD,SA9BsB,gBAClB,CAAC,UAAU,EACXL,EACA,CACI,UAAYW,GAAyB,CACjC,GAAIF,EACA,OAAOX,EAAQW,CAAY,EAG3BE,IAAyB,IAErBb,EADA,OAAOa,GAAyB,SACxBA,EAEA,GAFoB,EAKpCL,GAAA,MAAAA,EAAQ,cACZ,EACA,QAAUM,GAAe,CACrBL,GAAA,MAAAA,EAAO,CACH,SAASK,GAAA,YAAAA,EAAO,OAAQ,cACxB,aAAaA,GAAA,YAAAA,EAAO,UAAW,sBAC/B,IAAK,cACL,KAAM,OACV,EACJ,EACA,GAAGf,CACP,CACJ,CAGJ,EChFA,IAAAgB,GAAkB,oBAClBC,GAIO,iCAuBA,IAAMC,GAAc,CAAkB,CACzC,gBAAAC,CACJ,EAAkC,CAAC,IAK9B,CACD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,SAAUC,CAAoB,EAClC,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIC,GAAgB,EA6BxC,SA3BsB,gBAKpB,CAAC,aAAa,EAAGL,EAAqB,CACpC,UAAYM,GAAyB,CAC7BA,IAAyB,IAErBR,EADAQ,GAGQ,GAFoB,EAKpCH,GAAA,MAAAA,EAAQ,iBACZ,EACA,QAAUI,GAAe,CACrBH,GAAA,MAAAA,EAAO,CACH,SAASG,GAAA,YAAAA,EAAO,OAAQ,iBACxB,aAAaA,GAAA,YAAAA,EAAO,UAAW,0BAC/B,IAAK,iBACL,KAAM,OACV,EACJ,EACA,GAAGV,CACP,CAAC,CAGL,ECtEA,IAAAW,GAAkB,oBAClBC,GAIO,iCAuBA,IAAMC,GAAoB,CAAkB,CAC/C,gBAAAC,CACJ,EAAwC,CAAC,IAKpC,CACD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,eAAgBC,CAA0B,EAC9C,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIC,GAAgB,EA2BxC,SAzBsB,gBAKpB,CAAC,mBAAmB,EAAGL,EAA2B,CAChD,UAAYM,GAAyB,CAC7BA,IAAyB,IACrBA,GACAR,EAAQQ,CAAoB,EAGpCH,GAAA,MAAAA,EAAQ,wBACZ,EACA,QAAUI,GAAe,CACrBH,GAAA,MAAAA,EAAO,CACH,SAASG,GAAA,YAAAA,EAAO,OAAQ,wBACxB,aAAaA,GAAA,YAAAA,EAAO,UAAW,iCAC/B,IAAK,wBACL,KAAM,OACV,EACJ,EACA,GAAGV,CACP,CAAC,CAGL,ECpEA,IAAAW,GAAkB,oBAClBC,GAIO,iCACPC,GAAe,iBA2BR,IAAMC,GAAoB,CAE/B,CACE,gBAAAC,CACJ,EAAwC,CAAC,IAKpC,CACD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,eAAgBC,CAA0B,EAC9C,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,MAAAC,EAAO,KAAAC,CAAK,EAAIC,GAAgB,EAClC,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EAEnC,CAAE,OAAAC,CAAO,EAAIF,EAAY,EAEzBG,EAAe,GAAAC,QAAG,MAAMF,EAAQ,CAClC,kBAAmB,EACvB,CAAC,EAqCD,SAnCsB,gBAMlB,CAAC,mBAAmB,EACpB,MAAOG,GACIX,GAAA,YAAAA,EAA4B,CAC/B,GAAGS,EACH,GAAGE,CACP,GAEJ,CACI,UAAYC,GAAyB,CAC7BA,IAAyB,IACrBA,GACAd,EAAQc,CAAoB,EAGpCT,GAAA,MAAAA,EAAQ,wBACZ,EACA,QAAUU,GAAe,CACrBT,GAAA,MAAAA,EAAO,CACH,SAASS,GAAA,YAAAA,EAAO,OAAQ,wBACxB,aACIA,GAAA,YAAAA,EAAO,UAAW,gCACtB,IAAK,wBACL,KAAM,OACV,EACJ,EACA,GAAGhB,CACP,CACJ,CAGJ,EC5FA,IAAAiB,GAA2B,iBAC3BC,GAAyC,iCAWlC,IAAMC,GACTC,GAC+B,CAC/B,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAyBC,CAAW,EAU1D,SARsB,aAClB,CAAC,mBAAoBF,CAAM,EAC3B,SAAS,CAnBjB,IAAAG,EAmBqB,OAAAA,EAAA,MAAMF,GAAA,YAAAA,EAAYD,MAAlB,KAAAG,EAA8B,CAAC,GAC5C,CACI,MAAO,EACX,CACJ,CAGJ,EC1BA,IAAAC,GAAkB,oBAClBC,GAA+C,iCAYxC,IAAMC,EAAgB,IAKxB,CACD,GAAM,CAAE,WAAYC,CAAsB,EACtC,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,OAAQC,CAAO,EAAIC,GAAU,EAYrC,SAVsB,gBAClB,CAAC,eAAe,EAChBJ,EACA,CACI,QAAUK,GAA0B,CAChCF,EAAO,CAAE,aAAAE,CAAa,CAAC,CAC3B,CACJ,CACJ,CAGJ,ECnCA,IAAAC,GAA2B,iBAQpB,IAAMC,GAA2B,IAAe,CACnD,GAAM,CAAE,WAAAC,CAAW,KAAI,eAAyBC,CAAW,EAE3D,OAAOD,GAAc,EACzB,ECZA,IAAAE,GAIO,iCCJA,IAAMC,GAAsBC,GACxBA,EAAc,ICDzB,IAAAC,GAAgB,yBAChBC,GAAsB,+BAGTC,GAAkB,CAC3BC,EACAC,EAAyCC,GAASA,IACnC,CACf,GAAM,CAACC,KAAYC,CAAI,EAAIJ,EAC3B,OAAOI,EACF,IAAKC,MAAU,GAAAC,YAAU,GAAAC,SAAIJ,EAASE,CAAK,CAAC,CAAC,EAC7C,IAAI,CAACH,EAAWM,EAAOC,IACpBR,EAAQ,KAAK,OAAWC,EAAMM,EAAOC,CAAK,CAC9C,CACR,ECdA,IAAAC,GAAsB,wBCAtB,IAAAC,GAAsC,iBACtCC,GAAsB,+BACtBC,GAA2B,oCAC3BC,GAAqB,wBAWRC,GAAoBC,GAAgB,CAC7C,GAAM,CAAE,QAAAC,EAAS,SAAAC,EAAU,OAAAC,EAAQ,QAAAC,CAAQ,EAAI,GAAAC,QAAG,MAC9CL,EAAI,UAAU,CAAC,CACnB,EAEA,MAAO,CACH,cAAeC,GAAW,OAAOA,CAAO,EACxC,eAAgBC,GAAY,OAAOA,CAAQ,EAC3C,aAAeC,GAAA,KAAAA,EAA0B,CAAC,EAC1C,cAAgBC,GAAA,KAAAA,EAA2B,CAAC,CAChD,CACJ,EAEaE,GAA6BC,GAAgB,CACtD,IAAMP,EAAM,GAAAK,QAAG,UAAUE,CAAM,EAC/B,OAAOR,GAAiB,IAAIC,GAAK,CACrC,EAEaQ,GAAwBD,GAKvB,CACV,IAAME,EAA6B,CAC/B,UAAW,GACX,YAAa,UACb,OAAQ,EACZ,EACM,CAAE,WAAAC,EAAY,OAAAP,EAAQ,QAAAC,KAAYO,CAAK,EAAIJ,EAOjD,OALoB,GAAAF,QAAG,UACnB,CAAE,GAAGM,EAAM,GAAID,GAA0B,CAAC,EAAI,OAAAP,EAAQ,QAAAC,CAAQ,EAC9DK,CACJ,CAGJ,EAEaG,GAAiB,CAC1BC,EACAC,IAGID,EAAK,WAAa,OAClBA,EAAK,WAAa,MAClBC,EAAM,WAAa,OACnBA,EAAM,WAAa,MAGd,UAAWD,EAAOA,EAAK,MAAQ,UAC3B,UAAWC,EAAQA,EAAM,MAAQ,SACtCD,EAAK,UAAYC,EAAM,UAK1B,QAASD,EAAOA,EAAK,IAAM,UACvB,QAASC,EAAQA,EAAM,IAAM,SAClCD,EAAK,UAAYC,EAAM,SAIlBC,GAAiB,CAACF,EAAgBC,IAC3CD,EAAK,OAASC,EAAM,MAMXE,GAAe,CACxBC,EACAC,EACAC,EAA2B,CAAC,KAEND,EAAW,OAC5BE,IAAOA,EAAE,WAAa,MAAQA,EAAE,WAAa,QAAU,CAACA,EAAE,GAC/D,EAEkB,OAAS,MACvB,GAAAC,SACI,GACA;AAAA,kJACJ,KAGG,GAAAC,SACHL,EACAC,EACAC,EACAP,EACJ,EAAE,OACGW,GACGA,EAAW,QAAU,QACrBA,EAAW,QAAU,OACpBA,EAAW,WAAa,MACpBA,EAAW,WAAa,MACrBA,EAAW,MAAM,SAAW,KACnCA,EAAW,WAAa,OACpBA,EAAW,WAAa,OACrBA,EAAW,MAAM,SAAW,EAC5C,GAGSC,GAAe,CACxBC,EACAC,OAEA,GAAAJ,SAAUG,EAAiBC,EAAYX,EAAc,EAAE,OAClDY,GACGA,EAAW,QAAU,QAAaA,EAAW,QAAU,IAC/D,EAESC,GAAoB,CAC7BX,EACAY,IACc,CACd,MAAG,GAAAC,SAAeD,EAAeZ,EAAiBL,EAAc,EAChE,GAAGK,CACP,EAEac,GAAoB,CAC7BN,EACAO,IACc,CACd,MAAG,GAAAF,SAAeE,EAAeP,EAAiBV,EAAc,EAChE,GAAGU,CACP,EAEaQ,GAAsB,CAC/BC,EACA/B,IACwB,CACxB,GAAI,CAACA,EACD,OAGJ,IAAMgC,EAAWhC,EAAO,KAAMiC,GAASA,EAAK,QAAUF,CAAU,EAEhE,GAAIC,EACA,OAAOA,EAAS,KAIxB,EAEaE,GAAmB,CAC5BH,EACA9B,EACAkC,EAA8B,OACI,CAClC,IAAMC,EAASnC,GAAA,YAAAA,EAAS,KAAMmC,GAAW,CACrC,GACIA,EAAO,WAAa,MACpBA,EAAO,WAAa,OACpB,UAAWA,EACb,CACE,GAAM,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIF,EAC5B,OAAOE,IAAUP,GAAcM,IAAaF,CAChD,CAEJ,GAEA,GAAIC,EACA,OAAOA,EAAO,OAAS,CAAC,CAIhC,ECtLO,IAAMG,GAAeC,GACjB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,IAAMC,EAAS,IAAI,WAEbC,EAAgB,IAAM,CACpBD,EAAO,SACPA,EAAO,oBAAoB,OAAQC,EAAe,EAAK,EAEvDH,EAAQE,EAAO,MAAgB,EAEvC,EAEAA,EAAO,iBAAiB,OAAQC,EAAe,EAAK,EAEpDD,EAAO,cAAcH,EAAK,aAAqB,EAC/CG,EAAO,QAAWE,IACdF,EAAO,oBAAoB,OAAQC,EAAe,EAAK,EAChDF,EAAOG,CAAK,EAE3B,CAAC,EFZE,IAAMC,GAA2B,CACpCC,EAAW,GACXC,IACS,CACT,IAAMC,EAAmBC,GAAeH,CAAQ,EAChD,OAAIC,IAAS,WACF,GAAAG,QAAU,SAASF,CAAgB,EAEvC,GAAAE,QAAU,OAAOF,CAAgB,CAC5C,EGhBO,IAAMG,GAAkB,CAACC,EAAc,CAAC,IACvCA,GAAA,MAAAA,EAAQ,GACD,CACH,GAAGA,EACH,GAAI,mBAAmBA,EAAO,EAAE,CACpC,EAEGA,ECFJ,IAAMC,EAAY,CACrBC,EACAC,EACAC,IACa,CACb,IAAMC,EAAeF,GAAoB,UACnCG,EAAmB,CACrB,IAAK,CAACD,CAAY,EAClB,YAAa,CAACA,EAAcH,GAAY,EAAE,EAC1C,KAAOK,GAAW,CACd,GAAGD,EAAK,YACR,OACA,CAAE,GAAGC,EAAQ,GAAGH,CAAS,CAC7B,EACA,KAAOI,GACH,CACI,GAAGF,EAAK,YACR,UACCE,GAAOA,EAAI,IAAI,MAAM,EACtB,CAAE,GAAGJ,CAAS,CAClB,EAAE,OAAQK,GAASA,IAAS,MAAS,EACzC,OAASC,GAAO,CACZ,GAAGJ,EAAK,YACR,SACAI,GAAA,YAAAA,EAAI,WACJ,CAAE,GAAGN,CAAS,CAClB,EACA,QAAUO,GACN,CAAC,UAAWT,EAAUS,EAAaP,CAAoB,EAAE,OACpDK,GAASA,IAAS,MACvB,CACR,EACA,OAAOH,CACX,ECtCO,IAAMM,GAAgB,CACzBC,EACAC,IAEI,CAACD,GAAe,CAACC,EACV,GAEJ,CAAC,CAACD,EAAY,KAAME,GAAMA,IAAMD,CAAM,ECLjD,IAAME,GAAeC,GACTC,GACJD,EAAK,WAAaC,EAAa,OAASD,EAAK,WAAa,GAGrDE,GAAiB,CAC1BF,EACAG,IACqB,CAVzB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAWI,IAAIC,EAEEC,GAAgBL,GAAAD,EAAAJ,EAAK,UAAL,YAAAI,EAAc,QAAd,KAAAC,EAAuBL,EAAK,KAElD,GAAIA,EAAK,WAAY,CACjB,IAAMW,EAASR,EAAmB,KAAKJ,GAAYC,CAAI,CAAC,EAEpDW,GAAA,MAAAA,EAAQ,WAGRF,EAAQ,GAFYP,GAAeS,EAAQR,CAAkB,KAEnCO,IACnBV,EAAK,aAGZS,EAAQ,IADJD,GAAAD,GAAAD,EAAAK,GAAA,YAAAA,EAAQ,UAAR,YAAAL,EAAiB,QAAjB,KAAAC,EAA0BI,GAAA,YAAAA,EAAQ,OAAlC,KAAAH,EAA0CR,EAAK,cACxBU,IAEnC,MACID,EAAQC,EAEZ,OAAOD,CACX,EC7BO,IAAMG,GACTC,GAC4B,CAJhC,IAAAC,EAAAC,EAAAC,EAKI,IAAMC,EAAO,CAAC,EACRC,EAA+C,CAAC,EAChDC,EAA8C,CAAC,EACjDC,EACAC,EAEJ,QAASC,EAAI,EAAGA,EAAIT,EAAU,OAAQS,IAAK,CACvCF,EAASP,EAAUS,GAEnB,IAAMC,GAAQP,GAAAD,EAAAK,EAAO,QAAP,KAAAL,GAAgBD,EAAAM,EAAO,UAAP,YAAAN,EAAgB,QAAhC,KAAAE,EAAyC,GAEvDE,EAAqBK,GAASH,EAC9BF,EAAqBK,GAAO,SAAc,CAAC,EAE3CJ,EAAoBC,EAAO,MAAQA,EACnCD,EAAoBC,EAAO,MAAM,SAAc,CAAC,CACpD,CAEA,QAAWI,KAAQN,EACXA,EAAqB,eAAeM,CAAI,IACxCH,EAAQH,EAAqBM,GAEzBH,EAAM,YAAcF,EAAoBE,EAAM,YAC9CF,EAAoBE,EAAM,YAAY,SAAY,KAAKA,CAAK,EAE5DJ,EAAK,KAAKI,CAAK,GAK3B,OAAOJ,CACX,ECpCO,IAAMQ,GAAkBC,IAC3BA,EAAOA,EAAK,QAAQ,wBAAyB,OAAO,EACpDA,EAAOA,EAAK,QAAQ,kCAAmC,SAAS,EAEhEA,EAAOA,EACF,YAAY,EACZ,QAAQ,SAAU,GAAG,EACrB,QAAQ,UAAW,GAAG,EACtB,KAAK,EACVA,EAAOA,EAAK,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAK,MAAM,CAAC,EAE3CA,GCXX,IAAAC,GAAkB,oBCAlB,IAAAC,GAAkB,oBAILC,GAAuC,CAAC,CAAE,SAAAC,CAAS,IACrD,GAAAC,QAAA,cAAC,WAAKD,CAAS,EDMnB,IAAME,GAA8C,CACvD,aAAc,cACd,iBAAkB,GAClB,gBAAiB,IACjB,uBAAwB,GACxB,SAAU,MACV,SAAU,CACN,YAAa,OACb,WAAY,OACZ,UAAW,MACf,CACJ,EAEaC,GAAgB,GAAAC,QAAM,cAA8B,CAC7D,aAAc,GACd,aAAc,cACd,uBAAwB,GACxB,iBAAkB,GAClB,gBAAiB,IACjB,MAAO,OACP,MAAO,OACP,OAAQ,OACR,OAAQ,OACR,OAAQC,GACR,cAAe,OACf,SAAU,MACV,YAAa,OACb,QAASH,EACb,CAAC,EAEYI,GAA0D,CAAC,CACpE,aAAAC,EACA,aAAAC,EACA,uBAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,cAAAC,EACA,MAAAC,EACA,OAAAC,EAASV,GACT,OAAAW,EACA,MAAAC,EACA,OAAAC,EACA,cAAAC,EACA,UAAAC,EAAYA,GACZ,SAAAC,EACA,SAAAC,EAAW,MACX,YAAAC,EACA,QAAAC,CACJ,IAEQ,GAAApB,QAAA,cAACD,GAAc,SAAd,CACG,MAAO,CACH,aAAAI,EACA,aAAAC,EACA,uBAAAC,EACA,iBAAAC,EACA,MAAAI,EACA,gBAAAH,EACA,OAAAI,EACA,OAAAC,EACA,MAAAC,EACA,OAAAC,EACA,cAAAC,EACA,cAAAN,EACA,UAAAO,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,QAAAC,CACJ,GAECZ,CACL,EElDD,IAAMa,GAAsB,CAAC,CAChC,QAAAC,EACA,iBAAAC,EACA,SAAAC,EACA,aAAAC,EACA,uBAAAC,EACA,wBAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,uBAAAC,CACJ,EAA8B,CAAC,IAAuC,CA5CtE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GA6CI,IAAMC,EAA6C,CAC/C,WAAYjC,GAAA,YAAAA,EAAS,WACrB,cACIU,GAAAD,EAAAT,GAAA,YAAAA,EAAS,eAAT,KAAAS,EACAN,IADA,KAAAO,EAEAwB,GAAqB,aACzB,iBACItB,GAAAD,EAAAX,GAAA,YAAAA,EAAS,kBAAT,KAAAW,EACAJ,IADA,KAAAK,EAEAsB,GAAqB,gBACzB,kBACIpB,GAAAD,EAAAb,GAAA,YAAAA,EAAS,mBAAT,KAAAa,EACAP,IADA,KAAAQ,EAEAoB,GAAqB,iBACzB,wBACIlB,GAAAD,EAAAf,GAAA,YAAAA,EAAS,yBAAT,KAAAe,EACAP,IADA,KAAAQ,EAEAkB,GAAqB,uBACzB,UACIhB,GAAAD,EAAAjB,GAAA,YAAAA,EAAS,WAAT,KAAAiB,EAAqBf,IAArB,KAAAgB,EAAiCgB,GAAqB,SAC1D,SAAU,CACN,aACId,GAAAD,EAAAnB,GAAA,YAAAA,EAAS,WAAT,YAAAmB,EAAmB,cAAnB,KAAAC,EACAc,GAAqB,SAAS,YAClC,YACIZ,GAAAD,EAAArB,GAAA,YAAAA,EAAS,WAAT,YAAAqB,EAAmB,aAAnB,KAAAC,EACAY,GAAqB,SAAS,WAClC,WACIV,GAAAD,EAAAvB,GAAA,YAAAA,EAAS,WAAT,YAAAuB,EAAmB,YAAnB,KAAAC,EACAU,GAAqB,SAAS,SACtC,CACJ,EAEMC,GACFT,GAAAD,EAAAzB,GAAA,YAAAA,EAAS,mBAAT,KAAAyB,EAA6BxB,IAA7B,KAAAyB,EAAiD,GAE/CU,EAAyB,CAC3B,cACIP,GAAAD,GAAAD,EAAA3B,GAAA,YAAAA,EAAS,aAAT,YAAA2B,EAAqB,eAArB,KAAAC,EAAqCxB,IAArC,KAAAyB,EAA+D,CAAC,EACpE,eACIG,IAAAD,IAAAD,GAAA9B,GAAA,YAAAA,EAAS,aAAT,YAAA8B,GAAqB,gBAArB,KAAAC,GAAsC1B,IAAtC,KAAA2B,GAAiE,CAAC,CAC1E,EAEA,MAAO,CACH,oBAAAC,EACA,4BAAAE,EACA,uBAAAC,CACJ,CACJ,ECjFO,IAAMC,GAAe,CAAC,CACzB,kBAAAC,EACA,OAAAC,EACA,gBAAAC,CACJ,IAAyC,CACrC,GAAIF,GAAqBA,IAAsB,GAC3C,OAAOA,EAGX,OAAQC,OACC,QACD,OAAOC,EAAgB,eACtB,SACD,OAAOA,EAAgB,gBACtB,OACD,OAAOA,EAAgB,UAEnC,ECpBO,IAAMC,GAAqB,MAM9BC,EACAC,EACAC,IACkD,CAClD,IAAMC,EAAU,CAAC,EAEjB,OAAW,CAACC,EAAOC,CAAO,IAAKL,EAAS,QAAQ,EAC5C,GAAI,CACA,IAAMM,EAAS,MAAMD,EAAQ,EAE7BF,EAAQ,KAAKF,EAAcK,EAAQF,CAAK,CAAC,CAC7C,OAASG,EAAP,CACEJ,EAAQ,KAAKD,EAAaK,EAAkBH,CAAK,CAAC,CACtD,CAEJ,OAAOD,CACX,EC7BO,IAAMK,EAAmB,CAC5BC,EACAC,EACAC,IACC,CANL,IAAAC,EAOI,GAAIF,EACA,OAAOA,EAGX,IAAMG,EAAWF,GAAA,YAAAA,EAAW,KAAMG,GAASA,EAAK,OAASL,GAEzD,OAAIG,EAAAC,GAAA,YAAAA,EAAU,UAAV,MAAAD,EAAmB,iBACZC,EAAS,QAAQ,iBAGrB,SACX,EClBO,IAAME,GAAiB,MAC1BC,IAEO,CACH,MAAO,MAAM,QAAQ,IAAIA,CAAQ,GAAG,IAAKC,GAAQA,EAAI,IAAI,CAC7D,GCHG,IAAMC,GAAoBC,GAA8B,CAC3D,GAAM,CAAE,WAAAC,EAAY,OAAAC,CAAO,EAAIF,EAG/B,GAAIE,GAAA,MAAAA,EAAQ,KACR,OAAOA,EAAO,KAGlB,IAAMC,GAAUF,GAAA,YAAAA,EAAY,UAAW,EAEjCG,GAAWH,GAAA,YAAAA,EAAY,WAAY,GACnCI,EAAa,KAAK,MAAML,EAAS,OAAS,GAAKI,CAAQ,EAE7D,OAAOD,EAAUE,EAAa,OAAOF,CAAO,EAAI,EAAI,MACxD,EAEaG,GAAwBN,GAA8B,CAC/D,GAAM,CAAE,WAAAC,EAAY,OAAAC,CAAO,EAAIF,EAG/B,GAAIE,GAAA,MAAAA,EAAQ,KACR,OAAOA,EAAO,KAGlB,IAAMC,GAAUF,GAAA,YAAAA,EAAY,UAAW,EAEvC,OAAOE,IAAY,EAAI,OAAYA,EAAU,CACjD,EnBwCO,IAAMI,GAAU,CAGrB,CACE,SAAAC,EACA,OAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAGK,CACD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAeC,EAAgB,EAC/BC,EAAWC,EACbf,EACAgB,EAAiBhB,EAAUS,EAAkBC,CAAS,EACtDL,CACJ,EACM,CAAE,QAAAY,CAAQ,EAAIL,EAChBI,EAAiBhB,EAAUS,EAAkBC,CAAS,CAC1D,EAEMQ,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAE3CC,GACFtB,GAAA,YAAAA,EAAc,WAAY,SAAaA,GAAA,YAAAA,EAAc,WAAY,GAErE,OAAAuB,GAAwB,CACpB,SAAAzB,EACA,MAAO,CAAC,GAAG,EACX,OAAQ,CACJ,SAAAK,EACA,WAAYJ,GAAA,YAAAA,EAAQ,WACpB,cAAeA,GAAA,YAAAA,EAAQ,cACvB,KAAMA,GAAA,YAAAA,EAAQ,KACd,QAASA,GAAA,YAAAA,EAAQ,QACjB,iBAAkB,UAClB,GAAGO,CACP,EACA,QAAS,aAAaR,IACtB,QAASwB,EACT,SAAAlB,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBO,EAAS,KAAKb,CAAM,EACpB,CAAC,CAAE,SAAAa,EAAU,UAAAY,EAAW,OAAAC,CAAO,IAAM,CACjC,GAAM,CAAE,cAAAC,KAAkBC,CAAW,EAAI5B,GAAU,CAAC,EACpD,OAAOgB,EAAe,CAClB,SAAAjB,EACA,GAAG6B,EACH,cAAAD,EACA,SAAU,CACN,GAAGvB,EACH,aAAc,CACV,SAAAS,EACA,UAAAY,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,CACL,EACA,CACI,GAAGzB,EACH,UAAY4B,GAAS,CA/IjC,IAAAC,GAgJgBA,EAAA7B,GAAA,YAAAA,EAAc,YAAd,MAAA6B,EAAA,KAAA7B,EAA0B4B,GAE1B,IAAME,EACF,OAAO7B,GAAwB,WACzBA,EACI2B,EACA,CAAE,SAAAzB,EAAU,OAAAJ,CAAO,EACnBD,CACJ,EACAG,EAEVmB,EAAmBU,CAAkB,CACzC,EACA,QAAUC,GAAgB,CA7JtC,IAAAF,EA8JgBX,EAAWa,CAAG,GACdF,EAAA7B,GAAA,YAAAA,EAAc,UAAd,MAAA6B,EAAA,KAAA7B,EAAwB+B,GAExB,IAAMD,EACF,OAAO5B,GAAsB,WACvBA,EAAkB6B,EAAK,CAAE,SAAA5B,EAAU,OAAAJ,CAAO,EAAGD,CAAQ,EACrDI,EAEVkB,EAAmBU,EAAoB,CACnC,IAAK,GAAGhC,yBACR,QAASkB,EACL,sBACA,CAAE,WAAYe,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EoBrLA,IAAAC,GAIO,iCA0DA,IAAMC,GAAS,CAGpB,CACE,SAAAC,EACA,GAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAA8E,CAC1E,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAeC,EAAgB,EAC/BC,EAAWC,EACbf,EACAgB,EAAiBhB,EAAUS,EAAkBC,CAAS,EACtDL,CACJ,EAEM,CAAE,OAAAY,CAAO,EAAIL,EACfI,EAAiBhB,EAAUS,EAAkBC,CAAS,CAC1D,EACMQ,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAEjD,OAAAC,GAAwB,CACpB,SAAAxB,EACA,MAAO,CAAC,GAAG,EACX,QAAS,aAAaA,IACtB,OAAQ,CACJ,IAAKC,EAAK,CAACA,CAAE,EAAI,CAAC,EAClB,GAAIA,EACJ,SAAAI,EACA,iBAAkB,SAClB,GAAGG,CACP,EACA,QAASN,GAAA,YAAAA,EAAc,QACvB,SAAAI,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBO,EAAS,OAAOb,CAAE,EAClB,CAAC,CAAE,SAAAa,EAAU,UAAAW,EAAW,OAAAC,CAAO,IAC3BT,EAAc,CACV,SAAAjB,EACA,GAAAC,EACA,SAAU,CACN,GAAGI,EACH,aAAc,CACV,SAAAS,EACA,UAAAW,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,EACL,CACI,GAAGxB,EACH,UAAYyB,GAAS,CA7HjC,IAAAC,GA8HgBA,EAAA1B,GAAA,YAAAA,EAAc,YAAd,MAAA0B,EAAA,KAAA1B,EAA0ByB,GAE1B,IAAME,EACF,OAAO1B,GAAwB,WACzBA,EAAoBwB,EAAM,CAAE,GAAA1B,EAAI,SAAAI,CAAS,EAAGL,CAAQ,EACpDG,EAEVmB,EAAmBO,CAAkB,CACzC,EACA,QAAUC,GAAgB,CAvItC,IAAAF,EAwIgBR,EAAWU,CAAG,GACdF,EAAA1B,GAAA,YAAAA,EAAc,UAAd,MAAA0B,EAAA,KAAA1B,EAAwB4B,GAExB,IAAMD,EACF,OAAOzB,GAAsB,WACvBA,EAAkB0B,EAAK,CAAE,GAAA7B,EAAI,SAAAI,CAAS,EAAGL,CAAQ,EACjDI,EAEVkB,EAAmBO,EAAoB,CACnC,IAAK,GAAG5B,KAAMD,wBACd,QAASkB,EACL,sBACA,CAAE,WAAYY,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EC/JA,IAAAC,GAIO,iCA8DA,IAAMC,GAAU,CAGrB,CACE,SAAAC,EACA,IAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAEK,CACD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAeC,EAAgB,EAC/BC,EAAWC,EACbf,EACAgB,EAAiBhB,EAAUS,EAAkBC,CAAS,EACtDL,CACJ,EAEM,CAAE,QAAAY,EAAS,OAAAC,CAAO,EAAIN,EACxBI,EAAiBhB,EAAUS,EAAkBC,CAAS,CAC1D,EAEMS,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAE3CC,GACFvB,GAAA,YAAAA,EAAc,WAAY,SAAaA,GAAA,YAAAA,EAAc,WAAY,GAErE,OAAAwB,GAAwB,CACpB,SAAA1B,EACA,MAAO,CAAC,GAAG,EACX,OAAQ,CACJ,IAAKC,GAAA,KAAAA,EAAO,CAAC,EACb,SAAAI,EACA,iBAAkB,UAClB,GAAGG,CACP,EACA,QAAS,aAAaR,IACtB,QAASyB,EACT,SAAAnB,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBO,EAAS,KAAKb,CAAG,EACjB,CAAC,CAAE,SAAAa,EAAU,UAAAa,EAAW,OAAAC,CAAO,IACvBX,EACOA,EAAQ,CACX,SAAAjB,EACA,IAAAC,EACA,SAAU,CACN,GAAGI,EACH,aAAc,CACV,SAAAS,EACA,UAAAa,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,EAEMC,GACH5B,EAAI,IAAK6B,GACLZ,EAAc,CACV,SAAAlB,EACA,GAAA8B,EACA,SAAU,CACN,GAAGzB,EACH,aAAc,CACV,SAAAS,EACA,UAAAa,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,CACL,CACJ,EAGR,CACI,GAAG1B,EACH,UAAY6B,GAAS,CA1JjC,IAAAC,GA2JgBA,EAAA9B,GAAA,YAAAA,EAAc,YAAd,MAAA8B,EAAA,KAAA9B,EAA0B6B,GAE1B,IAAME,EACF,OAAO9B,GAAwB,WACzBA,EAAoB4B,EAAM9B,EAAKD,CAAQ,EACvCG,EAEVoB,EAAmBU,CAAkB,CACzC,EACA,QAAUC,GAAgB,CApKtC,IAAAF,EAqKgBX,EAAWa,CAAG,GACdF,EAAA9B,GAAA,YAAAA,EAAc,UAAd,MAAA8B,EAAA,KAAA9B,EAAwBgC,GAExB,IAAMD,EACF,OAAO7B,GAAsB,WACvBA,EAAkB8B,EAAKjC,EAAKD,CAAQ,EACpCI,EAEVmB,EAAmBU,EAAoB,CACnC,IAAK,GAAGhC,EAAI,MAAMD,yBAClB,QAASmB,EACL,sBACA,CAAE,WAAYe,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EC5LA,IAAAC,GAKO,iCCLP,IAAAC,GAA6C,oBAC7CC,GAAoB,6BAOb,IAAMC,GAAuB,GAAAC,QAAM,cAAqC,CAC3E,cAAe,CAAC,EAChB,qBAAsB,IAAM,EAChC,CAAC,EAEKC,GAAiC,CAAC,EAE3BC,GAAuB,CAACC,EAAyBC,IAAgB,CAC1E,OAAQA,EAAO,gBAWP,MAAO,CACH,GAVaD,EAAM,OAClBE,GACU,KACH,GAAAC,SAAQD,EAAiB,GAAID,EAAO,QAAQ,EAAE,GAC9CC,EAAiB,UAAYD,EAAO,QAAQ,SAGxD,EAII,CACI,GAAGA,EAAO,QACV,UAAW,EACf,CACJ,eAEA,OAAOD,EAAM,OACRE,GACG,KACI,GAAAC,SAAQD,EAAiB,GAAID,EAAO,QAAQ,EAAE,GAC9CC,EAAiB,UAAYD,EAAO,QAAQ,SAExD,qCAEA,OAAOD,EAAM,IAAKE,MAEV,GAAAC,SAAQD,EAAiB,GAAID,EAAO,QAAQ,EAAE,GAC9CC,EAAiB,UAAYD,EAAO,QAAQ,SAErC,CACH,GAAGC,EACH,QAASD,EAAO,QAAQ,QAAU,GACtC,EAEGC,CACV,UAED,OAAOF,EAEnB,EAEaI,GAER,CAAC,CAAE,SAAAC,CAAS,IAAM,CACnB,GAAM,CAACC,EAAeC,CAAoB,KAAI,eAC1CR,GACAD,EACJ,EAEMU,EAAmB,CAAE,cAAAF,EAAe,qBAAAC,CAAqB,EAE/D,OACI,GAAAV,QAAA,cAACD,GAAqB,SAArB,CAA8B,MAAOY,GACjCH,EACA,OAAO,OAAW,KACfC,EAAc,IAAKG,GACf,GAAAZ,QAAA,cAACa,GAAA,CACG,IAAK,GAAGD,EAAa,MAAMA,EAAa,iBACxC,aAAcA,EAClB,CACH,CACT,CAER,ED7DA,IAAAE,GAAsB,wBA8Ff,IAAMC,GAAY,CAIvB,CACE,gBAAAC,CACJ,EAA+C,CAAC,IAI3C,CACD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,KAAc,mBAAe,EAC7BC,EAAeC,EAAgB,EAE/B,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACdC,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAUC,GAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjB,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAuUtC,SArUiB,gBAMb,CAAC,CACG,GAAAC,EACA,OAAAC,EACA,SAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAAM,CACF,IAAMC,EACFL,GAAA,KAAAA,EAAgBpB,EAEd0B,EACFL,GAAA,KAAAA,EAAmBpB,EAEvB,OAAMwB,IAA8B,WACzB3B,EACH6B,EAAiBR,EAAUK,EAAkB7B,CAAS,CAC1D,EAAE,OAA0B,CACxB,SAAAwB,EACA,GAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EAEiB,IAAI,QACtB,CAACK,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrBhC,EACI6B,EACIR,EACAK,EACA7B,CACJ,CACJ,EACK,OAA0B,CACvB,SAAAwB,EACA,GAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EACA,KAAMQ,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIP,GACAA,EAASW,CAAc,EAG3BtB,EAAqB,CACjB,WACA,QAAS,CACL,GAAIM,EACJ,SAAUE,EACV,eAAgBc,EAChB,WAAYH,EACZ,QAASJ,EACT,SAAU,CAAC,CAACJ,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,SAAAH,EACA,GAAAF,EACA,aAAAG,EACA,OAAAF,EACA,iBAAAM,CACJ,IAAM,CACF,IAAMU,EAAWC,EACbhB,EACAQ,EAAiBR,EAAUK,EAAkB7B,CAAS,CAC1D,EAEMyC,EACFvC,EAAY,eAAeqC,EAAS,WAAW,EAE7CT,EACFL,GAAA,KAAAA,EAAgBpB,EAEpB,aAAMH,EAAY,cACdqC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEMT,IAA8B,gBAEhC5B,EAAY,eACRqC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAEX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAAkB,CA5P9E,IAAAC,EA6PgC,QAAIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAevB,GAAA,YAAAA,EAAI,YACvB,CACH,GAAAA,EACA,GAAGC,CACP,EAEGqB,CACX,CAAC,EAED,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEAzC,EAAY,eACRqC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAAkB,CApR9E,IAAAC,EAqRgC,QAAIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAevB,GAAA,YAAAA,EAAI,cAC9BsB,EAAS,CACL,GAAAtB,EACA,GAAGC,CACP,GAEGqB,CACX,CAAC,EACD,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEAzC,EAAY,eACRqC,EAAS,OAAOjB,CAAE,EACjBoB,GACQA,EAIE,CACH,GAAGA,EACH,KAAM,CACF,GAAGA,EAAS,KACZ,GAAGnB,CACP,CACJ,EATW,IAWnB,GAGG,CACH,gBAAAkB,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CACPO,EACAC,EACA,CACI,GAAAzB,EACA,SAAAE,EACA,iBAAAK,EACA,YAAAmB,EAAc,CAAC,OAAQ,OAAQ,QAAQ,CAC3C,IACC,CACD5B,EAAgB,CACZ,SAAAI,EACA,iBAAkBQ,EACdR,EACAK,EACA7B,CACJ,EACA,YAAAgD,EACA,GAAA1B,CACJ,CAAC,EAEDN,EAAqB,CACjB,cACA,QAAS,CAAE,GAAAM,EAAI,SAAAE,CAAS,CAC5B,CAAC,CACL,EACA,UAAW,CACPmB,EACA,CACI,GAAArB,EACA,SAAAE,EACA,oBAAAyB,EACA,iBAAApB,EACA,OAAAN,EACA,SAAAK,CACJ,EACAsB,IACC,CAhWjB,IAAAL,EAiWgB,IAAMM,EAAmB,GAAAC,QAAU,SAAS5B,CAAQ,EAE9C6B,EACF,OAAOJ,GAAwB,WACzBA,EAAoBN,EAAM,CAAE,GAAArB,EAAI,OAAAC,CAAO,EAAGC,CAAQ,EAClDyB,EAEV/B,EAAmBmC,EAAoB,CACnC,IAAK,GAAG/B,KAAME,iBACd,YAAahB,EACT,wBACA,YACJ,EACA,QAASA,EACL,4BACA,CACI,SAAUA,EACN,GAAGgB,KAAYA,IACf2B,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,KAAM,SACV,CAAC,EAEDvC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaY,IACtB,KAAM,UACN,QAAS,CACL,KAAKqB,EAAAF,EAAK,OAAL,MAAAE,EAAW,GAAK,CAACF,EAAK,KAAK,EAAE,EAAI,MAC1C,EACA,KAAM,IAAI,IACd,GAEA,IAAIW,EACJ,GAAIJ,EAAS,CACT,IAAMK,EAAYrD,EAAY,aAE5BgD,EAAQ,SAAS,OAAO5B,CAAE,CAAC,EAE7BgC,EAAe,OAAO,KAAK/B,CAAM,EAAE,OAC/B,CAACiC,EAAKC,IAAS,CA3YvC,IAAAZ,GA4Y4B,OAAAW,EAAIC,IAAQZ,GAAAU,GAAA,YAAAA,EAAW,OAAX,YAAAV,GAAkBY,GACvBD,CACX,EACA,CAAC,CACL,CACJ,CAEA,GAAM,CAAE,OAAAE,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1CjC,GAAY,CAAC,EAEjBd,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAU,EACA,KAAMD,EACN,aAAA+B,EACA,KAAM,CACF,GAAAhC,EACA,iBAAkBU,EACdR,EACAK,EACA7B,CACJ,EACA,GAAG6D,CACP,CACJ,EACJ,EACA,QAAS,CACLxB,EACA,CAAE,GAAAf,EAAI,SAAAE,EAAU,kBAAAsC,EAAmB,OAAAvC,CAAO,EAC1C2B,IACC,CAGD,GAAIA,EACA,QAAWa,KAASb,EAAQ,gBACxBhD,EAAY,aAAa6D,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAI1B,EAAI,UAAY,oBAAqB,CACrC3B,GAAA,MAAAA,EAAa2B,GAEb,IAAMc,EAAmB,GAAAC,QAAU,SAAS5B,CAAQ,EAE9C6B,EACF,OAAOS,GAAsB,WACvBA,EAAkBzB,EAAK,CAAE,GAAAf,EAAI,OAAAC,CAAO,EAAGC,CAAQ,EAC/CsC,EAEV5C,EAAmBmC,EAAoB,CACnC,IAAK,GAAG/B,KAAME,iBACd,QAAShB,EACL,0BACA,CACI,SAAUA,EACN,GAAGgB,KAAYA,IACf2B,CACJ,EACA,WAAYd,EAAI,UACpB,EACA,uBAAuBc,mBAAkCd,EAAI,aACjE,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,EACA,GAAGtC,CACP,CACJ,CAGJ,EEpdA,IAAAiE,GAIO,iCACPC,GAAsB,wBAqFf,IAAMC,GAAY,CAIvB,CACE,gBAAAC,CACJ,EAA+C,CAAC,IAI3C,CACD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAeC,EAAgB,EAC/BC,EAAkBC,GAAc,EAEhC,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAE5BC,EAAYC,EAAa,EACzBC,EAAUC,GAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjBC,EAAqBC,EAAsB,EAmIjD,SAjIiB,gBAMb,CAAC,CACG,SAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IACWjB,EACHkB,EAAiBJ,EAAUG,EAAkBb,CAAS,CAC1D,EAAE,OAA0B,CACxB,SAAAU,EACA,UAAWC,EACX,SAAAC,CACJ,CAAC,EAEL,CACI,UAAW,CACPG,EACA,CACI,SAAAL,EACA,oBAAqBM,EACrB,iBAAAH,EACA,YAAAI,EAAc,CAAC,OAAQ,MAAM,EAC7B,OAAAN,EACA,SAAAC,CACJ,IACC,CA/IjB,IAAAM,EAAAC,EAAAC,EAgJgB,IAAMC,EAAmB,GAAAC,QAAU,SAASZ,CAAQ,EAE9Ca,EACF,OAAOP,GAAgC,WACjCA,EAA4BD,EAAMJ,EAAQD,CAAQ,EAClDM,EAEVR,EAAmBe,EAAoB,CACnC,IAAK,UAAUb,iBACf,QAASR,EACL,8BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfW,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,YAAanB,EAAU,wBAAyB,SAAS,EACzD,KAAM,SACV,CAAC,EAEDJ,EAAgB,CACZ,SAAAY,EACA,iBAAkBI,EACdJ,EACAG,EACAb,CACJ,EACA,YAAAiB,CACJ,CAAC,EAEDb,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaM,IACtB,KAAM,UACN,QAAS,CACL,KAAKQ,EAAAH,GAAA,YAAAA,EAAM,OAAN,MAAAG,EAAY,GAAK,CAACH,EAAK,KAAK,EAAE,EAAI,MAC3C,EACA,KAAM,IAAI,IACd,GAEA,GAAM,CAAE,OAAAS,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1Cf,GAAY,CAAC,EAEjBN,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAI,EACA,KAAMC,EACN,KAAM,CACF,iBAAkBG,EACdJ,EACAG,EACAb,CACJ,EACA,IAAIoB,GAAAD,EAAAJ,GAAA,YAAAA,EAAM,OAAN,YAAAI,EAAY,KAAZ,KAAAC,EAAkB,OACtB,GAAGO,CACP,CACJ,EACJ,EACA,QAAS,CACLC,EACA,CACI,SAAAlB,EACA,kBAAmBmB,EACnB,OAAAlB,CACJ,IACC,CACDjB,EAAWkC,CAAG,EACd,IAAMP,EAAmB,GAAAC,QAAU,SAASZ,CAAQ,EAE9Ca,EACF,OAAOM,GAA8B,WAC/BA,EAA0BD,EAAKjB,EAAQD,CAAQ,EAC/CmB,EAEVrB,EAAmBe,EAAoB,CACnC,IAAK,UAAUb,iBACf,YAAakB,EAAI,QACjB,QAAS1B,EACL,4BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfW,CACJ,EACA,WAAYO,EAAI,UACpB,EACA,+BAA+BP,mBAAkCO,EAAI,aACzE,EACA,KAAM,OACV,CAAC,CACL,EACA,GAAGnC,CACP,CACJ,CAGJ,EClPA,IAAAqC,GAKO,iCACPC,GAAsB,wBAiFf,IAAMC,GAAY,CAIvB,CACE,gBAAAC,CACJ,EAA+C,CAAC,IAI3C,CACD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,KAAc,mBAAe,EAE7B,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EAEd,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAYC,EAAa,EACzBC,EAAUC,GAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EA4RtC,SA1RiB,gBAMb,CAAC,CACG,GAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAAM,CACF,IAAMC,EACFP,GAAA,KAAAA,EAAgBhB,EAEdwB,EACFP,GAAA,KAAAA,EAAmBhB,EAEvB,OAAMsB,IAA8B,WACzB5B,EACH8B,EAAiBP,EAAUG,EAAkBxB,CAAS,CAC1D,EAAE,UAA6B,CAC3B,SAAAqB,EACA,GAAAH,EACA,SAAAK,EACA,UAAWE,CACf,CAAC,EAGiB,IAAI,QACtB,CAACI,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrBjC,EACI8B,EACIP,EACAG,EACAxB,CACJ,CACJ,EACK,UAA6B,CAC1B,SAAAqB,EACA,GAAAH,EACA,SAAAK,EACA,UAAWE,CACf,CAAC,EACA,KAAMO,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIR,GACAA,EAASY,CAAc,EAG3B5B,EAAqB,CACjB,WACA,QAAS,CACL,GAAAY,EACA,SAAUG,EACV,eAAgBa,EAChB,WAAYH,EACZ,QAASJ,EACT,SAAU,CAAC,CAACL,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,GAAAJ,EACA,SAAAG,EACA,aAAAF,EACA,iBAAAK,CACJ,IAAM,CACF,IAAMW,EAAWC,EACbf,EACAO,EAAiBP,EAAUG,EAAkBxB,CAAS,CAC1D,EAEM0B,EACFP,GAAA,KAAAA,EAAgBhB,EAEpB,MAAMD,EAAY,cACdiC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EACFnC,EAAY,eAAeiC,EAAS,WAAW,EAEnD,OAAMT,IAA8B,gBAEhCxB,EAAY,eACRiC,EAAS,KAAK,EACbG,GACQA,EAQE,CACH,KANSA,EAAS,KAAK,OACtBC,GAAe,CAnOhD,IAAAC,EAoOoC,QAAAA,EAAAD,EAAO,KAAP,YAAAC,EAAW,cAAetB,EAAG,SAAS,EAC9C,EAII,MAAOoB,EAAS,MAAQ,CAC5B,EAVW,IAYnB,EAEApC,EAAY,eACRiC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAEX,IAAMG,EAAOH,EAAS,KAAK,OACtBC,GAAkB,CArPnD,IAAAC,EAsPoC,QACIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAetB,GAAA,YAAAA,EAAI,WAEtC,CACJ,EAEA,MAAO,CACH,GAAGoB,EACH,KAAAG,CACJ,CACJ,CACJ,GAGG,CACH,gBAAAJ,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CACPO,EACAC,EACA,CACI,GAAAzB,EACA,SAAAG,EACA,iBAAAG,EACA,YAAAoB,EAAc,CAAC,OAAQ,MAAM,CACjC,IACC,CAED5B,EAAgB,CACZ,SAAAK,EACA,iBAAkBO,EACdP,EACAG,EACAxB,CACJ,EACA,YAAA4C,CACJ,CAAC,EAEDtC,EAAqB,CACjB,cACA,QAAS,CAAE,GAAAY,EAAI,SAAAG,CAAS,CAC5B,CAAC,CACL,EACA,UAAW,CACPqB,EACA,CACI,GAAAxB,EACA,SAAAG,EACA,oBAAAwB,EACA,iBAAArB,EACA,SAAAD,CACJ,EACAuB,IACC,CACD,IAAMC,EAAmB,GAAAC,QAAU,SAAS3B,GAAA,KAAAA,EAAY,EAAE,EAG1DnB,EAAY,cAAc4C,GAAA,YAAAA,EAAS,SAAS,OAAO5B,EAAG,EAEtD,IAAM+B,EACF,OAAOJ,GAAwB,WACzBA,EAAoBH,EAAOxB,EAAIG,CAAQ,EACvCwB,EAEV/B,EAAmBmC,EAAoB,CACnC,IAAK,GAAG/B,KAAMG,iBACd,YAAab,EAAU,wBAAyB,SAAS,EACzD,QAASA,EACL,8BACA,CACI,SAAUA,EACN,GAAGa,KAAYA,IACf0B,CACJ,CACJ,EACA,0BAA0BA,GAC9B,EACA,KAAM,SACV,CAAC,EAEDrC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaW,IACtB,KAAM,UACN,QAAS,CACL,IAAKH,EAAK,CAACA,CAAE,EAAI,CAAC,CACtB,EACA,KAAM,IAAI,IACd,GAEA,GAAM,CAAE,OAAAgC,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1C9B,GAAY,CAAC,EAEjBX,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAS,EACA,KAAM,CACF,GAAAH,EACA,iBAAkBU,EACdP,EACAG,EACAxB,CACJ,EACA,GAAGqD,CACP,CACJ,GAGAnD,EAAY,cAAc4C,GAAA,YAAAA,EAAS,SAAS,OAAO5B,EAAG,CAC1D,EACA,QAAS,CACLe,EACA,CAAE,GAAAf,EAAI,SAAAG,EAAU,kBAAAiC,CAAkB,EAClCR,IACC,CAED,GAAIA,EACA,QAAWS,KAAST,EAAQ,gBACxB5C,EAAY,aAAaqD,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAItB,EAAI,UAAY,oBAAqB,CACrCrC,EAAWqC,CAAG,EAEd,IAAMc,EAAmB,GAAAC,QAAU,SAAS3B,GAAA,KAAAA,EAAY,EAAE,EAEpD4B,EACF,OAAOK,GAAsB,WACvBA,EAAkBrB,EAAKf,EAAIG,CAAQ,EACnCiC,EAEVxC,EAAmBmC,EAAoB,CACnC,IAAK,GAAG/B,KAAMG,iBACd,QAASb,EACL,4BACA,CACI,SAAUuC,EACV,WAAYd,EAAI,UACpB,EACA,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,EACA,GAAGtC,CACP,CACJ,CAGJ,EC/YA,IAAA6D,GAIO,iCACPC,GAAsB,wBAkEf,IAAMC,GAAgB,CAI3B,CACE,gBAAAC,CACJ,EAAmD,CAAC,IAI/C,CACD,IAAMC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAYC,EAAa,EACzBC,EAAUC,GAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAuHtC,SArHiB,gBAKb,CAAC,CACG,SAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAAuC,CACnC,IAAMC,EAAuBhB,EACzBiB,EAAiBL,EAAUG,EAAkBb,CAAS,CAC1D,EAEA,OAAIc,EAAqB,WACdA,EAAqB,WAA8B,CACtD,SAAAJ,EACA,UAAWC,EACX,SAAAC,CACJ,CAAC,EAEMI,GACHL,EAAO,IAAKM,GACRH,EAAqB,OAA0B,CAC3C,SAAAJ,EACA,UAAWO,EACX,SAAAL,CACJ,CAAC,CACL,CACJ,CAER,EACA,CACI,UAAW,CACPM,EACA,CACI,SAAAR,EACA,oBAAAS,EACA,iBAAAN,EACA,YAAAO,EAAc,CAAC,OAAQ,MAAM,EAC7B,OAAAT,CACJ,IACC,CACD,IAAMU,EAAiB,GAAAC,QAAU,OAAOZ,CAAQ,EAE1Ca,EACF,OAAOJ,GAAwB,WACzBA,EAAoBD,EAAUP,EAAQD,CAAQ,EAC9CS,EAEVb,EAAmBiB,EAAoB,CACnC,IAAK,cAAcb,iBACnB,QAASR,EACL,8BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwBW,GAC5B,EACA,YAAanB,EAAU,wBAAyB,SAAS,EACzD,KAAM,SACV,CAAC,EAEDM,EAAgB,CACZ,SAAAE,EACA,iBAAkBK,EACdL,EACAG,EACAb,CACJ,EACA,YAAAoB,CACJ,CAAC,EAED,IAAMI,EAAMN,GAAA,YAAAA,EAAU,KACjB,OAAQO,IAASA,GAAA,YAAAA,EAAM,MAAO,QAC9B,IAAKA,GAASA,EAAK,IAExBrB,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaM,IACtB,KAAM,UACN,QAAS,CACL,IAAAc,CACJ,EACA,KAAM,IAAI,IACd,EACJ,EACA,QAAS,CAACE,EAAa,CAAE,SAAAhB,EAAU,kBAAAiB,EAAmB,OAAAhB,CAAO,IAAM,CAC/D,IAAMY,EACF,OAAOI,GAAsB,WACvBA,EAAkBD,EAAKf,EAAQD,CAAQ,EACvCiB,EAEVrB,EAAmBiB,EAAoB,CACnC,IAAK,cAAcb,iBACnB,YAAagB,EAAI,QACjB,QAASxB,EACL,4BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfA,CACJ,EACA,WAAYgB,EAAI,UACpB,EACA,+BAA+BhB,mBAA0BgB,EAAI,YACjE,EACA,KAAM,OACV,CAAC,CACL,EACA,GAAG7B,CACP,CACJ,CAGJ,EChNA,IAAA+B,GAKO,iCACPC,GAAsB,wBAoFf,IAAMC,GAAgB,CAI3B,CACE,gBAAAC,CACJ,EAAmD,CAAC,IAI/C,CACD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,KAAc,mBAAe,EAC7BC,EAAeC,EAAgB,EAC/BC,EAAYC,EAAa,EAEzB,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACd,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvC,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAUC,GAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAyTtC,SAvTiB,gBAMb,CAAC,CACG,IAAAC,EACA,OAAAC,EACA,SAAAC,EACA,SAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAAoC,CAChC,IAAMC,EACFJ,GAAA,KAAAA,EAAgBjB,EAEdsB,EACFJ,GAAA,KAAAA,EAAmBjB,EAEjBsB,EAAuB3B,EACzB4B,EAAiBT,EAAUK,EAAkB3B,CAAS,CAC1D,EAEMgC,EAAa,IACXF,EAAqB,WACdA,EAAqB,WAA8B,CACtD,SAAAR,EACA,IAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EAEMO,GACHb,EAAI,IAAKc,GACLJ,EAAqB,OAA0B,CAC3C,SAAAR,EACA,GAAAY,EACA,UAAWb,EACX,SAAAK,CACJ,CAAC,CACL,CACJ,EAIR,OAAME,IAA8B,WACzBI,EAAW,EAGA,IAAI,QACtB,CAACG,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrBL,EAAW,EACN,KAAMM,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIb,GACAA,EAASiB,CAAc,EAG3B5B,EAAqB,CACjB,WACA,QAAS,CACL,GAAIQ,EACJ,SAAUE,EACV,eAAgBkB,EAChB,WAAYH,EACZ,QAASR,EACT,SAAU,CAAC,CAACN,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EAEA,CACI,SAAU,MAAO,CACb,SAAAD,EACA,IAAAF,EACA,OAAAC,EACA,aAAAG,EACA,iBAAAG,EACA,SAAAD,CACJ,IAAM,CACF,IAAMe,EAAWC,EACbpB,EACAS,EAAiBT,EAAUK,EAAkB3B,CAAS,EACtD0B,CACJ,EAEME,EACFJ,GAAA,KAAAA,EAAgBjB,EAEpB,MAAML,EAAY,cACduC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EAAkBzC,EAAY,eAElCuC,EAAS,WAAW,EAEtB,GAAMb,IAA8B,cAAgB,CAEhD1B,EAAY,eACRuC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAExBA,EAAO,KAAO,QACd1B,EACK,OAAQc,GAAOA,IAAO,MAAS,EAC/B,IAAI,MAAM,EACV,SAASY,EAAO,GAAG,SAAS,CAAC,EAE3B,CACH,GAAGA,EACH,GAAGzB,CACP,EAGGyB,CACV,EAED,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEA3C,EAAY,eACRuC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAExBA,EAAO,KAAO,QACd1B,EACK,OAAQc,GAAOA,IAAO,MAAS,EAC/B,IAAI,MAAM,EACV,SAASY,EAAO,GAAG,SAAS,CAAC,EAE3B,CACH,GAAGA,EACH,GAAGzB,CACP,EAEGyB,CACV,EACD,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EACA,QAAWX,KAAMd,EACblB,EAAY,eACRuC,EAAS,OAAOP,CAAE,EACjBU,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAO,CACT,GAAGD,EAAS,KACZ,GAAGvB,CACP,EACA,MAAO,CACH,GAAGuB,EACH,KAAAC,CACJ,CACJ,CACJ,CAER,CAEA,MAAO,CACH,gBAAAF,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CAACM,EAAOC,EAAQ,CAAE,IAAA5B,EAAK,SAAAE,EAAU,iBAAAK,CAAiB,IAAM,CAE/DT,EAAgB,CACZ,SAAAI,EACA,YAAa,CAAC,OAAQ,MAAM,EAC5B,iBAAkBS,EACdT,EACAK,EACA3B,CACJ,CACJ,CAAC,EAEDoB,EAAI,QAASc,GACThB,EAAgB,CACZ,SAAAI,EACA,YAAa,CAAC,QAAQ,EACtB,iBAAkBS,EACdT,EACAK,EACA3B,CACJ,EACA,GAAAkC,CACJ,CAAC,CACL,EAEAtB,EAAqB,CACjB,cACA,QAAS,CAAE,GAAIQ,EAAK,SAAAE,CAAS,CACjC,CAAC,CACL,EACA,UAAW,CACPuB,EACA,CAAE,IAAAzB,EAAK,SAAAE,EAAU,oBAAA2B,EAAqB,OAAA5B,CAAO,IAC5C,CACD,IAAM6B,EAAmB,GAAAC,QAAU,SAAS7B,CAAQ,EAE9C8B,EACF,OAAOH,GAAwB,WACzBA,EAAoBJ,EAAM,CAAE,IAAAzB,EAAK,OAAAC,CAAO,EAAGC,CAAQ,EACnD2B,EAEVjC,EAAmBoC,EAAoB,CACnC,IAAK,GAAGhC,KAAOE,iBACf,YAAajB,EACT,wBACA,YACJ,EACA,QAASA,EACL,4BACA,CACI,SAAUA,EACN,GAAGiB,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwB4B,GAC5B,EACA,KAAM,SACV,CAAC,EAEDpC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaQ,IACtB,KAAM,UACN,QAAS,CACL,IAAKF,EAAI,IAAI,MAAM,CACvB,EACA,KAAM,IAAI,IACd,EACJ,EACA,QAAS,CACLmB,EACA,CAAE,IAAAnB,EAAK,SAAAE,EAAU,kBAAA+B,EAAmB,OAAAhC,CAAO,EAC3CiC,IACC,CAED,GAAIA,EACA,QAAWC,KAASD,EAAQ,gBACxBpD,EAAY,aAAaqD,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAIhB,EAAI,UAAY,oBAAqB,CACrC7B,GAAA,MAAAA,EAAa6B,GAEb,IAAMW,EAAmB,GAAAC,QAAU,SAAS7B,CAAQ,EAE9C8B,EACF,OAAOC,GAAsB,WACvBA,EAAkBd,EAAK,CAAE,IAAAnB,EAAK,OAAAC,CAAO,EAAGC,CAAQ,EAChD+B,EAEVrC,EAAmBoC,EAAoB,CACnC,IAAK,GAAGhC,KAAOE,kCACf,QAASjB,EACL,0BACA,CACI,SAAU6C,EACV,WAAYX,EAAI,UACpB,EACA,uBAAuBW,mBAAkCX,EAAI,aACjE,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,EACA,GAAGxC,CACP,CACJ,CAGJ,EC5aA,IAAAyD,GAKO,iCACPC,GAAsB,wBAgFf,IAAMC,GAAgB,CAI3B,CACE,gBAAAC,CACJ,EAAmD,CAAC,IAI/C,CACD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EAEvC,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACdC,EAAeC,EAAgB,EAE/B,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAYC,EAAa,EACzBC,EAAUC,GAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAEhC,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,KAAc,mBAAe,EA8RnC,SA5RiB,gBAMb,CAAC,CACG,SAAAC,EACA,IAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAAoC,CAChC,IAAMC,EACFN,GAAA,KAAAA,EAAgBpB,EAEd2B,EACFN,GAAA,KAAAA,EAAmBpB,EAEjB2B,EAAuBzB,EACzB0B,EAAiBX,EAAUM,EAAkBT,CAAS,CAC1D,EAEMe,EAAa,IACXF,EAAqB,WACdA,EAAqB,WAA8B,CACtD,SAAAV,EACA,IAAAC,EACA,SAAAI,EACA,UAAWE,CACf,CAAC,EAEMM,GACHZ,EAAI,IAAKa,GACLJ,EAAqB,UAA6B,CAC9C,SAAAV,EACA,GAAAc,EACA,SAAAT,EACA,UAAWE,CACf,CAAC,CACL,CACJ,EAIR,OAAMC,IAA8B,WACzBI,EAAW,EAGA,IAAI,QACtB,CAACG,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrBL,EAAW,EACN,KAAMM,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIZ,GACAA,EAASgB,CAAc,EAG3BjC,EAAqB,CACjB,WACA,QAAS,CACL,GAAIc,EACJ,SAAUD,EACV,eAAgBoB,EAChB,WAAYH,EACZ,QAASR,EACT,SAAU,CAAC,CAACL,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,IAAAH,EACA,SAAAD,EACA,aAAAE,EACA,iBAAAI,CACJ,IAAM,CACF,IAAMe,EAAWC,EACbtB,EACAW,EAAiBX,EAAUM,EAAkBT,CAAS,CAC1D,EAEMW,EACFN,GAAA,KAAAA,EAAgBpB,EAEpB,MAAMiB,EAAY,cACdsB,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EACFxB,EAAY,eAAesB,EAAS,WAAW,EAEnD,GAAMb,IAA8B,cAAgB,CAEhDT,EAAY,eACRsB,EAAS,KAAK,EACbG,GACQA,EAYE,CACH,KATSA,EAAS,KAAK,OACtBC,GACGA,EAAK,IACL,CAACxB,EACI,IAAI,MAAM,EACV,SAASwB,EAAK,GAAG,SAAS,CAAC,CACxC,EAII,MAAOD,EAAS,MAAQ,CAC5B,EAdW,IAgBnB,EAEAzB,EAAY,eACRsB,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAME,EAAOF,EAAS,KAAK,OACtBG,GACOA,EAAO,GACA,CAAC1B,EACH,IAAI,MAAM,EACV,SAAS0B,EAAO,GAAG,SAAS,CAAC,EAE/B,EAEf,EAEA,MAAO,CACH,GAAGH,EACH,KAAAE,CACJ,CACJ,CACJ,EAEA,QAAWZ,KAAMb,EACbF,EAAY,eACRsB,EAAS,OAAOP,CAAE,EACjBU,GACO,CAACA,GAAYA,EAAS,KAAK,IAAMV,EAC1B,KAEJ,CACH,GAAGU,CACP,CAER,CAER,CAEA,MAAO,CACH,gBAAAD,EACA,SAAAF,CACJ,CACJ,EAEA,UAAW,CACPO,EACAC,EACA,CACI,SAAA7B,EACA,IAAAC,EACA,iBAAAK,EACA,YAAAwB,EAAc,CAAC,OAAQ,MAAM,CACjC,IACC,CAEDnC,EAAgB,CACZ,SAAAK,EACA,iBAAkBW,EACdX,EACAM,EACAT,CACJ,EACA,YAAAiC,CACJ,CAAC,EAED3C,EAAqB,CACjB,cACA,QAAS,CAAE,GAAIc,EAAK,SAAAD,CAAS,CACjC,CAAC,CACL,EACA,UAAW,CACP4B,EACA,CAAE,IAAA3B,EAAK,SAAAD,EAAU,oBAAA+B,CAAoB,EACrCC,IACC,CAED/B,EAAI,QAASa,GACTf,EAAY,cAAciC,GAAA,YAAAA,EAAS,SAAS,OAAOlB,EAAG,CAC1D,EAEA,IAAMmB,EACF,OAAOF,GAAwB,WACzBA,EAAoBH,EAAO3B,EAAKD,CAAQ,EACxC+B,EAEVtC,EAAmBwC,EAAoB,CACnC,IAAK,GAAGhC,KAAOD,iBACf,YAAaX,EAAU,wBAAyB,SAAS,EACzD,QAASA,EACL,8BACA,CACI,SAAUA,EACN,GAAGW,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,KAAM,SACV,CAAC,EAEDT,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaS,IACtB,KAAM,UACN,QAAS,CAAE,IAAAC,CAAI,EACf,KAAM,IAAI,IACd,GAGAA,EAAI,QAASa,GACTf,EAAY,cAAciC,GAAA,YAAAA,EAAS,SAAS,OAAOlB,EAAG,CAC1D,CACJ,EACA,QAAS,CAACK,EAAK,CAAE,IAAAlB,EAAK,SAAAD,EAAU,kBAAAkC,CAAkB,EAAGF,IAAY,CAE7D,GAAIA,EACA,QAAWG,KAASH,EAAQ,gBACxBjC,EAAY,aAAaoC,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAIhB,EAAI,UAAY,oBAAqB,CACrCvC,EAAWuC,CAAG,EACd,IAAMiB,EAAmB,GAAAC,QAAU,SAASrC,CAAQ,EAE9CiC,EACF,OAAOC,GAAsB,WACvBA,EAAkBf,EAAKlB,EAAKD,CAAQ,EACpCkC,EAEVzC,EAAmBwC,EAAoB,CACnC,IAAK,GAAGhC,KAAOD,iBACf,QAASX,EACL,4BACA,CACI,SAAU+C,EACV,WAAYjB,EAAI,UACpB,EACA,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,EACA,GAAGxC,CACP,CACJ,CAGJ,EC7YO,IAAM2D,GAAaC,GAAsC,CAC5D,IAAMC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIF,EAAaD,CAAgB,EAEnD,OAAOG,EAAU,CACrB,ECRA,IAAAC,GAIO,iCAkEA,IAAMC,GAAY,CAKvB,CACE,IAAAC,EACA,OAAAC,EACA,OAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAGK,CACD,IAAMC,EAAeC,EAAgB,EAE/B,CAAE,OAAAC,CAAO,EAAIF,EAAaD,CAAgB,EAC1C,CAAE,OAAQI,CAAW,EAAIC,EAAc,EACvCC,EAAYC,EAAa,EACzBC,EAAqBC,EAAsB,EAEjD,GAAIN,EA4DA,SA3DsB,aAClB,CACIH,EACA,SACAN,EACAD,EACA,CAAE,GAAGE,EAAQ,GAAGI,CAAS,CAC7B,EACA,CAAC,CAAE,SAAAW,EAAU,UAAAC,EAAW,OAAAC,CAAO,IAC3BT,EAAc,CACV,IAAAV,EACA,OAAAC,EACA,GAAGC,EACH,SAAU,CACN,GAAGI,EACH,aAAc,CACV,SAAAW,EACA,UAAAC,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,EACL,CACI,GAAGhB,EACH,UAAYiB,GAAS,CAxHrC,IAAAC,GAyHoBA,EAAAlB,GAAA,YAAAA,EAAc,YAAd,MAAAkB,EAAA,KAAAlB,EAA0BiB,GAE1B,IAAME,EACF,OAAOlB,GAAwB,WACzBA,EAAoBgB,EAAM,CACtB,GAAGlB,EACH,GAAGI,CACP,CAAC,EACDF,EAEVW,EAAmBO,CAAkB,CACzC,EACA,QAAUC,GAAgB,CArI1C,IAAAF,EAsIoBV,EAAWY,CAAG,GACdF,EAAAlB,GAAA,YAAAA,EAAc,UAAd,MAAAkB,EAAA,KAAAlB,EAAwBoB,GAExB,IAAMD,EACF,OAAOjB,GAAsB,WACvBA,EAAkBkB,EAAK,CAAE,GAAGrB,EAAQ,GAAGI,CAAS,CAAC,EACjDD,EAEVU,EAAmBO,EAAoB,CACnC,IAAK,GAAGrB,iBACR,QAASY,EACL,sBACA,CAAE,WAAYU,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,EAGA,MAAM,MAAM,0CAA0C,CAE9D,EC/JA,IAAAC,GAIO,iCAqEA,IAAMC,GAAoB,CAI/B,CACE,gBAAAC,CACJ,EAII,CAAC,IAA8D,CAC/D,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAC3CC,EAAeC,EAAgB,EAC/BC,EAAYC,EAAa,EAmF/B,SAjFiB,gBAMb,CAAC,CACG,IAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAA2C,CACvC,GAAM,CAAE,OAAAC,CAAO,EAAIV,EAAaQ,CAAgB,EAEhD,GAAIE,EACA,OAAOA,EAAc,CACjB,IAAAN,EACA,OAAAC,EACA,QAASC,EACT,SAAAC,EACA,QAAS,CAAE,GAAGE,GAAA,YAAAA,EAAQ,OAAQ,CAClC,CAAC,EAGL,MAAM,MAAM,0CAA0C,CAC1D,EACA,CACI,UAAW,CACPE,EACA,CACI,oBAAqBC,EACrB,OAAAH,EACA,SAAAF,CACJ,IACC,CACD,IAAMM,EACF,OAAOD,GAAgC,WACjCA,EAA4BD,EAAM,CAC9B,GAAGF,EACH,GAAGF,CACP,CAAC,EACDK,EAEVd,EAAmBe,CAAkB,CACzC,EACA,QAAS,CACLC,EACA,CACI,kBAAmBC,EACnB,OAAAV,EACA,OAAAI,EACA,SAAAF,CACJ,IACC,CACDX,EAAWkB,CAAG,EAEd,IAAMD,EACF,OAAOE,GAA8B,WAC/BA,EAA0BD,EAAK,CAC3B,GAAGL,EACH,GAAGF,CACP,CAAC,EACDQ,EAEVjB,EAAmBe,EAAoB,CACnC,IAAK,GAAGR,iBACR,QAASH,EACL,sBACA,CAAE,WAAYY,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,EACA,GAAGnB,CACP,CACJ,CAGJ,EC3KA,IAAAqB,GAAwC,iBCAxC,IAAAC,GAAkB,oBAQLC,GAAsB,KACxB,CACH,QAAS,CACL,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,UAAW,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACpD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,QAAS,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,EAAG,MAAO,CAAE,CAAC,EACrD,QAAS,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC3C,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC1C,UAAW,IAAM,EACrB,CACJ,GAGSC,GAAc,GAAAC,QAAM,cAC7BF,GAAoB,CACxB,EAEaG,GAKT,CAAC,CAAE,SAAAC,KAAaC,CAAK,IAAM,CAC3B,IAAIC,EACJ,MAAI,CAACD,EAAK,SAAW,CAACA,EAAK,OACvBC,EAAgBD,EAEhBC,EAAgB,CACZ,QAASD,CACb,EAGA,GAAAH,QAAA,cAACD,GAAY,SAAZ,CAAqB,MAAOK,GACxBF,CACL,CAER,EDzCO,IAAMG,EAAkB,IAKD,CAC1B,IAAMC,KAAU,eAAyCC,EAAW,EAuBpE,SArB2B,gBACtBC,GAA8B,CAC3B,GAAIA,EAAkB,CAElB,GAAI,CADiBF,EAAQE,GAEzB,MAAM,IAAI,MACN,IAAIA,4BACR,EAEJ,OAAOF,EAAQE,EACnB,CACA,GAAIF,EAAQ,QACR,OAAOA,EAAQ,QAEf,MAAM,IAAI,MACN,oEACJ,CACR,EACA,CAACA,CAAO,CACZ,CAGJ,EEtCA,IAAAG,GAIO,iCAsEA,IAAMC,GAAkB,CAG7B,CACE,SAAAC,EACA,OAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAGK,CACD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAeC,EAAgB,EAC/BC,EAAWC,EACbf,EACAgB,EAAiBhB,EAAUS,EAAkBC,CAAS,EACtDL,CACJ,EACM,CAAE,QAAAY,CAAQ,EAAIL,EAChBI,EAAiBhB,EAAUS,EAAkBC,CAAS,CAC1D,EAEMQ,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAE3CC,GACFtB,GAAA,YAAAA,EAAc,WAAY,SAAaA,GAAA,YAAAA,EAAc,WAAY,GAErE,OAAAuB,GAAwB,CACpB,SAAAzB,EACA,MAAO,CAAC,GAAG,EACX,OAAQ,CACJ,SAAAK,EACA,WAAYJ,GAAA,YAAAA,EAAQ,WACpB,cAAeA,GAAA,YAAAA,EAAQ,cACvB,KAAMA,GAAA,YAAAA,EAAQ,KACd,QAASA,GAAA,YAAAA,EAAQ,QACjB,iBAAkB,UAClB,GAAGO,CACP,EACA,QAAS,aAAaR,IACtB,QAASwB,EACT,SAAAlB,EACA,YAAAC,CACJ,CAAC,KAEqB,qBAClBO,EAAS,KAAKb,CAAM,EACpB,CAAC,CAAE,SAAAa,EAAU,UAAAY,EAAW,OAAAC,CAAO,IAAM,CACjC,GAAM,CAAE,cAAAC,KAAkBC,CAAW,EAAI5B,GAAU,CAAC,EAC9C6B,EAAa,CACf,GAAG7B,GAAA,YAAAA,EAAQ,WACX,QAASyB,CACb,EAEA,OAAOT,EAAe,CAClB,SAAAjB,EACA,GAAG6B,EACH,WAAAC,EACA,cAAAF,EACA,SAAU,CACN,GAAGvB,EACH,aAAc,CACV,SAAAS,EACA,UAAAY,EACA,OAAAC,CACJ,CACJ,CACJ,CAAC,EAAE,KAAK,CAAC,CAAE,KAAAI,EAAM,MAAAC,KAAUC,CAAK,KACrB,CACH,KAAAF,EACA,MAAAC,EACA,WAAAF,EACA,GAAGG,CACP,EACH,CACL,EACA,CACI,iBAAmBC,GAAaC,GAAiBD,CAAQ,EACzD,qBAAuBA,GAAaE,GAAqBF,CAAQ,EACjE,GAAGhC,EACH,UAAY6B,GAAS,CAnKjC,IAAAM,GAoKgBA,EAAAnC,GAAA,YAAAA,EAAc,YAAd,MAAAmC,EAAA,KAAAnC,EAA0B6B,GAE1B,IAAMO,EACF,OAAOnC,GAAwB,WACzBA,EACI4B,EACA,CAAE,SAAA1B,EAAU,OAAAJ,CAAO,EACnBD,CACJ,EACAG,EAEVmB,EAAmBgB,CAAkB,CACzC,EACA,QAAUC,GAAgB,CAjLtC,IAAAF,EAkLgBjB,EAAWmB,CAAG,GACdF,EAAAnC,GAAA,YAAAA,EAAc,UAAd,MAAAmC,EAAA,KAAAnC,EAAwBqC,GAExB,IAAMD,EACF,OAAOlC,GAAsB,WACvBA,EAAkBmC,EAAK,CAAE,SAAAlC,EAAU,OAAAJ,CAAO,EAAGD,CAAQ,EACrDI,EAEVkB,EAAmBgB,EAAoB,CACnC,IAAK,GAAGtC,iCACR,QAASkB,EACL,sBACA,CAAE,WAAYqB,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,ECzMA,IAAAC,GAAsC,iBACtCC,GAA+B,iCCD/B,IAAAC,GAAkB,oBAILC,GAAc,GAAAC,QAAM,cAA4B,MAAS,EAEzDC,GAAsD,CAAC,CAChE,aAAAC,EACA,SAAAC,CACJ,IAEQ,GAAAH,QAAA,cAACD,GAAY,SAAZ,CAAqB,MAAOG,GACxBC,CACL,ED0BD,IAAMC,GAA0B,CAAC,CACpC,SAAAC,EACA,OAAAC,EACA,QAAAC,EACA,MAAAC,EACA,QAAAC,EAAU,GACV,SAAUC,EACV,YAAAC,CACJ,IAA0C,CACtC,IAAMC,KAAc,mBAAe,EAC7BC,EAAWC,EAAUT,CAAQ,EAE7BU,KAAkB,eAAyBC,EAAW,EACtD,CACF,SAAUC,EACV,YAAaC,CACjB,KAAI,eAA2BC,EAAa,EAEtCC,EAAWV,GAAA,KAAAA,EAAoBO,KAErC,cAAU,IAAM,CACZ,IAAII,EAEJ,OAAID,GAAYA,IAAa,OAASX,IAClCY,EAAeN,GAAA,YAAAA,EAAiB,UAAU,CACtC,QAAAR,EACA,OAAQ,CACJ,SAAAF,EACA,GAAGC,CACP,EACA,MAAAE,EACA,SAAWc,GAAU,CACbF,IAAa,QACbR,EAAY,kBAAkBC,EAAS,WAAW,EAGtDF,GAAA,MAAAA,EAAcW,GACdJ,GAAA,MAAAA,EAA6BI,EACjC,CACJ,IAGG,IAAM,CACLD,IACAN,GAAA,MAAAA,EAAiB,YAAYM,GAErC,CACJ,EAAG,CAACZ,CAAO,CAAC,CAChB,EEvFA,IAAAc,GAA2B,iBAIpB,IAAMC,GACTC,GAC4B,CAC5B,GAAM,CAAE,SAAUC,CAAoB,KAClC,eAA2BC,EAAa,EAE5C,OAAOF,GAAA,KAAAA,EAAYC,CACvB,ECXA,IAAAE,GAAsC,iBA8C/B,IAAMC,GAAkB,CAAC,CAC5B,OAAAC,EACA,QAAAC,EACA,MAAAC,EAAQ,CAAC,GAAG,EACZ,QAAAC,EAAU,GACV,YAAAC,CACJ,IAAkC,CAC9B,IAAMC,KAAkB,eAAyBC,EAAW,KAE5D,cAAU,IAAM,CACZ,IAAIC,EAEJ,OAAIJ,IACAI,EAAeF,GAAA,YAAAA,EAAiB,UAAU,CACtC,QAAAJ,EACA,OAAAD,EACA,MAAAE,EACA,SAAUE,CACd,IAGG,IAAM,CACLG,IACAF,GAAA,MAAAA,EAAiB,YAAYE,GAErC,CACJ,EAAG,CAACJ,CAAO,CAAC,CAChB,ECzEA,IAAAK,GAA2B,iBAKpB,IAAMC,GAAyD,IAAM,CACxE,IAAMC,KAAc,eAAyBC,EAAW,EAExD,OAAOD,GAAA,YAAAA,EAAa,OACxB,ECTA,IAAAE,GAA2B,iBCA3B,IAAAC,GAAiC,oBAWpBC,GAAkB,GAAAC,QAAM,cAAgC,CACjE,UAAW,CAAC,CAChB,CAAC,EAEYC,GAET,CAAC,CAAE,UAAAC,EAAW,SAAAC,CAAS,IAEnB,GAAAH,QAAA,cAACD,GAAgB,SAAhB,CAAyB,MAAO,CAAE,UAAAG,CAAU,GACxCC,CACL,EDqBD,IAAMC,EAAc,CAAC,CACxB,aAAcC,EACd,wBAAAC,EACA,aAAAC,CACJ,EAA0B,CAAC,IAA6B,CACpD,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAE1CC,EAAoBC,GAAqB,EAEzC,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjCC,EAASF,EAAgC,EAEzCG,EAAWL,EACbJ,GAAA,KAAAA,EAA2BQ,EAAO,QACtC,EAEME,EAAeX,GAAA,KAAAA,EAAoBU,EAAS,KAE5CE,EAAKV,GAAA,KAAAA,EAAgBO,EAAO,GAElC,MAAO,CAAE,UAAAN,EAAW,SAAAO,EAAU,aAAAC,EAAc,GAAAC,EAAI,OAAQH,EAAO,MAAO,CAC1E,EEhEA,IAAAI,GAAwC,iBAMjC,IAAMC,GAAuB,IAAsC,CACtE,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAoBhD,SAlB0B,gBACrBC,GAAkB,CACf,IAAMC,EAAWH,EAAU,KAAMI,GAAMA,EAAE,QAAUF,CAAK,EAExD,GAAI,CAACC,EAAU,CACX,IAAME,EAAmBL,EAAU,KAC9BI,GAAMA,EAAE,OAASF,CACtB,EACA,OACIG,GAAA,KAAAA,EACC,CAAE,KAAMH,EAAO,MAAOA,CAAM,CAErC,CACA,OAAOC,CACX,EACA,CAACH,CAAS,CACd,CAGJ,EC5BA,IAAAM,GAA2B,iBAUpB,IAAMC,GAAmD,IAAM,CAClE,GAAM,CAAE,cAAAC,EAAe,qBAAAC,CAAqB,KACxC,eAAkCC,EAAoB,EAE1D,MAAO,CAAE,cAAAF,EAAe,qBAAAC,CAAqB,CACjD,ECfA,IAAAE,GAA2B,iBCA3B,IAAAC,GAAqC,oBAO9B,IAAMC,MAAsB,kBAAoC,CAAC,CAAC,EAE5DC,GAIT,CAAC,CAAE,KAAAC,EAAM,MAAAC,EAAO,SAAAC,CAAS,IAErB,GAAAC,QAAA,cAACL,GAAoB,SAApB,CAA6B,MAAO,CAAE,KAAAE,EAAM,MAAAC,CAAM,GAC9CC,CACL,EDZD,IAAME,GAAkB,IAA4B,CACvD,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,KAAI,eAAWC,EAAmB,EAEtD,MAAO,CAAE,KAAAF,EAAM,MAAAC,CAAM,CACzB,EETA,IAAAE,GAA4B,iBAKrB,IAAMC,EAAwB,IAAiC,CAClE,GAAM,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EAkBjC,SAhB2B,gBACvB,CACIC,EACAC,IACC,CACGD,IAAiB,KACbA,EACAF,GAAA,MAAAA,EAAOE,GACAC,IACPH,GAAA,MAAAA,EAAOG,IAGnB,EACA,CAAC,CACL,CAGJ,ECzBA,IAAAC,GAAwC,iBCAxC,IAAAC,GAAkB,oBAOX,IAAMC,GAAqB,GAAAC,QAAM,cAAmC,CAAC,CAAC,EAEhEC,GAIT,CAAC,CAAE,SAAAC,EAAU,aAAAC,CAAa,IAEtB,GAAAH,QAAA,cAACD,GAAmB,SAAnB,CACG,MAAO,CACH,aAAcI,CAClB,GAECD,CACL,EDZD,IAAME,GAAe,IAAM,CAC9B,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEtD,SAAO,gBAAaC,GAAiBF,GAAA,YAAAA,EAAc,aAAaE,GAAO,CAAC,CAAC,CAC7E,EEbA,IAAAC,GAAoC,iBAS7B,IAAMC,EAAe,IAAM,CAC9B,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EA4BtD,SA1BW,YAAQ,IAAM,CAQrB,SAASC,EACLC,EACAC,EACAC,EACF,CAxBV,IAAAC,EAAAC,EAyBY,OACIA,GAAAD,EAAAN,GAAA,YAAAA,EAAc,UAAUG,EAAKC,EAASC,KAAtC,KAAAC,EACAD,IADA,KAAAE,EAEC,OAAOH,GAAY,UACpB,OAAOC,EAAmB,IACpBD,EACAD,CAEd,CAEA,OAAOD,CACX,EAAG,CAACF,CAAY,CAAC,CAGrB,ECvCA,IAAAQ,GAAwC,iBAWjC,IAAMC,GAAiC,IAAM,CAChD,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEtD,SAAO,gBAAY,IAAMD,GAAA,YAAAA,EAAc,YAAa,CAAC,CAAC,CAC1D,ECfA,IAAAE,GAA2B,iBAiBpB,IAAMC,GAAuC,IAAM,CACtD,GAAM,CAAE,aAAAC,EAAc,gBAAAC,CAAgB,KAAI,eAAWC,EAAa,EAElE,MAAO,CAAE,aAAAF,EAAc,gBAAAC,CAAgB,CAC3C,ECrBA,IAAAE,GAA2B,iBCA3B,IAAAC,GAA2C,oBAI9BC,GAAqB,GAAAC,QAAM,cAAmC,CAAC,CAAC,EAEhEC,GAAgE,CAAC,CAC1E,SAAAC,CACJ,IAAM,CACF,GAAM,CAACC,EAAUC,CAAW,KAAI,aAAS,EAAK,EAE9C,OACI,GAAAJ,QAAA,cAACD,GAAmB,SAAnB,CAA4B,MAAO,CAAE,SAAAI,EAAU,YAAAC,CAAY,GACvDF,CACL,CAER,EDKO,IAAMG,GAA6C,IAAM,CAC5D,GAAM,CAAE,uBAAAC,CAAuB,KAAI,eAAWC,EAAa,EAErD,CAAE,SAAAC,EAAU,YAAAC,CAAY,KAAI,eAAWC,EAAkB,EAE/D,MAAO,CACH,uBAAAJ,EACA,SAAU,QAAQE,CAAQ,EAC1B,YAAaC,GAAA,KAAAA,EAAgB,IAAG,EACpC,CACJ,EE/BA,IAAAE,GAA2B,iBAepB,IAAMC,GAA+C,IAAM,CAC9D,GAAM,CAAE,iBAAAC,CAAiB,KAAI,eAAWC,EAAa,EAErD,MAAO,CAAE,iBAAAD,CAAiB,CAC9B,ECnBA,IAAAE,GAA2B,iBAUpB,IAAMC,GAAmD,IAAM,CAClE,GAAM,CAAE,MAAAC,CAAM,KAAI,eAAWC,EAAa,EAE1C,OAAOD,CACX,ECdA,IAAAE,GAA2B,iBAIpB,IAAMC,GAAmB,IAAM,CAClC,GAAM,CACF,OAAAC,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,MAAAC,EACA,MAAAC,EACA,aAAAC,EACA,aAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,UAAAC,EACA,SAAAC,EACA,QAAAC,CACJ,KAAI,eAAWC,EAAa,EAE5B,MAAO,CACH,OAAAf,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,MAAAC,EACA,MAAAC,EACA,aAAAC,EACA,aAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,UAAAC,EACA,SAAAC,EACA,QAAAC,CACJ,CACJ,ECxCA,IAAAE,GAAyB,iBAgBzB,IAAAC,GAAqC,wCA6DxBC,GAAY,CAGvB,CACE,aAAAC,EACA,OAAAC,EACA,QAAAC,EACA,aAAAC,EACA,SAAAC,EAAW,GACX,QAAAC,EAAWC,GAASA,EACpB,cAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,QAAAC,CACJ,EAA6C,CAAC,IAA2B,CACrE,GAAM,CAACC,EAAWC,CAAY,KAAI,aAAS,EAAK,EAE1C,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAE5BC,EAAoBC,GAAqB,EACzCC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,CAAkB,EAAIF,EAAgC,EACpE,CAAE,KAAMG,CAAS,EAAIP,EAAkBM,CAAiB,EAExDrB,IACAsB,EAAWtB,GAGf,IAAMuB,EAAW,GAAGC,GAChBF,EACA,QACJ,KAAK,IAAI,KAAK,EAAE,eAAe,IAEzB,CAAE,QAAAG,CAAQ,EAAIR,EAChBS,EAAiBJ,EAAUb,EAAkBI,CAAS,CAC1D,EAuDA,MAAO,CACH,UAAAF,EACA,cAvDkB,SAAY,CAC9BC,EAAa,EAAI,EAEjB,IAAIe,EAAwB,CAAC,EAEzBC,EAAU,EACVC,EAAgB,GACpB,KAAOA,GACH,GAAI,CACA,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAI,MAAMN,EAAe,CACzC,SAAAH,EACA,QAAApB,EACA,KAAMD,EACN,WAAY,CACR,QAAA2B,EACA,SAAAxB,CACJ,EACA,SAAAI,CACJ,CAAC,EAEDoB,IAEAD,EAAQ,KAAK,GAAGG,CAAI,EAEhB3B,GAAgBwB,EAAQ,QAAUxB,IAClCwB,EAAUA,EAAQ,MAAM,EAAGxB,CAAY,EACvC0B,EAAgB,IAGhBE,IAAUJ,EAAQ,SAClBE,EAAgB,GAExB,OAASG,EAAP,CACEpB,EAAa,EAAK,EAClBiB,EAAgB,GAEhBnB,GAAA,MAAAA,EAAUsB,GAEV,MACJ,CAGgB,IAAI,eAAY,CAChC,SAAAT,EACA,iBAAkB,GAClB,GAAGhB,CACP,CAAC,EAEW,YAAYoB,EAAQ,IAAItB,CAAc,CAAC,EAEnDO,EAAa,EAAK,CACtB,CAKA,CACJ,EC9KA,IAAAqB,GAAgD,oBA2KzC,IAAMC,GAAU,CAIrB,CACE,SAAUC,EACV,OAAQC,EACR,GAAIC,EACJ,kBAAAC,EACA,gBAAAC,EACA,SAAUC,EACV,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,aAAcC,EACd,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,gBAAAC,EACA,iBAAAC,EACA,YAAAC,EACA,aAAAC,EACA,sBAAAC,EACA,sBAAAC,CACJ,EAA6C,CAAC,IAIzC,CAvML,IAAAC,GAwMI,GAAM,CAAE,QAAAC,CAAQ,EAAIC,GAAiB,EAC/B,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EACjC,CACF,SAAUC,EACV,OAAQC,EACR,GAAIC,CACR,EAAIJ,EAAgC,EAE9BK,EACF,CAAC3B,GAAqBA,IAAsBwB,EACtCtB,GAAA,KAAAA,EAAewB,EACfxB,EAGJ,CAAC0B,EAAIC,CAAK,EAAI,GAAAC,QAAM,SAA8BH,CAAS,EAEjE,GAAAG,QAAM,UAAU,IAAM,CACdH,IAAcC,GACdC,EAAM3B,CAAW,CAEzB,EAAG,CAACA,CAAW,CAAC,EAEhB,IAAM6B,EAAe/B,GAAA,KAAAA,EAAqBwB,EACpCQ,GACFb,GAAAlB,GAAA,KAAAA,EACCwB,IAAoB,OAAS,SAAWA,IADzC,KAAAN,GAEA,SAGEc,EADoBC,GAAqB,EACZH,CAAY,EAEzC,CAAE,aAAcI,CAAoB,EAAIC,GAAgB,EACxDC,EAAe5B,GAAA,KAAAA,EAAoB0B,EAEnCG,GAAWN,IAAW,SACtBO,GAASP,IAAW,OACpBQ,GAAUR,IAAW,QAErBS,EAAWC,GAAa,CAC1B,kBAAArC,EACA,OAAA2B,EACA,gBAAiBZ,EAAQ,QAC7B,CAAC,EAEKuB,EAAcf,IAAO,SAAcW,IAAUC,IAE7CI,GAAcC,GAAc,CAC9B,SAAUZ,EAAS,KACnB,GAAIL,GAAA,KAAAA,EAAM,GACV,aAAc,CACV,QAASe,EACT,GAAG3B,CACP,EACA,SAAAN,EACA,YAAAC,EACA,WAAAC,EACA,SAAAJ,EACA,iBAAAM,CACJ,CAAC,EAEK,CAAE,WAAYgC,CAAgB,EAAIF,GAElCG,GAAuBC,GAAqC,CAC9D,gBAAiB/B,CACrB,CAAC,EACK,CAAE,OAAQgC,GAAc,UAAWC,EAAgB,EACrDH,GAEEI,GAAuBC,GAAqC,CAC9D,gBAAiBlC,CACrB,CAAC,EACK,CAAE,OAAQmC,GAAc,UAAWC,EAAgB,EACrDH,GAEE,CAAE,YAAAI,EAAY,EAAIC,GAAmB,EAErCC,GAA2BC,GAA8B,EAoI/D,MAAO,CACH,GAHWpB,IAAYE,GAZN,CACjB,YAAaM,GAAmBI,GAChC,eAAgBH,GAChB,SAvHmB,MAAOY,IAAuB,CACjDJ,GAAY,EAAK,EAEjB,IAAMK,EAAahC,GAAiB,CAChC6B,GAAyB,CACrB,SAAAhB,EACA,SAAAR,EACA,GAAAL,CACJ,CAAC,CACL,EAEA,OAAIS,IAAiB,eACjB,WAAW,IAAM,CACbuB,EAAU,CACd,CAAC,EAGE,IAAI,QAAsC,CAACC,EAASC,MACnDzB,IAAiB,eACjBwB,EAAQ,EAELZ,GACH,CACI,OAAAU,GACA,SAAU1B,EAAS,KACnB,oBAAA3B,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAM,EACA,YAAAC,CACJ,EACA,CACI,UAAW,CAACgD,GAAMC,GAAGC,KAAY,CAtTrD,IAAA9C,GAuT4BhB,GACAA,EAAkB4D,GAAMJ,GAAQM,EAAO,EAG3C,IAAMC,IAAa/C,GAAA4C,IAAA,YAAAA,GAAM,OAAN,YAAA5C,GAAY,GAE/ByC,EAAUM,EAAU,EAEpBL,EAAQE,EAAI,CAChB,EACA,QAAS,CAACI,GAAeH,GAAGC,KAAY,CACpC,GAAI7D,EACA,OAAOA,EAAgB+D,GAAOR,GAAQM,EAAO,EAEjDH,GAAO,CACX,CACJ,CACJ,EACH,CACL,CAoEA,EAEmB,CACf,YAAahB,GAAmBQ,GAChC,eAAgBH,GAChB,SAvEmB,MAAOQ,IAAuB,CACjDJ,GAAY,EAAK,EAEjB,IAAMa,EAAsC,CACxC,GAAIxC,GAAA,KAAAA,EAAM,GACV,OAAA+B,GACA,SAAU1B,EAAS,KACnB,aAAAI,EACA,gBAAAxB,EACA,oBAAAP,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAM,EACA,YAAAC,CACJ,EAEM6C,EAAY,IAAM,CAEpB/B,EAAMF,CAAS,EACf8B,GAAyB,CACrB,SAAAhB,EACA,SAAAR,EACA,GAAAL,CACJ,CAAC,CACL,EAGA,OAAIS,IAAiB,eACjB,WAAW,IAAM,CACbuB,EAAU,CACd,CAAC,EAIE,IAAI,QAAsC,CAACC,GAASC,MACnDzB,IAAiB,eACjBwB,GAAQ,EAEL,WAAW,IAAM,CACpBR,GAAae,EAAW,CACpB,UAAW,CAACL,GAAMC,GAAGC,KAAY,CACzB9D,GACAA,EAAkB4D,GAAMJ,GAAQM,EAAO,EAGvC5B,IAAiB,eACjBuB,EAAU,EAGdC,GAAQE,EAAI,CAChB,EACA,QAAS,CAACI,GAAeH,GAAGC,KAAY,CACpC,GAAI7D,EACA,OAAOA,EAAgB+D,GAAOR,GAAQM,EAAO,EAEjDH,GAAO,CACX,CACJ,CAAC,CACL,CAAC,EACJ,CACL,CAYA,EAMI,YAAAlB,GACA,GAAAhB,EACA,MAAAC,EACA,SAAU,CAACY,GAAU4B,IAAyC,CAC1DZ,GAAyB,CACrB,SACIhB,KAAa,OACPA,GACAF,GACA,OACA,OACV,SAAAN,EACA,GAAIoC,GAAA,KAAAA,EAAkBzC,CAC1B,CAAC,CACL,CACJ,CACJ,EC1aA,IAAA0C,GAA4B,iBAWrB,IAAMC,GACT,IAAM,CACF,GAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,OAAAC,CAAO,EAAIC,EAAc,EAiCnD,SA/BiC,gBAC7B,CAAC,CACG,SAAAC,EACA,SAAAC,EACA,GAAAC,CACJ,IAIM,CACF,GAAIF,GAAYC,EAAS,MACrB,OAAIA,EAAS,SAAWD,IAAa,QAAUE,EACpCP,EAAKM,EAAS,MAAOC,CAAE,EAG9BD,EAAS,SAAWD,IAAa,QAAUE,EACpCN,EAAKK,EAAS,MAAOC,CAAE,EAG9BD,EAAS,WAAaD,IAAa,SAC5BF,EAAOG,EAAS,KAAK,EAGzBJ,EAAKI,EAAS,MAAO,MAAM,CAI1C,EACA,CAAC,CACL,CAGJ,ECnCG,IAAME,EAAgB,IAAM,CAC/B,GAAM,CAAE,WAAAC,CAAW,EAAIC,EAAiB,EAClCC,EAAUF,EAAW,EACrBG,EAAoBC,GAAqB,EAEzCC,EAAY,CAACC,EAAaC,EAAoB,SAAW,CAC3DA,IAAS,OAASL,EAAQ,KAAKI,CAAG,EAAIJ,EAAQ,QAAQI,CAAG,CAC7D,EAEME,EAAaC,GAER,IADcN,EAAkBM,CAAQ,EACvB,eAGtBC,EAAU,CAACD,EAAkBE,IAAgB,CAC/C,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EAEvC,MAAO,IAAIC,EAAa,cAAcC,GAC1C,EAEMC,EAAW,CAACL,EAAkBE,IAAgB,CAChD,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EACvC,MAAO,IAAIC,EAAa,eAAeC,GAC3C,EAEME,EAAU,CAACN,EAAkBE,IAAgB,CAC/C,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EACvC,MAAO,IAAIC,EAAa,cAAcC,GAC1C,EAEMG,EAAWP,GAEN,IADcN,EAAkBM,CAAQ,EACvB,QA+C5B,MAAO,CACH,OA7CW,CAACA,EAAkBF,EAAoB,SAAW,CAC7DF,EAAUG,EAAUC,CAAQ,EAAGF,CAAI,CACvC,EA4CI,UAAAC,EACA,KA3CS,CACTC,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUK,EAAQD,EAAUE,CAAE,EAAGJ,CAAI,CACzC,EAsCI,QAAAG,EACA,MArCU,CACVD,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUS,EAASL,EAAUE,CAAE,EAAGJ,CAAI,CAC1C,EAgCI,SAAAO,EACA,KA/BS,CACTL,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUU,EAAQN,EAAUE,CAAE,EAAGJ,CAAI,CACzC,EA0BI,QAAAQ,EACA,KAzBS,CAACN,EAAkBF,EAAoB,SAAW,CAC3DF,EAAUW,EAAQP,CAAQ,EAAGF,CAAI,CACrC,EAwBI,QAAAS,EACA,KAvBS,CAACC,KAAiBC,IAAoB,CAC/ChB,EAAQ,KAAKe,EAAM,GAAGC,CAAI,CAC9B,EAsBI,QApBY,CAACD,KAAiBC,IAAoB,CAClDhB,EAAQ,QAAQe,EAAM,GAAGC,CAAI,CACjC,EAmBI,OAjBW,IAAM,CACjBhB,EAAQ,OAAO,CACnB,CAgBA,CACJ,EC7GA,IAAAiB,GAAgC,oBA2DzB,IAAMC,GAAU,CAGrB,CACE,SAAUC,EACV,GAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,EACA,aAAAC,CACJ,EAAiC,CAAC,IAAgC,CAC9D,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,EAAmB,GAAIC,CAAY,EACjDH,EAAgC,EAE9BI,EACF,CAACb,GAAoBA,IAAqBW,EACpCV,GAAA,KAAAA,EAAMW,EACNX,EAEJ,CAACa,EAAQC,CAAS,KAAI,aAA8BF,CAAS,EAEnE,GAAAG,QAAM,UAAU,IAAM,CACdH,IAAcC,GACdC,EAAUF,CAAS,CAE3B,EAAG,CAACA,CAAS,CAAC,EAId,IAAMI,EAFoBC,GAAqB,EAEZlB,GAAA,KAAAA,EAAoBW,CAAiB,EAiBxE,MAAO,CACH,YAhBgBQ,GAAc,CAC9B,SAAUF,EAAS,KACnB,GAAIH,GAAA,KAAAA,EAAU,GACd,aAAc,CACV,QAASA,IAAW,OACpB,GAAGN,CACP,EACA,oBAAAN,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,CACJ,CAAC,EAIG,OAAAO,EACA,UAAAC,CACJ,CACJ,ECnHA,IAAAK,GAAoC,iBACpCC,GAAmC,qBACnCC,GAAkB,2BA0HX,IAAMC,GAAY,CAKvB,CACE,aAAAC,EACA,QAAAC,EAAWC,GAASA,EACpB,eAAAC,EACA,UAAAC,EAAY,OAAO,iBACnB,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,EAA6C,CAAC,IAIzC,CACD,GAAM,CAACC,EAAiBC,CAAkB,KAAI,aAAiB,CAAC,EAC1D,CAACC,EAAaC,CAAc,KAAI,aAAiB,CAAC,EAClD,CAACC,EAAWC,CAAY,KAAI,aAAS,EAAK,EAE1CC,EAAoBC,GAAqB,EACzC,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,CAAkB,EAAIF,EAAgC,EAClE,CAAE,KAAMG,CAAS,EAAIL,EACvBf,GAAA,KAAAA,EAAgBmB,CACpB,EAEME,EAAaC,GAAyC,EACtDC,EAASC,GAAqC,EAEhDC,EAIArB,IAAc,EACdqB,EAAiBF,EAEjBE,EAAiBJ,EAGrB,IAAMK,EAAgB,IAAM,CACxBd,EAAe,CAAC,EAChBF,EAAmB,CAAC,EACpBI,EAAa,EAAK,CACtB,EAEMa,EACFC,GACC,CACD,IAAMC,EAAS,CACX,UAAWD,EAAc,OACpB1B,GAASA,EAAK,OAAS,SAC5B,EACA,QAAS0B,EAAc,OAClB1B,GAASA,EAAK,OAAS,OAC5B,CACJ,EAEAG,GAAA,MAAAA,EAAWwB,GACXf,EAAa,EAAK,CACtB,KAEA,cAAU,IAAM,CACZP,GAAA,MAAAA,EAAa,CAAE,YAAAI,EAAa,gBAAAF,CAAgB,EAChD,EAAG,CAACE,EAAaF,CAAe,CAAC,EAEjC,IAAMqB,EAAoD,CAAC,CAAE,KAAAC,CAAK,KAC9DL,EAAc,EACP,IAAI,QACNM,GAAY,CACTlB,EAAa,EAAI,KACjB,UAAMiB,EAAa,CACf,SAAU,MAAO,CAAE,KAAAE,CAAK,IAA6B,CACjD,IAAMC,EAASC,GAAgBF,EAAMhC,CAAO,EAI5C,GAFAW,EAAesB,EAAO,MAAM,EAExB9B,IAAc,EAAG,CAEjB,IAAMgC,EAAWF,EAAO,IAAKG,GACd,UAUA,CAAE,SATQ,MAAMd,EAAO,YAAY,CACtC,SAAAH,EACA,OAAQiB,EACR,oBAAqB,GACrB,kBAAmB,GACnB,iBAAA7B,EACA,SAAAF,CACJ,CAAC,EAEkB,MAAA+B,CAAM,EAGhC,EAEKT,EAAgB,MAAMU,GACxBF,EACA,CAAC,CAAE,SAAAG,EAAU,MAAAF,CAAM,KACf3B,EAAoB8B,GACTA,EAAgB,CAC1B,EAEM,CACH,SAAU,CAACD,EAAS,IAAI,EACxB,KAAM,UACN,QAAS,CAACF,CAAK,CACnB,GAEJ,CAACI,EAAkBC,KACR,CACH,SAAU,CAACD,CAAK,EAChB,KAAM,QACN,QAAS,CAACP,EAAOQ,EAAM,CAC3B,EAER,EAEAV,EAAQJ,CAAa,CACzB,KAAO,CAEH,IAAMe,KAAS,GAAAC,SAAMV,EAAQ9B,CAAS,EAEhCyC,EAAaF,EAAO,IAAKG,GAChB,UAWA,CACH,SAVA,MAAMzB,EAAW,YAAY,CACzB,SAAAD,EACA,OAAQ0B,EACR,oBAAqB,GACrB,kBAAmB,GACnB,iBAAAtC,EACA,SAAAF,CACJ,CAAC,EAID,MAAOwC,EACP,mBACIA,EAAc,MACtB,EAIP,EAEKlB,EAAgB,MAAMU,GACxBO,EACA,CAAC,CAAE,SAAAN,EAAU,mBAAAQ,EAAoB,MAAAV,EAAM,KACnC3B,EAAoB8B,IAEZA,GAAgBO,CAEvB,EAEM,CACH,SAAUR,EAAS,KACnB,KAAM,UACN,QAASF,EACb,GAEJ,CAACI,EAAkBC,KACR,CACH,SAAU,CAACD,CAAK,EAChB,KAAM,QACN,QAASE,EAAOD,EACpB,EAER,EAEAV,EAAQJ,CAAa,CACzB,CACJ,EAEA,GAAGzB,CACP,CAAC,CACL,CACJ,EAAE,KAAMyB,IACJD,EAAaC,CAAa,EACnBA,EACV,GAGL,MAAO,CACH,WAAY,CACR,KAAM,OACN,OAAQ,OACR,SAAWoB,GAA+C,CAClDA,EAAM,OAAO,OAASA,EAAM,OAAO,MAAM,OAAS,GAClDlB,EAAa,CAAE,KAAMkB,EAAM,OAAO,MAAM,EAAG,CAAC,CAEpD,CACJ,EACA,eAAAvB,EACA,UAAAZ,EACA,aAAAiB,CACJ,CACJ,ECpUA,IAAAmB,GAAsC,iBAezBC,GAAW,CAAC,CACrB,eAAAC,EAAiB,EACrB,EAAmB,CAAC,IAA0B,CAC1C,GAAM,CAACC,EAASC,CAAU,KAAI,aAASF,CAAc,EAE/CG,KAAO,gBAAY,IAAMD,EAAW,EAAI,EAAG,CAACD,CAAO,CAAC,EACpDG,KAAQ,gBAAY,IAAMF,EAAW,EAAK,EAAG,CAACD,CAAO,CAAC,EAE5D,MAAO,CACH,QAAAA,EACA,KAAAE,EACA,MAAAC,CACJ,CACJ,EC5BA,IAAAC,GAA2B,iBCA3B,IAAAC,GAAkB,oBAILC,GAAkC,CAC3C,WAAY,IAAM,GAClB,YAAa,IAAM,GACnB,UAAW,KAAO,CAAC,GACnB,OAAQ,IAAM,KACd,KAAM,IAAM,IAChB,EAEaC,GACT,GAAAC,QAAM,cAA8BF,EAAe,EAE1CG,GAIT,CAAC,CACD,SAAAC,EACA,WAAAC,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,IAEQ,GAAAR,QAAA,cAACD,GAAc,SAAd,CACG,MAAO,CACH,WAAAI,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,GAECN,CACL,EDrCD,IAAMO,EAAmB,IAAM,CAClC,GAAM,CAAE,WAAAC,EAAY,YAAAC,EAAa,UAAAC,EAAW,OAAAC,EAAQ,KAAAC,EAAM,OAAAC,CAAO,KAC7D,eAAWC,EAAa,EAE5B,MAAO,CACH,WAAAN,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,CACJ,EEfA,IAAAE,GAA2B,iBAC3BC,GAIO,iCCLP,IAAAC,GAAkB,oBAOX,IAAMC,GAAuB,GAAAC,QAAM,cACtC,CAAC,CACL,EAEaC,GAIT,CAAC,CAAE,IAAAC,EAAK,SAAAC,CAAS,IAEb,GAAAH,QAAA,cAACD,GAAqB,SAArB,CAA8B,MAAO,CAAE,IAAAG,CAAI,GACvCC,CACL,EDMD,IAAMC,GAAS,CAAC,CACnB,OAAAC,EACA,SAAAC,EACA,OAAAC,EACA,aAAAC,CACJ,IAAkD,CAC9C,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAoB,EAMzC,CAAE,SAAUC,KAAcC,CAAW,EAAIL,GAAA,KAAAA,EAAU,CAAC,EAGpD,CACF,KAAMM,EACN,KAAMC,EACN,KAAMC,EACN,OAAQC,EACR,KAAMC,EACN,SAAUC,KACPC,CACP,EAAIR,GAAA,KAAAA,EAAa,CAAC,EAGZS,KAAgB,aAClB,CACI,SACA,CACI,OAAAf,EACA,SAAAC,EACA,OAAQ,CAAE,GAAGM,EAAY,SAAUO,CAAa,EAChD,QAASX,GAAA,YAAAA,EAAc,OAC3B,CACJ,EAEA,IAAG,CA9DX,IAAAa,EA+DY,OAAAA,EAAAZ,GAAA,YAAAA,EAAM,CAAE,OAAAJ,EAAQ,SAAAC,EAAU,OAAAC,CAAO,KAAjC,KAAAc,EACA,QAAQ,QAAQ,CAAE,IAAK,EAAK,CAAC,GACjC,CACI,QAAS,OAAOZ,EAAQ,IACxB,GAAGD,EACH,MAAO,EACX,CACJ,EAEA,OAAO,OAAOC,EAAQ,IACf,CAAE,KAAM,CAAE,IAAK,EAAK,CAAE,EACvBW,CACV,EE3EA,IAAAE,GAA2B,iBAKpB,IAAMC,GAAqB,IAA6B,CAC3D,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAoB,EAE/C,MAAO,CAAE,IAAAD,CAAI,CACjB,ECTA,IAAAE,GAA+C,iBAE/CC,GAAmB,4BACnBC,GAAqB,8BACrBC,GAAgB,yBAqGT,IAAMC,GAITC,GAC6B,CA9GjC,IAAAC,GAAAC,GA+GI,GAAM,CAACC,EAAQC,CAAS,KAAI,aAAsB,CAAC,CAAC,EAC9C,CAACC,EAASC,CAAU,KAAI,aAAmB,CAAC,CAAC,EAC7C,CAACC,EAAiBC,CAAkB,KAAI,aAAmB,CAAC,CAAC,EAE7D,CACF,SAAAC,EACA,KAAAC,EACA,QAAAC,EAAU,CAAC,EACX,YAAAC,EAAc,QACd,YAAAC,EAAc,KACd,SAAUC,EAAgB,IAC1B,oBAAAC,EACA,kBAAAC,EACA,yBAA0BC,EAC1B,aAAAC,EACA,UAAAC,EACA,WAAAC,EACA,cAAAC,EACA,SAAAC,EACA,aAAAC,EAAe,CAAC,EAChB,YAAAC,EACA,SAAUC,EACV,WAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,EAAI5B,EAEE6B,EAAgB,MAAM,QAAQN,CAAY,EAC1CA,EACA,CAACA,CAAY,EAEbO,KAA6B,gBAC9BC,GAAiC,CAC9BvB,EACIuB,EAAK,KAAK,IAAKC,IAAU,CACrB,SAAO,GAAAC,SAAID,EAAMpB,CAAW,EAC5B,SAAO,GAAAqB,SAAID,EAAMnB,CAAW,CAChC,EAAE,CACN,CACJ,EACA,CAACD,EAAaC,CAAW,CAC7B,EAEMqB,EACFjB,GAAA,KAAAA,EAAsCC,EAEpCiB,EAA0BC,GAAuB,CACnD,SAAA3B,EACA,IAAKoB,EACL,aAAc,CACV,GAAGK,EACH,QACIL,EAAc,OAAS,KACtB5B,GAAAgB,GAAA,YAAAA,EAAmC,UAAnC,KAAAhB,GAA8C,IACnD,UAAY8B,GAAS,CArKjC,IAAA9B,EAsKgB6B,EAA2BC,CAAI,GAC/B9B,EAAAiC,GAAA,YAAAA,EAA0B,YAA1B,MAAAjC,EAAA,KAAAiC,EAAsCH,EAC1C,CACJ,EACA,SAAAJ,EACA,SAAU,MACV,iBAAAC,CACJ,CAAC,EAEKS,KAAwB,gBACzBN,GAAiC,CAE1BzB,EACIyB,EAAK,KAAK,IAAKC,IAAU,CACrB,SAAO,GAAAC,SAAID,EAAMpB,CAAW,EAC5B,SAAO,GAAAqB,SAAID,EAAMnB,CAAW,CAChC,EAAE,CACN,CAER,EACA,CAACD,EAAaC,CAAW,CAC7B,EAEMyB,EAAcC,GAAuB,CACvC,SAAA9B,EACA,OAAQ,CACJ,KAAAC,EACA,QAASC,EAAQ,OAAOR,CAAM,EAC9B,WAAY,CACR,QAASiB,GAAA,YAAAA,EAAY,QACrB,UAAUlB,GAAAkB,GAAA,YAAAA,EAAY,WAAZ,KAAAlB,GAAwBiB,CACtC,EACA,cAAAE,CACJ,EACA,aAAc,CACV,GAAGH,EACH,UAAYa,GAAS,CA1MjC,IAAA9B,EA2MgBoC,EAAsBN,CAAI,GAC1B9B,EAAAiB,GAAA,YAAAA,EAAc,YAAd,MAAAjB,EAAA,KAAAiB,EAA0Ba,EAC9B,CACJ,EACA,oBAAAhB,EACA,kBAAAC,EACA,SAAAW,EACA,SAAAL,EACA,WAAAI,EACA,YAAAF,EACA,iBAAAI,CACJ,CAAC,EAEKY,GAAYC,GAAkB,CAChC,GAAIhB,EAAkB,CAClBrB,EAAUqB,EAAiBgB,CAAK,CAAC,EACjC,MACJ,CAEA,GAAKA,EAIDrC,EAAU,CACN,CACI,MAAOQ,EACP,SAAU,WACV,MAAA6B,CACJ,CACJ,CAAC,MAVO,CACRrC,EAAU,CAAC,CAAC,EACZ,MACJ,CASJ,EAEA,MAAO,CACH,YAAAkC,EACA,wBAAAH,EACA,WAAS,YACL,OAAM,GAAAO,SAAO,CAAC,GAAGrC,EAAS,GAAGE,CAAe,EAAG,OAAO,EACtD,CAACF,EAASE,CAAe,CAC7B,EACA,YAAU,GAAAoC,SAASH,GAAU1B,CAAa,CAC9C,CACJ,ECrPA,IAAA8B,GAAoD,iBAEpDC,GAAe,iBACfC,GAA2B,oCAC3BC,GAAoB,6BAgJpB,IAAMC,GAAsC,CAAC,EACvCC,GAAsC,CAAC,EAqBtC,SAASC,GAGd,CACE,eAAAC,EAAiB,EACjB,gBAAAC,EAAkB,GAClB,cAAAC,EAAgB,GAChB,cAAAC,EACA,gBAAAC,EAAkBN,GAClB,yBAAAO,EAA2B,QAC3B,cAAAC,EACA,gBAAAC,EAAkBV,GAClB,iBAAkBW,EAClB,SAAUC,EACV,oBAAAC,EACA,kBAAAC,EACA,aAAAC,EACA,SAAUC,EACV,YAAAC,EACA,WAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,EAAkC,CAAC,EAEiB,CAlMpD,IAAAC,GAmMI,GAAM,CAAE,iBAAkBC,CAAwB,EAAIC,GAAoB,EAEpEC,EAAmBb,GAAA,KAAAA,EAAwBW,EAE3C,CAAE,YAAAG,EAAa,UAAAC,CAAU,EAAIC,EAAiB,EAC9C,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAIJ,EAAY,EACnCK,EAAWC,GAAYf,CAAgB,EAIvC,CAAE,cAAAgB,EAAe,eAAAC,EAAgB,aAAAC,EAAc,cAAAC,CAAc,EAC/DC,GAAiBR,CAAM,EAErBS,EAAiBL,GAAiB7B,EAClCmC,EAAkBL,GAAkB7B,EACpCmC,EAAgBL,EAAa,OAASA,EAAe5B,EACrDkC,EAAgBL,EAAc,OAASA,EAAgB1B,EAEvD,CAAE,SAAUgC,EAAkB,EAAIf,EAAgC,EAElE,CAAE,QAAAgB,EAAQ,EAAIC,EAAc,EAG5BC,EAFoBC,GAAqB,EAEZjC,GAAA,KAAAA,EAAoB6B,EAAiB,EAElE,CAACK,EAAQC,EAAS,KAAI,aACxBC,GAAkBzC,EAAiBgC,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAC1D,EACM,CAACU,EAASC,EAAU,KAAI,aAC1BC,GAAkBzC,EAAiB8B,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAC1D,EACM,CAACY,GAASC,EAAU,KAAI,aAAiBhB,CAAc,EACvD,CAACiB,GAAUC,EAAW,KAAI,aAAiBjB,CAAe,EAE1DkB,GAAgC,CAAC,CACnC,WAAY,CAAE,QAAAJ,EAAS,SAAAE,CAAS,EAChC,OAAAR,GACA,QAAAG,EACJ,IAA8B,CAC1B,IAAMQ,GAAqB,GAAAC,QAAG,MAAM9B,GAAA,YAAAA,EAAQ,UAAU,EAAE,EAElD+B,GAAkBC,GAAqB,CACzC,WAAY,CACR,SAAAN,EACA,QAAAF,CACJ,EACA,OAAAN,GACA,QAAAG,GACA,GAAGQ,EACP,CAAC,EACD,MAAO,GAAG5B,KAAY8B,IAC1B,KAEA,cAAU,IAAM,CACR/B,IAAW,KACXyB,GAAWhB,CAAc,EACzBkB,GAAYjB,CAAe,EAC3BS,GAAUC,GAAkBzC,EAAiBgC,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAAC,EACjEW,GAAWC,GAAkBzC,EAAiB8B,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAAC,EAE1E,EAAG,CAACZ,CAAM,CAAC,EAEX,IAAM6B,GAAqB,IAAc,CAGrC,GAAM,CAAE,OAAAX,EAAQ,QAAAG,EAAS,SAAAK,GAAU,QAAAF,MAAYS,EAAK,EAAI,GAAAH,QAAG,MACvD9B,EACA,CACI,kBAAmB,EACvB,CACJ,EAEA,OAAOiC,EACX,KAEA,cAAU,IAAM,CACZ,GAAIrC,EAAkB,CAClB,IAAMsC,EAAcL,GAAmB,EACjCE,EAAkBC,GAAqB,CACzC,GAAIvD,EACE,CACI,WAAY,CACR,SAAAiD,GACA,QAAAF,EACJ,CACJ,EACA,CAAC,EACP,UAAQ,GAAAW,SAAejB,EAAQvC,EAAiB,GAAAyD,OAAO,EACvD,WAAS,GAAAD,SAAed,EAASvC,EAAiB,GAAAsD,OAAO,EACzD,GAAGF,CACP,CAAC,EAGD,OAAOpB,GAAQ,GAAGb,KAAY8B,IAAmB,OAAW,CACxD,QAAS,EACb,CAAC,CACL,CACJ,EAAG,CAACnC,EAAkB4B,GAASE,GAAUR,EAAQG,CAAO,CAAC,EAEzD,IAAMgB,GAAcC,GAAuB,CACvC,SAAUtB,EAAS,KACnB,OAAQ,CACJ,cAAAvC,EACA,WAAY,CAAE,QAAA+C,GAAS,SAAAE,EAAS,EAChC,QAASa,GAAazD,EAAiBuC,CAAO,EAC9C,KAAMmB,GAAa7D,EAAiBuC,CAAM,CAC9C,EACA,aAAA/B,EACA,oBAAAF,EACA,kBAAAC,EACA,SAAAK,EACA,SAAAW,EACA,WAAAZ,EACA,YAAAD,EACA,iBAAAG,CACJ,CAAC,EAEKiD,GAAqBC,GAA4B,CACnDpB,GAAYqB,GACRJ,GAAazD,EAAiB4D,EAAYC,CAAW,CACzD,CACJ,EAEMC,GAAuBF,GAA4B,CACrDpB,GAAWiB,GAAazD,EAAiB4D,CAAU,CAAC,CACxD,EAEMG,GACFC,GACC,CACDxB,GAAYyB,GAASR,GAAazD,EAAiBgE,EAAOC,CAAI,CAAC,CAAC,CACpE,EAEMC,GAAwD,CAC1DC,EACAC,EAA8BtE,IAC7B,CACG,OAAOqE,GAAoB,WAC3BJ,GAAqBI,CAAe,EAEhCC,IAAa,UACbN,GAAoBK,CAAe,EAEnCR,GAAkBQ,CAAe,CAG7C,EAEME,GAAoBC,GAA2B,CACjDjC,GAAU,IAAMqB,GAAa7D,EAAiByE,CAAS,CAAC,CAC5D,EAEMC,MAAmB,YAAQ,IAAM,CA3V3C,IAAA5D,EAAA6D,EA4VQ,OAAI7E,EACO,CACH,QAAA+C,GACA,WAAAC,GACA,SAAAC,GACA,YAAAC,GACA,UAAWD,GACL,KAAK,OAAM4B,GAAA7D,EAAA4C,GAAY,OAAZ,YAAA5C,EAAkB,QAAlB,KAAA6D,EAA2B,GAAK5B,EAAQ,EACnD,CACV,EAGG,CACH,QAAS,OACT,WAAY,OACZ,SAAU,OACV,YAAa,OACb,UAAW,MACf,CACJ,EAAG,CAACjD,EAAe+C,GAASE,IAAUjC,GAAA4C,GAAY,OAAZ,YAAA5C,GAAkB,KAAK,CAAC,EAE9D,MAAO,CACH,iBAAkB4C,GAClB,OAAAnB,EACA,UAAWiC,GACX,QAAA9B,EACA,WAAY2B,GACZ,GAAGK,GACH,8BAAAzB,EACJ,CACJ,CC1XA,IAAA2B,GAA2B,iBAC3BC,GAKO,iCCNP,IAAAC,GAAkB,oBAILC,GAAkB,GAAAC,QAAM,cAAgC,CAAC,CAAC,EAE1DC,GAIT,CAAC,CAAE,OAAAC,EAAQ,IAAAC,EAAK,OAAAC,EAAQ,SAAAC,CAAS,IAE7B,GAAAL,QAAA,cAACD,GAAgB,SAAhB,CAAyB,MAAO,CAAE,OAAAG,EAAQ,IAAAC,EAAK,OAAAC,CAAO,GAClDC,CACL,ED0CD,IAAMC,GAAS,CAGpB,CACE,mBAAAC,EACA,sBAAAC,CACJ,EAAmD,CAAC,IAG/C,CACD,IAAMC,KAAc,mBAAe,EAC7BC,KAAkB,eAAWC,EAAe,EAE5C,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAC1C,CACF,KAAMC,EACN,QAAAC,EACA,UAAAC,CACJ,EAAIC,GAAe,CACf,aAAc,CACV,QAAS,CAAC,CAACP,CACf,CACJ,CAAC,EAEKQ,KAAM,gBACR,MAAOC,GAAW,CAjF1B,IAAAC,EAAAC,EAAAC,EAkFY,IAAMC,EAAWX,EAAU,KAAMY,GAAMA,EAAE,OAASL,EAAO,QAAQ,EAC3DM,GAAiBJ,GAAAD,EAAAG,GAAA,YAAAA,EAAU,UAAV,YAAAH,EAAmB,WAAnB,YAAAC,EAA6B,YAEpD,GAAII,GACI,CAACC,GAAcD,EAAgBN,EAAO,MAAM,EAC5C,OAIR,IAAIQ,EACJ,OAAIX,IACAW,EAAa,MAAMZ,EAAQ,GAGxB,OAAMO,EAAAZ,EAAgB,SAAhB,YAAAY,EAAA,KAAAZ,EAAyB,CAClC,GAAGS,EACH,OAAQL,GAAA,KAAAA,EAAgBa,GAAA,YAAAA,EAAY,IACxC,GACJ,EACApB,CACJ,EAEMqB,KAAS,gBAMX,MAAOT,GAAW,CA9G1B,IAAAC,EA+GY,OAAO,OAAMA,EAAAV,EAAgB,SAAhB,YAAAU,EAAA,KAAAV,EAAyBS,GAC1C,EACA,CACI,UAAYU,GAAS,CACjB,GAAIA,GAAA,MAAAA,EAAM,SAAU,CAChB,IAAMC,EAAWC,EAAUF,GAAA,YAAAA,EAAM,QAAQ,EACzCpB,EAAY,kBAAkBqB,EAAS,QAAQ,CAAC,CACpD,CACJ,EACA,GAAGtB,CACP,CACJ,EAEA,MAAO,CAAE,IAAAU,EAAK,OAAAU,CAAO,CACzB,EE7HA,IAAAI,GAA2B,iBAC3BC,GAIO,iCAmBA,IAAMC,GAAa,CAAoD,CAC1E,SAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,EACA,SAAAC,EACA,aAAAC,CACJ,IAAyD,CACrD,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAe,EAEpCC,EAAWC,EAAUT,EAAU,OAAWI,CAAQ,EAmBxD,SAjBsB,aAClBI,EAAS,QAAQN,CAAI,EACrB,IAAG,CAtCX,IAAAQ,EAuCY,OAAAA,EAAAJ,GAAA,YAAAA,EAAM,CACF,SAAAN,EACA,OAAAC,EACA,OAAAE,EACA,KAAAD,EACA,SAAAE,CACJ,KANA,KAAAM,EAMM,QAAQ,QAAQ,CAAC,CAAC,GAC5B,CACI,QAAS,OAAOJ,EAAQ,IACxB,GAAGD,EACH,MAAO,EACX,CACJ,CAGJ,ECtDA,IAAAM,GAA4B,iBAC5BC,GAA+B,iCAaxB,IAAMC,GAAgB,IAA4C,CACrE,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,KAAc,mBAAe,EA4CnC,SA1CmB,gBACf,CAAC,CACG,SAAAC,EACA,iBAAAC,EACA,YAAAC,EACA,GAAAC,CACJ,IAAyB,CACrB,GAAID,IAAgB,GAChB,OAEJ,IAAME,EAAWC,EACbL,EACAM,EAAiBN,EAAUC,EAAkBJ,CAAS,CAC1D,EAEAK,EAAY,QAASK,GAAQ,CACzB,OAAQA,OACC,MACDR,EAAY,kBAAkBK,EAAS,GAAG,EAC1C,UACC,OACDL,EAAY,kBAAkBK,EAAS,KAAK,CAAC,EAC7C,UACC,OACDL,EAAY,kBAAkBK,EAAS,KAAK,CAAC,EAC7C,UACC,cACDL,EAAY,kBAAkBK,EAAS,WAAW,EAClD,UACC,SACDL,EAAY,kBACRK,EAAS,OAAOD,GAAM,EAAE,CAC5B,EACA,cAEA,MAEZ,CAAC,CACL,EACA,CAAC,CACL,CAGJ,EC7DA,IAAAK,GAAkC,iBAClCC,GAAqB,wBAkBd,IAAMC,GAAgB,IAA+B,CAnB5D,IAAAC,EAoBI,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EACjC,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEhDC,EAAYC,EAAa,EAEzB,CAAE,UAAAC,EAAW,SAAAC,CAAS,EAAIC,EAAY,EAEtC,CAAE,OAAAC,CAAO,EAAIT,EAAgC,EAE7CU,EAAiC,CAAC,EAExC,GAAI,EAACH,GAAA,MAAAA,EAAU,MACX,MAAO,CAAE,YAAAG,CAAY,EAGzB,IAAMC,EAAiBC,GAAuB,CAnClD,IAAAb,EAoCQ,IAAMc,EAAiBP,EAAU,KAC5BC,GAAaA,EAAS,OAASK,CACpC,EAEIC,IACIA,EAAe,YACfF,EAAcE,EAAe,UAAU,EAE3CH,EAAY,KAAK,CACb,OACIX,EAAAc,EAAe,QAAf,KAAAd,EACAK,EACI,GAAGS,EAAe,QAAQA,EAAe,OACzCC,GAAeD,EAAe,IAAI,CACtC,EAEJ,KAAQA,EAAe,KACjB,IAAIA,EAAe,QACnB,OACN,KAAMA,EAAe,IACzB,CAAC,EAET,EAiBA,GAfIN,EAAS,YACTI,EAAcJ,EAAS,UAAU,EAGrCG,EAAY,KAAK,CACb,OACIX,EAAAQ,EAAS,QAAT,KAAAR,EACAK,EACI,GAAGG,EAAS,QAAQA,EAAS,OAC7BO,GAAeP,EAAS,IAAI,CAChC,EACJ,KAAQA,EAAS,KAAO,IAAIA,EAAS,QAAU,OAC/C,KAAMA,EAAS,IACnB,CAAC,EAEGE,EAAQ,CACR,IAAMM,EAAM,WAAWN,IACjBO,EAAcZ,EAAUW,CAAG,EAC7B,OAAOb,EAAiB,KAAec,IAAgBD,MACvD,GAAAE,SACI,GACA,8DAA8DR,kCAAuCA;AAAA,yFACzG,EACAC,EAAY,KAAK,CACb,MAAON,EAAU,WAAWK,IAAUK,GAAeL,CAAM,CAAC,CAChE,CAAC,GAEDC,EAAY,KAAK,CACb,MAAON,EAAUW,EAAKD,GAAeL,CAAM,CAAC,CAChD,CAAC,CAET,CAEA,MAAO,CACH,YAAAC,CACJ,CACJ,EChGA,IAAAQ,GAAkB,oBAwBX,IAAMC,GAAmC,IAAM,CAClD,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAC5BC,EAAYC,EAAa,EAEzB,CAAE,YAAAC,EAAa,UAAAC,CAAU,EAAIC,EAAiB,EAC9CC,EAAWH,EAAY,EACvBI,EAASH,EAAgC,EAEzC,CAAE,aAAAI,CAAa,EAAIC,GAAiB,EAEpCC,EAAc,GAAAC,QAAM,QAAQ,IAAM,CACpC,IAAIC,EAAmBb,EAAU,KAC5Bc,IAAOP,GAAA,YAAAA,EAAU,YAAa,IAAIO,EAAG,OAC1C,EAEKD,IACDA,EAAmBb,EAAU,KACxBc,IAAON,GAAA,YAAAA,EAAQ,YAAcM,EAAG,KACrC,GAGJ,IAAIC,EACJ,OAAIF,GAAA,MAAAA,EAAkB,MAClBE,EAAe,IAAIF,GAAA,YAAAA,EAAkB,QAC9BN,EAAS,WAAa,IAC7BQ,EAAe,IAEfA,EAAeR,GAAA,YAAAA,EAAU,SAEtBQ,CACX,EAAG,CAACf,EAAWO,EAAUC,CAAM,CAAC,EAE1BQ,EAA6B,GAAAJ,QAAM,QACrC,IACIZ,EAAU,IAAKiB,GAAa,CA1DxC,IAAAC,EAAAC,EA2DgB,IAAMC,EAAQ,IAAIH,EAAS,QAE3B,MAAO,CACH,GAAGA,EACH,KAAMA,EAAS,KACf,MAAOG,EACP,KAAKF,EAAAD,EAAS,MAAT,KAAAC,EAAgBE,EACrB,OACID,EAAAF,EAAS,QAAT,KAAAE,EACAjB,EACI,GAAGe,EAAS,QAAQA,EAAS,OAC7BI,GAAyBJ,EAAS,KAAM,QAAQ,CACpD,CACR,CACJ,CAAC,EACL,CAACjB,EAAWS,EAAcP,CAAS,CACvC,EACMoB,EAAyB,GAAAV,QAAM,QACjC,IAAMW,GAAeP,CAAa,EAClC,CAACA,CAAa,CAClB,EAEMQ,EAAkB,GAAAZ,QAAM,YAC1B,CACIa,EACAC,EACAC,EAAW,KACA,CACX,IAAMC,EAAiBF,EAAiB,KAAMZ,GAC1Ca,EAAWb,EAAG,OAASW,EAAaX,EAAG,QAAUW,CACrD,EAEA,GAAIG,EAAgB,CAChB,IAAMC,EAAsB,CAAC,EAE7B,OAAIF,GAAYC,EAAe,OAC3BC,EAAU,QAAYD,EAAe,KAAM,EAG3CA,EAAe,YACfC,EAAU,QACN,GAAGL,EACCI,EAAe,WACfF,EACA,EACJ,CACJ,EAEGG,CACX,CAEA,MAAO,CAAC,CACZ,EACA,CAAC,CACL,EAEMC,EAAkB,GAAAlB,QAAM,QAC1B,IAAMY,EAAgBb,EAAaK,CAAa,EAChD,CAACL,EAAaK,CAAa,CAC/B,EAkCA,OAhCe,GAAAJ,QAAM,QAAQ,IAAM,CAC/B,IAAMmB,EACFC,GAEOA,EAAM,OAAO,CAACC,EAAuBC,IAAQ,CA5HhE,IAAAhB,EAAAC,EA6HgB,OAAIe,EAAI,SAAS,OAAS,KAAKhB,EAAAgB,EAAI,UAAJ,YAAAhB,EAAa,QAAS,GAC1C,CACH,GAAGe,EACH,CACI,GAAGC,EACH,SAAUH,EACNG,EAAI,QACR,CACJ,CACJ,EAEA,OAAOA,EAAI,KAAS,OACpBf,EAAAe,EAAI,UAAJ,YAAAf,EAAa,QAAS,GAEf,CAAC,GAAGc,EAAUC,CAAG,EAErBD,CACX,EAAG,CAAC,CAAC,EAGT,MAAO,CACH,gBAAAH,EACA,YAAAnB,EACA,UAAWoB,EAAuCT,CAAS,CAC/D,CACJ,EAAG,CAACQ,EAAiBnB,EAAaW,CAAS,CAAC,CAGhD,ExFzIO,IAAMa,GAA2B,IAAM,CAC1C,GAAM,CAACC,EAAcC,CAAe,KAAI,aAAiB,EACnD,CAAE,KAAAC,CAAK,EAAIC,EAAc,EACzBC,EAAYC,EAAa,EACzBC,EAAgC,CAAC,OAAQ,SAAU,MAAM,EAEzD,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjCC,EAASF,EAAqC,EAC9CG,EAAWC,GAAqB,EAEtC,uBAAU,IAAM,CACZ,GAAIF,EAAO,SAAU,CACjB,IAAMG,EAAoBF,EAASD,EAAO,QAAQ,EAE9CA,EAAO,QACPH,EAAY,SAASG,EAAO,MAAM,GAClC,CAACG,EAAkBH,EAAO,SAE1BR,EACIG,EACI,mBACA,CACI,OAAQK,EAAO,OACf,SAAUA,EAAO,QACrB,EACA,sCAAsCA,EAAO,yBAAyBA,EAAO,qBACjF,CACJ,CAER,CACJ,EAAG,CAACA,CAAM,CAAC,EAGP,GAAAI,QAAA,iBAAAA,QAAA,cACI,GAAAA,QAAA,cAAC,UACIT,EACG,kBACA,OACA,6CACJ,CACJ,EACCJ,GAAgB,GAAAa,QAAA,cAAC,SAAGb,CAAa,EAClC,GAAAa,QAAA,cAAC,UAAO,QAAS,IAAMX,EAAK,GAAG,GAC1BE,EAAU,uBAAwB,OAAW,WAAW,CAC7D,CACJ,CAER,EyFhEA,IAAAU,EAAgC,oBAczB,IAAMC,GAAsB,IAAM,CACrC,GAAM,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EACrC,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EAErCC,EAAYC,EAAa,EAEzB,CAAE,OAAQC,CAAM,EAAIC,GAAqB,EAE/C,OACI,EAAAC,QAAA,gBAAAA,QAAA,cACI,EAAAA,QAAA,cAAC,UAAIJ,EAAU,oBAAqB,sBAAsB,CAAE,EAC5D,EAAAI,QAAA,cAAC,QACG,SAAWC,GAAM,CACbA,EAAE,eAAe,EACjBH,EAAM,CAAE,SAAAN,EAAU,SAAAE,CAAS,CAAC,CAChC,GAEA,EAAAM,QAAA,cAAC,aACG,EAAAA,QAAA,cAAC,aACG,EAAAA,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,UACIJ,EACG,uBACA,OACA,UACJ,EAAE,GAEN,EACA,EAAAI,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,SACG,KAAK,OACL,KAAM,GACN,YAAY,MACZ,WAAY,GACZ,eAAe,MACf,UAAS,GACT,SAAQ,GACR,MAAOR,EACP,SAAWS,GACPR,EAAYQ,EAAE,OAAO,KAAK,EAElC,CACJ,CACJ,EACA,EAAAD,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,UACIJ,EACG,uBACA,OACA,UACJ,EAAE,GAEN,EACA,EAAAI,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,SACG,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAON,EACP,SAAWO,GACPN,EAAYM,EAAE,OAAO,KAAK,EAElC,CACJ,CACJ,CACJ,CACJ,EACA,EAAAD,QAAA,cAAC,SAAG,EACJ,EAAAA,QAAA,cAAC,SAAM,KAAK,SAAS,MAAM,QAAQ,CACvC,CACJ,CAER,ECtFA,IAAAE,GAIO,oBCJP,IAAAC,EAAgC,oBAUzB,IAAMC,GAAkC,CAAC,CAC5C,UAAAC,EACA,aAAAC,EACA,mBAAAC,EACA,WAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,UAAAC,CACJ,IAAM,CACF,GAAM,CAAE,KAAAC,CAAK,EAAIC,EAAiB,EAC5B,CAACC,EAAOC,CAAQ,KAAI,YAAS,EAAE,EAC/B,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EACrC,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAK,EAExCC,EAAYC,EAAa,EAEzB,CAAE,OAAQC,CAAM,EAAIC,GAAyB,EAE7CC,EAAa,CAACC,EAAuBC,IACnCD,EACI,OAAOA,GAAS,SACT,EAAAE,QAAA,cAACf,EAAA,CAAK,GAAIa,GAAOC,CAAK,EAE1BD,EAEJ,KAGLG,EAAkB,IAChBxB,EACOA,EAAU,IAAKyB,GAAU,CAzC5C,IAAAC,EA0CgB,SAAAH,QAAA,cAAC,OACG,IAAKE,EAAS,KACd,MAAO,CACH,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,aAAc,MAClB,GAEA,EAAAF,QAAA,cAAC,UACG,QAAS,IACLL,EAAM,CACF,aAAcO,EAAS,IAC3B,CAAC,EAEL,MAAO,CACH,QAAS,OACT,WAAY,QAChB,GAECA,GAAA,YAAAA,EAAU,MACVC,EAAAD,EAAS,QAAT,KAAAC,EAAkB,EAAAH,QAAA,cAAC,aAAOE,EAAS,KAAM,CAC9C,CACJ,EACH,EAEE,KAGLE,EACF,EAAAJ,QAAA,cAAC,OAAK,GAAGnB,GACL,EAAAmB,QAAA,cAAC,MAAG,MAAO,CAAE,UAAW,QAAS,GAC5BP,EAAU,oBAAqB,yBAAyB,CAC7D,EACCQ,EAAgB,EACjB,EAAAD,QAAA,cAAC,SAAG,EACJ,EAAAA,QAAA,cAAC,QACG,SAAWK,GAAM,CACbA,EAAE,eAAe,EACjBV,EAAM,CAAE,MAAAR,EAAO,SAAAE,EAAU,SAAAE,CAAS,CAAC,CACvC,EACC,GAAGP,GAEJ,EAAAgB,QAAA,cAAC,OACG,MAAO,CACH,QAAS,OACT,cAAe,SACf,QAAS,EACb,GAEA,EAAAA,QAAA,cAAC,aACIP,EAAU,2BAA4B,OAAO,CAClD,EACA,EAAAO,QAAA,cAAC,SACG,KAAK,QACL,KAAK,OACL,KAAM,GACN,YAAY,MACZ,WAAY,GACZ,eAAe,MACf,SAAQ,GACR,MAAOb,EACP,SAAWkB,GAAMjB,EAASiB,EAAE,OAAO,KAAK,EAC5C,EACA,EAAAL,QAAA,cAAC,aACIP,EAAU,8BAA+B,UAAU,CACxD,EACA,EAAAO,QAAA,cAAC,SACG,KAAK,WACL,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAOX,EACP,SAAWgB,GAAMf,EAAYe,EAAE,OAAO,KAAK,EAC/C,EACCzB,GAAA,KAAAA,EACG,EAAAoB,QAAA,gBAAAA,QAAA,cACI,EAAAA,QAAA,cAAC,aACIP,EACG,iCACA,aACJ,EACA,EAAAO,QAAA,cAAC,SACG,KAAK,WACL,KAAK,WACL,KAAM,GACN,QAAST,EACT,MAAOA,EAAS,SAAS,EACzB,SAAU,IAAM,CACZC,EAAY,CAACD,CAAQ,CACzB,EACJ,CACJ,CACJ,EAEJ,EAAAS,QAAA,cAAC,SAAG,EACHrB,GAAA,KAAAA,EACGkB,EACI,mBACAJ,EACI,qCACA,kBACJ,CACJ,EACJ,EAAAO,QAAA,cAAC,SACG,KAAK,SACL,MAAOP,EAAU,qBAAsB,SAAS,EACpD,EACCf,GAAA,KAAAA,EACG,EAAAsB,QAAA,cAAC,YACIP,EACG,gCACA,6BACJ,EAAG,IACFI,EACG,YACAJ,EAAU,uBAAwB,SAAS,CAC/C,CACJ,CAER,CACJ,CACJ,EAGJ,OACI,EAAAO,QAAA,cAAC,OAAK,GAAGlB,GACJC,EAAgBA,EAAcqB,CAAO,EAAIA,CAC9C,CAER,EC5KA,IAAAE,EAAgC,oBAazB,IAAMC,GAAwC,CAAC,CAClD,UAAAC,EACA,UAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,UAAAC,CACJ,IAAM,CACF,GAAM,CAAE,KAAAC,CAAK,EAAIC,EAAiB,EAE5B,CAACC,EAAOC,CAAQ,KAAI,YAAS,EAAE,EAC/B,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EAErCC,EAAYC,EAAa,EAEzB,CAAE,OAAQC,EAAU,UAAAC,CAAU,EAAIC,GAAY,EAE9CC,EAAa,CAACC,EAAuBC,IACnCD,EACI,OAAOA,GAAS,SACT,EAAAE,QAAA,cAACd,EAAA,CAAK,GAAIY,GAAOC,CAAK,EAE1BD,EAEJ,KAGLG,EAAkB,IAChBrB,EACOA,EAAU,IAAKsB,GAAU,CA1C5C,IAAAC,EA2CgB,SAAAH,QAAA,cAAC,OACG,IAAKE,EAAS,KACd,MAAO,CACH,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,aAAc,MAClB,GAEA,EAAAF,QAAA,cAAC,UACG,QAAS,IACLN,EAAS,CACL,aAAcQ,EAAS,IAC3B,CAAC,EAEL,MAAO,CACH,QAAS,OACT,WAAY,QAChB,GAECA,GAAA,YAAAA,EAAU,MACVC,EAAAD,EAAS,QAAT,KAAAC,EAAkB,EAAAH,QAAA,cAAC,aAAOE,EAAS,KAAM,CAC9C,CACJ,EACH,EAEE,KAGLE,EACF,EAAAJ,QAAA,cAAC,OAAK,GAAGjB,GACL,EAAAiB,QAAA,cAAC,MAAG,MAAO,CAAE,UAAW,QAAS,GAC5BR,EAAU,uBAAwB,0BAA0B,CACjE,EACCS,EAAgB,EACjB,EAAAD,QAAA,cAAC,SAAG,EACJ,EAAAA,QAAA,cAAC,QACG,SAAWK,GAAM,CACbA,EAAE,eAAe,EACjBX,EAAS,CAAE,MAAAN,EAAO,SAAAE,CAAS,CAAC,CAChC,EACC,GAAGL,GAEJ,EAAAe,QAAA,cAAC,OACG,MAAO,CACH,QAAS,OACT,cAAe,SACf,QAAS,EACb,GAEA,EAAAA,QAAA,cAAC,aACIR,EAAU,8BAA+B,OAAO,CACrD,EACA,EAAAQ,QAAA,cAAC,SACG,KAAK,QACL,KAAK,QACL,KAAM,GACN,YAAY,MACZ,WAAY,GACZ,eAAe,MACf,SAAQ,GACR,MAAOZ,EACP,SAAWiB,GAAMhB,EAASgB,EAAE,OAAO,KAAK,EAC5C,EACA,EAAAL,QAAA,cAAC,aACIR,EACG,iCACA,UACJ,CACJ,EACA,EAAAQ,QAAA,cAAC,SACG,KAAK,WACL,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAOV,EACP,SAAWe,GAAMd,EAAYc,EAAE,OAAO,KAAK,EAC/C,EACA,EAAAL,QAAA,cAAC,SACG,KAAK,SACL,MAAOR,EACH,gCACA,SACJ,EACA,SAAUG,EACd,EACCd,GAAA,KAAAA,EACG,EAAAmB,QAAA,gBAAAA,QAAA,cACI,EAAAA,QAAA,cAAC,YACIR,EACG,kCACA,kBACJ,EAAG,IACFK,EACG,QACAL,EAAU,qBAAsB,SAAS,CAC7C,CACJ,CACJ,CAER,CACJ,CACJ,EAGJ,OACI,EAAAQ,QAAA,cAAC,OAAK,GAAGlB,GACJE,EAAgBA,EAAcoB,CAAO,EAAIA,CAC9C,CAER,ECzJA,IAAAE,GAAgC,oBAgBzB,IAAMC,GAAoD,CAAC,CAC9D,UAAAC,EACA,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,UAAAC,CACJ,IAAM,CACF,IAAMC,EAAYC,EAAa,EACzB,CAAE,KAAAC,CAAK,EAAIC,EAAiB,EAE5B,CAACC,EAAOC,CAAQ,KAAI,aAAS,EAAE,EAE/B,CAAE,OAAQC,EAAgB,UAAAC,CAAU,EACtCC,GAA2C,EAEzCC,EAAa,CAACC,EAAuBC,IACnCD,EACI,OAAOA,GAAS,SACT,GAAAE,QAAA,cAACV,EAAA,CAAK,GAAIQ,GAAOC,CAAK,EAE1BD,EAEJ,KAGLG,EACF,GAAAD,QAAA,cAAC,OAAK,GAAGf,GACL,GAAAe,QAAA,cAAC,MAAG,MAAO,CAAE,UAAW,QAAS,GAC5BZ,EACG,6BACA,uBACJ,CACJ,EACA,GAAAY,QAAA,cAAC,SAAG,EACJ,GAAAA,QAAA,cAAC,QACG,SAAWE,GAAM,CACbA,EAAE,eAAe,EACjBR,EAAe,CAAE,MAAAF,CAAM,CAAC,CAC5B,EACC,GAAGL,GAEJ,GAAAa,QAAA,cAAC,OACG,MAAO,CACH,QAAS,OACT,cAAe,SACf,QAAS,EACb,GAEA,GAAAA,QAAA,cAAC,aACIZ,EACG,oCACA,OACJ,CACJ,EACA,GAAAY,QAAA,cAAC,SACG,KAAK,QACL,KAAK,OACL,YAAY,MACZ,WAAY,GACZ,eAAe,MACf,SAAQ,GACR,MAAOR,EACP,SAAWU,GAAMT,EAASS,EAAE,OAAO,KAAK,EAC5C,EACA,GAAAF,QAAA,cAAC,SACG,KAAK,SACL,SAAUL,EACV,MAAOP,EACH,sCACA,yBACJ,EACJ,EACA,GAAAY,QAAA,cAAC,SAAG,EACHjB,GAAA,KAAAA,EACG,GAAAiB,QAAA,cAAC,YACIZ,EACG,qCACA,mBACJ,EAAG,IACFS,EACG,SACAT,EAAU,qBAAsB,SAAS,CAC7C,CACJ,CAER,CACJ,CACJ,EAGJ,OACI,GAAAY,QAAA,cAAC,OAAK,GAAGhB,GACJE,EAAgBA,EAAce,CAAO,EAAIA,CAC9C,CAER,EC/GA,IAAAE,GAAgC,oBAgBzB,IAAMC,GAAoD,CAAC,CAC9D,aAAAC,EACA,aAAAC,EACA,cAAAC,EACA,UAAAC,CACJ,IAAM,CACF,IAAMC,EAAYC,EAAa,EAEzB,CAAE,OAAQC,EAAgB,UAAAC,CAAU,EACtCC,GAA2C,EAEzC,CAACC,EAAaC,CAAc,KAAI,aAAS,EAAE,EAC3C,CAACC,EAAiBC,CAAkB,KAAI,aAAS,EAAE,EAEnDC,EACF,GAAAC,QAAA,cAAC,OAAK,GAAGb,GACL,GAAAa,QAAA,cAAC,MAAG,MAAO,CAAE,UAAW,QAAS,GAC5BV,EAAU,6BAA8B,iBAAiB,CAC9D,EACA,GAAAU,QAAA,cAAC,SAAG,EACJ,GAAAA,QAAA,cAAC,QACG,SAAWC,GAAM,CACbA,EAAE,eAAe,EACjBT,EAAe,CACX,SAAUG,EACV,gBAAAE,CACJ,CAAC,CACL,EACC,GAAGR,GAEJ,GAAAW,QAAA,cAAC,OACG,MAAO,CACH,QAAS,OACT,cAAe,SACf,QAAS,EACb,GAEA,GAAAA,QAAA,cAAC,aACIV,EACG,uCACA,cACJ,CACJ,EACA,GAAAU,QAAA,cAAC,SACG,KAAK,WACL,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAOL,EACP,SAAWM,GAAML,EAAeK,EAAE,OAAO,KAAK,EAClD,EACA,GAAAD,QAAA,cAAC,aACIV,EACG,8CACA,sBACJ,CACJ,EACA,GAAAU,QAAA,cAAC,SACG,KAAK,kBACL,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAOH,EACP,SAAWI,GAAMH,EAAmBG,EAAE,OAAO,KAAK,EACtD,EACA,GAAAD,QAAA,cAAC,SACG,KAAK,SACL,SAAUP,EACV,MAAOH,EACH,sCACA,QACJ,EACJ,CACJ,CACJ,CACJ,EAGJ,OACI,GAAAU,QAAA,cAAC,OAAK,GAAGd,GACJE,EAAgBA,EAAcW,CAAO,EAAIA,CAC9C,CAER,EJhEO,IAAMG,GAAiCC,GAAU,CACpD,GAAM,CAAE,KAAAC,CAAK,EAAID,EAcjB,OAAO,GAAAE,QAAA,iBAAAA,QAAA,eAbY,IAAM,CACrB,OAAQD,OACC,WACD,OAAO,GAAAC,QAAA,cAACC,GAAA,CAAc,GAAGH,EAAO,MAC/B,iBACD,OAAO,GAAAE,QAAA,cAACE,GAAA,CAAoB,GAAGJ,EAAO,MACrC,iBACD,OAAO,GAAAE,QAAA,cAACG,GAAA,CAAoB,GAAGL,EAAO,UAEtC,OAAO,GAAAE,QAAA,cAACI,GAAA,CAAW,GAAGN,EAAO,EAEzC,GAEqB,CAAE,CAC3B,EKnDA,IAAAO,GAAkB,oBAOLC,GAAsB,IAE3B,GAAAC,QAAA,iBAAAA,QAAA,cACI,GAAAA,QAAA,cAAC,UAAG,kBAAgB,EACpB,GAAAA,QAAA,cAAC,SAAE,kCAAgC,EACnC,GAAAA,QAAA,cAAC,SAAE,0DACyD,IACxD,GAAAA,QAAA,cAAC,YAAK,aAAW,EAAO,gBAAa,GAAAA,QAAA,cAAC,YAAM,YAAa,CAC7D,EACA,GAAAA,QAAA,cAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,CAAE,GAClC,GAAAA,QAAA,cAAC,KAAE,KAAK,qBAAqB,OAAO,SAAS,IAAI,cAC7C,GAAAA,QAAA,cAAC,cAAO,eAAa,CACzB,EACA,GAAAA,QAAA,cAAC,KACG,KAAK,8BACL,OAAO,SACP,IAAI,cAEJ,GAAAA,QAAA,cAAC,cAAO,UAAQ,CACpB,EACA,GAAAA,QAAA,cAAC,KACG,KAAK,4BACL,OAAO,SACP,IAAI,cAEJ,GAAAA,QAAA,cAAC,cAAO,WAAS,CACrB,CACJ,CACJ,ECnCR,IAAAC,EAAkB,oBAClBC,GAMO,iCACPC,GAAmC,0CCRnC,IAAAC,GAA0B,iBCA1B,IAAAC,GAA2B,iBAe3B,IAAMC,GAAiB,SAEVC,GAAmB,IAAsB,CAClD,IAAMC,KAAc,eAAWC,CAAW,EACpCC,KAAkB,eAAWC,EAAe,EAC5CC,KAAc,eAAWC,EAAW,EACpCC,KAAgB,eAAWC,EAAa,EACxCC,KAAc,eAAWC,EAAW,EACpC,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAChDC,KAAsB,eAAWC,EAAmB,EACpDC,KAAuB,eAAWC,EAAoB,EACtD,CAAE,UAAAC,CAAU,EAAIC,EAAY,EAE5BC,EAAOlB,EAAY,WAEnBmB,EACF,CAAC,CAACjB,EAAgB,QAClB,CAAC,CAACA,EAAgB,KAClB,CAAC,CAACA,EAAgB,OAEhBkB,EACF,CAAC,EAAChB,GAAA,MAAAA,EAAa,UACf,CAAC,EAACA,GAAA,MAAAA,EAAa,YACf,CAAC,EAACA,GAAA,MAAAA,EAAa,aAEbiB,EACF,CAAC,CAACf,EAAc,YAChB,CAAC,CAACA,EAAc,MAChB,CAAC,CAACA,EAAc,QAChB,CAAC,CAACA,EAAc,aAChB,CAAC,CAACA,EAAc,UAEdgB,EAAO,CAAC,CAACd,EAETe,EACF,CAAC,EAACb,GAAA,MAAAA,EAAc,eAChB,CAAC,EAACA,GAAA,MAAAA,EAAc,YAChB,CAAC,EAACA,GAAA,MAAAA,EAAc,WAEdc,EACF,CAAC,CAACZ,EAAoB,OAAS,CAAC,CAACA,EAAoB,KAEnDa,EAAgB,CAAC,CAACX,EAAqB,IAE7C,MAAO,CACH,UAAW,CACP,KAAAI,EACA,SAAAC,EACA,KAAAC,EACA,OAAAC,EACA,KAAAC,EACA,KAAAC,EACA,aAAAC,EACA,cAAAC,CACJ,EACA,QAAS3B,GACT,cAAekB,EAAU,MAC7B,CACJ,EDnEA,IAAMU,GAAUC,GAAoC,CAChD,IAAMC,EAAqB,KAAK,UAAUD,GAAW,CAAC,CAAC,EAEvD,OAAI,OAAO,KAAS,IACT,KAAKC,CAAkB,EAG3B,OAAO,KAAKA,CAAkB,EAAE,SAAS,QAAQ,CAC5D,EAEaC,GAA0B,IAAM,CACzC,IAAMF,EAAUG,GAAiB,EAEjC,uBAAU,IAAM,CACZ,GAAI,OAAO,OAAW,KAAe,CAAC,MAClC,OAGJ,IAAMC,EAAM,IAAI,MAChBA,EAAI,IAAM,kDAAkDL,GACxDC,CACJ,GACJ,EAAG,CAAC,CAAC,EAEE,IACX,EE/BA,IAAAK,GAA+B,iBCA/B,IAAAC,GAAuB,iBACvBC,GAAoB,6BAMPC,GAA6BC,GAAgB,CACtD,IAAMC,KAAM,WAAOD,CAAK,EAExB,SAAK,GAAAE,SAAQD,EAAI,QAASD,CAAK,IAC3BC,EAAI,QAAUD,GAGXC,EAAI,OACf,EDRO,IAAME,GAAc,CACvBC,EACAC,IACI,CACJ,IAAMC,EAAuBC,GAAYF,CAAY,EAIrD,SAFc,YAAQD,EAAIE,CAAoB,CAGlD,EH4NO,IAAME,GAAgC,CAAC,CAC1C,aAAAC,EACA,aAAAC,EACA,eAAAC,EACA,qBAAAC,EACA,sBAAAC,EACA,iBAAAC,EACA,UAAWC,EACX,cAAAC,EACA,UAAAC,EACA,UAAAC,EACA,SAAAC,EACA,SAAAC,EACA,aAAAC,EACA,aAAAC,EACA,aAAAC,EACA,iBAAAC,EACA,uBAAAC,EACA,gBAAAC,EACA,MAAAC,EACA,OAAAC,EACA,MAAAC,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,uBAAAC,EACA,wBAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,EACA,QAAAC,CACJ,IAAM,CACF,GAAM,CACF,oBAAAC,EACA,4BAAAC,EACA,uBAAAC,CACJ,EAAIC,GAAoB,CACpB,QAAAJ,EACA,iBAAAD,EACA,SAAAF,EACA,aAAAZ,EACA,uBAAAU,EACA,wBAAAC,EACA,iBAAAV,EACA,uBAAAC,EACA,gBAAAC,CACJ,CAAC,EAEKiB,GAAcC,GAAY,IAAM,CA5R1C,IAAAC,GA6RQ,OAAIJ,EAAuB,wBAAwB,eACxCA,EAAuB,aAG3B,IAAI,eAAY,CACnB,GAAGA,EAAuB,aAC1B,eAAgB,CACZ,GAAGA,EAAuB,aAAa,eACvC,QAAS,CACL,qBAAsB,GACtB,iBAAkB,GAClB,IAAGI,GAAAJ,EAAuB,aAAa,iBAApC,YAAAI,GACG,OACV,CACJ,CACJ,CAAC,CACL,EAAG,CAACJ,EAAuB,YAAY,CAAC,EAQlCK,GANgC,EAAAC,QAAM,QAAQ,IACzC,OAAOnC,GAAyB,WACjCA,EACA,IAAMA,GAAA,KAAAA,EAAyB,CAAC,EACvC,CAACA,CAAoB,CAAC,EAE+C,EAElEoC,EAA6BJ,GAAY,IAAM,CACjD,IAAMK,GAA8B,CAAC,EAErC,OAAAlC,GAAA,MAAAA,EAAoB,QAASmC,GAAa,CA1TlD,IAAAL,GA2TYI,GAAW,KAAK,CACZ,IAAKC,EAAS,IACd,KAAMA,EAAS,KACf,OAAOL,GAAAK,EAAS,UAAT,YAAAL,GAAkB,MACzB,KAAMK,EAAS,KACf,MAAOC,GAAeD,EAAUnC,CAAkB,EAClD,UAAW,CAAC,CAACmC,EAAS,OACtB,QAAS,CAAC,CAACA,EAAS,KACpB,QAAS,CAAC,CAACA,EAAS,KACpB,UAAWA,EAAS,UACpB,OAAQA,EAAS,OACjB,KAAMA,EAAS,KACf,KAAMA,EAAS,KACf,KAAMA,EAAS,KACf,QAASA,EAAS,QAClB,WAAYA,EAAS,UACzB,CAAC,CACL,GAEOD,EACX,EAAG,CAAClC,CAAkB,CAAC,EAEvB,GAAIiC,EAAU,SAAW,EACrB,OAAO/B,EAAY,EAAA8B,QAAA,cAAC9B,EAAA,IAAU,EAAK,EAAA8B,QAAA,cAAC9B,GAAA,IAAiB,EAGzD,GAAM,CAAE,gBAAAmC,EAAkB,EAAAL,QAAM,QAAS,EAAIpC,EAE7C,OACI,EAAAoC,QAAA,cAAC,wBAAoB,OAAQJ,IACzB,EAAAI,QAAA,cAACM,GAAA,CAA6B,GAAGP,IAC7B,EAAAC,QAAA,cAACO,GAAA,CACI,GAAI7C,GAAA,KAAAA,EAAgB,CAAC,EACtB,WAAY,QAAQA,CAAY,GAEhC,EAAAsC,QAAA,cAACQ,GAAA,CAAqB,GAAG7C,GACrB,EAAAqC,QAAA,cAACS,GAAA,CAAoB,aAAcnC,GAC/B,EAAA0B,QAAA,cAACU,GAAA,CAAuB,GAAG9C,GACvB,EAAAoC,QAAA,cAACW,GAAA,CAAwB,UAAWV,GAChC,EAAAD,QAAA,cAACY,GAAA,CACG,aAAcrC,GAEd,EAAAyB,QAAA,cAACa,GAAA,CACI,GAAI/C,GAAA,KAAAA,EAAyB,CAAC,GAE/B,EAAAkC,QAAA,cAACc,GAAA,CACI,GAAI/C,GAAA,KAAAA,EAAoB,CAAC,GAE1B,EAAAiC,QAAA,cAACe,GAAA,KACG,EAAAf,QAAA,cAACgB,GAAA,CACG,aACIxB,EAAoB,aAExB,uBACIA,EAAoB,uBAExB,iBACIA,EAAoB,iBAExB,MAAOZ,EACP,gBACIY,EAAoB,gBAExB,SAAUpB,EACV,cACIH,EAEJ,UAAWE,EACX,OAAQU,EACR,MAAOC,EACP,OAAQE,EACR,OAAQD,EACR,cACIE,EAEJ,aACI,CAAC,CAAChB,EAEN,SACIuB,EAAoB,SAExB,YACIH,EAEJ,QACIG,GAGJ,EAAAQ,QAAA,cAACiB,GAAA,KACG,EAAAjB,QAAA,cAACK,EAAA,KACIhC,EACA,CAACoB,GACE,EAAAO,QAAA,cAACkB,GAAA,IAAU,EAEf,EAAAlB,QAAA,cAACmB,GAAA,IAAmB,CACxB,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,EACCzB,EAAuB,gBAAkB,GAAQ,KAC9C,EAAAM,QAAA,cAAC,uBACG,cAAe,GACf,SAAS,eACR,GAAGN,EAAuB,cAC/B,CAER,CAER,EKhbA,IAAA0B,GAA2C,iBAQpC,IAAMC,GAER,CAAC,CAAE,aAAAC,CAAa,IAAM,CACvB,IAAMC,EAAYC,EAAa,EAEzB,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjD,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EAE3B,CAACC,EAAWC,CAAY,KAAI,aAA6B,EAEzDC,EAAqB,IAAM,CAC7B,GAAIT,EAAa,YAAc,KACvBA,EAAa,UAAY,GACzBA,EAAa,WAAW,EAEvBA,EAAa,UACdK,GAAA,MAAAA,EAAO,CACH,IAAK,GAAGL,EAAa,MAAMA,EAAa,wBACxC,KAAM,WACN,QAASC,EACL,yBACA,CACI,QAASS,GAAmBV,EAAa,OAAO,CACpD,EACA,YAAYU,GACRV,EAAa,OACjB,mBACJ,EACA,eAAgBA,EAAa,eAC7B,gBAAiBU,GAAmBV,EAAa,OAAO,CAC5D,GAGAA,EAAa,QAAU,GAAG,CACtBO,GACA,aAAaA,CAAS,EAG1B,IAAMI,EAAe,WAAW,IAAM,CAClCR,EAAqB,CACjB,oCACA,QAAS,CACL,GAAIH,EAAa,GACjB,QAASA,EAAa,QACtB,SAAUA,EAAa,QAC3B,CACJ,CAAC,CACL,EAAG,GAAI,EAEPQ,EAAaG,CAAY,CAC7B,CAER,EAEA,uBAAU,IAAM,CACZF,EAAmB,CACvB,EAAG,CAACT,CAAY,CAAC,EAEV,IACX,ECnEA,IAAAY,GAAiC,oBAmD1B,IAAMC,GAA8C,CAAC,CACxD,SAAAC,EACA,OAAQC,EACR,MAAOC,EACP,OAAQC,EACR,MAAOC,EACP,OAAQC,EACR,cAAeC,CACnB,IAAM,CACF,GAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,MAAAC,EAAO,MAAAC,EAAO,cAAAC,CAAc,EACxDC,GAAiB,EAEfC,EAAiBb,GAAA,KAAAA,EAAmBM,EAE1C,OACI,GAAAQ,QAAA,cAACD,EAAA,CACG,MAAOZ,GAAA,KAAAA,EAAkBQ,EACzB,OAAQP,GAAA,KAAAA,EAAmBM,EAC3B,OAAQJ,GAAA,KAAAA,EAAmBG,EAC3B,MAAOJ,GAAA,KAAAA,EAAkBO,EACzB,cAAeL,GAAA,KAAAA,EAA0BM,GAExCZ,EACD,GAAAe,QAAA,cAACC,GAAA,IAAc,CACnB,CAER,EAEMA,GAA0B,IAAM,CAClC,GAAM,CAAE,OAAAC,CAAO,EAAIC,EAAiB,EAE9BC,EAAYC,EAAa,EAEzB,CAAE,SAAAC,EAAU,YAAAC,CAAY,EAAIC,GAAmB,EAE/CC,EAAoBC,IAItBA,EAAE,eAAe,EAEjBA,EAAE,YAAcN,EACZ,yBACA,2DACJ,EAEOM,EAAE,aAGb,uBAAU,KACFJ,GACA,OAAO,iBAAiB,eAAgBG,CAAgB,EAGrD,OAAO,oBAAoB,eAAgBA,CAAgB,GACnE,CAACH,CAAQ,CAAC,EAGT,GAAAN,QAAA,cAACE,EAAA,CACG,KAAMI,EACN,QAASF,EACL,yBACA,2DACJ,EACA,YAAaG,EACjB,CAER,ECtHA,IAAAI,GAAkB,oBAqBX,IAAMC,GAA8C,CAAC,CACxD,SAAAC,EACA,SAAAC,EACA,QAAAC,CACJ,IAAM,CACF,GAAM,CAAE,UAAAC,EAAW,UAAAC,EAAW,QAAAC,CAAQ,EAAIC,GAAiB,EAErD,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EACnC,CAAE,SAAAC,EAAU,OAAAC,CAAO,EAAIH,EAAY,EAEzC,GAAIL,EACA,OAAO,GAAAS,QAAA,iBAAAA,QAAA,cAAGX,CAAQ,GAAO,KAE7B,GAAIG,EAAS,CACT,GAAI,CAACJ,EAAU,CACX,IAAMa,EAAQ,GAAGH,IAAWC,IAC5B,OAAKD,EAAS,SAAS,QAAQ,GAC3BJ,EAAQ,aAAa,mBAAmBO,CAAK,GAAG,EAE7C,IACX,CAEA,OAAO,GAAAD,QAAA,iBAAAA,QAAA,cAAGZ,CAAS,CACvB,CAEA,OAAIE,EACO,GAAAU,QAAA,iBAAAA,QAAA,cAAGb,CAAS,EAGhB,IACX,ECpDA,IAAAe,GAAsC,iBAM/B,IAAMC,GAA+B,IAAM,CAC9C,GAAM,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EAEnC,CAAE,UAAAC,CAAU,KAAI,eAAyBC,CAAW,EACpDC,EAAWJ,EAAY,EAE7B,uBAAU,IAAM,CACZE,GAAA,MAAAA,IAAc,MAAM,IAAM,GAC9B,EAAG,CAACE,GAAA,YAAAA,EAAU,QAAQ,CAAC,EAEhB,IACX,ECjBA,IAAAC,GAAkB,oBAaX,IAAMC,GAAsC,CAAC,CAChD,SAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAAC,EACA,SAAAC,KACGC,CACP,IAAM,CACF,GAAM,CAAE,KAAAC,CAAK,EAAIC,GAAO,CACpB,SAAAP,EACA,OAAAC,EACA,OAAAC,CACJ,CAAC,EAED,OAAII,GAAA,MAAAA,EAAM,IACF,GAAAE,QAAM,eAAeJ,CAAQ,EACZ,GAAAI,QAAM,aAAaJ,EAAUC,CAAI,EAI/C,GAAAG,QAAA,iBAAAA,QAAA,cAAGJ,CAAS,GAGnBE,GAAA,YAAAA,EAAM,OAAQ,GACP,GAAAE,QAAA,iBAAAA,QAAA,cAAGL,GAAA,KAAAA,EAAY,IAAK,EAGxB,IACX","names":["src_exports","__export","AuthPage","Authenticated","CanAccess","ErrorComponent","LayoutWrapper","LoginPage","ReadyPage","Refine","RouteChangeHandler","UndoableQueue","createTreeView","file2Base64","getDefaultFilter","getDefaultSortOrder","getNextPageParam","getPreviousPageParam","handleUseParams","importCSVMapper","parseTableParams","parseTableParamsFromQuery","routeGenerator","setInitialFilters","setInitialSorters","stringifyTableParams","unionFilters","unionSorters","useApiUrl","useAuthenticated","useBreadcrumb","useCan","useCanWithoutCache","useCancelNotification","useCheckError","useCreate","useCreateMany","useCustom","useCustomMutation","useDataProvider","useDelete","useDeleteMany","useExport","useForgotPassword","useForm","useGetIdentity","useGetLocale","useHandleNotification","useImport","useInfiniteList","useInvalidate","useIsExistAuthentication","useList","useLiveMode","useLog","useLogList","useLogin","useLogout","useMany","useMenu","useModal","useMutationMode","useNavigation","useNotification","useOne","usePermissions","usePublish","useRedirectionAfterSubmission","useRefineContext","useRegister","useResource","useResourceSubscription","useResourceWithRoute","useRouterContext","useSelect","useSetLocale","useShow","useSubscription","useSyncWithLocation","useTable","useTitle","useTranslate","useUpdate","useUpdateMany","useUpdatePassword","useWarnAboutChange","userFriendlyResourceName","__toCommonJS","__reExport","src_exports","import_react","import_react","import_react","import_react_query","AuthContext","React","AuthContextProvider","children","isProvided","authOperations","replace","useNavigation","queryClient","invalidateAuthStore","loginFunc","params","_a","result","error","registerFunc","logoutFunc","redirectPath","checkAuthFunc","import_react_query","usePermissions","options","getPermissions","AuthContext","import_react","import_react_query","useGetIdentity","queryOptions","getUserIdentity","React","AuthContext","import_react","import_react_query","useLogout","mutationOptions","push","useNavigation","logoutFromContext","React","AuthContext","open","useNotification","data","variables","_a","redirectPath","error","import_react","import_react_query","import_qs","useLogin","mutationOptions","replace","useNavigation","loginFromContext","React","AuthContext","useLocation","useRouterContext","search","close","open","useNotification","to","qs","redirectPathFromAuth","error","import_react","import_react_query","useRegister","mutationOptions","replace","useNavigation","registerFromContext","React","AuthContext","close","open","useNotification","redirectPathFromAuth","error","import_react","import_react_query","useForgotPassword","mutationOptions","replace","useNavigation","forgotPasswordFromContext","React","AuthContext","close","open","useNotification","redirectPathFromAuth","error","import_react","import_react_query","import_qs","useUpdatePassword","mutationOptions","replace","useNavigation","updatePasswordFromContext","React","AuthContext","close","open","useNotification","useLocation","useRouterContext","search","queryStrings","qs","variables","redirectPathFromAuth","error","import_react","import_react_query","useAuthenticated","params","checkAuth","AuthContext","_a","import_react","import_react_query","useCheckError","checkErrorFromContext","React","AuthContext","logout","useLogout","redirectPath","import_react","useIsExistAuthentication","isProvided","AuthContext","import_react_query","userFriendlySecond","miliseconds","import_zip","import_fromPairs","importCSVMapper","data","mapData","item","headers","body","entry","fromPairs","zip","index","array","import_pluralize","import_qs","import_unionWith","import_differenceWith","import_warn_once","parseTableParams","url","current","pageSize","sorter","filters","qs","parseTableParamsFromQuery","params","stringifyTableParams","options","pagination","rest","compareFilters","left","right","compareSorters","unionFilters","permanentFilter","newFilters","prevFilters","f","warnOnce","unionWith","crudFilter","unionSorters","permanentSorter","newSorters","crudSorter","setInitialFilters","defaultFilter","differenceWith","setInitialSorters","defaultSorter","getDefaultSortOrder","columnName","sortItem","item","getDefaultFilter","operatorType","filter","operator","field","file2Base64","file","resolve","reject","reader","resultHandler","error","userFriendlyResourceName","resource","type","humanizeResource","humanizeString","pluralize","handleUseParams","params","queryKeys","resource","dataProviderName","metaData","providerName","keys","config","ids","item","id","meta","hasPermission","permissions","action","i","getParentOf","item","resourceItem","routeGenerator","resourcesFromProps","_a","_b","_c","_d","_e","route","resourceRoute","parent","createTreeView","resources","_a","_b","_c","tree","resourcesRouteObject","resourcesNameObject","parent","child","i","route","name","humanizeString","text","import_react","import_react","DefaultLayout","children","React","defaultRefineOptions","RefineContext","React","DefaultLayout","RefineContextProvider","hasDashboard","mutationMode","warnWhenUnsavedChanges","syncWithLocation","undoableTimeout","children","DashboardPage","Title","Layout","Header","Sider","Footer","OffLayoutArea","LoginPage","catchAll","liveMode","onLiveEvent","options","handleRefineOptions","options","disableTelemetry","liveMode","mutationMode","reactQueryClientConfig","reactQueryDevtoolConfig","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","optionsWithDefaults","defaultRefineOptions","disableTelemetryWithDefault","reactQueryWithDefaults","redirectPage","redirectFromProps","action","redirectOptions","sequentialPromises","promises","onEachResolve","onEachReject","results","index","promise","result","error","pickDataProvider","resourceName","dataProviderName","resources","_a","resource","item","handleMultiple","promises","res","getNextPageParam","lastPage","pagination","cursor","current","pageSize","totalPages","getPreviousPageParam","useList","resource","config","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","resources","useResource","dataProvider","useDataProvider","queryKey","queryKeys","pickDataProvider","getList","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","isEnabled","useResourceSubscription","pageParam","signal","hasPagination","restConfig","data","_a","notificationConfig","err","import_react_query","useOne","resource","id","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","resources","useResource","dataProvider","useDataProvider","queryKey","queryKeys","pickDataProvider","getOne","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","useResourceSubscription","pageParam","signal","data","_a","notificationConfig","err","import_react_query","useMany","resource","ids","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","resources","useResource","dataProvider","useDataProvider","queryKey","queryKeys","pickDataProvider","getMany","getOne","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","isEnabled","useResourceSubscription","pageParam","signal","handleMultiple","id","data","_a","notificationConfig","err","import_react_query","import_react","import_isEqual","UndoableQueueContext","React","initialState","undoableQueueReducer","state","action","notificationItem","isEqual","UndoableQueueContextProvider","children","notifications","notificationDispatch","notificationData","notification","UndoableQueue","import_pluralize","useUpdate","mutationOptions","resources","useResource","queryClient","dataProvider","useDataProvider","mutationModeContext","undoableTimeoutContext","useMutationMode","translate","useTranslate","checkError","useCheckError","publish","usePublish","log","useLog","notificationDispatch","useCancelNotification","handleNotification","useHandleNotification","invalidateStore","useInvalidate","id","values","resource","mutationMode","undoableTimeout","onCancel","metaData","dataProviderName","mutationModePropOrContext","undoableTimeoutPropOrContext","pickDataProvider","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","data","record","_a","_data","_error","invalidates","successNotification","context","resourceSingular","pluralize","notificationConfig","previousData","queryData","acc","item","fields","operation","variables","rest","errorNotification","query","import_react_query","import_pluralize","useCreate","mutationOptions","checkError","useCheckError","dataProvider","useDataProvider","invalidateStore","useInvalidate","resources","useResource","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","resource","values","metaData","dataProviderName","pickDataProvider","data","successNotificationFromProp","invalidates","_a","_b","_c","resourceSingular","pluralize","notificationConfig","fields","operation","variables","rest","err","errorNotificationFromProp","import_react_query","import_pluralize","useDelete","mutationOptions","checkError","useCheckError","dataProvider","useDataProvider","resources","useResource","queryClient","mutationModeContext","undoableTimeoutContext","useMutationMode","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","invalidateStore","useInvalidate","id","mutationMode","undoableTimeout","resource","onCancel","metaData","dataProviderName","values","mutationModePropOrContext","undoableTimeoutPropOrContext","pickDataProvider","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","record","_a","data","_data","_error","invalidates","successNotification","context","resourceSingular","pluralize","notificationConfig","fields","operation","variables","rest","errorNotification","query","import_react_query","import_pluralize","useCreateMany","mutationOptions","dataProvider","useDataProvider","resources","useResource","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","resource","values","metaData","dataProviderName","selectedDataProvider","pickDataProvider","handleMultiple","val","response","successNotification","invalidates","resourcePlural","pluralize","notificationConfig","ids","item","err","errorNotification","import_react_query","import_pluralize","useUpdateMany","mutationOptions","resources","useResource","queryClient","dataProvider","useDataProvider","translate","useTranslate","mutationModeContext","undoableTimeoutContext","useMutationMode","checkError","useCheckError","notificationDispatch","useCancelNotification","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","ids","values","resource","onCancel","mutationMode","undoableTimeout","metaData","dataProviderName","mutationModePropOrContext","undoableTimeoutPropOrContext","selectedDataProvider","pickDataProvider","mutationFn","handleMultiple","id","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","data","record","_data","_error","successNotification","resourceSingular","pluralize","notificationConfig","errorNotification","context","query","import_react_query","import_pluralize","useDeleteMany","mutationOptions","checkError","useCheckError","mutationModeContext","undoableTimeoutContext","useMutationMode","dataProvider","useDataProvider","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","resources","useResource","queryClient","resource","ids","mutationMode","undoableTimeout","onCancel","metaData","dataProviderName","values","mutationModePropOrContext","undoableTimeoutPropOrContext","selectedDataProvider","pickDataProvider","mutationFn","handleMultiple","id","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","item","data","record","_data","_error","invalidates","successNotification","context","notificationConfig","errorNotification","query","resourceSingular","pluralize","useApiUrl","dataProviderName","dataProvider","useDataProvider","getApiUrl","import_react_query","useCustom","url","method","config","queryOptions","successNotification","errorNotification","metaData","dataProviderName","dataProvider","useDataProvider","custom","checkError","useCheckError","translate","useTranslate","handleNotification","useHandleNotification","queryKey","pageParam","signal","data","_a","notificationConfig","err","import_react_query","useCustomMutation","mutationOptions","checkError","useCheckError","handleNotification","useHandleNotification","dataProvider","useDataProvider","translate","useTranslate","url","method","values","metaData","dataProviderName","config","custom","data","successNotificationFromProp","notificationConfig","err","errorNotificationFromProp","import_react","import_react","defaultDataProvider","DataContext","React","DataContextProvider","children","rest","dataProviders","useDataProvider","context","DataContext","dataProviderName","import_react_query","useInfiniteList","resource","config","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","resources","useResource","dataProvider","useDataProvider","queryKey","queryKeys","pickDataProvider","getList","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","isEnabled","useResourceSubscription","pageParam","signal","hasPagination","restConfig","pagination","data","total","rest","lastPage","getNextPageParam","getPreviousPageParam","_a","notificationConfig","err","import_react","import_react_query","import_react","LiveContext","React","LiveContextProvider","liveProvider","children","useResourceSubscription","resource","params","channel","types","enabled","liveModeFromProp","onLiveEvent","queryClient","queryKey","queryKeys","liveDataContext","LiveContext","liveModeFromContext","onLiveEventContextCallback","RefineContext","liveMode","subscription","event","import_react","useLiveMode","liveMode","liveModeFromContext","RefineContext","import_react","useSubscription","params","channel","types","enabled","onLiveEvent","liveDataContext","LiveContext","subscription","import_react","usePublish","liveContext","LiveContext","import_react","import_react","ResourceContext","React","ResourceContextProvider","resources","children","useResource","propResourceName","resourceNameOrRouteName","recordItemId","resources","ResourceContext","resourceWithRoute","useResourceWithRoute","useParams","useRouterContext","params","resource","resourceName","id","import_react","useResourceWithRoute","resources","ResourceContext","route","resource","p","resourceWithName","import_react","useCancelNotification","notifications","notificationDispatch","UndoableQueueContext","import_react","import_react","NotificationContext","NotificationContextProvider","open","close","children","React","useNotification","open","close","NotificationContext","import_react","useHandleNotification","open","useNotification","notification","fallbackNotification","import_react","import_react","TranslationContext","React","TranslationContextProvider","children","i18nProvider","useSetLocale","i18nProvider","TranslationContext","lang","import_react","useTranslate","i18nProvider","TranslationContext","translate","key","options","defaultMessage","_a","_b","import_react","useGetLocale","i18nProvider","TranslationContext","import_react","useMutationMode","mutationMode","undoableTimeout","RefineContext","import_react","import_react","UnsavedWarnContext","React","UnsavedWarnContextProvider","children","warnWhen","setWarnWhen","useWarnAboutChange","warnWhenUnsavedChanges","RefineContext","warnWhen","setWarnWhen","UnsavedWarnContext","import_react","useSyncWithLocation","syncWithLocation","RefineContext","import_react","useTitle","Title","RefineContext","import_react","useRefineContext","Footer","Header","Layout","OffLayoutArea","Sider","Title","hasDashboard","mutationMode","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","DashboardPage","LoginPage","catchAll","options","RefineContext","import_react","import_export_to_csv_fix_source_map","useExport","resourceName","sorter","filters","maxItemCount","pageSize","mapData","item","exportOptions","metaData","dataProviderName","onError","isLoading","setIsLoading","resources","useResource","resourceWithRoute","useResourceWithRoute","dataProvider","useDataProvider","useParams","useRouterContext","routeResourceName","resource","filename","userFriendlyResourceName","getList","pickDataProvider","rawData","current","preparingData","data","total","error","import_react","useForm","resourceFromProps","actionFromProps","idFromProps","onMutationSuccess","onMutationError","redirectFromProps","successNotification","errorNotification","metaData","mutationModeProp","liveMode","onLiveEvent","liveParams","undoableTimeout","dataProviderName","invalidates","queryOptions","createMutationOptions","updateMutationOptions","_a","options","useRefineContext","useParams","useRouterContext","resourceFromRoute","actionFromRoute","idFromParams","defaultId","id","setId","React","resourceName","action","resource","useResourceWithRoute","mutationModeContext","useMutationMode","mutationMode","isCreate","isEdit","isClone","redirect","redirectPage","enableQuery","queryResult","useOne","isFetchingQuery","mutationResultCreate","useCreate","mutateCreate","isLoadingCreate","mutationResultUpdate","useUpdate","mutateUpdate","isLoadingUpdate","setWarnWhen","useWarnAboutChange","handleSubmitWithRedirect","useRedirectionAfterSubmission","values","onSuccess","resolve","reject","data","_","context","responseId","error","variables","idFromFunction","import_react","useRedirectionAfterSubmission","show","edit","list","create","useNavigation","redirect","resource","id","useNavigation","useHistory","useRouterContext","history","resourceWithRoute","useResourceWithRoute","handleUrl","url","type","createUrl","resource","editUrl","id","resourceName","encodedId","cloneUrl","showUrl","listUrl","path","rest","import_react","useShow","resourceFromProp","id","successNotification","errorNotification","metaData","liveMode","onLiveEvent","dataProviderName","queryOptions","useParams","useRouterContext","routeResourceName","idFromRoute","defaultId","showId","setShowId","React","resource","useResourceWithRoute","useOne","import_react","import_papaparse","import_chunk","useImport","resourceName","mapData","item","paparseOptions","batchSize","onFinish","metaData","onProgress","dataProviderName","processedAmount","setProcessedAmount","totalAmount","setTotalAmount","isLoading","setIsLoading","resourceWithRoute","useResourceWithRoute","useParams","useRouterContext","routeResourceName","resource","createMany","useCreateMany","create","useCreate","mutationResult","handleCleanup","handleFinish","createdValues","result","handleChange","file","resolve","data","values","importCSVMapper","valueFns","value","sequentialPromises","response","currentAmount","error","index","chunks","chunk","chunkedFns","chunkedValues","currentBatchLength","event","import_react","useModal","defaultVisible","visible","setVisible","show","close","import_react","import_react","defaultProvider","RouterContext","React","RouterContextProvider","children","useHistory","useLocation","useParams","Prompt","Link","routes","useRouterContext","useHistory","useLocation","useParams","Prompt","Link","routes","RouterContext","import_react","import_react_query","import_react","AccessControlContext","React","AccessControlContextProvider","can","children","useCan","action","resource","params","queryOptions","can","AccessControlContext","_resource","paramsRest","_icon","_list","_edit","_create","_show","_children","restResource","queryResponse","_a","import_react","useCanWithoutCache","can","AccessControlContext","import_react","import_uniqBy","import_debounce","import_get","useSelect","props","_a","_b","search","setSearch","options","setOptions","selectedOptions","setSelectedOptions","resource","sort","filters","optionLabel","optionValue","debounceValue","successNotification","errorNotification","defaultValueQueryOptionsFromProps","queryOptions","fetchSize","pagination","hasPagination","liveMode","defaultValue","onLiveEvent","onSearchFromProp","liveParams","metaData","dataProviderName","defaultValues","defaultValueQueryOnSuccess","data","item","get","defaultValueQueryOptions","defaultValueQueryResult","useMany","defaultQueryOnSuccess","queryResult","useList","onSearch","value","uniqBy","debounce","import_react","import_qs","import_differenceWith","import_isEqual","defaultPermanentFilter","defaultPermanentSorter","useTable","initialCurrent","initialPageSize","hasPagination","initialSorter","permanentSorter","defaultSetFilterBehavior","initialFilter","permanentFilter","syncWithLocationProp","resourceFromProp","successNotification","errorNotification","queryOptions","liveModeFromProp","onLiveEvent","liveParams","metaData","dataProviderName","_a","syncWithLocationContext","useSyncWithLocation","syncWithLocation","useLocation","useParams","useRouterContext","search","pathname","liveMode","useLiveMode","parsedCurrent","parsedPageSize","parsedSorter","parsedFilters","parseTableParams","defaultCurrent","defaultPageSize","defaultSorter","defaultFilter","routeResourceName","replace","useNavigation","resource","useResourceWithRoute","sorter","setSorter","setInitialSorters","filters","setFilters","setInitialFilters","current","setCurrent","pageSize","setPageSize","createLinkForSyncWithLocation","currentQueryParams","qs","stringifyParams","stringifyTableParams","rest","queryParams","differenceWith","isEqual","queryResult","useList","unionFilters","unionSorters","setFiltersAsMerge","newFilters","prevFilters","setFiltersAsReplace","setFiltersWithSetter","setter","prev","setFiltersFn","setterOrFilters","behavior","setSortWithUnion","newSorter","paginationValues","_b","import_react","import_react_query","import_react","AuditLogContext","React","AuditLogContextProvider","create","get","update","children","useLog","logMutationOptions","renameMutationOptions","queryClient","auditLogContext","AuditLogContext","resources","ResourceContext","identityData","refetch","isLoading","useGetIdentity","log","params","_a","_b","_c","resource","p","logPermissions","hasPermission","authorData","rename","data","queryKey","queryKeys","import_react","import_react_query","useLogList","resource","action","meta","author","metaData","queryOptions","get","AuditLogContext","queryKey","queryKeys","_a","import_react","import_react_query","useInvalidate","resources","useResource","queryClient","resource","dataProviderName","invalidates","id","queryKey","queryKeys","pickDataProvider","key","import_react","import_warn_once","useBreadcrumb","_a","useParams","useRouterContext","i18nProvider","TranslationContext","translate","useTranslate","resources","resource","useResource","action","breadcrumbs","addBreadcrumb","parentName","parentResource","humanizeString","key","actionLabel","warnOnce","import_react","useMenu","resources","useResource","translate","useTranslate","useLocation","useParams","useRouterContext","location","params","hasDashboard","useRefineContext","selectedKey","React","selectedResource","el","_selectedKey","treeMenuItems","resource","_a","_b","route","userFriendlyResourceName","menuItems","createTreeView","crawlNestedKeys","currentKey","currentResources","isParent","currentElement","keysArray","defaultOpenKeys","filterMenuItemsByListViewAndHideOption","menus","menuItem","obj","ErrorComponent","errorMessage","setErrorMessage","push","useNavigation","translate","useTranslate","actionTypes","useParams","useRouterContext","params","resource","useResourceWithRoute","resourceFromRoute","React","import_react","LoginPage","username","setUsername","password","setPassword","translate","useTranslate","login","useLogin","React","e","import_react","import_react","LoginPage","providers","registerLink","forgotPasswordLink","rememberMe","contentProps","wrapperProps","renderContent","formProps","Link","useRouterContext","email","setEmail","password","setPassword","remember","setRemember","translate","useTranslate","login","useLogin","renderLink","link","text","React","renderProviders","provider","_a","content","e","import_react","RegisterPage","providers","loginLink","wrapperProps","contentProps","renderContent","formProps","Link","useRouterContext","email","setEmail","password","setPassword","translate","useTranslate","register","isLoading","useRegister","renderLink","link","text","React","renderProviders","provider","_a","content","e","import_react","ForgotPasswordPage","loginLink","wrapperProps","contentProps","renderContent","formProps","translate","useTranslate","Link","useRouterContext","email","setEmail","forgotPassword","isLoading","useForgotPassword","renderLink","link","text","React","content","e","import_react","UpdatePasswordPage","wrapperProps","contentProps","renderContent","formProps","translate","useTranslate","updatePassword","isLoading","useUpdatePassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","content","React","e","AuthPage","props","type","React","RegisterPage","ForgotPasswordPage","UpdatePasswordPage","LoginPage","import_react","ReadyPage","React","import_react","import_react_query","import_react_query_devtools","import_react","import_react","REFINE_VERSION","useTelemetryData","authContext","AuthContext","auditLogContext","AuditLogContext","liveContext","LiveContext","routerContext","RouterContext","dataContext","DataContext","i18nProvider","TranslationContext","notificationContext","NotificationContext","accessControlContext","AccessControlContext","resources","useResource","auth","auditLog","live","router","data","i18n","notification","accessControl","encode","payload","stringifyedPayload","Telemetry","useTelemetryData","img","import_react","import_react","import_isEqual","useMemoized","value","ref","isEqual","useDeepMemo","fn","dependencies","memoizedDependencies","useMemoized","Refine","authProvider","dataProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","resourcesFromProps","DashboardPage","ReadyPage","LoginPage","catchAll","children","liveProvider","i18nProvider","mutationMode","syncWithLocation","warnWhenUnsavedChanges","undoableTimeout","Title","Layout","Sider","Header","Footer","OffLayoutArea","reactQueryClientConfig","reactQueryDevtoolConfig","liveMode","onLiveEvent","disableTelemetry","options","optionsWithDefaults","disableTelemetryWithDefault","reactQueryWithDefaults","handleRefineOptions","queryClient","useDeepMemo","_a","notificationProviderContextValues","React","resources","_resources","resource","routeGenerator","RouterComponent","NotificationContextProvider","AuthContextProvider","DataContextProvider","LiveContextProvider","RouterContextProvider","ResourceContextProvider","TranslationContextProvider","AccessControlContextProvider","AuditLogContextProvider","UndoableQueueContextProvider","RefineContextProvider","UnsavedWarnContextProvider","Telemetry","RouteChangeHandler","import_react","UndoableQueue","notification","translate","useTranslate","notificationDispatch","useCancelNotification","open","useNotification","timeoutId","setTimeoutId","cancelNotification","userFriendlySecond","newTimeoutId","import_react","LayoutWrapper","children","LayoutFromProps","SiderFromProps","HeaderFromProps","TitleFromProps","FooterFromProps","OffLayoutAreaFromProps","Layout","Footer","Header","Sider","Title","OffLayoutArea","useRefineContext","LayoutToRender","React","UnsavedPrompt","Prompt","useRouterContext","translate","useTranslate","warnWhen","setWarnWhen","useWarnAboutChange","warnWhenListener","e","import_react","Authenticated","children","fallback","loading","isSuccess","isLoading","isError","useAuthenticated","replace","useNavigation","useLocation","useRouterContext","pathname","search","React","toURL","import_react","RouteChangeHandler","useLocation","useRouterContext","checkAuth","AuthContext","location","import_react","CanAccess","resource","action","params","fallback","children","rest","data","useCan","React"]}