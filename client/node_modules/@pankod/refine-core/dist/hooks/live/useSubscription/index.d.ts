import { BaseKey, CrudFilters, CrudSorting, LiveEvent, MetaDataQuery, Pagination } from "../../../interfaces";
export declare type UseSubscriptionProps = {
    /**
     * Channel name to subscribe.
     */
    channel: string;
    /**
     * Callback that is run when new events from subscription arrive.
     */
    onLiveEvent: (event: LiveEvent) => void;
    /**
     * Type of events to subscribe. `"*"` means all events.
     * @type Array<"deleted" | "updated" | "created" | "*" | string>
     */
    types?: LiveEvent["type"][];
    /**
     * Determines subscription should subscribe or not.
     * @type Array<"deleted" | "updated" | "created" | "*" | string>
     */
    enabled?: boolean;
    params?: {
        ids?: BaseKey[];
        id?: BaseKey;
        metaData?: MetaDataQuery;
        pagination?: Pagination;
        hasPagination?: boolean;
        sort?: CrudSorting;
        filters?: CrudFilters;
        subscriptionType?: "useList" | "useOne" | "useMany";
        resource?: string;
        [key: string]: any;
    };
};
export declare const useSubscription: ({ params, channel, types, enabled, onLiveEvent, }: UseSubscriptionProps) => void;
//# sourceMappingURL=index.d.ts.map