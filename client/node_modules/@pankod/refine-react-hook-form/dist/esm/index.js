import{useEffect as S}from"react";import{useForm as B}from"react-hook-form";import{useForm as H,useWarnAboutChange as v}from"@pankod/refine-core";var f=({refineCoreProps:l,warnWhenUnsavedChanges:n,...R}={})=>{let{warnWhenUnsavedChanges:c,setWarnWhen:i}=v(),p=n!=null?n:c,m=H({...l}),{queryResult:o,onFinish:T,formLoading:b}=m,V=B({...R}),{watch:r,reset:s,getValues:E,handleSubmit:t}=V;S(()=>{var e;if(typeof(o==null?void 0:o.data)<"u"){let u={},F=Object.keys(E());Object.entries(((e=o==null?void 0:o.data)==null?void 0:e.data)||{}).forEach(([C,y])=>{F.includes(C)&&(u[C]=y)}),s(u)}},[o==null?void 0:o.data]),S(()=>{let e=r((u,{type:F})=>{F==="change"&&a(u)});return()=>e.unsubscribe()},[r]);let a=e=>(p&&i(!0),e),U=(e,u)=>async F=>(i(!1),await t(e,u)(F));return{...V,handleSubmit:U,refineCore:m,saveButtonProps:{disabled:b,onClick:e=>{U(T,()=>!1)(e)}}}};import{useEffect as D,useState as A}from"react";var k=({stepsProps:l,...n}={})=>{let{defaultStep:R=0,isBackValidate:c=!1}=l!=null?l:{},[i,p]=A(R),m=f({...n}),{trigger:o,getValues:T,reset:b,formState:{dirtyFields:V},refineCore:{queryResult:r}}=m;D(()=>{var t;if(r!=null&&r.data){let a={},U=Object.keys(T());Object.entries((t=r==null?void 0:r.data)==null?void 0:t.data).forEach(([d,e])=>{U.includes(d)&&(V[d]?a[d]=T(d):a[d]=e)}),b(a,{keepDirty:!0,keepValues:!0})}},[r==null?void 0:r.data,i]);let s=t=>{let a=t;t<0&&(a=0),p(a)};return{...m,steps:{currentStep:i,gotoStep:async t=>{if(t===i)return;if(t<i&&!c){s(t);return}await o()&&s(t)}}}};import{useCallback as h}from"react";import{useModal as M,useResource as j,userFriendlyResourceName as w,useTranslate as W,useWarnAboutChange as N}from"@pankod/refine-core";var O=({modalProps:l,refineCoreProps:n,...R}={})=>{let c=W(),{resource:i,action:p}=n!=null?n:{},{defaultVisible:m=!1,autoSubmitClose:o=!0,autoResetForm:T=!0}=l!=null?l:{},b=f({refineCoreProps:n,...R}),{reset:V,refineCore:{onFinish:r,setId:s},saveButtonProps:E,handleSubmit:t}=b,{visible:a,show:U,close:d}=M({defaultVisible:m}),e=async x=>{await r(x),o&&d(),T&&V()},{resourceName:u}=j({resourceNameOrRouteName:i}),{warnWhen:F,setWarnWhen:C}=N(),y=h(()=>{if(F)if(window.confirm(c("warnWhenUnsavedChanges","Are you sure you want to leave? You have unsaved changes.")))C(!1);else return;s==null||s(void 0),d()},[F]),P=h(x=>{s==null||s(x),U()},[]),g=c(`${u}.titles.${p}`,void 0,`${w(`${p} ${u}`,"singular")}`);return{modal:{submit:e,close:y,show:P,visible:a,title:g},...b,saveButtonProps:{...E,onClick:x=>t(e)(x)}}};import{appendErrors as Pe,get as ge,set as Be,useController as He,useFieldArray as ve,useForm as De,useFormContext as Ae,useFormState as ke,useWatch as Me,Controller as je,FormProvider as we}from"react-hook-form";export{je as Controller,we as FormProvider,Pe as appendErrors,ge as get,Be as set,He as useController,ve as useFieldArray,f as useForm,Ae as useFormContext,ke as useFormState,O as useModalForm,De as useReactHookForm,k as useStepsForm,Me as useWatch};
//# sourceMappingURL=index.js.map