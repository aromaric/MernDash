{"version":3,"sources":["../src/index.ts","../src/useForm/index.ts","../src/useStepsForm/index.ts","../src/useModalForm/index.ts"],"sourcesContent":["export { useForm, UseFormProps, UseFormReturnType } from \"./useForm\";\nexport {\n    useStepsForm,\n    UseStepsFormProps,\n    UseStepsFormReturnType,\n} from \"./useStepsForm\";\nexport {\n    useModalForm,\n    UseModalFormProps,\n    UseModalFormReturnType,\n} from \"./useModalForm\";\n\nexport type {\n    BatchFieldArrayUpdate,\n    ChangeHandler,\n    Control,\n    ControllerFieldState,\n    ControllerProps,\n    ControllerRenderProps,\n    CriteriaMode,\n    CustomElement,\n    DeepMap,\n    DeepPartial,\n    DeepPartialSkipArrayKey,\n    DefaultValues,\n    DelayCallback,\n    EmptyObject,\n    ErrorOption,\n    EventType,\n    Field,\n    FieldArray,\n    FieldArrayMethodProps,\n    FieldArrayWithId,\n    FieldElement,\n    FieldError,\n    FieldErrors,\n    FieldName,\n    FieldNamesMarkedBoolean,\n    FieldRefs,\n    FieldValue,\n    FieldValues,\n    FormProviderProps,\n    FormState,\n    FormStateProxy,\n    FormStateSubjectRef,\n    GetIsDirty,\n    InternalFieldErrors,\n    InternalFieldName,\n    InternalNameSet,\n    IsAny,\n    IsFlatObject,\n    KeepStateOptions,\n    LiteralUnion,\n    Message,\n    Mode,\n    MultipleFieldErrors,\n    Names,\n    NativeFieldValue,\n    NestedValue,\n    NonUndefined,\n    Noop,\n    Primitive,\n    ReadFormState,\n    Ref,\n    RefCallBack,\n    RegisterOptions,\n    Resolver,\n    ResolverError,\n    ResolverOptions,\n    ResolverResult,\n    ResolverSuccess,\n    SetFieldValue,\n    SetValueConfig,\n    Subjects,\n    SubmitErrorHandler,\n    SubmitHandler,\n    TriggerConfig,\n    UnpackNestedValue,\n    UseControllerProps,\n    UseControllerReturn,\n    UseFieldArrayProps,\n    UseFieldArrayReturn,\n    UseFieldArrayReplace,\n    UseFormClearErrors,\n    UseFormGetValues,\n    UseFormHandleSubmit,\n    UseFormProps as UseReactHookFormProps,\n    UseFormRegister,\n    UseFormRegisterReturn,\n    UseFormReset,\n    UseFormResetField,\n    UseFormReturn,\n    UseFormSetError,\n    UseFormSetFocus,\n    UseFormSetValue,\n    UseFormStateProps,\n    UseFormStateReturn,\n    UseFormTrigger,\n    UseFormUnregister,\n    UseFormWatch,\n    UseWatchProps,\n    Validate,\n    ValidateResult,\n    ValidationMode,\n    ValidationRule,\n    ValidationValue,\n    ValidationValueMessage,\n    WatchInternal,\n    WatchObserver,\n    ArrayPath,\n    FieldPath,\n    FieldPathValue,\n    FieldPathValues,\n    BrowserNativeObject,\n    DeepRequired,\n    FieldErrorsImpl,\n    IsNever,\n    Merge,\n    SetFocusOptions,\n    UseFieldArrayAppend,\n    UseFieldArrayInsert,\n    UseFieldArrayMove,\n    UseFieldArrayPrepend,\n    UseFieldArrayRemove,\n    UseFieldArraySwap,\n    UseFieldArrayUpdate,\n    UseFormGetFieldState,\n    FieldArrayPath,\n    FieldArrayPathValue,\n    FieldPathByValue,\n    PathString,\n    Path,\n    PathValue,\n} from \"react-hook-form\";\n\nexport {\n    appendErrors,\n    get,\n    set,\n    useController,\n    useFieldArray,\n    useForm as useReactHookForm,\n    useFormContext,\n    useFormState,\n    useWatch,\n    Controller,\n    FormProvider,\n} from \"react-hook-form\";\n","import React, { useEffect } from \"react\";\nimport {\n    useForm as useHookForm,\n    UseFormProps as UseHookFormProps,\n    UseFormReturn,\n    FieldValues,\n    UseFormHandleSubmit,\n    SubmitHandler,\n    SubmitErrorHandler,\n} from \"react-hook-form\";\nimport {\n    BaseRecord,\n    HttpError,\n    useForm as useFormCore,\n    useWarnAboutChange,\n    UseFormProps as UseFormCoreProps,\n    UseFormReturnType as UseFormReturnTypeCore,\n} from \"@pankod/refine-core\";\n\nexport type UseFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturn<TVariables, TContext> & {\n    refineCore: UseFormReturnTypeCore<TData, TError, TVariables>;\n    saveButtonProps: {\n        disabled: boolean;\n        onClick: (e: React.BaseSyntheticEvent) => void;\n    };\n};\n\nexport type UseFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = {\n    /**\n     * Configuration object for the core of the [useForm](/docs/api-reference/core/hooks/useForm/)\n     * @type [`UseFormCoreProps<TData, TError, TVariables>`](/docs/api-reference/core/hooks/useForm/#properties)\n     */\n    refineCoreProps?: UseFormCoreProps<TData, TError, TVariables>;\n    /**\n     * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n     * @default `false*`\n     */\n    warnWhenUnsavedChanges?: boolean;\n} & UseHookFormProps<TVariables, TContext>;\n\nexport const useForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    refineCoreProps,\n    warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n    ...rest\n}: UseFormProps<TData, TError, TVariables, TContext> = {}): UseFormReturnType<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> => {\n    const {\n        warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine,\n        setWarnWhen,\n    } = useWarnAboutChange();\n    const warnWhenUnsavedChanges =\n        warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n    const useFormCoreResult = useFormCore<TData, TError, TVariables>({\n        ...refineCoreProps,\n    });\n\n    const { queryResult, onFinish, formLoading } = useFormCoreResult;\n\n    const useHookFormResult = useHookForm<TVariables, TContext>({\n        ...rest,\n    });\n\n    const {\n        watch,\n        reset,\n        getValues,\n        handleSubmit: handleSubmitReactHookForm,\n    } = useHookFormResult;\n\n    useEffect(() => {\n        if (typeof queryResult?.data !== \"undefined\") {\n            const fields: any = {};\n            const registeredFields = Object.keys(getValues());\n            Object.entries(queryResult?.data?.data || {}).forEach(\n                ([key, value]) => {\n                    if (registeredFields.includes(key)) {\n                        fields[key] = value;\n                    }\n                },\n            );\n\n            reset(fields as any);\n        }\n    }, [queryResult?.data]);\n\n    useEffect(() => {\n        const subscription = watch((values: any, { type }: { type?: any }) => {\n            if (type === \"change\") {\n                onValuesChange(values);\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [watch]);\n\n    const onValuesChange = (changeValues: Record<string, any>) => {\n        if (warnWhenUnsavedChanges) {\n            setWarnWhen(true);\n        }\n        return changeValues;\n    };\n\n    const handleSubmit: UseFormHandleSubmit<TVariables> =\n        (onValid, onInvalid) => async (e) => {\n            setWarnWhen(false);\n            return await handleSubmitReactHookForm(onValid, onInvalid)(e);\n        };\n\n    const saveButtonProps = {\n        disabled: formLoading,\n        onClick: (e: React.BaseSyntheticEvent) => {\n            handleSubmit(onFinish, () => false)(e);\n        },\n    };\n\n    return {\n        ...useHookFormResult,\n        handleSubmit,\n        refineCore: useFormCoreResult,\n        saveButtonProps,\n    };\n};\n","import { useEffect, useState } from \"react\";\nimport { FieldValues } from \"react-hook-form\";\nimport { BaseRecord, HttpError } from \"@pankod/refine-core\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturnType<TData, TError, TVariables, TContext> & {\n    steps: {\n        currentStep: number;\n        gotoStep: (step: number) => void;\n    };\n};\n\nexport type UseStepsFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormProps<TData, TError, TVariables, TContext> & {\n    /**\n     * @description Configuration object for the steps.\n     * `defaultStep`: Allows you to set the initial step.\n     * \n     * `isBackValidate`: Whether to validation the current step when going back.\n     * @type `{\n      defaultStep?: number;\n      isBackValidate?: boolean;\n      }`\n     * @default `defaultStep = 0` `isBackValidate = false`\n     */\n    stepsProps?: {\n        defaultStep?: number;\n        isBackValidate?: boolean;\n    };\n};\n\nexport const useStepsForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    stepsProps,\n    ...rest\n}: UseStepsFormProps<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> = {}): UseStepsFormReturnType<TData, TError, TVariables, TContext> => {\n    const { defaultStep = 0, isBackValidate = false } = stepsProps ?? {};\n    const [current, setCurrent] = useState(defaultStep);\n\n    const useHookFormResult = useForm({\n        ...rest,\n    });\n    const {\n        trigger,\n        getValues,\n        reset,\n        formState: { dirtyFields },\n        refineCore: { queryResult },\n    } = useHookFormResult;\n\n    useEffect(() => {\n        if (queryResult?.data) {\n            const fields: any = {};\n            const registeredFields = Object.keys(getValues());\n            Object.entries(queryResult?.data?.data).forEach(([key, value]) => {\n                if (registeredFields.includes(key)) {\n                    if (dirtyFields[key]) {\n                        fields[key] = getValues(key as any);\n                    } else {\n                        fields[key] = value;\n                    }\n                }\n            });\n\n            reset(fields as any, {\n                keepDirty: true,\n                keepValues: true,\n            });\n        }\n    }, [queryResult?.data, current]);\n\n    const go = (step: number) => {\n        let targetStep = step;\n\n        if (step < 0) {\n            targetStep = 0;\n        }\n\n        setCurrent(targetStep);\n    };\n\n    const gotoStep = async (step: number) => {\n        if (step === current) {\n            return;\n        }\n\n        if (step < current && !isBackValidate) {\n            go(step);\n            return;\n        }\n\n        const isValid = await trigger();\n        if (isValid) {\n            go(step);\n        }\n    };\n\n    return {\n        ...useHookFormResult,\n        steps: {\n            currentStep: current,\n            gotoStep,\n        },\n    };\n};\n","import { useCallback } from \"react\";\nimport {\n    BaseKey,\n    BaseRecord,\n    HttpError,\n    useModal,\n    useResource,\n    userFriendlyResourceName,\n    useTranslate,\n    useWarnAboutChange,\n} from \"@pankod/refine-core\";\nimport { FieldValues } from \"react-hook-form\";\n\nimport { useForm, UseFormProps, UseFormReturnType } from \"../useForm\";\n\nexport type UseModalFormReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormReturnType<TData, TError, TVariables, TContext> & {\n    modal: {\n        submit: (values: TVariables) => void;\n        close: () => void;\n        show: (id?: BaseKey) => void;\n        visible: boolean;\n        title: string;\n    };\n};\n\nexport type UseModalFormProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n> = UseFormProps<TData, TError, TVariables, TContext> & {\n    /**\n     * @description Configuration object for the modal.\n     * `defaultVisible`: Initial visibility state of the modal.\n     * \n     * `autoSubmitClose`: Whether the form should be submitted when the modal is closed.\n     * \n     * `autoResetForm`: Whether the form should be reset when the form is submitted.\n     * @type `{\n      defaultVisible?: boolean;\n      autoSubmitClose?: boolean;\n      autoResetForm?: boolean;\n      }`\n     * @default `defaultVisible = false` `autoSubmitClose = true` `autoResetForm = true`\n     */\n    modalProps?: {\n        defaultVisible?: boolean;\n        autoSubmitClose?: boolean;\n        autoResetForm?: boolean;\n    };\n};\n\nexport const useModalForm = <\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n    TVariables extends FieldValues = FieldValues,\n    TContext extends object = {},\n>({\n    modalProps,\n    refineCoreProps,\n    ...rest\n}: UseModalFormProps<\n    TData,\n    TError,\n    TVariables,\n    TContext\n> = {}): UseModalFormReturnType<TData, TError, TVariables, TContext> => {\n    const translate = useTranslate();\n\n    const { resource: resourceProp, action: actionProp } =\n        refineCoreProps ?? {};\n    const {\n        defaultVisible = false,\n        autoSubmitClose = true,\n        autoResetForm = true,\n    } = modalProps ?? {};\n\n    const useHookFormResult = useForm<TData, TError, TVariables, TContext>({\n        refineCoreProps,\n        ...rest,\n    });\n\n    const {\n        reset,\n        refineCore: { onFinish, setId },\n        saveButtonProps,\n        handleSubmit,\n    } = useHookFormResult;\n\n    const { visible, show, close } = useModal({\n        defaultVisible,\n    });\n\n    const submit = async (values: TVariables) => {\n        await onFinish(values);\n\n        if (autoSubmitClose) {\n            close();\n        }\n\n        if (autoResetForm) {\n            reset();\n        }\n    };\n\n    const { resourceName } = useResource({\n        resourceNameOrRouteName: resourceProp,\n    });\n\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\n    const handleClose = useCallback(() => {\n        if (warnWhen) {\n            const warnWhenConfirm = window.confirm(\n                translate(\n                    \"warnWhenUnsavedChanges\",\n                    \"Are you sure you want to leave? You have unsaved changes.\",\n                ),\n            );\n\n            if (warnWhenConfirm) {\n                setWarnWhen(false);\n            } else {\n                return;\n            }\n        }\n\n        setId?.(undefined);\n        close();\n    }, [warnWhen]);\n\n    const handleShow = useCallback((id?: BaseKey) => {\n        setId?.(id);\n\n        show();\n    }, []);\n\n    const title = translate(\n        `${resourceName}.titles.${actionProp}`,\n        undefined,\n        `${userFriendlyResourceName(\n            `${actionProp} ${resourceName}`,\n            \"singular\",\n        )}`,\n    );\n\n    return {\n        modal: {\n            submit,\n            close: handleClose,\n            show: handleShow,\n            visible,\n            title,\n        },\n        ...useHookFormResult,\n        saveButtonProps: {\n            ...saveButtonProps,\n            onClick: (e) => handleSubmit(submit)(e),\n        },\n    };\n};\n"],"mappings":"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","names":["src_exports","__export","useForm","useModalForm","useStepsForm","__toCommonJS","import_react","import_react_hook_form","import_refine_core","useForm","refineCoreProps","warnWhenUnsavedChangesProp","rest","warnWhenUnsavedChangesRefine","setWarnWhen","warnWhenUnsavedChanges","useFormCoreResult","useFormCore","queryResult","onFinish","formLoading","useHookFormResult","useHookForm","watch","reset","getValues","handleSubmitReactHookForm","_a","fields","registeredFields","key","value","subscription","values","type","onValuesChange","changeValues","handleSubmit","onValid","onInvalid","e","import_react","useStepsForm","stepsProps","rest","defaultStep","isBackValidate","current","setCurrent","useHookFormResult","useForm","trigger","getValues","reset","dirtyFields","queryResult","_a","fields","registeredFields","key","value","go","step","targetStep","import_react","import_refine_core","useModalForm","modalProps","refineCoreProps","rest","translate","resourceProp","actionProp","defaultVisible","autoSubmitClose","autoResetForm","useHookFormResult","useForm","reset","onFinish","setId","saveButtonProps","handleSubmit","visible","show","close","submit","values","resourceName","warnWhen","setWarnWhen","handleClose","handleShow","id","title","e","import_react_hook_form"]}